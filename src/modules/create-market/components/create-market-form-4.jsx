import React from 'react';
import classnames from 'classnames';

import FormButtons from '../../create-market/components/create-market-form-buttons';
import Input from '../../common/components/input';

module.exports = React.createClass({
	propTypes: {
		tradingFeePercent: React.PropTypes.any,
		initialLiquidity: React.PropTypes.any,

		errors: React.PropTypes.object,

		onValuesUpdated: React.PropTypes.func
	},

	render: function() {
		var p = this.props;
		return (
			<div className="step-4">
				<div className="fee">
					<h4>Set the trading fee for your market</h4>
					<p>
						The Trading Fee is a percentage fee charged against the value of any trade made in the market.
						You'll receive 50% of all fees charged during the lifetime of your market - with the other
						50% being awarded to those reporting the outcome.
					</p>

					<Input
						type="text"
						value={ p.tradingFeePercent }
						isClearable={ false }
						onChange={ (value) => p.onValuesUpdated({ tradingFeePercent: value }) } />

					<span className="denomination">%</span>

					{ p.errors.tradingFeePercent &&
						<span className="error-message">{ p.errors.tradingFeePercent }</span>
					}
				</div>
				<div className="liquidity">
					<h4>Set the amount of initial liquidity</h4>
					<p>
						Initial liquidity is the amount of ether you're putting into the market to get trading started.
						The Market Maker will use these funds to buy shares - which are then sold back to those
						wanting to trade your market when the market opens. Any initial liquidity remaining when
						the market is expired will be returned to you (along with any profit generated by the Market
						Maker from selling shares).
					</p>
					<Input
						type="text"
						value={ p.initialLiquidity }
						isClearable={ false }
						onChange={ (value) => p.onValuesUpdated({ initialLiquidity: value }) } />

					<span className="denomination">Eth</span>
					{ p.errors.initialLiquidity &&
						<span className="error-message">{ p.errors.initialLiquidity }</span>
					}
				</div>

				<FormButtons
					disabled={ !p.isValid }
					nextLabel="review"
					onNext={ () => p.onValuesUpdated({ step: this.props.step + 1 }) }
					onPrev={ () => p.onValuesUpdated({ step: this.props.step - 1 }) } />
			</div>
		);
	}
});