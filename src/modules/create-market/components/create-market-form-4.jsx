import React, { PropTypes } from 'react';
import classNames from 'classnames';
import { get } from '../../../utils/get';
import FormButtons from '../../create-market/components/create-market-form-buttons';
import Input from '../../common/components/input';

const CreateMarketForm4 = (p) => {
	const advancedParamsArrow = !!p.showAdvancedMarketParams ? '▲' : '▼';
	return (
		<div className="step-4">
			<div className="fee">
				<h4>Set the trading fee for your market</h4>
				<p>
					The Trading Fee is a percentage fee charged against the value of any trade made in the market.
					You&apos;ll receive 50% of all fees charged during the lifetime of your market - with the other
					50% being awarded to those reporting the outcome.
				</p>
				<Input
					type="text"
					value={p.tradingFeePercent}
					isClearable={false}
					onChange={(value) => p.onValuesUpdated({ tradingFeePercent: value })}
				/>
				<span className="denomination">%</span>
				{p.errors.tradingFeePercent &&
					<span className="error-message">{p.errors.tradingFeePercent}</span>
				}
			</div>
			<div className="fee">
				<h4>Set the maker&apos;s share of the trading fee</h4>
				<p>
					The Maker Fee is the percentage split the 'Maker' of an order must pay of the trading fee with the remaining percentage being paid by the 'Taker'.
				</p>
				<Input
					type="text"
					value={p.makerFee}
					isClearable={false}
					onChange={(value) => p.onValuesUpdated({ makerFee: value })}
				/>
				<span className="denomination">%</span>
				{p.errors.makerFee &&
					<span className="error-message">{p.errors.makerFee}</span>
				}
			</div>
			<div className="liquidity">
				<h4>Set the amount of initial liquidity</h4>
				<p>
					Initial liquidity is the amount of ether you&apos;re putting into the market to get trading started.
					The Market Maker will use these funds to buy shares - which are then sold back to those
					wanting to trade your market when the market opens. Any initial liquidity remaining when
					the market is expired will be returned to you (along with any profit generated by the Market
					Maker from selling shares).
				</p>
				<Input
					type="text"
					value={p.initialLiquidity}
					isClearable={false}
					onChange={(value) => p.onValuesUpdated({ initialLiquidity: value })}
				/>
				<span className="denomination">ETH</span>
				{p.errors.initialLiquidity &&
					<span className="error-message">{p.errors.initialLiquidity}</span>
				}
			</div>
			<div className="advanced-market-params" >
				<h6 className="horizontal-divider" onClick={() => { p.onValuesUpdated({ showAdvancedMarketParams: !p.showAdvancedMarketParams }); }}><span>{advancedParamsArrow}</span> Advanced <span>{advancedParamsArrow}</span></h6>
				<div className={classNames({ displayNone: !!!p.showAdvancedMarketParams })}>
					<div>
						<h4>Initial Fair Price</h4>
						<p>
							This establishes the initial price for each respective outcome.
						</p>
						{p.initialFairPrices.values.map((cV, i) =>
							(<div key={`initialFairPrice${i}`} >
								<Input
									type="text"
									value={p.initialFairPrices.values[i].value}
									isClearable={false}
									onChange={
										(onChangeValue) => {
											const prices = p.initialFairPrices.values;
											const	raw = p.initialFairPrices.raw;
											prices[i].value = onChangeValue;
											raw[i] = onChangeValue;
											p.onValuesUpdated({
												initialFairPrices: {
													...p.initialFairPrices,
													values: prices,
													raw
												}
											});
										}
									}
								/>
								<span className="denomination">ETH | {cV.label}</span>
								{!!get(p.errors, `initialFairPrice.${i}`) &&
									<span className="error-message">
										{p.errors.initialFairPrice[`${i}`]}
									</span>
								}
							</div>)
						)}
					</div>
					<div>
						<h4>Best Bid/Ask Quantity</h4>
						<p>
							This defines the number of shares applied to the best bid and ask orders.
						</p>
						<Input
							type="text"
							value={p.bestStartingQuantity}
							isClearable={false}
							onChange={(value) => p.onValuesUpdated({ bestStartingQuantity: value })}
						/>
						<span className="denomination">Shares</span>
						{p.errors.bestStartingQuantity &&
							<span className="error-message">
								{p.errors.bestStartingQuantity}
							</span>
						}
					</div>
					<div>
						<h4>Starting Quantity</h4>
						<p>
							This is the number of shares in each order.
						</p>
						<Input
							type="text"
							value={p.startingQuantity}
							isClearable={false}
							onChange={(value) => p.onValuesUpdated({ startingQuantity: value })}
						/>
						<span className="denomination">Shares</span>
						{p.errors.startingQuantity &&
							<span className="error-message">
								{p.errors.startingQuantity}
							</span>
						}
					</div>
					<div>
						<h4>Price Width</h4>
						<p>
							This defines the spread between the initial best bid and ask orders.
						</p>
						<Input
							type="text"
							value={p.priceWidth}
							isClearable={false}
							onChange={(value) => p.onValuesUpdated({ priceWidth: value })}
						/>
						<span className="denomination">ETH</span>
						{p.errors.priceWidth &&
							<span className="error-message">{p.errors.priceWidth}</span>
						}
					</div>
				</div>
			</div>
			<FormButtons
				disabled={!p.isValid}
				nextLabel="review"
				onNext={() => p.onValuesUpdated({ step: p.step + 1 })}
				onPrev={() => p.onValuesUpdated({ step: p.step - 1 })}
			/>
		</div>
	);
};

CreateMarketForm4.propTypes = {
	onValuesUpdated: PropTypes.func,
	errors: PropTypes.object,
	isValid: PropTypes.bool,
	tradingFeePercent: PropTypes.any,
	makerFee: PropTypes.any,
	initialLiquidity: PropTypes.any,
	showAdvancedMarketParams: PropTypes.bool,
	initialFairPrices: PropTypes.object,
	bestStartingQuantity: PropTypes.any,
	startingQuantity: PropTypes.any,
	priceWidth: PropTypes.any,
	priceDepth: PropTypes.any
};

export default CreateMarketForm4;
