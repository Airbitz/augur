webpackJsonp([0,12],{

/***/ 1160:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__market_active__ = __webpack_require__(1291);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__market_reported__ = __webpack_require__(1300);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_components_null_state_message__ = __webpack_require__(604);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_get_value__ = __webpack_require__(78);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\n\n\n\n\nvar MarketView = function MarketView(p) {\n  var nullMessage = 'No Market Data';\n\n  var isAvailable = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_get_value__[\"a\" /* default */])(p, 'market.id');\n  var isOpen = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_get_value__[\"a\" /* default */])(p, 'market.isOpen');\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'section',\n    { id: 'market_view' },\n    !isAvailable && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_null_state_message__[\"a\" /* default */], { message: nullMessage }),\n    isAvailable && isOpen && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__market_active__[\"a\" /* default */], _extends({}, p, {\n      isReportTabVisible: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_get_value__[\"a\" /* default */])(p, 'market.isReportTabVisible'),\n      isPendingReport: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_get_value__[\"a\" /* default */])(p, 'market.isPendingReport')\n    })),\n    isAvailable && !isOpen && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__market_reported__[\"a\" /* default */], p)\n  );\n};\n\nvar _default = MarketView;\n/* harmony default export */ exports[\"default\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketView, 'MarketView', '/home/jack/src/augur/src/modules/market/components/market-view.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-view.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtdmlldy5qc3g/MTJmNSJdLCJuYW1lcyI6WyJNYXJrZXRWaWV3IiwicCIsIm51bGxNZXNzYWdlIiwiaXNBdmFpbGFibGUiLCJnZXRWYWx1ZSIsImlzT3BlbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsSUFBTUEsYUFBYSxTQUFiQSxVQUFhLENBQUNDLENBQUQsRUFBTztBQUN4QixNQUFNQyxjQUFjLGdCQUFwQjs7QUFFQSxNQUFNQyxjQUFjLHdGQUFBQyxDQUFTSCxDQUFULEVBQVksV0FBWixDQUFwQjtBQUNBLE1BQU1JLFNBQVMsd0ZBQUFELENBQVNILENBQVQsRUFBWSxlQUFaLENBQWY7O0FBRUEsU0FDRTtBQUFBO0FBQUEsTUFBUyxJQUFHLGFBQVo7QUFDRyxLQUFDRSxXQUFELElBQWdCLDREQUFDLHNGQUFELElBQWtCLFNBQVNELFdBQTNCLEdBRG5CO0FBRUdDLG1CQUFlRSxNQUFmLElBQ0MsNERBQUMsK0RBQUQsZUFDTUosQ0FETjtBQUVFLDBCQUFvQix3RkFBQUcsQ0FBU0gsQ0FBVCxFQUFZLDJCQUFaLENBRnRCO0FBR0UsdUJBQWlCLHdGQUFBRyxDQUFTSCxDQUFULEVBQVksd0JBQVo7QUFIbkIsT0FISjtBQVNHRSxtQkFBZSxDQUFDRSxNQUFoQixJQUEwQiw0REFBQyxpRUFBRCxFQUFvQkosQ0FBcEI7QUFUN0IsR0FERjtBQWFELENBbkJEOztlQXFCZUQsVTtBQUFmOzs7Ozs7OztnQ0FyQk1BLFUiLCJmaWxlIjoiMTE2MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBNYXJrZXRBY3RpdmUgZnJvbSAnbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtYWN0aXZlJztcbmltcG9ydCBNYXJrZXRSZXBvcnRlZCBmcm9tICdtb2R1bGVzL21hcmtldC9jb21wb25lbnRzL21hcmtldC1yZXBvcnRlZCc7XG5pbXBvcnQgTnVsbFN0YXRlTWVzc2FnZSBmcm9tICdtb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL251bGwtc3RhdGUtbWVzc2FnZSc7XG5cbmltcG9ydCBnZXRWYWx1ZSBmcm9tICd1dGlscy9nZXQtdmFsdWUnO1xuXG5jb25zdCBNYXJrZXRWaWV3ID0gKHApID0+IHtcbiAgY29uc3QgbnVsbE1lc3NhZ2UgPSAnTm8gTWFya2V0IERhdGEnO1xuXG4gIGNvbnN0IGlzQXZhaWxhYmxlID0gZ2V0VmFsdWUocCwgJ21hcmtldC5pZCcpO1xuICBjb25zdCBpc09wZW4gPSBnZXRWYWx1ZShwLCAnbWFya2V0LmlzT3BlbicpO1xuXG4gIHJldHVybiAoXG4gICAgPHNlY3Rpb24gaWQ9XCJtYXJrZXRfdmlld1wiPlxuICAgICAgeyFpc0F2YWlsYWJsZSAmJiA8TnVsbFN0YXRlTWVzc2FnZSBtZXNzYWdlPXtudWxsTWVzc2FnZX0gLz59XG4gICAgICB7aXNBdmFpbGFibGUgJiYgaXNPcGVuICYmXG4gICAgICAgIDxNYXJrZXRBY3RpdmVcbiAgICAgICAgICB7Li4ucH1cbiAgICAgICAgICBpc1JlcG9ydFRhYlZpc2libGU9e2dldFZhbHVlKHAsICdtYXJrZXQuaXNSZXBvcnRUYWJWaXNpYmxlJyl9XG4gICAgICAgICAgaXNQZW5kaW5nUmVwb3J0PXtnZXRWYWx1ZShwLCAnbWFya2V0LmlzUGVuZGluZ1JlcG9ydCcpfVxuICAgICAgICAvPlxuICAgICAgfVxuICAgICAge2lzQXZhaWxhYmxlICYmICFpc09wZW4gJiYgPE1hcmtldFJlcG9ydGVkIHsuLi5wfSAvPn1cbiAgICA8L3NlY3Rpb24+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNYXJrZXRWaWV3O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LXZpZXcuanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1239:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(114);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_bignumber_js__ = __webpack_require__(68);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_bignumber_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_debounce__ = __webpack_require__(320);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\nvar Input = function (_Component) {\n  _inherits(Input, _Component);\n\n  function Input(props) {\n    _classCallCheck(this, Input);\n\n    var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));\n\n    _this.handleOnChange = function () {\n      return _this.__handleOnChange__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.handleOnBlur = function () {\n      return _this.__handleOnBlur__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.handleClear = function () {\n      return _this.__handleClear__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.handleToggleVisibility = function () {\n      return _this.__handleToggleVisibility__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.timeoutVisibleHiddenContent = function () {\n      return _this.__timeoutVisibleHiddenContent__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.finalDebounceMS = _this.props.debounceMS > 0 || _this.props.debounceMS === 0 ? _this.props.debounceMS : 500;\n    _this.state = {\n      value: _this.props.value || '',\n      timeoutID: '',\n      isHiddenContentVisible: false\n    };\n    _this.handleOnChange = _this.handleOnChange.bind(_this);\n    _this.handleOnBlur = _this.handleOnBlur.bind(_this);\n    _this.handleClear = _this.handleClear.bind(_this);\n    _this.handleToggleVisibility = _this.handleToggleVisibility.bind(_this);\n    _this.timeoutVisibleHiddenContent = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_debounce__[\"a\" /* default */])(_this.timeoutVisibleHiddenContent.bind(_this), 1200);\n    return _this;\n  }\n  // TODO -- Prop Validations\n\n\n  _createClass(Input, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.value !== nextProps.value) {\n        this.setState({ value: nextProps.value });\n      }\n    }\n  }, {\n    key: 'componentWillUpdate',\n    value: function componentWillUpdate(nextProps, nextState) {\n      if (nextProps.canToggleVisibility && !nextState.value && nextState.isHiddenContentVisible) {\n        this.setState({ isHiddenContentVisible: false });\n      }\n\n      if (this.state.isHiddenContentVisible !== nextState.isHiddenContentVisible && nextState.isHiddenContentVisible) {\n        this.timeoutVisibleHiddenContent();\n      }\n    }\n  }, {\n    key: '__handleOnChange__REACT_HOT_LOADER__',\n    value: function __handleOnChange__REACT_HOT_LOADER__(e) {\n      var _this2 = this;\n\n      var newValue = e.target.value;\n      if (this.finalDebounceMS) {\n        clearTimeout(this.state.timeoutID);\n        if (newValue !== this.props.value) {\n          this.setState({ timeoutID: setTimeout(function () {\n              return _this2.props.onChange(newValue);\n            }, this.finalDebounceMS) });\n        }\n      } else if (newValue !== this.props.value) {\n        this.props.onChange(newValue);\n      }\n      this.setState({ value: newValue });\n    }\n  }, {\n    key: '__handleOnBlur__REACT_HOT_LOADER__',\n    value: function __handleOnBlur__REACT_HOT_LOADER__() {\n      if (this.finalDebounceMS) {\n        clearTimeout(this.state.timeoutID);\n        if (this.state.value !== this.props.value) {\n          this.props.onChange(this.state.value);\n        }\n      }\n      this.props.onBlur && this.props.onBlur();\n    }\n  }, {\n    key: '__handleClear__REACT_HOT_LOADER__',\n    value: function __handleClear__REACT_HOT_LOADER__() {\n      this.setState({ value: '' });\n      this.props.onChange('');\n    }\n  }, {\n    key: '__handleToggleVisibility__REACT_HOT_LOADER__',\n    value: function __handleToggleVisibility__REACT_HOT_LOADER__() {\n      this.setState({ isHiddenContentVisible: !this.state.isHiddenContentVisible });\n    }\n  }, {\n    key: '__timeoutVisibleHiddenContent__REACT_HOT_LOADER__',\n    value: function __timeoutVisibleHiddenContent__REACT_HOT_LOADER__() {\n      this.setState({ isHiddenContentVisible: false });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          isClearable = _props.isClearable,\n          isIncrementable = _props.isIncrementable,\n          incrementAmount = _props.incrementAmount,\n          updateValue = _props.updateValue,\n          canToggleVisibility = _props.canToggleVisibility,\n          shouldMatchValue = _props.shouldMatchValue,\n          comparisonValue = _props.comparisonValue,\n          isSearch = _props.isSearch,\n          p = _objectWithoutProperties(_props, ['isClearable', 'isIncrementable', 'incrementAmount', 'updateValue', 'canToggleVisibility', 'shouldMatchValue', 'comparisonValue', 'isSearch']);\n\n      var s = this.state;\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        { className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('input', p.className, { 'is-incrementable': isIncrementable, 'can-toggle-visibility': canToggleVisibility }) },\n        isSearch && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-search' }),\n        !p.isMultiline && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input', _extends({}, p, {\n          className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('box', { 'search-input': p.isSearch }),\n          type: p.type === 'password' && s.isHiddenContentVisible ? 'text' : p.type,\n          value: s.value,\n          onChange: this.handleOnChange,\n          onBlur: this.handleOnBlur\n        })),\n        p.isMultiline && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('textarea', _extends({}, p, {\n          className: 'box',\n          value: s.value,\n          onChange: this.handleOnChange,\n          onBlur: this.handleOnBlur\n        })),\n        isClearable && !p.isMultiline && !!s.value && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'button',\n          {\n            type: 'button',\n            className: 'button-text-only',\n            onClick: this.handleClear\n          },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-close' })\n        ),\n        canToggleVisibility && s.value && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'button',\n          {\n            type: 'button',\n            className: 'button-text-only',\n            onClick: this.handleToggleVisibility,\n            tabIndex: '-1'\n          },\n          s.isHiddenContentVisible ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-eye-slash' }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-eye' })\n        ),\n        shouldMatchValue && s.value && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'input-value-comparison' },\n          s.value === comparisonValue ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-check-circle input-does-match' }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-times-circle input-does-not-match' })\n        ),\n        isIncrementable && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'value-incrementers' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'increment-value unstyled',\n              onClick: function onClick() {\n                if (!isNaN(parseFloat(s.value)) && isFinite(s.value) || !s.value) {\n                  var newValue = new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(s.value || 0);\n\n                  if (newValue > p.max) {\n                    newValue = new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(p.max);\n                  } else if (newValue < p.min) {\n                    newValue = new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(p.min).plus(new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(incrementAmount)).toString();\n                  } else {\n                    newValue = newValue.plus(new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(incrementAmount)).toString();\n                    if (newValue > p.max) {\n                      newValue = new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(p.max);\n                    }\n                  }\n\n                  updateValue(newValue);\n                }\n              }\n            },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-angle-up' })\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'decrement-value unstyled',\n              onClick: function onClick() {\n                if (!isNaN(parseFloat(s.value)) && isFinite(s.value) || !s.value) {\n                  var newValue = new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(s.value || 0);\n\n                  if (newValue > p.max) {\n                    newValue = new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(p.max).minus(new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(incrementAmount));\n                  } else if (newValue < p.min) {\n                    newValue = new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(p.min);\n                  } else {\n                    newValue = newValue.minus(new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(incrementAmount));\n                    if (newValue < p.min) {\n                      newValue = new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(p.min);\n                    }\n                  }\n\n                  updateValue(newValue);\n                }\n              }\n            },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-angle-down' })\n          )\n        )\n      );\n    }\n  }]);\n\n  return Input;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nInput.propTypes = {\n  // type: PropTypes.string,\n  // className: PropTypes.string,\n  value: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].any,\n  // isMultiline: PropTypes.bool,\n  isClearable: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].bool,\n  debounceMS: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].number,\n  onChange: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].func,\n  onBlur: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].func,\n  isIncrementable: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].bool,\n  incrementAmount: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].number,\n  updateValue: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].func,\n  canToggleVisibility: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].bool,\n  shouldMatchValue: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].bool,\n  comparisonValue: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  isSearch: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].bool\n};\nvar _default = Input;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(Input, 'Input', '/home/jack/src/augur/src/modules/common/components/input.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/common/components/input.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1240:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__ = __webpack_require__(603);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__add_commas_to_number__ = __webpack_require__(607);\n\n\n\n// This helper method is very specific in scope\n// It takes in the formatted shares in string format and returns a string denominated as specified\n// The mutation of the shares is done this way so no actual re-calculation is done to the underlying\n// values, just string manipulation for presentation\nfunction setShareDenomination(value, denomination) {\n  if (value == null) {\n    return value;\n  }\n\n  switch (denomination) {\n    case __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"a\" /* MICRO_SHARE */]:\n      return formatValue(value, 4);\n    case __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"b\" /* MILLI_SHARE */]:\n      return formatValue(value, 1);\n    default:\n    case __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"c\" /* SHARE */]:\n      return value;\n  }\n}\n\n// The value is assumed to *always* be in 'SHARES' denomination\nfunction formatValue(value, amount) {\n  var valueArray = value.split('');\n\n  // remove dot + determine 0 pad amount\n  var dotIndex = valueArray.indexOf('.');\n  var zeroPadAmount = amount;\n  if (dotIndex !== -1) {\n    valueArray.splice(dotIndex, 1);\n  } else {\n    zeroPadAmount += 2;\n  }\n\n  // Strip leading 0's OR returns original value if no values are positive\n  var firstPositiveValue = -1;\n  valueArray.some(function (value, i) {\n    if (parseInt(value, 10)) {\n      firstPositiveValue = i;\n      return true;\n    }\n\n    return false;\n  });\n  if (firstPositiveValue !== -1) {\n    valueArray.splice(0, firstPositiveValue);\n  } else {\n    return value; // Returns original value\n  }\n\n  // Strip Commas (added back in at the end)\n  valueArray.forEach(function (value, i) {\n    if (value === ',') {\n      valueArray.splice(i, 1);\n    }\n  });\n\n  // Handle postFixed denominations (part of the format-number method)\n  valueArray = handlePostfixedUnit(valueArray, zeroPadAmount);\n\n  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__add_commas_to_number__[\"a\" /* default */])(valueArray.join('')); // return joined string w/ comma separating thousands\n}\n\nfunction handlePostfixedUnit(valueArray, zeroPadAmount) {\n  var step = zeroPadAmount < 4;\n  var gtTrillion = '> 1T'.split('');\n  var newValueArray = valueArray;\n\n  switch (valueArray[newValueArray.length - 1]) {\n    // Handle existing > 10000 values\n    case 'K':\n      {\n        newValueArray[newValueArray.length - 1] = step ? 'M' : 'B';\n        return newValueArray;\n      }\n    case 'M':\n      {\n        if (step) {\n          newValueArray[newValueArray.length - 1] = 'B';\n        } else {\n          newValueArray = gtTrillion;\n        }\n        return newValueArray;\n      }\n    case 'B':\n    case 'T':\n      {\n        newValueArray = gtTrillion;\n        return newValueArray;\n      }\n\n    // Handle values that become greater than 10000\n    default:\n      {\n        // Append 0's\n        for (var i = 0; i < zeroPadAmount; i++) {\n          newValueArray.push('0');\n        }\n\n        // Mirrors logic present in format-number\n        if (newValueArray.length >= 13) {\n          newValueArray = gtTrillion;\n        } else if (newValueArray.length >= 11) {\n          newValueArray.splice(newValueArray.length - 9);\n          newValueArray.push('B');\n        } else if (newValueArray.length >= 8) {\n          newValueArray.splice(newValueArray.length - 6);\n          newValueArray.push('M');\n        } else if (newValueArray.length >= 5) {\n          newValueArray.splice(newValueArray.length - 3);\n          newValueArray.push('K');\n        }\n\n        return newValueArray;\n      }\n  }\n}\n\nvar _default = setShareDenomination;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(setShareDenomination, 'setShareDenomination', '/home/jack/src/augur/src/utils/set-share-denomination.js');\n\n  __REACT_HOT_LOADER__.register(formatValue, 'formatValue', '/home/jack/src/augur/src/utils/set-share-denomination.js');\n\n  __REACT_HOT_LOADER__.register(handlePostfixedUnit, 'handlePostfixedUnit', '/home/jack/src/augur/src/utils/set-share-denomination.js');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/utils/set-share-denomination.js');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1241:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(114);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n\n\n\nvar ValueDate = function ValueDate(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'span',\n    { className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('value-date', p.className) },\n    p.formatted\n  );\n};\n\nValueDate.propTypes = {\n  className: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  value: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].object,\n  formatted: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string\n};\n\nvar _default = ValueDate;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(ValueDate, 'ValueDate', '/home/jack/src/augur/src/modules/common/components/value-date.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/common/components/value-date.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9jb21tb24vY29tcG9uZW50cy92YWx1ZS1kYXRlLmpzeD83Nzc2Il0sIm5hbWVzIjpbIlZhbHVlRGF0ZSIsImNsYXNzbmFtZXMiLCJwIiwiY2xhc3NOYW1lIiwiZm9ybWF0dGVkIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwidmFsdWUiLCJvYmplY3QiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBOztBQUVBLElBQU1BLFlBQVksU0FBWkEsU0FBWTtBQUFBLFNBQ2hCO0FBQUE7QUFBQSxNQUFNLFdBQVcsa0RBQUFDLENBQVcsWUFBWCxFQUF5QkMsRUFBRUMsU0FBM0IsQ0FBakI7QUFDR0QsTUFBRUU7QUFETCxHQURnQjtBQUFBLENBQWxCOztBQU1BSixVQUFVSyxTQUFWLEdBQXNCO0FBQ3BCRixhQUFXLGdEQUFBRyxDQUFVQyxNQUREO0FBRXBCQyxTQUFPLGdEQUFBRixDQUFVRyxNQUZHO0FBR3BCTCxhQUFXLGdEQUFBRSxDQUFVQztBQUhELENBQXRCOztlQU1lUCxTO0FBQWY7Ozs7Ozs7O2dDQVpNQSxTIiwiZmlsZSI6IjEyNDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmNvbnN0IFZhbHVlRGF0ZSA9IHAgPT4gKFxuICA8c3BhbiBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ3ZhbHVlLWRhdGUnLCBwLmNsYXNzTmFtZSl9PlxuICAgIHtwLmZvcm1hdHRlZH1cbiAgPC9zcGFuPlxuKTtcblxuVmFsdWVEYXRlLnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB2YWx1ZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgZm9ybWF0dGVkOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG5leHBvcnQgZGVmYXVsdCBWYWx1ZURhdGU7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9jb21tb24vY29tcG9uZW50cy92YWx1ZS1kYXRlLmpzeCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 1243:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_tooltip__ = __webpack_require__(319);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_tooltip___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_tooltip__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_value_date__ = __webpack_require__(1241);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__ = __webpack_require__(602);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_get_value__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_set_share_denomination__ = __webpack_require__(1240);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_share_denomination_label__ = __webpack_require__(1244);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\n\n\n\n\n\n\nvar MarketProperties = function MarketProperties(p) {\n  var shareVolumeRounded = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_set_share_denomination__[\"a\" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_get_value__[\"a\" /* default */])(p, 'volume.rounded'), p.selectedShareDenomination);\n  var shareVolumeFormatted = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_get_value__[\"a\" /* default */])(p, 'volume.formatted');\n  var shareDenomination = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils_share_denomination_label__[\"a\" /* default */])(p.selectedShareDenomination, p.shareDenominations);\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'ul',\n    { className: 'market-properties' },\n    p.endDate && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'li',\n      { className: 'property end-date' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'a',\n        {\n          'data-tip': true,\n          'data-for': p.id + '-end-date-tooltip',\n          'data-event': 'click focus'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          p.isOpen && !p.isPendingReport ? p.endDateLabel || 'End Date' : 'Ended',\n          ':'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_value_date__[\"a\" /* default */], _extends({ className: 'property-value' }, p.endDate))\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        __WEBPACK_IMPORTED_MODULE_1_react_tooltip___default.a,\n        {\n          id: p.id + '-end-date-tooltip',\n          type: 'light',\n          effect: 'solid',\n          place: 'top',\n          globalEventOff: 'click'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'tooltip-text' },\n          'The outcome of this event will be known on or before ',\n          p.endDate.full,\n          '.'\n        )\n      )\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'li',\n      { className: 'property fee' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'a',\n        {\n          'data-tip': true,\n          'data-for': p.id + '-maker-fee-tooltip',\n          'data-event': 'click focus'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'Maker Fee:'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], _extends({ className: 'property-value' }, p.makerFeePercent))\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        __WEBPACK_IMPORTED_MODULE_1_react_tooltip___default.a,\n        {\n          id: p.id + '-maker-fee-tooltip',\n          type: 'light',\n          effect: 'solid',\n          place: 'top',\n          globalEventOff: 'click'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'tooltip-text' },\n          p.makerFeePercent.full,\n          ' discounted fee for placing bids or asks on the books'\n        )\n      )\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'li',\n      { className: 'property fee' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'a',\n        {\n          'data-tip': true,\n          'data-for': p.id + '-taker-fee-tooltip',\n          'data-event': 'click focus'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'Taker Fee:'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], _extends({ className: 'property-value' }, p.takerFeePercent))\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        __WEBPACK_IMPORTED_MODULE_1_react_tooltip___default.a,\n        {\n          id: p.id + '-taker-fee-tooltip',\n          type: 'light',\n          effect: 'solid',\n          place: 'top',\n          globalEventOff: 'click'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'tooltip-text' },\n          p.takerFeePercent.full,\n          ' fee for taking bids or asks from the books'\n        )\n      )\n    ),\n    shareVolumeRounded && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'li',\n      { className: 'property volume' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'a',\n        {\n          'data-tip': true,\n          'data-for': p.id + '-volume-tooltip',\n          'data-event': 'click focus'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'Volume:'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { className: 'property-value', formatted: shareVolumeRounded, denomination: shareDenomination })\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        __WEBPACK_IMPORTED_MODULE_1_react_tooltip___default.a,\n        {\n          id: p.id + '-volume-tooltip',\n          type: 'light',\n          effect: 'solid',\n          place: 'top',\n          globalEventOff: 'click'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'tooltip-text' },\n          shareVolumeFormatted,\n          ' total ',\n          p.volume.denomination,\n          ' traded'\n        )\n      )\n    ),\n    p.numPendingReports && p.isPendingReport && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'li',\n      { className: 'property pending-reports' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'a',\n        {\n          'data-tip': true,\n          'data-for': p.id + '-pending-reports-tooltip',\n          'data-event': 'click focus'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'Pending Reports:'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          ' ',\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'strong',\n            null,\n            p.numPendingReports\n          )\n        )\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        __WEBPACK_IMPORTED_MODULE_1_react_tooltip___default.a,\n        {\n          id: p.id + '-pending-reports-tooltip',\n          type: 'light',\n          effect: 'solid',\n          place: 'top',\n          globalEventOff: 'click'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'tooltip-text' },\n          p.numPendingReports,\n          ' reports submitted on this market thus far'\n        )\n      )\n    )\n  );\n};\n\nvar _default = MarketProperties;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketProperties, 'MarketProperties', '/home/jack/src/augur/src/modules/market/components/market-properties.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-properties.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1244:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__ = __webpack_require__(603);\n\n\nvar _default = function _default(selectedDenomination, shareDenominations) {\n  switch (selectedDenomination) {\n    case __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"a\" /* MICRO_SHARE */]:\n      {\n        var value = shareDenominations && shareDenominations.find(function (denomination) {\n          return denomination.value === __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"a\" /* MICRO_SHARE */];\n        });\n        return value && value.label || 'μShares';\n      }\n    case __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"b\" /* MILLI_SHARE */]:\n      {\n        var _value = shareDenominations && shareDenominations.find(function (denomination) {\n          return denomination.value === __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"b\" /* MILLI_SHARE */];\n        });\n        return _value && _value.label || 'mShares';\n      }\n    default:\n    case __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"c\" /* SHARE */]:\n      {\n        var _value2 = shareDenominations && shareDenominations.find(function (denomination) {\n          return denomination.value === __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"c\" /* SHARE */];\n        });\n        return _value2 && _value2.label || 'Shares';\n      }\n  }\n};\n\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/utils/share-denomination-label.js');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvc2hhcmUtZGVub21pbmF0aW9uLWxhYmVsLmpzPzI0NGIiXSwibmFtZXMiOlsic2VsZWN0ZWREZW5vbWluYXRpb24iLCJzaGFyZURlbm9taW5hdGlvbnMiLCJ2YWx1ZSIsImZpbmQiLCJkZW5vbWluYXRpb24iLCJsYWJlbCJdLCJtYXBwaW5ncyI6IjtBQUFBOztlQUVlLGtCQUFVQSxvQkFBVixFQUFnQ0Msa0JBQWhDLEVBQW9EO0FBQ2pFLFVBQVFELG9CQUFSO0FBQ0UsU0FBTSxrR0FBTjtBQUFvQjtBQUNsQixZQUFNRSxRQUFRRCxzQkFBc0JBLG1CQUFtQkUsSUFBbkIsQ0FBd0I7QUFBQSxpQkFBZ0JDLGFBQWFGLEtBQWIsS0FBdUIsa0dBQXZDO0FBQUEsU0FBeEIsQ0FBcEM7QUFDQSxlQUFRQSxTQUFTQSxNQUFNRyxLQUFoQixJQUEwQixTQUFqQztBQUNEO0FBQ0QsU0FBTSxrR0FBTjtBQUFvQjtBQUNsQixZQUFNSCxTQUFRRCxzQkFBc0JBLG1CQUFtQkUsSUFBbkIsQ0FBd0I7QUFBQSxpQkFBZ0JDLGFBQWFGLEtBQWIsS0FBdUIsa0dBQXZDO0FBQUEsU0FBeEIsQ0FBcEM7QUFDQSxlQUFRQSxVQUFTQSxPQUFNRyxLQUFoQixJQUEwQixTQUFqQztBQUNEO0FBQ0Q7QUFDQSxTQUFNLDRGQUFOO0FBQWM7QUFDWixZQUFNSCxVQUFRRCxzQkFBc0JBLG1CQUFtQkUsSUFBbkIsQ0FBd0I7QUFBQSxpQkFBZ0JDLGFBQWFGLEtBQWIsS0FBdUIsNEZBQXZDO0FBQUEsU0FBeEIsQ0FBcEM7QUFDQSxlQUFRQSxXQUFTQSxRQUFNRyxLQUFoQixJQUEwQixRQUFqQztBQUNEO0FBYkg7QUFlRCxDOztBQWhCRCIsImZpbGUiOiIxMjQ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTUlDUk9fU0hBUkUsIE1JTExJX1NIQVJFLCBTSEFSRSB9IGZyb20gJ21vZHVsZXMvbWFya2V0L2NvbnN0YW50cy9zaGFyZS1kZW5vbWluYXRpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHNlbGVjdGVkRGVub21pbmF0aW9uLCBzaGFyZURlbm9taW5hdGlvbnMpIHtcbiAgc3dpdGNoIChzZWxlY3RlZERlbm9taW5hdGlvbikge1xuICAgIGNhc2UgKE1JQ1JPX1NIQVJFKToge1xuICAgICAgY29uc3QgdmFsdWUgPSBzaGFyZURlbm9taW5hdGlvbnMgJiYgc2hhcmVEZW5vbWluYXRpb25zLmZpbmQoZGVub21pbmF0aW9uID0+IGRlbm9taW5hdGlvbi52YWx1ZSA9PT0gTUlDUk9fU0hBUkUpO1xuICAgICAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZS5sYWJlbCkgfHwgJ868U2hhcmVzJztcbiAgICB9XG4gICAgY2FzZSAoTUlMTElfU0hBUkUpOiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHNoYXJlRGVub21pbmF0aW9ucyAmJiBzaGFyZURlbm9taW5hdGlvbnMuZmluZChkZW5vbWluYXRpb24gPT4gZGVub21pbmF0aW9uLnZhbHVlID09PSBNSUxMSV9TSEFSRSk7XG4gICAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlLmxhYmVsKSB8fCAnbVNoYXJlcyc7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgY2FzZSAoU0hBUkUpOiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHNoYXJlRGVub21pbmF0aW9ucyAmJiBzaGFyZURlbm9taW5hdGlvbnMuZmluZChkZW5vbWluYXRpb24gPT4gZGVub21pbmF0aW9uLnZhbHVlID09PSBTSEFSRSk7XG4gICAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlLmxhYmVsKSB8fCAnU2hhcmVzJztcbiAgICB9XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlscy9zaGFyZS1kZW5vbWluYXRpb24tbGFiZWwuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1250:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(114);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__link_components_link__ = __webpack_require__(601);\n\n\n\n\n\nvar ComponentNav = function ComponentNav(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'ul',\n    {\n      className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('component-nav', { 'full-width-nav': p.fullWidth })\n    },\n    Object.keys(p.navItems || {}).map(function (nav) {\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        __WEBPACK_IMPORTED_MODULE_2__link_components_link__[\"a\" /* default */],\n        {\n          key: nav,\n          className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()({ selected: p.selectedNav === nav, 'mobile-only': p.navItems[nav].isMobile }),\n          onClick: function onClick() {\n            p.updateSelectedNav(nav);\n          }\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'li',\n          { className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()({ selected: p.selectedNav === nav }) },\n          p.navItems[nav].label\n        )\n      );\n    })\n  );\n};\n\nvar _default = ComponentNav;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(ComponentNav, 'ComponentNav', '/home/jack/src/augur/src/modules/common/components/component-nav.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/common/components/component-nav.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9jb21tb24vY29tcG9uZW50cy9jb21wb25lbnQtbmF2LmpzeD80MTgwIl0sIm5hbWVzIjpbIkNvbXBvbmVudE5hdiIsImNsYXNzTmFtZXMiLCJwIiwiZnVsbFdpZHRoIiwiT2JqZWN0Iiwia2V5cyIsIm5hdkl0ZW1zIiwibWFwIiwibmF2Iiwic2VsZWN0ZWQiLCJzZWxlY3RlZE5hdiIsImlzTW9iaWxlIiwidXBkYXRlU2VsZWN0ZWROYXYiLCJsYWJlbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBOztBQUVBOztBQUVBLElBQU1BLGVBQWUsU0FBZkEsWUFBZTtBQUFBLFNBQ25CO0FBQUE7QUFBQTtBQUNFLGlCQUFXLGtEQUFBQyxDQUFXLGVBQVgsRUFBNEIsRUFBRSxrQkFBa0JDLEVBQUVDLFNBQXRCLEVBQTVCO0FBRGI7QUFHR0MsV0FBT0MsSUFBUCxDQUFZSCxFQUFFSSxRQUFGLElBQWMsRUFBMUIsRUFBOEJDLEdBQTlCLENBQWtDO0FBQUEsYUFDakM7QUFBQyw4RUFBRDtBQUFBO0FBQ0UsZUFBS0MsR0FEUDtBQUVFLHFCQUFXLGtEQUFBUCxDQUFXLEVBQUVRLFVBQVVQLEVBQUVRLFdBQUYsS0FBa0JGLEdBQTlCLEVBQW1DLGVBQWVOLEVBQUVJLFFBQUYsQ0FBV0UsR0FBWCxFQUFnQkcsUUFBbEUsRUFBWCxDQUZiO0FBR0UsbUJBQVMsbUJBQU07QUFBRVQsY0FBRVUsaUJBQUYsQ0FBb0JKLEdBQXBCO0FBQTJCO0FBSDlDO0FBS0U7QUFBQTtBQUFBLFlBQUksV0FBVyxrREFBQVAsQ0FBVyxFQUFFUSxVQUFVUCxFQUFFUSxXQUFGLEtBQWtCRixHQUE5QixFQUFYLENBQWY7QUFDR04sWUFBRUksUUFBRixDQUFXRSxHQUFYLEVBQWdCSztBQURuQjtBQUxGLE9BRGlDO0FBQUEsS0FBbEM7QUFISCxHQURtQjtBQUFBLENBQXJCOztlQWtCZWIsWTtBQUFmOzs7Ozs7OztnQ0FsQk1BLFkiLCJmaWxlIjoiMTI1MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IExpbmsgZnJvbSAnbW9kdWxlcy9saW5rL2NvbXBvbmVudHMvbGluayc7XG5cbmNvbnN0IENvbXBvbmVudE5hdiA9IHAgPT4gKFxuICA8dWxcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2NvbXBvbmVudC1uYXYnLCB7ICdmdWxsLXdpZHRoLW5hdic6IHAuZnVsbFdpZHRoIH0pfVxuICA+XG4gICAge09iamVjdC5rZXlzKHAubmF2SXRlbXMgfHwge30pLm1hcChuYXYgPT4gKFxuICAgICAgPExpbmtcbiAgICAgICAga2V5PXtuYXZ9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyh7IHNlbGVjdGVkOiBwLnNlbGVjdGVkTmF2ID09PSBuYXYsICdtb2JpbGUtb25seSc6IHAubmF2SXRlbXNbbmF2XS5pc01vYmlsZSB9KX1cbiAgICAgICAgb25DbGljaz17KCkgPT4geyBwLnVwZGF0ZVNlbGVjdGVkTmF2KG5hdik7IH19XG4gICAgICA+XG4gICAgICAgIDxsaSBjbGFzc05hbWU9e2NsYXNzTmFtZXMoeyBzZWxlY3RlZDogcC5zZWxlY3RlZE5hdiA9PT0gbmF2IH0pfSA+XG4gICAgICAgICAge3AubmF2SXRlbXNbbmF2XS5sYWJlbH1cbiAgICAgICAgPC9saT5cbiAgICAgIDwvTGluaz5cbiAgICApKX1cbiAgPC91bD5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudE5hdjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL2NvbXBvbmVudC1uYXYuanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1251:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(114);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__market_properties__ = __webpack_require__(1243);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__link_components_link__ = __webpack_require__(601);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\n\n\nvar MarketBasics = function MarketBasics(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'market-basics' },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'market-basics-header' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        { className: 'market-basics-header-group-1' },\n        !!p.tags && !!p.tags.length && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'ul',\n          { className: 'tags' },\n          p.tags.map(function (tag, i) {\n            return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'li',\n              { key: i, className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('tag', 'pointer', { link: !!tag.name }) },\n              __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n                'button',\n                {\n                  className: 'unstyled',\n                  onClick: tag.onClick && tag.onClick\n                },\n                tag.name ? tag.name : tag\n              )\n            );\n          })\n        )\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        { className: 'market-basics-header-group-2' },\n        p.loginAccount && p.loginAccount.address && p.onClickToggleFavorite && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'button',\n          {\n            className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('button unstyled favorite-button', { on: p.isFavorite }),\n            onClick: p.onClickToggleFavorite\n          },\n          p.isFavorite ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-star' }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-star-o' })\n        )\n      )\n    ),\n    p.marketLink ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      __WEBPACK_IMPORTED_MODULE_3__link_components_link__[\"a\" /* default */],\n      _extends({}, p.marketLink, {\n        onClick: p.marketLink.onClick,\n        className: 'market-description'\n      }),\n      p.description\n    ) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'span',\n      { className: 'market-description' },\n      p.description\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__market_properties__[\"a\" /* default */], p)\n  );\n};\n\n// TODO -- Prop Validations\n// MarketBasics.propTypes = {\n// \tdescription: PropTypes.string,\n// \tendDate: PropTypes.object,\n// \tmakerFeePercent: PropTypes.object,\n// \ttakerFeePercent: PropTypes.object,\n// \tvolume: PropTypes.object,\n// \ttags: PropTypes.array,\n// \tupdateData: PropTypes.func,\n// \tisMarketDataLoading: PropTypes.bool\n// };\n\nvar _default = MarketBasics;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketBasics, 'MarketBasics', '/home/jack/src/augur/src/modules/market/components/market-basics.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-basics.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtYmFzaWNzLmpzeD84YzIwIl0sIm5hbWVzIjpbIk1hcmtldEJhc2ljcyIsInAiLCJ0YWdzIiwibGVuZ3RoIiwibWFwIiwidGFnIiwiaSIsImNsYXNzbmFtZXMiLCJsaW5rIiwibmFtZSIsIm9uQ2xpY2siLCJsb2dpbkFjY291bnQiLCJhZGRyZXNzIiwib25DbGlja1RvZ2dsZUZhdm9yaXRlIiwib24iLCJpc0Zhdm9yaXRlIiwibWFya2V0TGluayIsImRlc2NyaXB0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxJQUFNQSxlQUFlLFNBQWZBLFlBQWU7QUFBQSxTQUNuQjtBQUFBO0FBQUEsTUFBUyxXQUFVLGVBQW5CO0FBQ0U7QUFBQTtBQUFBLFFBQUssV0FBVSxzQkFBZjtBQUNFO0FBQUE7QUFBQSxVQUFLLFdBQVUsOEJBQWY7QUFDRyxTQUFDLENBQUNDLEVBQUVDLElBQUosSUFBWSxDQUFDLENBQUNELEVBQUVDLElBQUYsQ0FBT0MsTUFBckIsSUFDRDtBQUFBO0FBQUEsWUFBSSxXQUFVLE1BQWQ7QUFDR0YsWUFBRUMsSUFBRixDQUFPRSxHQUFQLENBQVcsVUFBQ0MsR0FBRCxFQUFNQyxDQUFOO0FBQUEsbUJBQ1Y7QUFBQTtBQUFBLGdCQUFJLEtBQUtBLENBQVQsRUFBWSxXQUFXLGtEQUFBQyxDQUFXLEtBQVgsRUFBa0IsU0FBbEIsRUFBNkIsRUFBRUMsTUFBTSxDQUFDLENBQUNILElBQUlJLElBQWQsRUFBN0IsQ0FBdkI7QUFDRTtBQUFBO0FBQUE7QUFDRSw2QkFBVSxVQURaO0FBRUUsMkJBQVNKLElBQUlLLE9BQUosSUFBZUwsSUFBSUs7QUFGOUI7QUFJR0wsb0JBQUlJLElBQUosR0FBV0osSUFBSUksSUFBZixHQUFzQko7QUFKekI7QUFERixhQURVO0FBQUEsV0FBWDtBQURIO0FBRkYsT0FERjtBQWlCRTtBQUFBO0FBQUEsVUFBSyxXQUFVLDhCQUFmO0FBQ0dKLFVBQUVVLFlBQUYsSUFBa0JWLEVBQUVVLFlBQUYsQ0FBZUMsT0FBakMsSUFBNENYLEVBQUVZLHFCQUE5QyxJQUNDO0FBQUE7QUFBQTtBQUNFLHVCQUFXLGtEQUFBTixDQUFXLGlDQUFYLEVBQThDLEVBQUVPLElBQUliLEVBQUVjLFVBQVIsRUFBOUMsQ0FEYjtBQUVFLHFCQUFTZCxFQUFFWTtBQUZiO0FBSUdaLFlBQUVjLFVBQUYsR0FBZSxtRUFBRyxXQUFVLFlBQWIsR0FBZixHQUE4QyxtRUFBRyxXQUFVLGNBQWI7QUFKakQ7QUFGSjtBQWpCRixLQURGO0FBOEJHZCxNQUFFZSxVQUFGLEdBQ0M7QUFBQyw0RUFBRDtBQUFBLG1CQUNNZixFQUFFZSxVQURSO0FBRUUsaUJBQVNmLEVBQUVlLFVBQUYsQ0FBYU4sT0FGeEI7QUFHRSxtQkFBVTtBQUhaO0FBS0dULFFBQUVnQjtBQUxMLEtBREQsR0FRQztBQUFBO0FBQUEsUUFBTSxXQUFVLG9CQUFoQjtBQUFzQ2hCLFFBQUVnQjtBQUF4QyxLQXRDSjtBQXlDRSxnRUFBQyxtRUFBRCxFQUFzQmhCLENBQXRCO0FBekNGLEdBRG1CO0FBQUEsQ0FBckI7O0FBOENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O2VBRWVELFk7QUFBZjs7Ozs7Ozs7Z0NBMURNQSxZIiwiZmlsZSI6IjEyNTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBNYXJrZXRQcm9wZXJ0aWVzIGZyb20gJ21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LXByb3BlcnRpZXMnO1xuaW1wb3J0IExpbmsgZnJvbSAnbW9kdWxlcy9saW5rL2NvbXBvbmVudHMvbGluayc7XG5cbmNvbnN0IE1hcmtldEJhc2ljcyA9IHAgPT4gKFxuICA8YXJ0aWNsZSBjbGFzc05hbWU9XCJtYXJrZXQtYmFzaWNzXCI+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJtYXJrZXQtYmFzaWNzLWhlYWRlclwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYXJrZXQtYmFzaWNzLWhlYWRlci1ncm91cC0xXCI+XG4gICAgICAgIHshIXAudGFncyAmJiAhIXAudGFncy5sZW5ndGggJiZcbiAgICAgICAgPHVsIGNsYXNzTmFtZT1cInRhZ3NcIj5cbiAgICAgICAgICB7cC50YWdzLm1hcCgodGFnLCBpKSA9PiAoXG4gICAgICAgICAgICA8bGkga2V5PXtpfSBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ3RhZycsICdwb2ludGVyJywgeyBsaW5rOiAhIXRhZy5uYW1lIH0pfSA+XG4gICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ1bnN0eWxlZFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17dGFnLm9uQ2xpY2sgJiYgdGFnLm9uQ2xpY2t9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7dGFnLm5hbWUgPyB0YWcubmFtZSA6IHRhZ31cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L3VsPlxuICAgICAgICB9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFya2V0LWJhc2ljcy1oZWFkZXItZ3JvdXAtMlwiPlxuICAgICAgICB7cC5sb2dpbkFjY291bnQgJiYgcC5sb2dpbkFjY291bnQuYWRkcmVzcyAmJiBwLm9uQ2xpY2tUb2dnbGVGYXZvcml0ZSAmJlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcygnYnV0dG9uIHVuc3R5bGVkIGZhdm9yaXRlLWJ1dHRvbicsIHsgb246IHAuaXNGYXZvcml0ZSB9KX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e3Aub25DbGlja1RvZ2dsZUZhdm9yaXRlfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwLmlzRmF2b3JpdGUgPyA8aSBjbGFzc05hbWU9XCJmYSBmYS1zdGFyXCIgLz4gOiA8aSBjbGFzc05hbWU9XCJmYSBmYS1zdGFyLW9cIiAvPn1cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICB7cC5tYXJrZXRMaW5rID9cbiAgICAgIDxMaW5rXG4gICAgICAgIHsuLi5wLm1hcmtldExpbmt9XG4gICAgICAgIG9uQ2xpY2s9e3AubWFya2V0TGluay5vbkNsaWNrfVxuICAgICAgICBjbGFzc05hbWU9XCJtYXJrZXQtZGVzY3JpcHRpb25cIlxuICAgICAgPlxuICAgICAgICB7cC5kZXNjcmlwdGlvbn1cbiAgICAgIDwvTGluaz4gOlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibWFya2V0LWRlc2NyaXB0aW9uXCI+e3AuZGVzY3JpcHRpb259PC9zcGFuPlxuICAgIH1cblxuICAgIDxNYXJrZXRQcm9wZXJ0aWVzIHsuLi5wfSAvPlxuICA8L2FydGljbGU+XG4pO1xuXG4vLyBUT0RPIC0tIFByb3AgVmFsaWRhdGlvbnNcbi8vIE1hcmtldEJhc2ljcy5wcm9wVHlwZXMgPSB7XG4vLyBcdGRlc2NyaXB0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuLy8gXHRlbmREYXRlOiBQcm9wVHlwZXMub2JqZWN0LFxuLy8gXHRtYWtlckZlZVBlcmNlbnQ6IFByb3BUeXBlcy5vYmplY3QsXG4vLyBcdHRha2VyRmVlUGVyY2VudDogUHJvcFR5cGVzLm9iamVjdCxcbi8vIFx0dm9sdW1lOiBQcm9wVHlwZXMub2JqZWN0LFxuLy8gXHR0YWdzOiBQcm9wVHlwZXMuYXJyYXksXG4vLyBcdHVwZGF0ZURhdGE6IFByb3BUeXBlcy5mdW5jLFxuLy8gXHRpc01hcmtldERhdGFMb2FkaW5nOiBQcm9wVHlwZXMuYm9vbFxuLy8gfTtcblxuZXhwb3J0IGRlZmF1bHQgTWFya2V0QmFzaWNzO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LWJhc2ljcy5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1254:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n\n\nvar Dropdown = function Dropdown(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    \"div\",\n    { className: \"dropdown\" },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      \"select\",\n      {\n        onChange: function onChange(event) {\n          p.onChange(event.target.value);\n        },\n        defaultValue: p.default\n      },\n      p.options.map(function (option) {\n        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          \"option\",\n          {\n            key: option.value,\n            value: option.value\n          },\n          option.label\n        );\n      })\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\"i\", { className: \"fa fa-angle-down\" })\n  );\n};\n\n// TODO -- Prop Validations\n// Dropdown.propTypes = {\n// \tdefault: PropTypes.string,\n// \toptions: PropTypes.array,\n// \tonChange: PropTypes.func\n// };\n\nvar _default = Dropdown;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(Dropdown, \"Dropdown\", \"/home/jack/src/augur/src/modules/common/components/dropdown.jsx\");\n\n  __REACT_HOT_LOADER__.register(_default, \"default\", \"/home/jack/src/augur/src/modules/common/components/dropdown.jsx\");\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9jb21tb24vY29tcG9uZW50cy9kcm9wZG93bi5qc3g/OWRkNiJdLCJuYW1lcyI6WyJEcm9wZG93biIsImV2ZW50IiwicCIsIm9uQ2hhbmdlIiwidGFyZ2V0IiwidmFsdWUiLCJkZWZhdWx0Iiwib3B0aW9ucyIsIm1hcCIsIm9wdGlvbiIsImxhYmVsIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLElBQU1BLFdBQVcsU0FBWEEsUUFBVztBQUFBLFNBQ2Y7QUFBQTtBQUFBLE1BQUssV0FBVSxVQUFmO0FBQ0U7QUFBQTtBQUFBO0FBQ0Usa0JBQVUsa0JBQUNDLEtBQUQsRUFBVztBQUFFQyxZQUFFQyxRQUFGLENBQVdGLE1BQU1HLE1BQU4sQ0FBYUMsS0FBeEI7QUFBaUMsU0FEMUQ7QUFFRSxzQkFBY0gsRUFBRUk7QUFGbEI7QUFJR0osUUFBRUssT0FBRixDQUFVQyxHQUFWLENBQWM7QUFBQSxlQUNiO0FBQUE7QUFBQTtBQUNFLGlCQUFLQyxPQUFPSixLQURkO0FBRUUsbUJBQU9JLE9BQU9KO0FBRmhCO0FBSUdJLGlCQUFPQztBQUpWLFNBRGE7QUFBQSxPQUFkO0FBSkgsS0FERjtBQWNFLHVFQUFHLFdBQVUsa0JBQWI7QUFkRixHQURlO0FBQUEsQ0FBakI7O0FBbUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7ZUFFZVYsUTtBQUFmOzs7Ozs7OztnQ0ExQk1BLFEiLCJmaWxlIjoiMTI1NC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IERyb3Bkb3duID0gcCA9PiAoXG4gIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd25cIj5cbiAgICA8c2VsZWN0XG4gICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PiB7IHAub25DaGFuZ2UoZXZlbnQudGFyZ2V0LnZhbHVlKTsgfX1cbiAgICAgIGRlZmF1bHRWYWx1ZT17cC5kZWZhdWx0fVxuICAgID5cbiAgICAgIHtwLm9wdGlvbnMubWFwKG9wdGlvbiA9PiAoXG4gICAgICAgIDxvcHRpb25cbiAgICAgICAgICBrZXk9e29wdGlvbi52YWx1ZX1cbiAgICAgICAgICB2YWx1ZT17b3B0aW9uLnZhbHVlfVxuICAgICAgICA+XG4gICAgICAgICAge29wdGlvbi5sYWJlbH1cbiAgICAgICAgPC9vcHRpb24+XG4gICAgICApKX1cbiAgICA8L3NlbGVjdD5cbiAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hbmdsZS1kb3duXCIgLz5cbiAgPC9kaXY+XG4pO1xuXG4vLyBUT0RPIC0tIFByb3AgVmFsaWRhdGlvbnNcbi8vIERyb3Bkb3duLnByb3BUeXBlcyA9IHtcbi8vIFx0ZGVmYXVsdDogUHJvcFR5cGVzLnN0cmluZyxcbi8vIFx0b3B0aW9uczogUHJvcFR5cGVzLmFycmF5LFxuLy8gXHRvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmNcbi8vIH07XG5cbmV4cG9ydCBkZWZhdWx0IERyb3Bkb3duO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvY29tbW9uL2NvbXBvbmVudHMvZHJvcGRvd24uanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1258:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(exports, \"a\", function() { return POSITION; });\n/* harmony export (binding) */ __webpack_require__.d(exports, \"b\", function() { return ORDER; });\nvar POSITION = 'POSITION';\nvar ORDER = 'ORDER';\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(POSITION, 'POSITION', '/home/jack/src/augur/src/modules/market/constants/trade-close-type.js');\n\n  __REACT_HOT_LOADER__.register(ORDER, 'ORDER', '/home/jack/src/augur/src/modules/market/constants/trade-close-type.js');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29uc3RhbnRzL3RyYWRlLWNsb3NlLXR5cGUuanM/YWRjMiJdLCJuYW1lcyI6WyJQT1NJVElPTiIsIk9SREVSIl0sIm1hcHBpbmdzIjoiOztBQUFPLElBQU1BLFdBQVcsVUFBakI7QUFDQSxJQUFNQyxRQUFRLE9BQWQ7Ozs7Ozs7O2dDQURNRCxROztnQ0FDQUMsSyIsImZpbGUiOiIxMjU4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFBPU0lUSU9OID0gJ1BPU0lUSU9OJztcbmV4cG9ydCBjb25zdCBPUkRFUiA9ICdPUkRFUic7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29uc3RhbnRzL3RyYWRlLWNsb3NlLXR5cGUuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1260:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(exports, \"b\", function() { return PRICE; });\n/* harmony export (binding) */ __webpack_require__.d(exports, \"a\", function() { return SHARE; });\nvar PRICE = 'price';\nvar SHARE = 'share';\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(PRICE, 'PRICE', '/home/jack/src/augur/src/modules/order-book/constants/order-book-value-types.js');\n\n  __REACT_HOT_LOADER__.register(SHARE, 'SHARE', '/home/jack/src/augur/src/modules/order-book/constants/order-book-value-types.js');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vcmRlci1ib29rL2NvbnN0YW50cy9vcmRlci1ib29rLXZhbHVlLXR5cGVzLmpzP2Y4YjQiXSwibmFtZXMiOlsiUFJJQ0UiLCJTSEFSRSJdLCJtYXBwaW5ncyI6Ijs7QUFBTyxJQUFNQSxRQUFRLE9BQWQ7QUFDQSxJQUFNQyxRQUFRLE9BQWQ7Ozs7Ozs7O2dDQURNRCxLOztnQ0FDQUMsSyIsImZpbGUiOiIxMjYwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFBSSUNFID0gJ3ByaWNlJztcbmV4cG9ydCBjb25zdCBTSEFSRSA9ICdzaGFyZSc7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9vcmRlci1ib29rL2NvbnN0YW50cy9vcmRlci1ib29rLXZhbHVlLXR5cGVzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1261:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(exports, \"a\", function() { return BUY; });\n/* harmony export (binding) */ __webpack_require__.d(exports, \"b\", function() { return SELL; });\nvar BUY = 'buy';\nvar SELL = 'sell';\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(BUY, 'BUY', '/home/jack/src/augur/src/modules/outcomes/constants/trade-types.js');\n\n  __REACT_HOT_LOADER__.register(SELL, 'SELL', '/home/jack/src/augur/src/modules/outcomes/constants/trade-types.js');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vdXRjb21lcy9jb25zdGFudHMvdHJhZGUtdHlwZXMuanM/YTBlZCJdLCJuYW1lcyI6WyJCVVkiLCJTRUxMIl0sIm1hcHBpbmdzIjoiOztBQUFPLElBQU1BLE1BQU0sS0FBWjtBQUNBLElBQU1DLE9BQU8sTUFBYjs7Ozs7Ozs7Z0NBRE1ELEc7O2dDQUNBQyxJIiwiZmlsZSI6IjEyNjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgQlVZID0gJ2J1eSc7XG5leHBvcnQgY29uc3QgU0VMTCA9ICdzZWxsJztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL291dGNvbWVzL2NvbnN0YW50cy90cmFkZS10eXBlcy5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 1262:
/***/ function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n Highcharts JS v5.0.7 (2017-01-17)\n\n (c) 2009-2016 Torstein Honsi\n\n License: www.highcharts.com/license\n*/\n(function (L, a) {\n  \"object\" === ( false ? \"undefined\" : _typeof(module)) && module.exports ? module.exports = L.document ? a(L) : a : L.Highcharts = a(L);\n})(\"undefined\" !== typeof window ? window : this, function (L) {\n  L = function () {\n    var a = window,\n        B = a.document,\n        A = a.navigator && a.navigator.userAgent || \"\",\n        H = B && B.createElementNS && !!B.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGRect,\n        G = /(edge|msie|trident)/i.test(A) && !window.opera,\n        r = !H,\n        g = /Firefox/.test(A),\n        f = g && 4 > parseInt(A.split(\"Firefox/\")[1], 10);return a.Highcharts ? a.Highcharts.error(16, !0) : { product: \"Highcharts\",\n      version: \"5.0.7\", deg2rad: 2 * Math.PI / 360, doc: B, hasBidiBug: f, hasTouch: B && void 0 !== B.documentElement.ontouchstart, isMS: G, isWebKit: /AppleWebKit/.test(A), isFirefox: g, isTouchDevice: /(Mobile|Android|Windows Phone)/.test(A), SVG_NS: \"http://www.w3.org/2000/svg\", chartCount: 0, seriesTypes: {}, symbolSizes: {}, svg: H, vml: r, win: a, charts: [], marginNames: [\"plotTop\", \"marginRight\", \"marginBottom\", \"plotLeft\"], noop: function noop() {} };\n  }();(function (a) {\n    var B = [],\n        A = a.charts,\n        H = a.doc,\n        G = a.win;a.error = function (r, g) {\n      r = a.isNumber(r) ? \"Highcharts error #\" + r + \": www.highcharts.com/errors/\" + r : r;if (g) throw Error(r);G.console && console.log(r);\n    };a.Fx = function (a, g, f) {\n      this.options = g;this.elem = a;this.prop = f;\n    };a.Fx.prototype = { dSetter: function dSetter() {\n        var a = this.paths[0],\n            g = this.paths[1],\n            f = [],\n            u = this.now,\n            l = a.length,\n            q;if (1 === u) f = this.toD;else if (l === g.length && 1 > u) for (; l--;) {\n          q = parseFloat(a[l]), f[l] = isNaN(q) ? a[l] : u * parseFloat(g[l] - q) + q;\n        } else f = g;this.elem.attr(\"d\", f, null, !0);\n      }, update: function update() {\n        var a = this.elem,\n            g = this.prop,\n            f = this.now,\n            u = this.options.step;if (this[g + \"Setter\"]) this[g + \"Setter\"]();else a.attr ? a.element && a.attr(g, f, null, !0) : a.style[g] = f + this.unit;u && u.call(a, f, this);\n      }, run: function run(a, g, f) {\n        var r = this,\n            l = function l(a) {\n          return l.stopped ? !1 : r.step(a);\n        },\n            q;this.startTime = +new Date();this.start = a;this.end = g;this.unit = f;this.now = this.start;this.pos = 0;l.elem = this.elem;l.prop = this.prop;l() && 1 === B.push(l) && (l.timerId = setInterval(function () {\n          for (q = 0; q < B.length; q++) {\n            B[q]() || B.splice(q--, 1);\n          }B.length || clearInterval(l.timerId);\n        }, 13));\n      }, step: function step(a) {\n        var r = +new Date(),\n            f,\n            u = this.options;f = this.elem;\n        var l = u.complete,\n            q = u.duration,\n            d = u.curAnim,\n            b;if (f.attr && !f.element) f = !1;else if (a || r >= q + this.startTime) {\n          this.now = this.end;this.pos = 1;this.update();a = d[this.prop] = !0;for (b in d) {\n            !0 !== d[b] && (a = !1);\n          }a && l && l.call(f);f = !1;\n        } else this.pos = u.easing((r - this.startTime) / q), this.now = this.start + (this.end - this.start) * this.pos, this.update(), f = !0;return f;\n      }, initPath: function initPath(r, g, f) {\n        function u(a) {\n          var e, b;for (n = a.length; n--;) {\n            e = \"M\" === a[n] || \"L\" === a[n], b = /[a-zA-Z]/.test(a[n + 3]), e && b && a.splice(n + 1, 0, a[n + 1], a[n + 2], a[n + 1], a[n + 2]);\n          }\n        }function l(a, e) {\n          for (; a.length < m;) {\n            a[0] = e[m - a.length];var b = a.slice(0, t);[].splice.apply(a, [0, 0].concat(b));E && (b = a.slice(a.length - t), [].splice.apply(a, [a.length, 0].concat(b)), n--);\n          }a[0] = \"M\";\n        }function q(a, e) {\n          for (var b = (m - a.length) / t; 0 < b && b--;) {\n            c = a.slice().splice(a.length / z - t, t * z), c[0] = e[m - t - b * t], C && (c[t - 6] = c[t - 2], c[t - 5] = c[t - 1]), [].splice.apply(a, [a.length / z, 0].concat(c)), E && b--;\n          }\n        }g = g || \"\";var d,\n            b = r.startX,\n            p = r.endX,\n            C = -1 < g.indexOf(\"C\"),\n            t = C ? 7 : 3,\n            m,\n            c,\n            n;g = g.split(\" \");f = f.slice();var E = r.isArea,\n            z = E ? 2 : 1,\n            e;\n        C && (u(g), u(f));if (b && p) {\n          for (n = 0; n < b.length; n++) {\n            if (b[n] === p[0]) {\n              d = n;break;\n            } else if (b[0] === p[p.length - b.length + n]) {\n              d = n;e = !0;break;\n            }\n          }void 0 === d && (g = []);\n        }g.length && a.isNumber(d) && (m = f.length + d * z * t, e ? (l(g, f), q(f, g)) : (l(f, g), q(g, f)));return [g, f];\n      } };a.extend = function (a, g) {\n      var f;a || (a = {});for (f in g) {\n        a[f] = g[f];\n      }return a;\n    };a.merge = function () {\n      var r,\n          g = arguments,\n          f,\n          u = {},\n          l = function l(q, d) {\n        var b, p;\"object\" !== (typeof q === \"undefined\" ? \"undefined\" : _typeof(q)) && (q = {});for (p in d) {\n          d.hasOwnProperty(p) && (b = d[p], a.isObject(b, !0) && \"renderTo\" !== p && \"number\" !== typeof b.nodeType ? q[p] = l(q[p] || {}, b) : q[p] = d[p]);\n        }return q;\n      };!0 === g[0] && (u = g[1], g = Array.prototype.slice.call(g, 2));f = g.length;for (r = 0; r < f; r++) {\n        u = l(u, g[r]);\n      }return u;\n    };a.pInt = function (a, g) {\n      return parseInt(a, g || 10);\n    };a.isString = function (a) {\n      return \"string\" === typeof a;\n    };a.isArray = function (a) {\n      a = Object.prototype.toString.call(a);return \"[object Array]\" === a || \"[object Array Iterator]\" === a;\n    };a.isObject = function (r, g) {\n      return r && \"object\" === (typeof r === \"undefined\" ? \"undefined\" : _typeof(r)) && (!g || !a.isArray(r));\n    };a.isNumber = function (a) {\n      return \"number\" === typeof a && !isNaN(a);\n    };a.erase = function (a, g) {\n      for (var f = a.length; f--;) {\n        if (a[f] === g) {\n          a.splice(f, 1);break;\n        }\n      }\n    };a.defined = function (a) {\n      return void 0 !== a && null !== a;\n    };a.attr = function (r, g, f) {\n      var u, l;if (a.isString(g)) a.defined(f) ? r.setAttribute(g, f) : r && r.getAttribute && (l = r.getAttribute(g));else if (a.defined(g) && a.isObject(g)) for (u in g) {\n        r.setAttribute(u, g[u]);\n      }return l;\n    };a.splat = function (r) {\n      return a.isArray(r) ? r : [r];\n    };a.syncTimeout = function (a, g, f) {\n      if (g) return setTimeout(a, g, f);a.call(0, f);\n    };a.pick = function () {\n      var a = arguments,\n          g,\n          f,\n          u = a.length;for (g = 0; g < u; g++) {\n        if (f = a[g], void 0 !== f && null !== f) return f;\n      }\n    };a.css = function (r, g) {\n      a.isMS && !a.svg && g && void 0 !== g.opacity && (g.filter = \"alpha(opacity\\x3d\" + 100 * g.opacity + \")\");a.extend(r.style, g);\n    };a.createElement = function (r, g, f, u, l) {\n      r = H.createElement(r);var q = a.css;g && a.extend(r, g);l && q(r, { padding: 0, border: \"none\", margin: 0 });f && q(r, f);u && u.appendChild(r);return r;\n    };a.extendClass = function (r, g) {\n      var f = function f() {};f.prototype = new r();a.extend(f.prototype, g);return f;\n    };a.pad = function (a, g, f) {\n      return Array((g || 2) + 1 - String(a).length).join(f || 0) + a;\n    };a.relativeLength = function (a, g) {\n      return (/%$/.test(a) ? g * parseFloat(a) / 100 : parseFloat(a)\n      );\n    };a.wrap = function (a, g, f) {\n      var r = a[g];a[g] = function () {\n        var a = Array.prototype.slice.call(arguments),\n            q = arguments,\n            d = this;d.proceed = function () {\n          r.apply(d, arguments.length ? arguments : q);\n        };a.unshift(r);a = f.apply(this, a);d.proceed = null;return a;\n      };\n    };a.getTZOffset = function (r) {\n      var g = a.Date;return 6E4 * (g.hcGetTimezoneOffset && g.hcGetTimezoneOffset(r) || g.hcTimezoneOffset || 0);\n    };a.dateFormat = function (r, g, f) {\n      if (!a.defined(g) || isNaN(g)) return a.defaultOptions.lang.invalidDate || \"\";r = a.pick(r, \"%Y-%m-%d %H:%M:%S\");var u = a.Date,\n          l = new u(g - a.getTZOffset(g)),\n          q,\n          d = l[u.hcGetHours](),\n          b = l[u.hcGetDay](),\n          p = l[u.hcGetDate](),\n          C = l[u.hcGetMonth](),\n          t = l[u.hcGetFullYear](),\n          m = a.defaultOptions.lang,\n          c = m.weekdays,\n          n = m.shortWeekdays,\n          E = a.pad,\n          u = a.extend({ a: n ? n[b] : c[b].substr(0, 3), A: c[b], d: E(p), e: E(p, 2, \" \"), w: b, b: m.shortMonths[C], B: m.months[C], m: E(C + 1), y: t.toString().substr(2, 2), Y: t, H: E(d), k: d, I: E(d % 12 || 12), l: d % 12 || 12, M: E(l[u.hcGetMinutes]()), p: 12 > d ? \"AM\" : \"PM\", P: 12 > d ? \"am\" : \"pm\", S: E(l.getSeconds()), L: E(Math.round(g % 1E3), 3) }, a.dateFormats);for (q in u) {\n        for (; -1 !== r.indexOf(\"%\" + q);) {\n          r = r.replace(\"%\" + q, \"function\" === typeof u[q] ? u[q](g) : u[q]);\n        }\n      }return f ? r.substr(0, 1).toUpperCase() + r.substr(1) : r;\n    };a.formatSingle = function (r, g) {\n      var f = /\\.([0-9])/,\n          u = a.defaultOptions.lang;/f$/.test(r) ? (f = (f = r.match(f)) ? f[1] : -1, null !== g && (g = a.numberFormat(g, f, u.decimalPoint, -1 < r.indexOf(\",\") ? u.thousandsSep : \"\"))) : g = a.dateFormat(r, g);return g;\n    };a.format = function (r, g) {\n      for (var f = \"{\", u = !1, l, q, d, b, p = [], C; r;) {\n        f = r.indexOf(f);if (-1 === f) break;l = r.slice(0, f);if (u) {\n          l = l.split(\":\");q = l.shift().split(\".\");b = q.length;C = g;for (d = 0; d < b; d++) {\n            C = C[q[d]];\n          }l.length && (C = a.formatSingle(l.join(\":\"), C));p.push(C);\n        } else p.push(l);r = r.slice(f + 1);f = (u = !u) ? \"}\" : \"{\";\n      }p.push(r);return p.join(\"\");\n    };a.getMagnitude = function (a) {\n      return Math.pow(10, Math.floor(Math.log(a) / Math.LN10));\n    };a.normalizeTickInterval = function (r, g, f, u, l) {\n      var q,\n          d = r;f = a.pick(f, 1);q = r / f;g || (g = l ? [1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10] : [1, 2, 2.5, 5, 10], !1 === u && (1 === f ? g = a.grep(g, function (a) {\n        return 0 === a % 1;\n      }) : .1 >= f && (g = [1 / f])));\n      for (u = 0; u < g.length && !(d = g[u], l && d * f >= r || !l && q <= (g[u] + (g[u + 1] || g[u])) / 2); u++) {}return d = a.correctFloat(d * f, -Math.round(Math.log(.001) / Math.LN10));\n    };a.stableSort = function (a, g) {\n      var f = a.length,\n          r,\n          l;for (l = 0; l < f; l++) {\n        a[l].safeI = l;\n      }a.sort(function (a, d) {\n        r = g(a, d);return 0 === r ? a.safeI - d.safeI : r;\n      });for (l = 0; l < f; l++) {\n        delete a[l].safeI;\n      }\n    };a.arrayMin = function (a) {\n      for (var g = a.length, f = a[0]; g--;) {\n        a[g] < f && (f = a[g]);\n      }return f;\n    };a.arrayMax = function (a) {\n      for (var g = a.length, f = a[0]; g--;) {\n        a[g] > f && (f = a[g]);\n      }return f;\n    };a.destroyObjectProperties = function (a, g) {\n      for (var f in a) {\n        a[f] && a[f] !== g && a[f].destroy && a[f].destroy(), delete a[f];\n      }\n    };a.discardElement = function (r) {\n      var g = a.garbageBin;g || (g = a.createElement(\"div\"));r && g.appendChild(r);g.innerHTML = \"\";\n    };a.correctFloat = function (a, g) {\n      return parseFloat(a.toPrecision(g || 14));\n    };a.setAnimation = function (r, g) {\n      g.renderer.globalAnimation = a.pick(r, g.options.chart.animation, !0);\n    };a.animObject = function (r) {\n      return a.isObject(r) ? a.merge(r) : { duration: r ? 500 : 0 };\n    };a.timeUnits = { millisecond: 1, second: 1E3, minute: 6E4, hour: 36E5,\n      day: 864E5, week: 6048E5, month: 24192E5, year: 314496E5 };a.numberFormat = function (r, g, f, u) {\n      r = +r || 0;g = +g;var l = a.defaultOptions.lang,\n          q = (r.toString().split(\".\")[1] || \"\").length,\n          d,\n          b;-1 === g ? g = Math.min(q, 20) : a.isNumber(g) || (g = 2);b = (Math.abs(r) + Math.pow(10, -Math.max(g, q) - 1)).toFixed(g);q = String(a.pInt(b));d = 3 < q.length ? q.length % 3 : 0;f = a.pick(f, l.decimalPoint);u = a.pick(u, l.thousandsSep);r = (0 > r ? \"-\" : \"\") + (d ? q.substr(0, d) + u : \"\");r += q.substr(d).replace(/(\\d{3})(?=\\d)/g, \"$1\" + u);g && (r += f + b.slice(-g));return r;\n    };Math.easeInOutSine = function (a) {\n      return -.5 * (Math.cos(Math.PI * a) - 1);\n    };a.getStyle = function (r, g) {\n      return \"width\" === g ? Math.min(r.offsetWidth, r.scrollWidth) - a.getStyle(r, \"padding-left\") - a.getStyle(r, \"padding-right\") : \"height\" === g ? Math.min(r.offsetHeight, r.scrollHeight) - a.getStyle(r, \"padding-top\") - a.getStyle(r, \"padding-bottom\") : (r = G.getComputedStyle(r, void 0)) && a.pInt(r.getPropertyValue(g));\n    };a.inArray = function (a, g) {\n      return g.indexOf ? g.indexOf(a) : [].indexOf.call(g, a);\n    };a.grep = function (a, g) {\n      return [].filter.call(a, g);\n    };a.find = function (a, g) {\n      return [].find.call(a, g);\n    };a.map = function (a, g) {\n      for (var f = [], u = 0, l = a.length; u < l; u++) {\n        f[u] = g.call(a[u], a[u], u, a);\n      }return f;\n    };a.offset = function (a) {\n      var g = H.documentElement;a = a.getBoundingClientRect();return { top: a.top + (G.pageYOffset || g.scrollTop) - (g.clientTop || 0), left: a.left + (G.pageXOffset || g.scrollLeft) - (g.clientLeft || 0) };\n    };a.stop = function (a, g) {\n      for (var f = B.length; f--;) {\n        B[f].elem !== a || g && g !== B[f].prop || (B[f].stopped = !0);\n      }\n    };a.each = function (a, g, f) {\n      return Array.prototype.forEach.call(a, g, f);\n    };a.addEvent = function (r, g, f) {\n      function u(a) {\n        a.target = a.srcElement || G;f.call(r, a);\n      }var l = r.hcEvents = r.hcEvents || {};r.addEventListener ? r.addEventListener(g, f, !1) : r.attachEvent && (r.hcEventsIE || (r.hcEventsIE = {}), r.hcEventsIE[f.toString()] = u, r.attachEvent(\"on\" + g, u));l[g] || (l[g] = []);l[g].push(f);return function () {\n        a.removeEvent(r, g, f);\n      };\n    };a.removeEvent = function (r, g, f) {\n      function u(a, b) {\n        r.removeEventListener ? r.removeEventListener(a, b, !1) : r.attachEvent && (b = r.hcEventsIE[b.toString()], r.detachEvent(\"on\" + a, b));\n      }function l() {\n        var a, b;if (r.nodeName) for (b in g ? (a = {}, a[g] = !0) : a = d, a) {\n          if (d[b]) for (a = d[b].length; a--;) {\n            u(b, d[b][a]);\n          }\n        }\n      }var q,\n          d = r.hcEvents,\n          b;d && (g ? (q = d[g] || [], f ? (b = a.inArray(f, q), -1 < b && (q.splice(b, 1), d[g] = q), u(g, f)) : (l(), d[g] = [])) : (l(), r.hcEvents = {}));\n    };a.fireEvent = function (r, g, f, u) {\n      var l;l = r.hcEvents;var q, d;f = f || {};if (H.createEvent && (r.dispatchEvent || r.fireEvent)) l = H.createEvent(\"Events\"), l.initEvent(g, !0, !0), a.extend(l, f), r.dispatchEvent ? r.dispatchEvent(l) : r.fireEvent(g, l);else if (l) for (l = l[g] || [], q = l.length, f.target || a.extend(f, { preventDefault: function preventDefault() {\n          f.defaultPrevented = !0;\n        }, target: r, type: g }), g = 0; g < q; g++) {\n        (d = l[g]) && !1 === d.call(r, f) && f.preventDefault();\n      }u && !f.defaultPrevented && u(f);\n    };a.animate = function (r, g, f) {\n      var u,\n          l = \"\",\n          q,\n          d,\n          b;a.isObject(f) || (u = arguments, f = { duration: u[2], easing: u[3], complete: u[4] });a.isNumber(f.duration) || (f.duration = 400);f.easing = \"function\" === typeof f.easing ? f.easing : Math[f.easing] || Math.easeInOutSine;f.curAnim = a.merge(g);for (b in g) {\n        a.stop(r, b), d = new a.Fx(r, f, b), q = null, \"d\" === b ? (d.paths = d.initPath(r, r.d, g.d), d.toD = g.d, u = 0, q = 1) : r.attr ? u = r.attr(b) : (u = parseFloat(a.getStyle(r, b)) || 0, \"opacity\" !== b && (l = \"px\")), q || (q = g[b]), q.match && q.match(\"px\") && (q = q.replace(/px/g, \"\")), d.run(u, q, l);\n      }\n    };a.seriesType = function (r, g, f, u, l) {\n      var q = a.getOptions(),\n          d = a.seriesTypes;q.plotOptions[r] = a.merge(q.plotOptions[g], f);d[r] = a.extendClass(d[g] || function () {}, u);d[r].prototype.type = r;l && (d[r].prototype.pointClass = a.extendClass(a.Point, l));return d[r];\n    };a.uniqueKey = function () {\n      var a = Math.random().toString(36).substring(2, 9),\n          g = 0;return function () {\n        return \"highcharts-\" + a + \"-\" + g++;\n      };\n    }();G.jQuery && (G.jQuery.fn.highcharts = function () {\n      var r = [].slice.call(arguments);if (this[0]) return r[0] ? (new a[a.isString(r[0]) ? r.shift() : \"Chart\"](this[0], r[0], r[1]), this) : A[a.attr(this[0], \"data-highcharts-chart\")];\n    });H && !H.defaultView && (a.getStyle = function (r, g) {\n      var f = { width: \"clientWidth\", height: \"clientHeight\" }[g];if (r.style[g]) return a.pInt(r.style[g]);\"opacity\" === g && (g = \"filter\");if (f) return r.style.zoom = 1, Math.max(r[f] - 2 * a.getStyle(r, \"padding\"), 0);r = r.currentStyle[g.replace(/\\-(\\w)/g, function (a, l) {\n        return l.toUpperCase();\n      })];\"filter\" === g && (r = r.replace(/alpha\\(opacity=([0-9]+)\\)/, function (a, l) {\n        return l / 100;\n      }));return \"\" === r ? 1 : a.pInt(r);\n    });Array.prototype.forEach || (a.each = function (a, g, f) {\n      for (var u = 0, l = a.length; u < l; u++) {\n        if (!1 === g.call(f, a[u], u, a)) return u;\n      }\n    });Array.prototype.indexOf || (a.inArray = function (a, g) {\n      var f,\n          u = 0;if (g) for (f = g.length; u < f; u++) {\n        if (g[u] === a) return u;\n      }return -1;\n    });Array.prototype.filter || (a.grep = function (a, g) {\n      for (var f = [], u = 0, l = a.length; u < l; u++) {\n        g(a[u], u) && f.push(a[u]);\n      }return f;\n    });Array.prototype.find || (a.find = function (a, g) {\n      var f,\n          u = a.length;for (f = 0; f < u; f++) {\n        if (g(a[f], f)) return a[f];\n      }\n    });\n  })(L);(function (a) {\n    var B = a.each,\n        A = a.isNumber,\n        H = a.map,\n        G = a.merge,\n        r = a.pInt;a.Color = function (g) {\n      if (!(this instanceof a.Color)) return new a.Color(g);this.init(g);\n    };a.Color.prototype = { parsers: [{ regex: /rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]?(?:\\.[0-9]+)?)\\s*\\)/, parse: function parse(a) {\n          return [r(a[1]), r(a[2]), r(a[3]), parseFloat(a[4], 10)];\n        } }, { regex: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/, parse: function parse(a) {\n          return [r(a[1], 16), r(a[2], 16), r(a[3], 16), 1];\n        } }, { regex: /rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/, parse: function parse(a) {\n          return [r(a[1]), r(a[2]), r(a[3]), 1];\n        } }], names: { white: \"#ffffff\", black: \"#000000\" }, init: function init(g) {\n        var f, u, l, q;if ((this.input = g = this.names[g] || g) && g.stops) this.stops = H(g.stops, function (d) {\n          return new a.Color(d[1]);\n        });else for (l = this.parsers.length; l-- && !u;) {\n          q = this.parsers[l], (f = q.regex.exec(g)) && (u = q.parse(f));\n        }this.rgba = u || [];\n      }, get: function get(a) {\n        var f = this.input,\n            g = this.rgba,\n            l;this.stops ? (l = G(f), l.stops = [].concat(l.stops), B(this.stops, function (f, d) {\n          l.stops[d] = [l.stops[d][0], f.get(a)];\n        })) : l = g && A(g[0]) ? \"rgb\" === a || !a && 1 === g[3] ? \"rgb(\" + g[0] + \",\" + g[1] + \",\" + g[2] + \")\" : \"a\" === a ? g[3] : \"rgba(\" + g.join(\",\") + \")\" : f;return l;\n      }, brighten: function brighten(a) {\n        var f,\n            g = this.rgba;if (this.stops) B(this.stops, function (l) {\n          l.brighten(a);\n        });else if (A(a) && 0 !== a) for (f = 0; 3 > f; f++) {\n          g[f] += r(255 * a), 0 > g[f] && (g[f] = 0), 255 < g[f] && (g[f] = 255);\n        }return this;\n      }, setOpacity: function setOpacity(a) {\n        this.rgba[3] = a;return this;\n      } };a.color = function (g) {\n      return new a.Color(g);\n    };\n  })(L);\n  (function (a) {\n    var B,\n        A,\n        H = a.addEvent,\n        G = a.animate,\n        r = a.attr,\n        g = a.charts,\n        f = a.color,\n        u = a.css,\n        l = a.createElement,\n        q = a.defined,\n        d = a.deg2rad,\n        b = a.destroyObjectProperties,\n        p = a.doc,\n        C = a.each,\n        t = a.extend,\n        m = a.erase,\n        c = a.grep,\n        n = a.hasTouch,\n        E = a.inArray,\n        z = a.isArray,\n        e = a.isFirefox,\n        x = a.isMS,\n        F = a.isObject,\n        w = a.isString,\n        h = a.isWebKit,\n        y = a.merge,\n        J = a.noop,\n        K = a.pick,\n        I = a.pInt,\n        k = a.removeEvent,\n        D = a.stop,\n        P = a.svg,\n        N = a.SVG_NS,\n        S = a.symbolSizes,\n        O = a.win;B = a.SVGElement = function () {\n      return this;\n    };B.prototype = { opacity: 1, SVG_NS: N, textProps: \"direction fontSize fontWeight fontFamily fontStyle color lineHeight width textDecoration textOverflow textOutline\".split(\" \"),\n      init: function init(a, k) {\n        this.element = \"span\" === k ? l(k) : p.createElementNS(this.SVG_NS, k);this.renderer = a;\n      }, animate: function animate(v, k, e) {\n        k = a.animObject(K(k, this.renderer.globalAnimation, !0));0 !== k.duration ? (e && (k.complete = e), G(this, v, k)) : this.attr(v, null, e);return this;\n      }, colorGradient: function colorGradient(v, k, e) {\n        var b = this.renderer,\n            h,\n            D,\n            c,\n            x,\n            M,\n            m,\n            n,\n            d,\n            F,\n            t,\n            p,\n            w = [],\n            l;v.linearGradient ? D = \"linearGradient\" : v.radialGradient && (D = \"radialGradient\");if (D) {\n          c = v[D];M = b.gradients;n = v.stops;t = e.radialReference;z(c) && (v[D] = c = { x1: c[0], y1: c[1], x2: c[2],\n            y2: c[3], gradientUnits: \"userSpaceOnUse\" });\"radialGradient\" === D && t && !q(c.gradientUnits) && (x = c, c = y(c, b.getRadialAttr(t, x), { gradientUnits: \"userSpaceOnUse\" }));for (p in c) {\n            \"id\" !== p && w.push(p, c[p]);\n          }for (p in n) {\n            w.push(n[p]);\n          }w = w.join(\",\");M[w] ? t = M[w].attr(\"id\") : (c.id = t = a.uniqueKey(), M[w] = m = b.createElement(D).attr(c).add(b.defs), m.radAttr = x, m.stops = [], C(n, function (v) {\n            0 === v[1].indexOf(\"rgba\") ? (h = a.color(v[1]), d = h.get(\"rgb\"), F = h.get(\"a\")) : (d = v[1], F = 1);v = b.createElement(\"stop\").attr({ offset: v[0], \"stop-color\": d,\n              \"stop-opacity\": F }).add(m);m.stops.push(v);\n          }));l = \"url(\" + b.url + \"#\" + t + \")\";e.setAttribute(k, l);e.gradient = w;v.toString = function () {\n            return l;\n          };\n        }\n      }, applyTextOutline: function applyTextOutline(a) {\n        var v = this.element,\n            k,\n            e,\n            b,\n            c;-1 !== a.indexOf(\"contrast\") && (a = a.replace(/contrast/g, this.renderer.getContrast(v.style.fill)));this.fakeTS = !0;this.ySetter = this.xSetter;k = [].slice.call(v.getElementsByTagName(\"tspan\"));a = a.split(\" \");e = a[a.length - 1];(b = a[0]) && \"none\" !== b && (b = b.replace(/(^[\\d\\.]+)(.*?)$/g, function (a, v, k) {\n          return 2 * v + k;\n        }), C(k, function (a) {\n          \"highcharts-text-outline\" === a.getAttribute(\"class\") && m(k, v.removeChild(a));\n        }), c = v.firstChild, C(k, function (a, k) {\n          0 === k && (a.setAttribute(\"x\", v.getAttribute(\"x\")), k = v.getAttribute(\"y\"), a.setAttribute(\"y\", k || 0), null === k && v.setAttribute(\"y\", 0));a = a.cloneNode(1);r(a, { \"class\": \"highcharts-text-outline\", fill: e, stroke: e, \"stroke-width\": b, \"stroke-linejoin\": \"round\" });v.insertBefore(a, c);\n        }));\n      }, attr: function attr(a, k, e, b) {\n        var v,\n            c = this.element,\n            h,\n            x = this,\n            M;\"string\" === typeof a && void 0 !== k && (v = a, a = {}, a[v] = k);if (\"string\" === typeof a) x = (this[a + \"Getter\"] || this._defaultGetter).call(this, a, c);else {\n          for (v in a) {\n            k = a[v], M = !1, b || D(this, v), this.symbolName && /^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(v) && (h || (this.symbolAttr(a), h = !0), M = !0), !this.rotation || \"x\" !== v && \"y\" !== v || (this.doTransform = !0), M || (M = this[v + \"Setter\"] || this._defaultSetter, M.call(this, k, v, c), this.shadows && /^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(v) && this.updateShadows(v, k, M));\n          }this.doTransform && (this.updateTransform(), this.doTransform = !1);\n        }e && e();return x;\n      }, updateShadows: function updateShadows(a, k, e) {\n        for (var v = this.shadows, b = v.length; b--;) {\n          e.call(v[b], \"height\" === a ? Math.max(k - (v[b].cutHeight || 0), 0) : \"d\" === a ? this.d : k, a, v[b]);\n        }\n      }, addClass: function addClass(a, k) {\n        var v = this.attr(\"class\") || \"\";-1 === v.indexOf(a) && (k || (a = (v + (v ? \" \" : \"\") + a).replace(\"  \", \" \")), this.attr(\"class\", a));return this;\n      }, hasClass: function hasClass(a) {\n        return -1 !== r(this.element, \"class\").indexOf(a);\n      }, removeClass: function removeClass(a) {\n        r(this.element, \"class\", (r(this.element, \"class\") || \"\").replace(a, \"\"));return this;\n      }, symbolAttr: function symbolAttr(a) {\n        var v = this;C(\"x y r start end width height innerR anchorX anchorY\".split(\" \"), function (k) {\n          v[k] = K(a[k], v[k]);\n        });v.attr({ d: v.renderer.symbols[v.symbolName](v.x, v.y, v.width, v.height, v) });\n      }, clip: function clip(a) {\n        return this.attr(\"clip-path\", a ? \"url(\" + this.renderer.url + \"#\" + a.id + \")\" : \"none\");\n      }, crisp: function crisp(a, k) {\n        var v,\n            e = {},\n            b;k = k || a.strokeWidth || 0;b = Math.round(k) % 2 / 2;a.x = Math.floor(a.x || this.x || 0) + b;a.y = Math.floor(a.y || this.y || 0) + b;a.width = Math.floor((a.width || this.width || 0) - 2 * b);a.height = Math.floor((a.height || this.height || 0) - 2 * b);q(a.strokeWidth) && (a.strokeWidth = k);for (v in a) {\n          this[v] !== a[v] && (this[v] = e[v] = a[v]);\n        }return e;\n      }, css: function css(a) {\n        var v = this.styles,\n            k = {},\n            e = this.element,\n            b,\n            c,\n            h = \"\";b = !v;var D = [\"textOverflow\", \"width\"];a && a.color && (a.fill = a.color);if (v) for (c in a) {\n          a[c] !== v[c] && (k[c] = a[c], b = !0);\n        }if (b) {\n          b = this.textWidth = a && a.width && \"text\" === e.nodeName.toLowerCase() && I(a.width) || this.textWidth;v && (a = t(v, k));this.styles = a;b && !P && this.renderer.forExport && delete a.width;if (x && !P) u(this.element, a);else {\n            v = function v(a, _v) {\n              return \"-\" + _v.toLowerCase();\n            };for (c in a) {\n              -1 === E(c, D) && (h += c.replace(/([A-Z])/g, v) + \":\" + a[c] + \";\");\n            }h && r(e, \"style\", h);\n          }this.added && (b && this.renderer.buildText(this), a && a.textOutline && this.applyTextOutline(a.textOutline));\n        }return this;\n      }, strokeWidth: function strokeWidth() {\n        return this[\"stroke-width\"] || 0;\n      }, on: function on(a, k) {\n        var v = this,\n            e = v.element;n && \"click\" === a ? (e.ontouchstart = function (a) {\n          v.touchEventFired = Date.now();a.preventDefault();k.call(e, a);\n        }, e.onclick = function (a) {\n          (-1 === O.navigator.userAgent.indexOf(\"Android\") || 1100 < Date.now() - (v.touchEventFired || 0)) && k.call(e, a);\n        }) : e[\"on\" + a] = k;return this;\n      }, setRadialReference: function setRadialReference(a) {\n        var v = this.renderer.gradients[this.element.gradient];this.element.radialReference = a;v && v.radAttr && v.animate(this.renderer.getRadialAttr(a, v.radAttr));return this;\n      }, translate: function translate(a, k) {\n        return this.attr({ translateX: a, translateY: k });\n      }, invert: function invert(a) {\n        this.inverted = a;this.updateTransform();return this;\n      }, updateTransform: function updateTransform() {\n        var a = this.translateX || 0,\n            k = this.translateY || 0,\n            e = this.scaleX,\n            b = this.scaleY,\n            c = this.inverted,\n            h = this.rotation,\n            D = this.element;c && (a += this.width, k += this.height);a = [\"translate(\" + a + \",\" + k + \")\"];c ? a.push(\"rotate(90) scale(-1,1)\") : h && a.push(\"rotate(\" + h + \" \" + (D.getAttribute(\"x\") || 0) + \" \" + (D.getAttribute(\"y\") || 0) + \")\");(q(e) || q(b)) && a.push(\"scale(\" + K(e, 1) + \" \" + K(b, 1) + \")\");a.length && D.setAttribute(\"transform\", a.join(\" \"));\n      }, toFront: function toFront() {\n        var a = this.element;a.parentNode.appendChild(a);return this;\n      }, align: function align(a, k, e) {\n        var v,\n            b,\n            c,\n            h,\n            D = {};b = this.renderer;c = b.alignedObjects;var x, y;if (a) {\n          if (this.alignOptions = a, this.alignByTranslate = k, !e || w(e)) this.alignTo = v = e || \"renderer\", m(c, this), c.push(this), e = null;\n        } else a = this.alignOptions, k = this.alignByTranslate, v = this.alignTo;e = K(e, b[v], b);v = a.align;b = a.verticalAlign;c = (e.x || 0) + (a.x || 0);h = (e.y || 0) + (a.y || 0);\"right\" === v ? x = 1 : \"center\" === v && (x = 2);x && (c += (e.width - (a.width || 0)) / x);D[k ? \"translateX\" : \"x\"] = Math.round(c);\"bottom\" === b ? y = 1 : \"middle\" === b && (y = 2);y && (h += (e.height - (a.height || 0)) / y);D[k ? \"translateY\" : \"y\"] = Math.round(h);this[this.placed ? \"animate\" : \"attr\"](D);this.placed = !0;this.alignAttr = D;return this;\n      }, getBBox: function getBBox(a, k) {\n        var v,\n            e = this.renderer,\n            b,\n            c = this.element,\n            h = this.styles,\n            D,\n            x = this.textStr,\n            m,\n            y = e.cache,\n            n = e.cacheKeys,\n            F;k = K(k, this.rotation);b = k * d;D = h && h.fontSize;void 0 !== x && (F = x.toString(), -1 === F.indexOf(\"\\x3c\") && (F = F.replace(/[0-9]/g, \"0\")), F += [\"\", k || 0, D, h && h.width, h && h.textOverflow].join());F && !a && (v = y[F]);if (!v) {\n          if (c.namespaceURI === this.SVG_NS || e.forExport) {\n            try {\n              (m = this.fakeTS && function (a) {\n                C(c.querySelectorAll(\".highcharts-text-outline\"), function (v) {\n                  v.style.display = a;\n                });\n              }) && m(\"none\"), v = c.getBBox ? t({}, c.getBBox()) : { width: c.offsetWidth, height: c.offsetHeight }, m && m(\"\");\n            } catch (W) {}if (!v || 0 > v.width) v = { width: 0, height: 0 };\n          } else v = this.htmlGetBBox();e.isSVG && (a = v.width, e = v.height, h && \"11px\" === h.fontSize && 17 === Math.round(e) && (v.height = e = 14), k && (v.width = Math.abs(e * Math.sin(b)) + Math.abs(a * Math.cos(b)), v.height = Math.abs(e * Math.cos(b)) + Math.abs(a * Math.sin(b))));if (F && 0 < v.height) {\n            for (; 250 < n.length;) {\n              delete y[n.shift()];\n            }y[F] || n.push(F);y[F] = v;\n          }\n        }return v;\n      }, show: function show(a) {\n        return this.attr({ visibility: a ? \"inherit\" : \"visible\" });\n      }, hide: function hide() {\n        return this.attr({ visibility: \"hidden\" });\n      },\n      fadeOut: function fadeOut(a) {\n        var v = this;v.animate({ opacity: 0 }, { duration: a || 150, complete: function complete() {\n            v.attr({ y: -9999 });\n          } });\n      }, add: function add(a) {\n        var v = this.renderer,\n            k = this.element,\n            e;a && (this.parentGroup = a);this.parentInverted = a && a.inverted;void 0 !== this.textStr && v.buildText(this);this.added = !0;if (!a || a.handleZ || this.zIndex) e = this.zIndexSetter();e || (a ? a.element : v.box).appendChild(k);if (this.onAdd) this.onAdd();return this;\n      }, safeRemoveChild: function safeRemoveChild(a) {\n        var v = a.parentNode;v && v.removeChild(a);\n      }, destroy: function destroy() {\n        var a = this.element || {},\n            k = this.renderer.isSVG && \"SPAN\" === a.nodeName && this.parentGroup,\n            e,\n            b;a.onclick = a.onmouseout = a.onmouseover = a.onmousemove = a.point = null;D(this);this.clipPath && (this.clipPath = this.clipPath.destroy());if (this.stops) {\n          for (b = 0; b < this.stops.length; b++) {\n            this.stops[b] = this.stops[b].destroy();\n          }this.stops = null;\n        }this.safeRemoveChild(a);for (this.destroyShadows(); k && k.div && 0 === k.div.childNodes.length;) {\n          a = k.parentGroup, this.safeRemoveChild(k.div), delete k.div, k = a;\n        }this.alignTo && m(this.renderer.alignedObjects, this);for (e in this) {\n          delete this[e];\n        }return null;\n      }, shadow: function shadow(a, k, e) {\n        var v = [],\n            b,\n            c,\n            h = this.element,\n            D,\n            x,\n            m,\n            y;if (!a) this.destroyShadows();else if (!this.shadows) {\n          x = K(a.width, 3);m = (a.opacity || .15) / x;y = this.parentInverted ? \"(-1,-1)\" : \"(\" + K(a.offsetX, 1) + \", \" + K(a.offsetY, 1) + \")\";for (b = 1; b <= x; b++) {\n            c = h.cloneNode(0), D = 2 * x + 1 - 2 * b, r(c, { isShadow: \"true\", stroke: a.color || \"#000000\", \"stroke-opacity\": m * b, \"stroke-width\": D, transform: \"translate\" + y, fill: \"none\" }), e && (r(c, \"height\", Math.max(r(c, \"height\") - D, 0)), c.cutHeight = D), k ? k.element.appendChild(c) : h.parentNode.insertBefore(c, h), v.push(c);\n          }this.shadows = v;\n        }return this;\n      }, destroyShadows: function destroyShadows() {\n        C(this.shadows || [], function (a) {\n          this.safeRemoveChild(a);\n        }, this);this.shadows = void 0;\n      }, xGetter: function xGetter(a) {\n        \"circle\" === this.element.nodeName && (\"x\" === a ? a = \"cx\" : \"y\" === a && (a = \"cy\"));return this._defaultGetter(a);\n      }, _defaultGetter: function _defaultGetter(a) {\n        a = K(this[a], this.element ? this.element.getAttribute(a) : null, 0);/^[\\-0-9\\.]+$/.test(a) && (a = parseFloat(a));return a;\n      }, dSetter: function dSetter(a, k, e) {\n        a && a.join && (a = a.join(\" \"));/(NaN| {2}|^$)/.test(a) && (a = \"M 0 0\");e.setAttribute(k, a);this[k] = a;\n      }, dashstyleSetter: function dashstyleSetter(a) {\n        var v,\n            k = this[\"stroke-width\"];\"inherit\" === k && (k = 1);if (a = a && a.toLowerCase()) {\n          a = a.replace(\"shortdashdotdot\", \"3,1,1,1,1,1,\").replace(\"shortdashdot\", \"3,1,1,1\").replace(\"shortdot\", \"1,1,\").replace(\"shortdash\", \"3,1,\").replace(\"longdash\", \"8,3,\").replace(/dot/g, \"1,3,\").replace(\"dash\", \"4,3,\").replace(/,$/, \"\").split(\",\");for (v = a.length; v--;) {\n            a[v] = I(a[v]) * k;\n          }a = a.join(\",\").replace(/NaN/g, \"none\");this.element.setAttribute(\"stroke-dasharray\", a);\n        }\n      }, alignSetter: function alignSetter(a) {\n        this.element.setAttribute(\"text-anchor\", { left: \"start\", center: \"middle\", right: \"end\" }[a]);\n      }, opacitySetter: function opacitySetter(a, k, e) {\n        this[k] = a;e.setAttribute(k, a);\n      }, titleSetter: function titleSetter(a) {\n        var v = this.element.getElementsByTagName(\"title\")[0];v || (v = p.createElementNS(this.SVG_NS, \"title\"), this.element.appendChild(v));v.firstChild && v.removeChild(v.firstChild);v.appendChild(p.createTextNode(String(K(a), \"\").replace(/<[^>]*>/g, \"\")));\n      }, textSetter: function textSetter(a) {\n        a !== this.textStr && (delete this.bBox, this.textStr = a, this.added && this.renderer.buildText(this));\n      }, fillSetter: function fillSetter(a, k, e) {\n        \"string\" === typeof a ? e.setAttribute(k, a) : a && this.colorGradient(a, k, e);\n      }, visibilitySetter: function visibilitySetter(a, k, e) {\n        \"inherit\" === a ? e.removeAttribute(k) : e.setAttribute(k, a);\n      }, zIndexSetter: function zIndexSetter(a, k) {\n        var v = this.renderer,\n            e = this.parentGroup,\n            b = (e || v).element || v.box,\n            c,\n            h = this.element,\n            D;c = this.added;var x;q(a) && (h.zIndex = a, a = +a, this[k] === a && (c = !1), this[k] = a);if (c) {\n          (a = this.zIndex) && e && (e.handleZ = !0);k = b.childNodes;for (x = 0; x < k.length && !D; x++) {\n            e = k[x], c = e.zIndex, e !== h && (I(c) > a || !q(a) && q(c) || 0 > a && !q(c) && b !== v.box) && (b.insertBefore(h, e), D = !0);\n          }D || b.appendChild(h);\n        }return D;\n      }, _defaultSetter: function _defaultSetter(a, k, e) {\n        e.setAttribute(k, a);\n      } };B.prototype.yGetter = B.prototype.xGetter;B.prototype.translateXSetter = B.prototype.translateYSetter = B.prototype.rotationSetter = B.prototype.verticalAlignSetter = B.prototype.scaleXSetter = B.prototype.scaleYSetter = function (a, k) {\n      this[k] = a;this.doTransform = !0;\n    };B.prototype[\"stroke-widthSetter\"] = B.prototype.strokeSetter = function (a, k, e) {\n      this[k] = a;this.stroke && this[\"stroke-width\"] ? (B.prototype.fillSetter.call(this, this.stroke, \"stroke\", e), e.setAttribute(\"stroke-width\", this[\"stroke-width\"]), this.hasStroke = !0) : \"stroke-width\" === k && 0 === a && this.hasStroke && (e.removeAttribute(\"stroke\"), this.hasStroke = !1);\n    };A = a.SVGRenderer = function () {\n      this.init.apply(this, arguments);\n    };A.prototype = { Element: B, SVG_NS: N, init: function init(a, k, b, c, D, x) {\n        var v;c = this.createElement(\"svg\").attr({ version: \"1.1\", \"class\": \"highcharts-root\" }).css(this.getStyle(c));v = c.element;\n        a.appendChild(v);-1 === a.innerHTML.indexOf(\"xmlns\") && r(v, \"xmlns\", this.SVG_NS);this.isSVG = !0;this.box = v;this.boxWrapper = c;this.alignedObjects = [];this.url = (e || h) && p.getElementsByTagName(\"base\").length ? O.location.href.replace(/#.*?$/, \"\").replace(/<[^>]*>/g, \"\").replace(/([\\('\\)])/g, \"\\\\$1\").replace(/ /g, \"%20\") : \"\";this.createElement(\"desc\").add().element.appendChild(p.createTextNode(\"Created with Highcharts 5.0.7\"));this.defs = this.createElement(\"defs\").add();this.allowHTML = x;this.forExport = D;this.gradients = {};this.cache = {};this.cacheKeys = [];this.imgCount = 0;this.setSize(k, b, !1);var m;e && a.getBoundingClientRect && (k = function k() {\n          u(a, { left: 0, top: 0 });m = a.getBoundingClientRect();u(a, { left: Math.ceil(m.left) - m.left + \"px\", top: Math.ceil(m.top) - m.top + \"px\" });\n        }, k(), this.unSubPixelFix = H(O, \"resize\", k));\n      }, getStyle: function getStyle(a) {\n        return this.style = t({ fontFamily: '\"Lucida Grande\", \"Lucida Sans Unicode\", Arial, Helvetica, sans-serif', fontSize: \"12px\" }, a);\n      }, setStyle: function setStyle(a) {\n        this.boxWrapper.css(this.getStyle(a));\n      }, isHidden: function isHidden() {\n        return !this.boxWrapper.getBBox().width;\n      },\n      destroy: function destroy() {\n        var a = this.defs;this.box = null;this.boxWrapper = this.boxWrapper.destroy();b(this.gradients || {});this.gradients = null;a && (this.defs = a.destroy());this.unSubPixelFix && this.unSubPixelFix();return this.alignedObjects = null;\n      }, createElement: function createElement(a) {\n        var k = new this.Element();k.init(this, a);return k;\n      }, draw: J, getRadialAttr: function getRadialAttr(a, k) {\n        return { cx: a[0] - a[2] / 2 + k.cx * a[2], cy: a[1] - a[2] / 2 + k.cy * a[2], r: k.r * a[2] };\n      }, buildText: function buildText(a) {\n        var k = a.element,\n            v = this,\n            e = v.forExport,\n            b = K(a.textStr, \"\").toString(),\n            h = -1 !== b.indexOf(\"\\x3c\"),\n            D = k.childNodes,\n            x,\n            m,\n            y,\n            n,\n            F = r(k, \"x\"),\n            d = a.styles,\n            t = a.textWidth,\n            w = d && d.lineHeight,\n            l = d && d.textOutline,\n            z = d && \"ellipsis\" === d.textOverflow,\n            f = d && \"nowrap\" === d.whiteSpace,\n            E = d && d.fontSize,\n            q,\n            g = D.length,\n            d = t && !a.added && this.box,\n            J = function J(a) {\n          var e;e = /(px|em)$/.test(a && a.style.fontSize) ? a.style.fontSize : E || v.style.fontSize || 12;return w ? I(w) : v.fontMetrics(e, a.getAttribute(\"style\") ? a : k).h;\n        };q = [b, z, f, w, l, E, t].join();if (q !== a.textCache) {\n          for (a.textCache = q; g--;) {\n            k.removeChild(D[g]);\n          }h || l || z || t || -1 !== b.indexOf(\" \") ? (x = /<.*class=\"([^\"]+)\".*>/, m = /<.*style=\"([^\"]+)\".*>/, y = /<.*href=\"(http[^\"]+)\".*>/, d && d.appendChild(k), b = h ? b.replace(/<(b|strong)>/g, '\\x3cspan style\\x3d\"font-weight:bold\"\\x3e').replace(/<(i|em)>/g, '\\x3cspan style\\x3d\"font-style:italic\"\\x3e').replace(/<a/g, \"\\x3cspan\").replace(/<\\/(b|strong|i|em|a)>/g, \"\\x3c/span\\x3e\").split(/<br.*?>/g) : [b], b = c(b, function (a) {\n            return \"\" !== a;\n          }), C(b, function (b, c) {\n            var h,\n                D = 0;b = b.replace(/^\\s+|\\s+$/g, \"\").replace(/<span/g, \"|||\\x3cspan\").replace(/<\\/span>/g, \"\\x3c/span\\x3e|||\");\n            h = b.split(\"|||\");C(h, function (b) {\n              if (\"\" !== b || 1 === h.length) {\n                var d = {},\n                    w = p.createElementNS(v.SVG_NS, \"tspan\"),\n                    l,\n                    E;x.test(b) && (l = b.match(x)[1], r(w, \"class\", l));m.test(b) && (E = b.match(m)[1].replace(/(;| |^)color([ :])/, \"$1fill$2\"), r(w, \"style\", E));y.test(b) && !e && (r(w, \"onclick\", 'location.href\\x3d\"' + b.match(y)[1] + '\"'), u(w, { cursor: \"pointer\" }));b = (b.replace(/<(.|\\n)*?>/g, \"\") || \" \").replace(/&lt;/g, \"\\x3c\").replace(/&gt;/g, \"\\x3e\");if (\" \" !== b) {\n                  w.appendChild(p.createTextNode(b));D ? d.dx = 0 : c && null !== F && (d.x = F);r(w, d);\n                  k.appendChild(w);!D && c && (!P && e && u(w, { display: \"block\" }), r(w, \"dy\", J(w)));if (t) {\n                    d = b.replace(/([^\\^])-/g, \"$1- \").split(\" \");l = 1 < h.length || c || 1 < d.length && !f;for (var q, g, M = [], C = J(w), K = a.rotation, I = b, Q = I.length; (l || z) && (d.length || M.length);) {\n                      a.rotation = 0, q = a.getBBox(!0), g = q.width, !P && v.forExport && (g = v.measureSpanWidth(w.firstChild.data, a.styles)), q = g > t, void 0 === n && (n = q), z && n ? (Q /= 2, \"\" === I || !q && .5 > Q ? d = [] : (I = b.substring(0, I.length + (q ? -1 : 1) * Math.ceil(Q)), d = [I + (3 < t ? \"\\u2026\" : \"\")], w.removeChild(w.firstChild))) : q && 1 !== d.length ? (w.removeChild(w.firstChild), M.unshift(d.pop())) : (d = M, M = [], d.length && !f && (w = p.createElementNS(N, \"tspan\"), r(w, { dy: C, x: F }), E && r(w, \"style\", E), k.appendChild(w)), g > t && (t = g)), d.length && w.appendChild(p.createTextNode(d.join(\" \").replace(/- /g, \"-\")));\n                    }a.rotation = K;\n                  }D++;\n                }\n              }\n            });\n          }), n && a.attr(\"title\", a.textStr), d && d.removeChild(k), l && a.applyTextOutline && a.applyTextOutline(l)) : k.appendChild(p.createTextNode(b.replace(/&lt;/g, \"\\x3c\").replace(/&gt;/g, \"\\x3e\")));\n        }\n      }, getContrast: function getContrast(a) {\n        a = f(a).rgba;return 510 < a[0] + a[1] + a[2] ? \"#000000\" : \"#FFFFFF\";\n      }, button: function button(a, k, e, b, c, h, D, m, d) {\n        var v = this.label(a, k, e, d, null, null, null, null, \"button\"),\n            n = 0;v.attr(y({ padding: 8, r: 2 }, c));var F, w, p, l;c = y({ fill: \"#f7f7f7\", stroke: \"#cccccc\", \"stroke-width\": 1, style: { color: \"#333333\", cursor: \"pointer\", fontWeight: \"normal\" } }, c);F = c.style;delete c.style;h = y(c, { fill: \"#e6e6e6\" }, h);w = h.style;delete h.style;D = y(c, { fill: \"#e6ebf5\", style: { color: \"#000000\", fontWeight: \"bold\" } }, D);p = D.style;delete D.style;m = y(c, { style: { color: \"#cccccc\" } }, m);l = m.style;\n        delete m.style;H(v.element, x ? \"mouseover\" : \"mouseenter\", function () {\n          3 !== n && v.setState(1);\n        });H(v.element, x ? \"mouseout\" : \"mouseleave\", function () {\n          3 !== n && v.setState(n);\n        });v.setState = function (a) {\n          1 !== a && (v.state = n = a);v.removeClass(/highcharts-button-(normal|hover|pressed|disabled)/).addClass(\"highcharts-button-\" + [\"normal\", \"hover\", \"pressed\", \"disabled\"][a || 0]);v.attr([c, h, D, m][a || 0]).css([F, w, p, l][a || 0]);\n        };v.attr(c).css(t({ cursor: \"default\" }, F));return v.on(\"click\", function (a) {\n          3 !== n && b.call(v, a);\n        });\n      }, crispLine: function crispLine(a, k) {\n        a[1] === a[4] && (a[1] = a[4] = Math.round(a[1]) - k % 2 / 2);a[2] === a[5] && (a[2] = a[5] = Math.round(a[2]) + k % 2 / 2);return a;\n      }, path: function path(a) {\n        var k = { fill: \"none\" };z(a) ? k.d = a : F(a) && t(k, a);return this.createElement(\"path\").attr(k);\n      }, circle: function circle(a, k, e) {\n        a = F(a) ? a : { x: a, y: k, r: e };k = this.createElement(\"circle\");k.xSetter = k.ySetter = function (a, k, e) {\n          e.setAttribute(\"c\" + k, a);\n        };return k.attr(a);\n      }, arc: function arc(a, k, e, b, c, h) {\n        F(a) && (k = a.y, e = a.r, b = a.innerR, c = a.start, h = a.end, a = a.x);a = this.symbol(\"arc\", a || 0, k || 0, e || 0, e || 0, { innerR: b || 0, start: c || 0, end: h || 0 });a.r = e;return a;\n      }, rect: function rect(a, k, e, b, c, h) {\n        c = F(a) ? a.r : c;var v = this.createElement(\"rect\");a = F(a) ? a : void 0 === a ? {} : { x: a, y: k, width: Math.max(e, 0), height: Math.max(b, 0) };void 0 !== h && (a.strokeWidth = h, a = v.crisp(a));a.fill = \"none\";c && (a.r = c);v.rSetter = function (a, k, e) {\n          r(e, { rx: a, ry: a });\n        };return v.attr(a);\n      }, setSize: function setSize(a, k, e) {\n        var b = this.alignedObjects,\n            v = b.length;this.width = a;this.height = k;for (this.boxWrapper.animate({ width: a, height: k }, { step: function step() {\n            this.attr({ viewBox: \"0 0 \" + this.attr(\"width\") + \" \" + this.attr(\"height\") });\n          }, duration: K(e, !0) ? void 0 : 0 }); v--;) {\n          b[v].align();\n        }\n      }, g: function g(a) {\n        var k = this.createElement(\"g\");return a ? k.attr({ \"class\": \"highcharts-\" + a }) : k;\n      }, image: function image(a, k, e, b, c) {\n        var v = { preserveAspectRatio: \"none\" };1 < arguments.length && t(v, { x: k, y: e, width: b, height: c });v = this.createElement(\"image\").attr(v);v.element.setAttributeNS ? v.element.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", a) : v.element.setAttribute(\"hc-svg-href\", a);return v;\n      }, symbol: function symbol(a, k, e, b, c, h) {\n        var v = this,\n            D,\n            x = this.symbols[a],\n            m = q(k) && x && this.symbols[a](Math.round(k), Math.round(e), b, c, h),\n            y = /^url\\((.*?)\\)$/,\n            d,\n            n;x ? (D = this.path(m), D.attr(\"fill\", \"none\"), t(D, { symbolName: a, x: k, y: e, width: b, height: c }), h && t(D, h)) : y.test(a) && (d = a.match(y)[1], D = this.image(d), D.imgwidth = K(S[d] && S[d].width, h && h.width), D.imgheight = K(S[d] && S[d].height, h && h.height), n = function n() {\n          D.attr({ width: D.width, height: D.height });\n        }, C([\"width\", \"height\"], function (a) {\n          D[a + \"Setter\"] = function (a, k) {\n            var e = {},\n                b = this[\"img\" + k],\n                v = \"width\" === k ? \"translateX\" : \"translateY\";this[k] = a;\n            q(b) && (this.element && this.element.setAttribute(k, b), this.alignByTranslate || (e[v] = ((this[k] || 0) - b) / 2, this.attr(e)));\n          };\n        }), q(k) && D.attr({ x: k, y: e }), D.isImg = !0, q(D.imgwidth) && q(D.imgheight) ? n() : (D.attr({ width: 0, height: 0 }), l(\"img\", { onload: function onload() {\n            var a = g[v.chartIndex];0 === this.width && (u(this, { position: \"absolute\", top: \"-999em\" }), p.body.appendChild(this));S[d] = { width: this.width, height: this.height };D.imgwidth = this.width;D.imgheight = this.height;D.element && n();this.parentNode && this.parentNode.removeChild(this);\n            v.imgCount--;if (!v.imgCount && a && a.onload) a.onload();\n          }, src: d }), this.imgCount++));return D;\n      }, symbols: { circle: function circle(a, k, e, b) {\n          return this.arc(a + e / 2, k + b / 2, e / 2, b / 2, { start: 0, end: 2 * Math.PI, open: !1 });\n        }, square: function square(a, k, e, b) {\n          return [\"M\", a, k, \"L\", a + e, k, a + e, k + b, a, k + b, \"Z\"];\n        }, triangle: function triangle(a, k, e, b) {\n          return [\"M\", a + e / 2, k, \"L\", a + e, k + b, a, k + b, \"Z\"];\n        }, \"triangle-down\": function triangleDown(a, k, e, b) {\n          return [\"M\", a, k, \"L\", a + e, k, a + e / 2, k + b, \"Z\"];\n        }, diamond: function diamond(a, k, e, b) {\n          return [\"M\", a + e / 2, k, \"L\", a + e, k + b / 2, a + e / 2, k + b, a, k + b / 2, \"Z\"];\n        }, arc: function arc(a, k, e, b, c) {\n          var v = c.start,\n              h = c.r || e,\n              D = c.r || b || e,\n              x = c.end - .001;e = c.innerR;b = c.open;var m = Math.cos(v),\n              d = Math.sin(v),\n              y = Math.cos(x),\n              x = Math.sin(x);c = c.end - v < Math.PI ? 0 : 1;h = [\"M\", a + h * m, k + D * d, \"A\", h, D, 0, c, 1, a + h * y, k + D * x];q(e) && h.push(b ? \"M\" : \"L\", a + e * y, k + e * x, \"A\", e, e, 0, c, 0, a + e * m, k + e * d);h.push(b ? \"\" : \"Z\");return h;\n        }, callout: function callout(a, k, e, b, c) {\n          var h = Math.min(c && c.r || 0, e, b),\n              D = h + 6,\n              v = c && c.anchorX;c = c && c.anchorY;var x;x = [\"M\", a + h, k, \"L\", a + e - h, k, \"C\", a + e, k, a + e, k, a + e, k + h, \"L\", a + e, k + b - h, \"C\", a + e, k + b, a + e, k + b, a + e - h, k + b, \"L\", a + h, k + b, \"C\", a, k + b, a, k + b, a, k + b - h, \"L\", a, k + h, \"C\", a, k, a, k, a + h, k];v && v > e ? c > k + D && c < k + b - D ? x.splice(13, 3, \"L\", a + e, c - 6, a + e + 6, c, a + e, c + 6, a + e, k + b - h) : x.splice(13, 3, \"L\", a + e, b / 2, v, c, a + e, b / 2, a + e, k + b - h) : v && 0 > v ? c > k + D && c < k + b - D ? x.splice(33, 3, \"L\", a, c + 6, a - 6, c, a, c - 6, a, k + h) : x.splice(33, 3, \"L\", a, b / 2, v, c, a, b / 2, a, k + h) : c && c > b && v > a + D && v < a + e - D ? x.splice(23, 3, \"L\", v + 6, k + b, v, k + b + 6, v - 6, k + b, a + h, k + b) : c && 0 > c && v > a + D && v < a + e - D && x.splice(3, 3, \"L\", v - 6, k, v, k - 6, v + 6, k, e - h, k);return x;\n        } }, clipRect: function clipRect(k, e, b, c) {\n        var h = a.uniqueKey(),\n            D = this.createElement(\"clipPath\").attr({ id: h }).add(this.defs);\n        k = this.rect(k, e, b, c, 0).add(D);k.id = h;k.clipPath = D;k.count = 0;return k;\n      }, text: function text(a, k, e, b) {\n        var c = !P && this.forExport,\n            h = {};if (b && (this.allowHTML || !this.forExport)) return this.html(a, k, e);h.x = Math.round(k || 0);e && (h.y = Math.round(e));if (a || 0 === a) h.text = a;a = this.createElement(\"text\").attr(h);c && a.css({ position: \"absolute\" });b || (a.xSetter = function (a, k, e) {\n          var b = e.getElementsByTagName(\"tspan\"),\n              c,\n              h = e.getAttribute(k),\n              D;for (D = 0; D < b.length; D++) {\n            c = b[D], c.getAttribute(k) === h && c.setAttribute(k, a);\n          }e.setAttribute(k, a);\n        });return a;\n      }, fontMetrics: function fontMetrics(a, k) {\n        a = a || k && k.style && k.style.fontSize || this.style && this.style.fontSize;a = /px/.test(a) ? I(a) : /em/.test(a) ? parseFloat(a) * (k ? this.fontMetrics(null, k.parentNode).f : 16) : 12;k = 24 > a ? a + 3 : Math.round(1.2 * a);return { h: k, b: Math.round(.8 * k), f: a };\n      }, rotCorr: function rotCorr(a, k, e) {\n        var b = a;k && e && (b = Math.max(b * Math.cos(k * d), 4));return { x: -a / 3 * Math.sin(k * d), y: b };\n      }, label: function label(a, e, b, c, h, D, x, m, d) {\n        var v = this,\n            n = v.g(\"button\" !== d && \"label\"),\n            F = n.text = v.text(\"\", 0, 0, x).attr({ zIndex: 1 }),\n            w,\n            p,\n            l = 0,\n            z = 3,\n            E = 0,\n            f,\n            g,\n            J,\n            K,\n            P,\n            N = {},\n            I,\n            u,\n            r = /^url\\((.*?)\\)$/.test(c),\n            M = r,\n            S,\n            Q,\n            R,\n            O;d && n.addClass(\"highcharts-\" + d);M = r;S = function S() {\n          return (I || 0) % 2 / 2;\n        };Q = function Q() {\n          var a = F.element.style,\n              k = {};p = (void 0 === f || void 0 === g || P) && q(F.textStr) && F.getBBox();n.width = (f || p.width || 0) + 2 * z + E;n.height = (g || p.height || 0) + 2 * z;u = z + v.fontMetrics(a && a.fontSize, F).b;M && (w || (n.box = w = v.symbols[c] || r ? v.symbol(c) : v.rect(), w.addClass((\"button\" === d ? \"\" : \"highcharts-label-box\") + (d ? \" highcharts-\" + d + \"-box\" : \"\")), w.add(n), a = S(), k.x = a, k.y = (m ? -u : 0) + a), k.width = Math.round(n.width), k.height = Math.round(n.height), w.attr(t(k, N)), N = {});\n        };R = function R() {\n          var a = E + z,\n              k;k = m ? 0 : u;q(f) && p && (\"center\" === P || \"right\" === P) && (a += { center: .5, right: 1 }[P] * (f - p.width));if (a !== F.x || k !== F.y) F.attr(\"x\", a), void 0 !== k && F.attr(\"y\", k);F.x = a;F.y = k;\n        };O = function O(a, k) {\n          w ? w.attr(a, k) : N[a] = k;\n        };n.onAdd = function () {\n          F.add(n);n.attr({ text: a || 0 === a ? a : \"\", x: e, y: b });w && q(h) && n.attr({ anchorX: h, anchorY: D });\n        };n.widthSetter = function (a) {\n          f = a;\n        };n.heightSetter = function (a) {\n          g = a;\n        };n[\"text-alignSetter\"] = function (a) {\n          P = a;\n        };\n        n.paddingSetter = function (a) {\n          q(a) && a !== z && (z = n.padding = a, R());\n        };n.paddingLeftSetter = function (a) {\n          q(a) && a !== E && (E = a, R());\n        };n.alignSetter = function (a) {\n          a = { left: 0, center: .5, right: 1 }[a];a !== l && (l = a, p && n.attr({ x: J }));\n        };n.textSetter = function (a) {\n          void 0 !== a && F.textSetter(a);Q();R();\n        };n[\"stroke-widthSetter\"] = function (a, k) {\n          a && (M = !0);I = this[\"stroke-width\"] = a;O(k, a);\n        };n.strokeSetter = n.fillSetter = n.rSetter = function (a, k) {\n          \"fill\" === k && a && (M = !0);O(k, a);\n        };n.anchorXSetter = function (a, k) {\n          h = a;O(k, Math.round(a) - S() - J);\n        };n.anchorYSetter = function (a, k) {\n          D = a;O(k, a - K);\n        };n.xSetter = function (a) {\n          n.x = a;l && (a -= l * ((f || p.width) + 2 * z));J = Math.round(a);n.attr(\"translateX\", J);\n        };n.ySetter = function (a) {\n          K = n.y = Math.round(a);n.attr(\"translateY\", K);\n        };var V = n.css;return t(n, { css: function css(a) {\n            if (a) {\n              var k = {};a = y(a);C(n.textProps, function (e) {\n                void 0 !== a[e] && (k[e] = a[e], delete a[e]);\n              });F.css(k);\n            }return V.call(n, a);\n          }, getBBox: function getBBox() {\n            return { width: p.width + 2 * z, height: p.height + 2 * z, x: p.x - z, y: p.y - z };\n          }, shadow: function shadow(a) {\n            a && (Q(), w && w.shadow(a));return n;\n          }, destroy: function destroy() {\n            k(n.element, \"mouseenter\");k(n.element, \"mouseleave\");F && (F = F.destroy());w && (w = w.destroy());B.prototype.destroy.call(n);n = v = Q = R = O = null;\n          } });\n      } };a.Renderer = A;\n  })(L);(function (a) {\n    var B = a.attr,\n        A = a.createElement,\n        H = a.css,\n        G = a.defined,\n        r = a.each,\n        g = a.extend,\n        f = a.isFirefox,\n        u = a.isMS,\n        l = a.isWebKit,\n        q = a.pInt,\n        d = a.SVGRenderer,\n        b = a.win,\n        p = a.wrap;g(a.SVGElement.prototype, { htmlCss: function htmlCss(a) {\n        var b = this.element;if (b = a && \"SPAN\" === b.tagName && a.width) delete a.width, this.textWidth = b, this.updateTransform();a && \"ellipsis\" === a.textOverflow && (a.whiteSpace = \"nowrap\", a.overflow = \"hidden\");this.styles = g(this.styles, a);H(this.element, a);return this;\n      }, htmlGetBBox: function htmlGetBBox() {\n        var a = this.element;\"text\" === a.nodeName && (a.style.position = \"absolute\");return { x: a.offsetLeft, y: a.offsetTop, width: a.offsetWidth, height: a.offsetHeight };\n      }, htmlUpdateTransform: function htmlUpdateTransform() {\n        if (this.added) {\n          var a = this.renderer,\n              b = this.element,\n              m = this.translateX || 0,\n              c = this.translateY || 0,\n              n = this.x || 0,\n              d = this.y || 0,\n              p = this.textAlign || \"left\",\n              e = { left: 0, center: .5, right: 1 }[p],\n              x = this.styles;H(b, { marginLeft: m, marginTop: c });\n          this.shadows && r(this.shadows, function (a) {\n            H(a, { marginLeft: m + 1, marginTop: c + 1 });\n          });this.inverted && r(b.childNodes, function (e) {\n            a.invertChild(e, b);\n          });if (\"SPAN\" === b.tagName) {\n            var F = this.rotation,\n                w = q(this.textWidth),\n                h = x && x.whiteSpace,\n                y = [F, p, b.innerHTML, this.textWidth, this.textAlign].join();y !== this.cTT && (x = a.fontMetrics(b.style.fontSize).b, G(F) && this.setSpanRotation(F, e, x), H(b, { width: \"\", whiteSpace: h || \"nowrap\" }), b.offsetWidth > w && /[ \\-]/.test(b.textContent || b.innerText) && H(b, { width: w + \"px\", display: \"block\", whiteSpace: h || \"normal\" }), this.getSpanCorrection(b.offsetWidth, x, e, F, p));H(b, { left: n + (this.xCorr || 0) + \"px\", top: d + (this.yCorr || 0) + \"px\" });l && (x = b.offsetHeight);this.cTT = y;\n          }\n        } else this.alignOnAdd = !0;\n      }, setSpanRotation: function setSpanRotation(a, d, m) {\n        var c = {},\n            n = u ? \"-ms-transform\" : l ? \"-webkit-transform\" : f ? \"MozTransform\" : b.opera ? \"-o-transform\" : \"\";c[n] = c.transform = \"rotate(\" + a + \"deg)\";c[n + (f ? \"Origin\" : \"-origin\")] = c.transformOrigin = 100 * d + \"% \" + m + \"px\";H(this.element, c);\n      }, getSpanCorrection: function getSpanCorrection(a, b, m) {\n        this.xCorr = -a * m;this.yCorr = -b;\n      } });g(d.prototype, { html: function html(a, b, m) {\n        var c = this.createElement(\"span\"),\n            n = c.element,\n            d = c.renderer,\n            l = d.isSVG,\n            e = function e(a, _e) {\n          r([\"opacity\", \"visibility\"], function (b) {\n            p(a, b + \"Setter\", function (a, b, c, x) {\n              a.call(this, b, c, x);_e[c] = b;\n            });\n          });\n        };c.textSetter = function (a) {\n          a !== n.innerHTML && delete this.bBox;n.innerHTML = this.textStr = a;c.htmlUpdateTransform();\n        };l && e(c, c.element.style);c.xSetter = c.ySetter = c.alignSetter = c.rotationSetter = function (a, e) {\n          \"align\" === e && (e = \"textAlign\");c[e] = a;c.htmlUpdateTransform();\n        };c.attr({ text: a, x: Math.round(b),\n          y: Math.round(m) }).css({ fontFamily: this.style.fontFamily, fontSize: this.style.fontSize, position: \"absolute\" });n.style.whiteSpace = \"nowrap\";c.css = c.htmlCss;l && (c.add = function (a) {\n          var b,\n              x = d.box.parentNode,\n              h = [];if (this.parentGroup = a) {\n            if (b = a.div, !b) {\n              for (; a;) {\n                h.push(a), a = a.parentGroup;\n              }r(h.reverse(), function (a) {\n                var n,\n                    m = B(a.element, \"class\");m && (m = { className: m });b = a.div = a.div || A(\"div\", m, { position: \"absolute\", left: (a.translateX || 0) + \"px\", top: (a.translateY || 0) + \"px\", display: a.display, opacity: a.opacity, pointerEvents: a.styles && a.styles.pointerEvents }, b || x);n = b.style;g(a, { on: function on() {\n                    c.on.apply({ element: h[0].div }, arguments);return a;\n                  }, translateXSetter: function translateXSetter(e, k) {\n                    n.left = e + \"px\";a[k] = e;a.doTransform = !0;\n                  }, translateYSetter: function translateYSetter(e, k) {\n                    n.top = e + \"px\";a[k] = e;a.doTransform = !0;\n                  } });e(a, n);\n              });\n            }\n          } else b = x;b.appendChild(n);c.added = !0;c.alignOnAdd && c.htmlUpdateTransform();return c;\n        });return c;\n      } });\n  })(L);(function (a) {\n    var B,\n        A,\n        H = a.createElement,\n        G = a.css,\n        r = a.defined,\n        g = a.deg2rad,\n        f = a.discardElement,\n        u = a.doc,\n        l = a.each,\n        q = a.erase,\n        d = a.extend;B = a.extendClass;\n    var b = a.isArray,\n        p = a.isNumber,\n        C = a.isObject,\n        t = a.merge;A = a.noop;var m = a.pick,\n        c = a.pInt,\n        n = a.SVGElement,\n        E = a.SVGRenderer,\n        z = a.win;a.svg || (A = { docMode8: u && 8 === u.documentMode, init: function init(a, b) {\n        var e = [\"\\x3c\", b, ' filled\\x3d\"f\" stroked\\x3d\"f\"'],\n            c = [\"position: \", \"absolute\", \";\"],\n            h = \"div\" === b;(\"shape\" === b || h) && c.push(\"left:0;top:0;width:1px;height:1px;\");c.push(\"visibility: \", h ? \"hidden\" : \"visible\");e.push(' style\\x3d\"', c.join(\"\"), '\"/\\x3e');b && (e = h || \"span\" === b || \"img\" === b ? e.join(\"\") : a.prepVML(e), this.element = H(e));this.renderer = a;\n      }, add: function add(a) {\n        var e = this.renderer,\n            b = this.element,\n            c = e.box,\n            h = a && a.inverted,\n            c = a ? a.element || a : c;a && (this.parentGroup = a);h && e.invertChild(b, c);c.appendChild(b);this.added = !0;this.alignOnAdd && !this.deferUpdateTransform && this.updateTransform();if (this.onAdd) this.onAdd();this.className && this.attr(\"class\", this.className);return this;\n      }, updateTransform: n.prototype.htmlUpdateTransform, setSpanRotation: function setSpanRotation() {\n        var a = this.rotation,\n            b = Math.cos(a * g),\n            c = Math.sin(a * g);G(this.element, { filter: a ? [\"progid:DXImageTransform.Microsoft.Matrix(M11\\x3d\", b, \", M12\\x3d\", -c, \", M21\\x3d\", c, \", M22\\x3d\", b, \", sizingMethod\\x3d'auto expand')\"].join(\"\") : \"none\" });\n      }, getSpanCorrection: function getSpanCorrection(a, b, c, n, h) {\n        var e = n ? Math.cos(n * g) : 1,\n            x = n ? Math.sin(n * g) : 0,\n            d = m(this.elemHeight, this.element.offsetHeight),\n            F;this.xCorr = 0 > e && -a;this.yCorr = 0 > x && -d;F = 0 > e * x;this.xCorr += x * b * (F ? 1 - c : c);this.yCorr -= e * b * (n ? F ? c : 1 - c : 1);h && \"left\" !== h && (this.xCorr -= a * c * (0 > e ? -1 : 1), n && (this.yCorr -= d * c * (0 > x ? -1 : 1)), G(this.element, { textAlign: h }));\n      }, pathToVML: function pathToVML(a) {\n        for (var b = a.length, e = []; b--;) {\n          p(a[b]) ? e[b] = Math.round(10 * a[b]) - 5 : \"Z\" === a[b] ? e[b] = \"x\" : (e[b] = a[b], !a.isArc || \"wa\" !== a[b] && \"at\" !== a[b] || (e[b + 5] === e[b + 7] && (e[b + 7] += a[b + 7] > a[b + 5] ? 1 : -1), e[b + 6] === e[b + 8] && (e[b + 8] += a[b + 8] > a[b + 6] ? 1 : -1)));\n        }return e.join(\" \") || \"x\";\n      }, clip: function clip(a) {\n        var b = this,\n            e;a ? (e = a.members, q(e, b), e.push(b), b.destroyClip = function () {\n          q(e, b);\n        }, a = a.getCSS(b)) : (b.destroyClip && b.destroyClip(), a = { clip: b.docMode8 ? \"inherit\" : \"rect(auto)\" });return b.css(a);\n      }, css: n.prototype.htmlCss, safeRemoveChild: function safeRemoveChild(a) {\n        a.parentNode && f(a);\n      }, destroy: function destroy() {\n        this.destroyClip && this.destroyClip();return n.prototype.destroy.apply(this);\n      }, on: function on(a, b) {\n        this.element[\"on\" + a] = function () {\n          var a = z.event;a.target = a.srcElement;b(a);\n        };return this;\n      }, cutOffPath: function cutOffPath(a, b) {\n        var e;a = a.split(/[ ,]/);e = a.length;if (9 === e || 11 === e) a[e - 4] = a[e - 2] = c(a[e - 2]) - 10 * b;return a.join(\" \");\n      }, shadow: function shadow(a, b, n) {\n        var e = [],\n            h,\n            d = this.element,\n            x = this.renderer,\n            p,\n            F = d.style,\n            k,\n            D = d.path,\n            l,\n            t,\n            z,\n            f;D && \"string\" !== typeof D.value && (D = \"x\");t = D;if (a) {\n          z = m(a.width, 3);f = (a.opacity || .15) / z;for (h = 1; 3 >= h; h++) {\n            l = 2 * z + 1 - 2 * h, n && (t = this.cutOffPath(D.value, l + .5)), k = ['\\x3cshape isShadow\\x3d\"true\" strokeweight\\x3d\"', l, '\" filled\\x3d\"false\" path\\x3d\"', t, '\" coordsize\\x3d\"10 10\" style\\x3d\"', d.style.cssText, '\" /\\x3e'], p = H(x.prepVML(k), null, { left: c(F.left) + m(a.offsetX, 1), top: c(F.top) + m(a.offsetY, 1) }), n && (p.cutOff = l + 1), k = ['\\x3cstroke color\\x3d\"', a.color || \"#000000\", '\" opacity\\x3d\"', f * h, '\"/\\x3e'], H(x.prepVML(k), null, null, p), b ? b.element.appendChild(p) : d.parentNode.insertBefore(p, d), e.push(p);\n          }this.shadows = e;\n        }return this;\n      }, updateShadows: A,\n      setAttr: function setAttr(a, b) {\n        this.docMode8 ? this.element[a] = b : this.element.setAttribute(a, b);\n      }, classSetter: function classSetter(a) {\n        (this.added ? this.element : this).className = a;\n      }, dashstyleSetter: function dashstyleSetter(a, b, c) {\n        (c.getElementsByTagName(\"stroke\")[0] || H(this.renderer.prepVML([\"\\x3cstroke/\\x3e\"]), null, null, c))[b] = a || \"solid\";this[b] = a;\n      }, dSetter: function dSetter(a, b, c) {\n        var e = this.shadows;a = a || [];this.d = a.join && a.join(\" \");c.path = a = this.pathToVML(a);if (e) for (c = e.length; c--;) {\n          e[c].path = e[c].cutOff ? this.cutOffPath(a, e[c].cutOff) : a;\n        }this.setAttr(b, a);\n      }, fillSetter: function fillSetter(a, b, c) {\n        var e = c.nodeName;\"SPAN\" === e ? c.style.color = a : \"IMG\" !== e && (c.filled = \"none\" !== a, this.setAttr(\"fillcolor\", this.renderer.color(a, c, b, this)));\n      }, \"fill-opacitySetter\": function fillOpacitySetter(a, b, c) {\n        H(this.renderer.prepVML([\"\\x3c\", b.split(\"-\")[0], ' opacity\\x3d\"', a, '\"/\\x3e']), null, null, c);\n      }, opacitySetter: A, rotationSetter: function rotationSetter(a, b, c) {\n        c = c.style;this[b] = c[b] = a;c.left = -Math.round(Math.sin(a * g) + 1) + \"px\";c.top = Math.round(Math.cos(a * g)) + \"px\";\n      }, strokeSetter: function strokeSetter(a, b, c) {\n        this.setAttr(\"strokecolor\", this.renderer.color(a, c, b, this));\n      }, \"stroke-widthSetter\": function strokeWidthSetter(a, b, c) {\n        c.stroked = !!a;this[b] = a;p(a) && (a += \"px\");this.setAttr(\"strokeweight\", a);\n      }, titleSetter: function titleSetter(a, b) {\n        this.setAttr(b, a);\n      }, visibilitySetter: function visibilitySetter(a, b, c) {\n        \"inherit\" === a && (a = \"visible\");this.shadows && l(this.shadows, function (c) {\n          c.style[b] = a;\n        });\"DIV\" === c.nodeName && (a = \"hidden\" === a ? \"-999em\" : 0, this.docMode8 || (c.style[b] = a ? \"visible\" : \"hidden\"), b = \"top\");c.style[b] = a;\n      }, xSetter: function xSetter(a, b, c) {\n        this[b] = a;\"x\" === b ? b = \"left\" : \"y\" === b && (b = \"top\");this.updateClipping ? (this[b] = a, this.updateClipping()) : c.style[b] = a;\n      }, zIndexSetter: function zIndexSetter(a, b, c) {\n        c.style[b] = a;\n      } }, A[\"stroke-opacitySetter\"] = A[\"fill-opacitySetter\"], a.VMLElement = A = B(n, A), A.prototype.ySetter = A.prototype.widthSetter = A.prototype.heightSetter = A.prototype.xSetter, A = { Element: A, isIE8: -1 < z.navigator.userAgent.indexOf(\"MSIE 8.0\"), init: function init(a, b, c) {\n        var e, h;this.alignedObjects = [];e = this.createElement(\"div\").css({ position: \"relative\" });h = e.element;a.appendChild(e.element);this.isVML = !0;this.box = h;this.boxWrapper = e;this.gradients = {};this.cache = {};this.cacheKeys = [];this.imgCount = 0;this.setSize(b, c, !1);if (!u.namespaces.hcv) {\n          u.namespaces.add(\"hcv\", \"urn:schemas-microsoft-com:vml\");try {\n            u.createStyleSheet().cssText = \"hcv\\\\:fill, hcv\\\\:path, hcv\\\\:shape, hcv\\\\:stroke{ behavior:url(#default#VML); display: inline-block; } \";\n          } catch (y) {\n            u.styleSheets[0].cssText += \"hcv\\\\:fill, hcv\\\\:path, hcv\\\\:shape, hcv\\\\:stroke{ behavior:url(#default#VML); display: inline-block; } \";\n          }\n        }\n      }, isHidden: function isHidden() {\n        return !this.box.offsetWidth;\n      },\n      clipRect: function clipRect(a, b, c, n) {\n        var e = this.createElement(),\n            m = C(a);return d(e, { members: [], count: 0, left: (m ? a.x : a) + 1, top: (m ? a.y : b) + 1, width: (m ? a.width : c) - 1, height: (m ? a.height : n) - 1, getCSS: function getCSS(a) {\n            var b = a.element,\n                c = b.nodeName,\n                k = a.inverted,\n                e = this.top - (\"shape\" === c ? b.offsetTop : 0),\n                h = this.left,\n                b = h + this.width,\n                n = e + this.height,\n                e = { clip: \"rect(\" + Math.round(k ? h : e) + \"px,\" + Math.round(k ? n : b) + \"px,\" + Math.round(k ? b : n) + \"px,\" + Math.round(k ? e : h) + \"px)\" };!k && a.docMode8 && \"DIV\" === c && d(e, { width: b + \"px\", height: n + \"px\" });return e;\n          }, updateClipping: function updateClipping() {\n            l(e.members, function (a) {\n              a.element && a.css(e.getCSS(a));\n            });\n          } });\n      }, color: function color(b, c, n, m) {\n        var e = this,\n            d,\n            x = /^rgba/,\n            p,\n            t,\n            k = \"none\";b && b.linearGradient ? t = \"gradient\" : b && b.radialGradient && (t = \"pattern\");if (t) {\n          var D,\n              w,\n              z = b.linearGradient || b.radialGradient,\n              f,\n              E,\n              v,\n              q,\n              g,\n              F = \"\";b = b.stops;var C,\n              u = [],\n              r = function r() {\n            p = ['\\x3cfill colors\\x3d\"' + u.join(\",\") + '\" opacity\\x3d\"', v, '\" o:opacity2\\x3d\"', E, '\" type\\x3d\"', t, '\" ', F, 'focus\\x3d\"100%\" method\\x3d\"any\" /\\x3e'];H(e.prepVML(p), null, null, c);\n          };f = b[0];C = b[b.length - 1];0 < f[0] && b.unshift([0, f[1]]);1 > C[0] && b.push([1, C[1]]);l(b, function (k, b) {\n            x.test(k[1]) ? (d = a.color(k[1]), D = d.get(\"rgb\"), w = d.get(\"a\")) : (D = k[1], w = 1);u.push(100 * k[0] + \"% \" + D);b ? (v = w, q = D) : (E = w, g = D);\n          });if (\"fill\" === n) {\n            if (\"gradient\" === t) n = z.x1 || z[0] || 0, b = z.y1 || z[1] || 0, f = z.x2 || z[2] || 0, z = z.y2 || z[3] || 0, F = 'angle\\x3d\"' + (90 - 180 * Math.atan((z - b) / (f - n)) / Math.PI) + '\"', r();else {\n              var k = z.r,\n                  A = 2 * k,\n                  B = 2 * k,\n                  G = z.cx,\n                  U = z.cy,\n                  L = c.radialReference,\n                  T,\n                  k = function k() {\n                L && (T = m.getBBox(), G += (L[0] - T.x) / T.width - .5, U += (L[1] - T.y) / T.height - .5, A *= L[2] / T.width, B *= L[2] / T.height);F = 'src\\x3d\"' + a.getOptions().global.VMLRadialGradientURL + '\" size\\x3d\"' + A + \",\" + B + '\" origin\\x3d\"0.5,0.5\" position\\x3d\"' + G + \",\" + U + '\" color2\\x3d\"' + g + '\" ';r();\n              };m.added ? k() : m.onAdd = k;k = q;\n            }\n          } else k = D;\n        } else x.test(b) && \"IMG\" !== c.tagName ? (d = a.color(b), m[n + \"-opacitySetter\"](d.get(\"a\"), n, c), k = d.get(\"rgb\")) : (k = c.getElementsByTagName(n), k.length && (k[0].opacity = 1, k[0].type = \"solid\"), k = b);return k;\n      }, prepVML: function prepVML(a) {\n        var b = this.isIE8;a = a.join(\"\");b ? (a = a.replace(\"/\\x3e\", ' xmlns\\x3d\"urn:schemas-microsoft-com:vml\" /\\x3e'), a = -1 === a.indexOf('style\\x3d\"') ? a.replace(\"/\\x3e\", ' style\\x3d\"display:inline-block;behavior:url(#default#VML);\" /\\x3e') : a.replace('style\\x3d\"', 'style\\x3d\"display:inline-block;behavior:url(#default#VML);')) : a = a.replace(\"\\x3c\", \"\\x3chcv:\");return a;\n      }, text: E.prototype.html, path: function path(a) {\n        var c = { coordsize: \"10 10\" };b(a) ? c.d = a : C(a) && d(c, a);return this.createElement(\"shape\").attr(c);\n      }, circle: function circle(a, b, c) {\n        var e = this.symbol(\"circle\");C(a) && (c = a.r, b = a.y, a = a.x);e.isCircle = !0;e.r = c;return e.attr({ x: a, y: b });\n      }, g: function g(a) {\n        var b;\n        a && (b = { className: \"highcharts-\" + a, \"class\": \"highcharts-\" + a });return this.createElement(\"div\").attr(b);\n      }, image: function image(a, b, c, n, h) {\n        var e = this.createElement(\"img\").attr({ src: a });1 < arguments.length && e.attr({ x: b, y: c, width: n, height: h });return e;\n      }, createElement: function createElement(a) {\n        return \"rect\" === a ? this.symbol(a) : E.prototype.createElement.call(this, a);\n      }, invertChild: function invertChild(a, b) {\n        var e = this;b = b.style;var n = \"IMG\" === a.tagName && a.style;G(a, { flip: \"x\", left: c(b.width) - (n ? c(n.top) : 1), top: c(b.height) - (n ? c(n.left) : 1), rotation: -90 });\n        l(a.childNodes, function (b) {\n          e.invertChild(b, a);\n        });\n      }, symbols: { arc: function arc(a, b, c, n, h) {\n          var e = h.start,\n              m = h.end,\n              d = h.r || c || n;c = h.innerR;n = Math.cos(e);var p = Math.sin(e),\n              k = Math.cos(m),\n              D = Math.sin(m);if (0 === m - e) return [\"x\"];e = [\"wa\", a - d, b - d, a + d, b + d, a + d * n, b + d * p, a + d * k, b + d * D];h.open && !c && e.push(\"e\", \"M\", a, b);e.push(\"at\", a - c, b - c, a + c, b + c, a + c * k, b + c * D, a + c * n, b + c * p, \"x\", \"e\");e.isArc = !0;return e;\n        }, circle: function circle(a, b, c, n, h) {\n          h && r(h.r) && (c = n = 2 * h.r);h && h.isCircle && (a -= c / 2, b -= n / 2);return [\"wa\", a, b, a + c, b + n, a + c, b + n / 2, a + c, b + n / 2, \"e\"];\n        },\n        rect: function rect(a, b, c, n, h) {\n          return E.prototype.symbols[r(h) && h.r ? \"callout\" : \"square\"].call(0, a, b, c, n, h);\n        } } }, a.VMLRenderer = B = function B() {\n      this.init.apply(this, arguments);\n    }, B.prototype = t(E.prototype, A), a.Renderer = B);E.prototype.measureSpanWidth = function (a, b) {\n      var c = u.createElement(\"span\");a = u.createTextNode(a);c.appendChild(a);G(c, b);this.box.appendChild(c);b = c.offsetWidth;f(c);return b;\n    };\n  })(L);(function (a) {\n    function B() {\n      var l = a.defaultOptions.global,\n          f = u.moment;if (l.timezone) {\n        if (f) return function (a) {\n          return -f.tz(a, l.timezone).utcOffset();\n        };a.error(25);\n      }return l.useUTC && l.getTimezoneOffset;\n    }function A() {\n      var l = a.defaultOptions.global,\n          q,\n          d = l.useUTC,\n          b = d ? \"getUTC\" : \"get\",\n          p = d ? \"setUTC\" : \"set\";a.Date = q = l.Date || u.Date;q.hcTimezoneOffset = d && l.timezoneOffset;q.hcGetTimezoneOffset = B();q.hcMakeTime = function (a, b, m, c, n, p) {\n        var l;d ? (l = q.UTC.apply(0, arguments), l += r(l)) : l = new q(a, b, f(m, 1), f(c, 0), f(n, 0), f(p, 0)).getTime();return l;\n      };G(\"Minutes Hours Day Date Month FullYear\".split(\" \"), function (a) {\n        q[\"hcGet\" + a] = b + a;\n      });G(\"Milliseconds Seconds Minutes Hours Date Month FullYear\".split(\" \"), function (a) {\n        q[\"hcSet\" + a] = p + a;\n      });\n    }var H = a.color,\n        G = a.each,\n        r = a.getTZOffset,\n        g = a.merge,\n        f = a.pick,\n        u = a.win;a.defaultOptions = { colors: \"#7cb5ec #434348 #90ed7d #f7a35c #8085e9 #f15c80 #e4d354 #2b908f #f45b5b #91e8e1\".split(\" \"), symbols: [\"circle\", \"diamond\", \"square\", \"triangle\", \"triangle-down\"], lang: { loading: \"Loading...\", months: \"January February March April May June July August September October November December\".split(\" \"), shortMonths: \"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \"), weekdays: \"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),\n        decimalPoint: \".\", numericSymbols: \"kMGTPE\".split(\"\"), resetZoom: \"Reset zoom\", resetZoomTitle: \"Reset zoom level 1:1\", thousandsSep: \" \" }, global: { useUTC: !0, VMLRadialGradientURL: \"http://code.highcharts.com/5.0.7/gfx/vml-radial-gradient.png\" }, chart: { borderRadius: 0, defaultSeriesType: \"line\", ignoreHiddenSeries: !0, spacing: [10, 10, 15, 10], resetZoomButton: { theme: { zIndex: 20 }, position: { align: \"right\", x: -10, y: 10 } }, width: null, height: null, borderColor: \"#335cad\", backgroundColor: \"#ffffff\", plotBorderColor: \"#cccccc\" }, title: { text: \"Chart title\",\n        align: \"center\", margin: 15, widthAdjust: -44 }, subtitle: { text: \"\", align: \"center\", widthAdjust: -44 }, plotOptions: {}, labels: { style: { position: \"absolute\", color: \"#333333\" } }, legend: { enabled: !0, align: \"center\", layout: \"horizontal\", labelFormatter: function labelFormatter() {\n          return this.name;\n        }, borderColor: \"#999999\", borderRadius: 0, navigation: { activeColor: \"#003399\", inactiveColor: \"#cccccc\" }, itemStyle: { color: \"#333333\", fontSize: \"12px\", fontWeight: \"bold\" }, itemHoverStyle: { color: \"#000000\" }, itemHiddenStyle: { color: \"#cccccc\" }, shadow: !1, itemCheckboxStyle: { position: \"absolute\",\n          width: \"13px\", height: \"13px\" }, squareSymbol: !0, symbolPadding: 5, verticalAlign: \"bottom\", x: 0, y: 0, title: { style: { fontWeight: \"bold\" } } }, loading: { labelStyle: { fontWeight: \"bold\", position: \"relative\", top: \"45%\" }, style: { position: \"absolute\", backgroundColor: \"#ffffff\", opacity: .5, textAlign: \"center\" } }, tooltip: { enabled: !0, animation: a.svg, borderRadius: 3, dateTimeLabelFormats: { millisecond: \"%A, %b %e, %H:%M:%S.%L\", second: \"%A, %b %e, %H:%M:%S\", minute: \"%A, %b %e, %H:%M\", hour: \"%A, %b %e, %H:%M\", day: \"%A, %b %e, %Y\", week: \"Week from %A, %b %e, %Y\",\n          month: \"%B %Y\", year: \"%Y\" }, footerFormat: \"\", padding: 8, snap: a.isTouchDevice ? 25 : 10, backgroundColor: H(\"#f7f7f7\").setOpacity(.85).get(), borderWidth: 1, headerFormat: '\\x3cspan style\\x3d\"font-size: 10px\"\\x3e{point.key}\\x3c/span\\x3e\\x3cbr/\\x3e', pointFormat: \"<span style=\\\"color:{point.color}\\\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>\", shadow: !0, style: { color: \"#333333\", cursor: \"default\", fontSize: \"12px\", pointerEvents: \"none\", whiteSpace: \"nowrap\" } }, credits: { enabled: !0, href: \"http://www.highcharts.com\",\n        position: { align: \"right\", x: -10, verticalAlign: \"bottom\", y: -5 }, style: { cursor: \"pointer\", color: \"#999999\", fontSize: \"9px\" }, text: \"Highcharts.com\" } };a.setOptions = function (l) {\n      a.defaultOptions = g(!0, a.defaultOptions, l);A();return a.defaultOptions;\n    };a.getOptions = function () {\n      return a.defaultOptions;\n    };a.defaultPlotOptions = a.defaultOptions.plotOptions;A();\n  })(L);(function (a) {\n    var B = a.arrayMax,\n        A = a.arrayMin,\n        H = a.defined,\n        G = a.destroyObjectProperties,\n        r = a.each,\n        g = a.erase,\n        f = a.merge,\n        u = a.pick;a.PlotLineOrBand = function (a, f) {\n      this.axis = a;f && (this.options = f, this.id = f.id);\n    };a.PlotLineOrBand.prototype = { render: function render() {\n        var a = this,\n            q = a.axis,\n            d = q.horiz,\n            b = a.options,\n            p = b.label,\n            g = a.label,\n            t = b.to,\n            m = b.from,\n            c = b.value,\n            n = H(m) && H(t),\n            E = H(c),\n            z = a.svgElem,\n            e = !z,\n            x = [],\n            F,\n            w = b.color,\n            h = u(b.zIndex, 0),\n            y = b.events,\n            x = { \"class\": \"highcharts-plot-\" + (n ? \"band \" : \"line \") + (b.className || \"\") },\n            J = {},\n            K = q.chart.renderer,\n            I = n ? \"bands\" : \"lines\",\n            k = q.log2lin;q.isLog && (m = k(m), t = k(t), c = k(c));E ? (x = { stroke: w, \"stroke-width\": b.width }, b.dashStyle && (x.dashstyle = b.dashStyle)) : n && (w && (x.fill = w), b.borderWidth && (x.stroke = b.borderColor, x[\"stroke-width\"] = b.borderWidth));J.zIndex = h;I += \"-\" + h;(w = q[I]) || (q[I] = w = K.g(\"plot-\" + I).attr(J).add());e && (a.svgElem = z = K.path().attr(x).add(w));if (E) x = q.getPlotLinePath(c, z.strokeWidth());else if (n) x = q.getPlotBandPath(m, t, b);else return;if (e && x && x.length) {\n          if (z.attr({ d: x }), y) for (F in b = function b(_b) {\n            z.on(_b, function (k) {\n              y[_b].apply(a, [k]);\n            });\n          }, y) {\n            b(F);\n          }\n        } else z && (x ? (z.show(), z.animate({ d: x })) : (z.hide(), g && (a.label = g = g.destroy())));p && H(p.text) && x && x.length && 0 < q.width && 0 < q.height && !x.flat ? (p = f({ align: d && n && \"center\", x: d ? !n && 4 : 10, verticalAlign: !d && n && \"middle\", y: d ? n ? 16 : 10 : n ? 6 : -4, rotation: d && !n && 90 }, p), this.renderLabel(p, x, n, h)) : g && g.hide();return a;\n      }, renderLabel: function renderLabel(a, f, d, b) {\n        var p = this.label,\n            l = this.axis.chart.renderer;p || (p = { align: a.textAlign || a.align, rotation: a.rotation, \"class\": \"highcharts-plot-\" + (d ? \"band\" : \"line\") + \"-label \" + (a.className || \"\") }, p.zIndex = b, this.label = p = l.text(a.text, 0, 0, a.useHTML).attr(p).add(), p.css(a.style));b = [f[1], f[4], d ? f[6] : f[1]];f = [f[2], f[5], d ? f[7] : f[2]];d = A(b);l = A(f);p.align(a, !1, { x: d, y: l, width: B(b) - d, height: B(f) - l });p.show();\n      }, destroy: function destroy() {\n        g(this.axis.plotLinesAndBands, this);delete this.axis;G(this);\n      } };a.AxisPlotLineOrBandExtension = { getPlotBandPath: function getPlotBandPath(a, f) {\n        f = this.getPlotLinePath(f, null, null, !0);(a = this.getPlotLinePath(a, null, null, !0)) && f ? (a.flat = a.toString() === f.toString(), a.push(f[4], f[5], f[1], f[2], \"z\")) : a = null;return a;\n      }, addPlotBand: function addPlotBand(a) {\n        return this.addPlotBandOrLine(a, \"plotBands\");\n      }, addPlotLine: function addPlotLine(a) {\n        return this.addPlotBandOrLine(a, \"plotLines\");\n      }, addPlotBandOrLine: function addPlotBandOrLine(f, g) {\n        var d = new a.PlotLineOrBand(this, f).render(),\n            b = this.userOptions;d && (g && (b[g] = b[g] || [], b[g].push(f)), this.plotLinesAndBands.push(d));return d;\n      }, removePlotBandOrLine: function removePlotBandOrLine(a) {\n        for (var f = this.plotLinesAndBands, d = this.options, b = this.userOptions, p = f.length; p--;) {\n          f[p].id === a && f[p].destroy();\n        }r([d.plotLines || [], b.plotLines || [], d.plotBands || [], b.plotBands || []], function (b) {\n          for (p = b.length; p--;) {\n            b[p].id === a && g(b, b[p]);\n          }\n        });\n      } };\n  })(L);(function (a) {\n    var B = a.correctFloat,\n        A = a.defined,\n        H = a.destroyObjectProperties,\n        G = a.isNumber,\n        r = a.merge,\n        g = a.pick,\n        f = a.deg2rad;a.Tick = function (a, f, g, d) {\n      this.axis = a;this.pos = f;this.type = g || \"\";this.isNew = !0;g || d || this.addLabel();\n    };a.Tick.prototype = { addLabel: function addLabel() {\n        var a = this.axis,\n            f = a.options,\n            q = a.chart,\n            d = a.categories,\n            b = a.names,\n            p = this.pos,\n            C = f.labels,\n            t = a.tickPositions,\n            m = p === t[0],\n            c = p === t[t.length - 1],\n            b = d ? g(d[p], b[p], p) : p,\n            d = this.label,\n            t = t.info,\n            n;a.isDatetimeAxis && t && (n = f.dateTimeLabelFormats[t.higherRanks[p] || t.unitName]);this.isFirst = m;this.isLast = c;f = a.labelFormatter.call({ axis: a, chart: q, isFirst: m, isLast: c, dateTimeLabelFormat: n, value: a.isLog ? B(a.lin2log(b)) : b });A(d) ? d && d.attr({ text: f }) : (this.labelLength = (this.label = d = A(f) && C.enabled ? q.renderer.text(f, 0, 0, C.useHTML).css(r(C.style)).add(a.labelGroup) : null) && d.getBBox().width, this.rotation = 0);\n      }, getLabelSize: function getLabelSize() {\n        return this.label ? this.label.getBBox()[this.axis.horiz ? \"height\" : \"width\"] : 0;\n      }, handleOverflow: function handleOverflow(a) {\n        var l = this.axis,\n            q = a.x,\n            d = l.chart.chartWidth,\n            b = l.chart.spacing,\n            p = g(l.labelLeft, Math.min(l.pos, b[3])),\n            b = g(l.labelRight, Math.max(l.pos + l.len, d - b[1])),\n            C = this.label,\n            t = this.rotation,\n            m = { left: 0, center: .5, right: 1 }[l.labelAlign],\n            c = C.getBBox().width,\n            n = l.getSlotWidth(),\n            E = n,\n            z = 1,\n            e,\n            x = {};if (t) 0 > t && q - m * c < p ? e = Math.round(q / Math.cos(t * f) - p) : 0 < t && q + m * c > b && (e = Math.round((d - q) / Math.cos(t * f)));else if (d = q + (1 - m) * c, q - m * c < p ? E = a.x + E * (1 - m) - p : d > b && (E = b - a.x + E * m, z = -1), E = Math.min(n, E), E < n && \"center\" === l.labelAlign && (a.x += z * (n - E - m * (n - Math.min(c, E)))), c > E || l.autoRotation && (C.styles || {}).width) e = E;e && (x.width = e, (l.options.labels.style || {}).textOverflow || (x.textOverflow = \"ellipsis\"), C.css(x));\n      }, getPosition: function getPosition(a, f, g, d) {\n        var b = this.axis,\n            p = b.chart,\n            l = d && p.oldChartHeight || p.chartHeight;return { x: a ? b.translate(f + g, null, null, d) + b.transB : b.left + b.offset + (b.opposite ? (d && p.oldChartWidth || p.chartWidth) - b.right - b.left : 0), y: a ? l - b.bottom + b.offset - (b.opposite ? b.height : 0) : l - b.translate(f + g, null, null, d) - b.transB };\n      }, getLabelPosition: function getLabelPosition(a, g, q, d, b, p, C, t) {\n        var m = this.axis,\n            c = m.transA,\n            n = m.reversed,\n            E = m.staggerLines,\n            z = m.tickRotCorr || { x: 0, y: 0 },\n            e = b.y;A(e) || (e = 0 === m.side ? q.rotation ? -8 : -q.getBBox().height : 2 === m.side ? z.y + 8 : Math.cos(q.rotation * f) * (z.y - q.getBBox(!1, 0).height / 2));a = a + b.x + z.x - (p && d ? p * c * (n ? -1 : 1) : 0);g = g + e - (p && !d ? p * c * (n ? 1 : -1) : 0);E && (q = C / (t || 1) % E, m.opposite && (q = E - q - 1), g += m.labelOffset / E * q);return { x: a, y: Math.round(g) };\n      }, getMarkPath: function getMarkPath(a, f, g, d, b, p) {\n        return p.crispLine([\"M\", a, f, \"L\", a + (b ? 0 : -g), f + (b ? g : 0)], d);\n      }, render: function render(a, f, q) {\n        var d = this.axis,\n            b = d.options,\n            p = d.chart.renderer,\n            l = d.horiz,\n            t = this.type,\n            m = this.label,\n            c = this.pos,\n            n = b.labels,\n            E = this.gridLine,\n            z = t ? t + \"Tick\" : \"tick\",\n            e = d.tickSize(z),\n            x = this.mark,\n            F = !x,\n            w = n.step,\n            h = {},\n            y = !0,\n            J = d.tickmarkOffset,\n            K = this.getPosition(l, c, J, f),\n            I = K.x,\n            K = K.y,\n            k = l && I === d.pos + d.len || !l && K === d.pos ? -1 : 1,\n            D = t ? t + \"Grid\" : \"grid\",\n            P = b[D + \"LineWidth\"],\n            N = b[D + \"LineColor\"],\n            r = b[D + \"LineDashStyle\"],\n            D = g(b[z + \"Width\"], !t && d.isXAxis ? 1 : 0),\n            z = b[z + \"Color\"];q = g(q, 1);this.isActive = !0;E || (h.stroke = N, h[\"stroke-width\"] = P, r && (h.dashstyle = r), t || (h.zIndex = 1), f && (h.opacity = 0), this.gridLine = E = p.path().attr(h).addClass(\"highcharts-\" + (t ? t + \"-\" : \"\") + \"grid-line\").add(d.gridGroup));if (!f && E && (c = d.getPlotLinePath(c + J, E.strokeWidth() * k, f, !0))) E[this.isNew ? \"attr\" : \"animate\"]({ d: c, opacity: q });e && (d.opposite && (e[0] = -e[0]), F && (this.mark = x = p.path().addClass(\"highcharts-\" + (t ? t + \"-\" : \"\") + \"tick\").add(d.axisGroup), x.attr({ stroke: z, \"stroke-width\": D })), x[F ? \"attr\" : \"animate\"]({ d: this.getMarkPath(I, K, e[0], x.strokeWidth() * k, l, p), opacity: q }));m && G(I) && (m.xy = K = this.getLabelPosition(I, K, m, l, n, J, a, w), this.isFirst && !this.isLast && !g(b.showFirstLabel, 1) || this.isLast && !this.isFirst && !g(b.showLastLabel, 1) ? y = !1 : !l || d.isRadial || n.step || n.rotation || f || 0 === q || this.handleOverflow(K), w && a % w && (y = !1), y && G(K.y) ? (K.opacity = q, m[this.isNew ? \"attr\" : \"animate\"](K)) : m.attr(\"y\", -9999), this.isNew = !1);\n      }, destroy: function destroy() {\n        H(this, this.axis);\n      } };\n  })(L);(function (a) {\n    var B = a.addEvent,\n        A = a.animObject,\n        H = a.arrayMax,\n        G = a.arrayMin,\n        r = a.AxisPlotLineOrBandExtension,\n        g = a.color,\n        f = a.correctFloat,\n        u = a.defaultOptions,\n        l = a.defined,\n        q = a.deg2rad,\n        d = a.destroyObjectProperties,\n        b = a.each,\n        p = a.extend,\n        C = a.fireEvent,\n        t = a.format,\n        m = a.getMagnitude,\n        c = a.grep,\n        n = a.inArray,\n        E = a.isArray,\n        z = a.isNumber,\n        e = a.isString,\n        x = a.merge,\n        F = a.normalizeTickInterval,\n        w = a.pick,\n        h = a.PlotLineOrBand,\n        y = a.removeEvent,\n        J = a.splat,\n        K = a.syncTimeout,\n        I = a.Tick;a.Axis = function () {\n      this.init.apply(this, arguments);\n    };a.Axis.prototype = { defaultOptions: { dateTimeLabelFormats: { millisecond: \"%H:%M:%S.%L\", second: \"%H:%M:%S\", minute: \"%H:%M\", hour: \"%H:%M\", day: \"%e. %b\", week: \"%e. %b\", month: \"%b '%y\", year: \"%Y\" }, endOnTick: !1, labels: { enabled: !0, style: { color: \"#666666\", cursor: \"default\", fontSize: \"11px\" },\n          x: 0 }, minPadding: .01, maxPadding: .01, minorTickLength: 2, minorTickPosition: \"outside\", startOfWeek: 1, startOnTick: !1, tickLength: 10, tickmarkPlacement: \"between\", tickPixelInterval: 100, tickPosition: \"outside\", title: { align: \"middle\", style: { color: \"#666666\" } }, type: \"linear\", minorGridLineColor: \"#f2f2f2\", minorGridLineWidth: 1, minorTickColor: \"#999999\", lineColor: \"#ccd6eb\", lineWidth: 1, gridLineColor: \"#e6e6e6\", tickColor: \"#ccd6eb\" }, defaultYAxisOptions: { endOnTick: !0, tickPixelInterval: 72, showLastLabel: !0, labels: { x: -8 }, maxPadding: .05,\n        minPadding: .05, startOnTick: !0, title: { rotation: 270, text: \"Values\" }, stackLabels: { enabled: !1, formatter: function formatter() {\n            return a.numberFormat(this.total, -1);\n          }, style: { fontSize: \"11px\", fontWeight: \"bold\", color: \"#000000\", textOutline: \"1px contrast\" } }, gridLineWidth: 1, lineWidth: 0 }, defaultLeftAxisOptions: { labels: { x: -15 }, title: { rotation: 270 } }, defaultRightAxisOptions: { labels: { x: 15 }, title: { rotation: 90 } }, defaultBottomAxisOptions: { labels: { autoRotation: [-45], x: 0 }, title: { rotation: 0 } }, defaultTopAxisOptions: { labels: { autoRotation: [-45],\n          x: 0 }, title: { rotation: 0 } }, init: function init(a, b) {\n        var k = b.isX;this.chart = a;this.horiz = a.inverted ? !k : k;this.isXAxis = k;this.coll = this.coll || (k ? \"xAxis\" : \"yAxis\");this.opposite = b.opposite;this.side = b.side || (this.horiz ? this.opposite ? 0 : 2 : this.opposite ? 1 : 3);this.setOptions(b);var c = this.options,\n            e = c.type;this.labelFormatter = c.labels.formatter || this.defaultLabelFormatter;this.userOptions = b;this.minPixelPadding = 0;this.reversed = c.reversed;this.visible = !1 !== c.visible;this.zoomEnabled = !1 !== c.zoomEnabled;this.hasNames = \"category\" === e || !0 === c.categories;this.categories = c.categories || this.hasNames;this.names = this.names || [];this.isLog = \"logarithmic\" === e;this.isDatetimeAxis = \"datetime\" === e;this.isLinked = l(c.linkedTo);this.ticks = {};this.labelEdge = [];this.minorTicks = {};this.plotLinesAndBands = [];this.alternateBands = {};this.len = 0;this.minRange = this.userMinRange = c.minRange || c.maxZoom;this.range = c.range;this.offset = c.offset || 0;this.stacks = {};this.oldStacks = {};this.stacksTouched = 0;this.min = this.max = null;this.crosshair = w(c.crosshair, J(a.options.tooltip.crosshairs)[k ? 0 : 1], !1);var h;b = this.options.events;-1 === n(this, a.axes) && (k ? a.axes.splice(a.xAxis.length, 0, this) : a.axes.push(this), a[this.coll].push(this));this.series = this.series || [];a.inverted && k && void 0 === this.reversed && (this.reversed = !0);this.removePlotLine = this.removePlotBand = this.removePlotBandOrLine;for (h in b) {\n          B(this, h, b[h]);\n        }this.isLog && (this.val2lin = this.log2lin, this.lin2val = this.lin2log);\n      }, setOptions: function setOptions(a) {\n        this.options = x(this.defaultOptions, \"yAxis\" === this.coll && this.defaultYAxisOptions, [this.defaultTopAxisOptions, this.defaultRightAxisOptions, this.defaultBottomAxisOptions, this.defaultLeftAxisOptions][this.side], x(u[this.coll], a));\n      }, defaultLabelFormatter: function defaultLabelFormatter() {\n        var b = this.axis,\n            c = this.value,\n            e = b.categories,\n            h = this.dateTimeLabelFormat,\n            n = u.lang,\n            d = n.numericSymbols,\n            n = n.numericSymbolMagnitude || 1E3,\n            v = d && d.length,\n            m,\n            f = b.options.labels.format,\n            b = b.isLog ? c : b.tickInterval;if (f) m = t(f, this);else if (e) m = c;else if (h) m = a.dateFormat(h, c);else if (v && 1E3 <= b) for (; v-- && void 0 === m;) {\n          e = Math.pow(n, v + 1), b >= e && 0 === 10 * c % e && null !== d[v] && 0 !== c && (m = a.numberFormat(c / e, -1) + d[v]);\n        }void 0 === m && (m = 1E4 <= Math.abs(c) ? a.numberFormat(c, -1) : a.numberFormat(c, -1, void 0, \"\"));return m;\n      }, getSeriesExtremes: function getSeriesExtremes() {\n        var a = this,\n            e = a.chart;a.hasVisibleSeries = !1;a.dataMin = a.dataMax = a.threshold = null;a.softThreshold = !a.isXAxis;a.buildStacks && a.buildStacks();b(a.series, function (b) {\n          if (b.visible || !e.options.chart.ignoreHiddenSeries) {\n            var k = b.options,\n                h = k.threshold,\n                D;a.hasVisibleSeries = !0;a.isLog && 0 >= h && (h = null);if (a.isXAxis) k = b.xData, k.length && (b = G(k), z(b) || b instanceof Date || (k = c(k, function (a) {\n              return z(a);\n            }), b = G(k)), a.dataMin = Math.min(w(a.dataMin, k[0]), b), a.dataMax = Math.max(w(a.dataMax, k[0]), H(k)));else if (b.getExtremes(), D = b.dataMax, b = b.dataMin, l(b) && l(D) && (a.dataMin = Math.min(w(a.dataMin, b), b), a.dataMax = Math.max(w(a.dataMax, D), D)), l(h) && (a.threshold = h), !k.softThreshold || a.isLog) a.softThreshold = !1;\n          }\n        });\n      }, translate: function translate(a, b, c, e, h, n) {\n        var k = this.linkedParent || this,\n            D = 1,\n            m = 0,\n            d = e ? k.oldTransA : k.transA;e = e ? k.oldMin : k.min;var f = k.minPixelPadding;\n        h = (k.isOrdinal || k.isBroken || k.isLog && h) && k.lin2val;d || (d = k.transA);c && (D *= -1, m = k.len);k.reversed && (D *= -1, m -= D * (k.sector || k.len));b ? (a = (a * D + m - f) / d + e, h && (a = k.lin2val(a))) : (h && (a = k.val2lin(a)), a = D * (a - e) * d + m + D * f + (z(n) ? d * n : 0));return a;\n      }, toPixels: function toPixels(a, b) {\n        return this.translate(a, !1, !this.horiz, null, !0) + (b ? 0 : this.pos);\n      }, toValue: function toValue(a, b) {\n        return this.translate(a - (b ? 0 : this.pos), !0, !this.horiz, null, !0);\n      }, getPlotLinePath: function getPlotLinePath(a, b, c, e, h) {\n        var k = this.chart,\n            D = this.left,\n            n = this.top,\n            m,\n            d,\n            f = c && k.oldChartHeight || k.chartHeight,\n            p = c && k.oldChartWidth || k.chartWidth,\n            y;m = this.transB;var t = function t(a, b, k) {\n          if (a < b || a > k) e ? a = Math.min(Math.max(b, a), k) : y = !0;return a;\n        };h = w(h, this.translate(a, null, null, c));a = c = Math.round(h + m);m = d = Math.round(f - h - m);z(h) ? this.horiz ? (m = n, d = f - this.bottom, a = c = t(a, D, D + this.width)) : (a = D, c = p - this.right, m = d = t(m, n, n + this.height)) : y = !0;return y && !e ? null : k.renderer.crispLine([\"M\", a, m, \"L\", c, d], b || 1);\n      }, getLinearTickPositions: function getLinearTickPositions(a, b, c) {\n        var k,\n            e = f(Math.floor(b / a) * a),\n            h = f(Math.ceil(c / a) * a),\n            D = [];if (b === c && z(b)) return [b];for (b = e; b <= h;) {\n          D.push(b);b = f(b + a);if (b === k) break;k = b;\n        }return D;\n      }, getMinorTickPositions: function getMinorTickPositions() {\n        var a = this.options,\n            b = this.tickPositions,\n            c = this.minorTickInterval,\n            e = [],\n            h,\n            n = this.pointRangePadding || 0;h = this.min - n;var n = this.max + n,\n            m = n - h;if (m && m / c < this.len / 3) if (this.isLog) for (n = b.length, h = 1; h < n; h++) {\n          e = e.concat(this.getLogTickPositions(c, b[h - 1], b[h], !0));\n        } else if (this.isDatetimeAxis && \"auto\" === a.minorTickInterval) e = e.concat(this.getTimeTicks(this.normalizeTimeTickInterval(c), h, n, a.startOfWeek));else for (b = h + (b[0] - h) % c; b <= n && b !== e[0]; b += c) {\n          e.push(b);\n        }0 !== e.length && this.trimTicks(e, a.startOnTick, a.endOnTick);return e;\n      }, adjustForMinRange: function adjustForMinRange() {\n        var a = this.options,\n            c = this.min,\n            e = this.max,\n            h,\n            n = this.dataMax - this.dataMin >= this.minRange,\n            m,\n            v,\n            d,\n            f,\n            p,\n            y;this.isXAxis && void 0 === this.minRange && !this.isLog && (l(a.min) || l(a.max) ? this.minRange = null : (b(this.series, function (a) {\n          f = a.xData;for (v = p = a.xIncrement ? 1 : f.length - 1; 0 < v; v--) {\n            if (d = f[v] - f[v - 1], void 0 === m || d < m) m = d;\n          }\n        }), this.minRange = Math.min(5 * m, this.dataMax - this.dataMin)));\n        e - c < this.minRange && (y = this.minRange, h = (y - e + c) / 2, h = [c - h, w(a.min, c - h)], n && (h[2] = this.isLog ? this.log2lin(this.dataMin) : this.dataMin), c = H(h), e = [c + y, w(a.max, c + y)], n && (e[2] = this.isLog ? this.log2lin(this.dataMax) : this.dataMax), e = G(e), e - c < y && (h[0] = e - y, h[1] = w(a.min, e - y), c = H(h)));this.min = c;this.max = e;\n      }, getClosest: function getClosest() {\n        var a;this.categories ? a = 1 : b(this.series, function (b) {\n          var k = b.closestPointRange,\n              c = b.visible || !b.chart.options.chart.ignoreHiddenSeries;!b.noSharedTooltip && l(k) && c && (a = l(a) ? Math.min(a, k) : k);\n        });\n        return a;\n      }, nameToX: function nameToX(a) {\n        var b = E(this.categories),\n            k = b ? this.categories : this.names,\n            c = a.options.x,\n            e;a.series.requireSorting = !1;l(c) || (c = !1 === this.options.uniqueNames ? a.series.autoIncrement() : n(a.name, k));-1 === c ? b || (e = k.length) : e = c;this.names[e] = a.name;return e;\n      }, updateNames: function updateNames() {\n        var a = this;0 < this.names.length && (this.names.length = 0, this.minRange = void 0, b(this.series || [], function (k) {\n          k.xIncrement = null;if (!k.points || k.isDirtyData) k.processData(), k.generatePoints();b(k.points, function (b, c) {\n            var e;\n            b.options && (e = a.nameToX(b), e !== b.x && (b.x = e, k.xData[c] = e));\n          });\n        }));\n      }, setAxisTranslation: function setAxisTranslation(a) {\n        var k = this,\n            c = k.max - k.min,\n            h = k.axisPointRange || 0,\n            n,\n            m = 0,\n            d = 0,\n            f = k.linkedParent,\n            y = !!k.categories,\n            p = k.transA,\n            t = k.isXAxis;if (t || y || h) n = k.getClosest(), f ? (m = f.minPointOffset, d = f.pointRangePadding) : b(k.series, function (a) {\n          var b = y ? 1 : t ? w(a.options.pointRange, n, 0) : k.axisPointRange || 0;a = a.options.pointPlacement;h = Math.max(h, b);k.single || (m = Math.max(m, e(a) ? 0 : b / 2), d = Math.max(d, \"on\" === a ? 0 : b));\n        }), f = k.ordinalSlope && n ? k.ordinalSlope / n : 1, k.minPointOffset = m *= f, k.pointRangePadding = d *= f, k.pointRange = Math.min(h, c), t && (k.closestPointRange = n);a && (k.oldTransA = p);k.translationSlope = k.transA = p = k.len / (c + d || 1);k.transB = k.horiz ? k.left : k.bottom;k.minPixelPadding = p * m;\n      }, minFromRange: function minFromRange() {\n        return this.max - this.range;\n      }, setTickInterval: function setTickInterval(k) {\n        var c = this,\n            e = c.chart,\n            h = c.options,\n            n = c.isLog,\n            d = c.log2lin,\n            v = c.isDatetimeAxis,\n            y = c.isXAxis,\n            p = c.isLinked,\n            t = h.maxPadding,\n            x = h.minPadding,\n            g = h.tickInterval,\n            E = h.tickPixelInterval,\n            q = c.categories,\n            J = c.threshold,\n            K = c.softThreshold,\n            I,\n            r,\n            u,\n            A;v || q || p || this.getTickAmount();u = w(c.userMin, h.min);A = w(c.userMax, h.max);p ? (c.linkedParent = e[c.coll][h.linkedTo], e = c.linkedParent.getExtremes(), c.min = w(e.min, e.dataMin), c.max = w(e.max, e.dataMax), h.type !== c.linkedParent.options.type && a.error(11, 1)) : (!K && l(J) && (c.dataMin >= J ? (I = J, x = 0) : c.dataMax <= J && (r = J, t = 0)), c.min = w(u, I, c.dataMin), c.max = w(A, r, c.dataMax));n && (!k && 0 >= Math.min(c.min, w(c.dataMin, c.min)) && a.error(10, 1), c.min = f(d(c.min), 15), c.max = f(d(c.max), 15));c.range && l(c.max) && (c.userMin = c.min = u = Math.max(c.min, c.minFromRange()), c.userMax = A = c.max, c.range = null);C(c, \"foundExtremes\");c.beforePadding && c.beforePadding();c.adjustForMinRange();!(q || c.axisPointRange || c.usePercentage || p) && l(c.min) && l(c.max) && (d = c.max - c.min) && (!l(u) && x && (c.min -= d * x), !l(A) && t && (c.max += d * t));z(h.floor) ? c.min = Math.max(c.min, h.floor) : z(h.softMin) && (c.min = Math.min(c.min, h.softMin));z(h.ceiling) ? c.max = Math.min(c.max, h.ceiling) : z(h.softMax) && (c.max = Math.max(c.max, h.softMax));K && l(c.dataMin) && (J = J || 0, !l(u) && c.min < J && c.dataMin >= J ? c.min = J : !l(A) && c.max > J && c.dataMax <= J && (c.max = J));c.tickInterval = c.min === c.max || void 0 === c.min || void 0 === c.max ? 1 : p && !g && E === c.linkedParent.options.tickPixelInterval ? g = c.linkedParent.tickInterval : w(g, this.tickAmount ? (c.max - c.min) / Math.max(this.tickAmount - 1, 1) : void 0, q ? 1 : (c.max - c.min) * E / Math.max(c.len, E));y && !k && b(c.series, function (a) {\n          a.processData(c.min !== c.oldMin || c.max !== c.oldMax);\n        });c.setAxisTranslation(!0);c.beforeSetTickPositions && c.beforeSetTickPositions();c.postProcessTickInterval && (c.tickInterval = c.postProcessTickInterval(c.tickInterval));c.pointRange && !g && (c.tickInterval = Math.max(c.pointRange, c.tickInterval));k = w(h.minTickInterval, c.isDatetimeAxis && c.closestPointRange);!g && c.tickInterval < k && (c.tickInterval = k);v || n || g || (c.tickInterval = F(c.tickInterval, null, m(c.tickInterval), w(h.allowDecimals, !(.5 < c.tickInterval && 5 > c.tickInterval && 1E3 < c.max && 9999 > c.max)), !!this.tickAmount));this.tickAmount || (c.tickInterval = c.unsquish());this.setTickPositions();\n      }, setTickPositions: function setTickPositions() {\n        var a = this.options,\n            b,\n            c = a.tickPositions,\n            e = a.tickPositioner,\n            h = a.startOnTick,\n            n = a.endOnTick,\n            m;this.tickmarkOffset = this.categories && \"between\" === a.tickmarkPlacement && 1 === this.tickInterval ? .5 : 0;this.minorTickInterval = \"auto\" === a.minorTickInterval && this.tickInterval ? this.tickInterval / 5 : a.minorTickInterval;this.tickPositions = b = c && c.slice();!b && (b = this.isDatetimeAxis ? this.getTimeTicks(this.normalizeTimeTickInterval(this.tickInterval, a.units), this.min, this.max, a.startOfWeek, this.ordinalPositions, this.closestPointRange, !0) : this.isLog ? this.getLogTickPositions(this.tickInterval, this.min, this.max) : this.getLinearTickPositions(this.tickInterval, this.min, this.max), b.length > this.len && (b = [b[0], b.pop()]), this.tickPositions = b, e && (e = e.apply(this, [this.min, this.max]))) && (this.tickPositions = b = e);this.trimTicks(b, h, n);this.isLinked || (this.min === this.max && l(this.min) && !this.tickAmount && (m = !0, this.min -= .5, this.max += .5), this.single = m, c || e || this.adjustTickAmount());\n      }, trimTicks: function trimTicks(a, b, c) {\n        var k = a[0],\n            e = a[a.length - 1],\n            h = this.minPointOffset || 0;if (!this.isLinked) {\n          if (b) this.min = k;else for (; this.min - h > a[0];) {\n            a.shift();\n          }if (c) this.max = e;else for (; this.max + h < a[a.length - 1];) {\n            a.pop();\n          }0 === a.length && l(k) && a.push((e + k) / 2);\n        }\n      }, alignToOthers: function alignToOthers() {\n        var a = {},\n            c,\n            e = this.options;!1 === this.chart.options.chart.alignTicks || !1 === e.alignTicks || this.isLog || b(this.chart[this.coll], function (b) {\n          var k = b.options,\n              k = [b.horiz ? k.left : k.top, k.width, k.height, k.pane].join();b.series.length && (a[k] ? c = !0 : a[k] = 1);\n        });return c;\n      }, getTickAmount: function getTickAmount() {\n        var a = this.options,\n            b = a.tickAmount,\n            c = a.tickPixelInterval;!l(a.tickInterval) && this.len < c && !this.isRadial && !this.isLog && a.startOnTick && a.endOnTick && (b = 2);!b && this.alignToOthers() && (b = Math.ceil(this.len / c) + 1);4 > b && (this.finalTickAmt = b, b = 5);this.tickAmount = b;\n      }, adjustTickAmount: function adjustTickAmount() {\n        var a = this.tickInterval,\n            b = this.tickPositions,\n            c = this.tickAmount,\n            e = this.finalTickAmt,\n            h = b && b.length;if (h < c) {\n          for (; b.length < c;) {\n            b.push(f(b[b.length - 1] + a));\n          }this.transA *= (h - 1) / (c - 1);this.max = b[b.length - 1];\n        } else h > c && (this.tickInterval *= 2, this.setTickPositions());\n        if (l(e)) {\n          for (a = c = b.length; a--;) {\n            (3 === e && 1 === a % 2 || 2 >= e && 0 < a && a < c - 1) && b.splice(a, 1);\n          }this.finalTickAmt = void 0;\n        }\n      }, setScale: function setScale() {\n        var a, c;this.oldMin = this.min;this.oldMax = this.max;this.oldAxisLength = this.len;this.setAxisSize();c = this.len !== this.oldAxisLength;b(this.series, function (b) {\n          if (b.isDirtyData || b.isDirty || b.xAxis.isDirty) a = !0;\n        });c || a || this.isLinked || this.forceRedraw || this.userMin !== this.oldUserMin || this.userMax !== this.oldUserMax || this.alignToOthers() ? (this.resetStacks && this.resetStacks(), this.forceRedraw = !1, this.getSeriesExtremes(), this.setTickInterval(), this.oldUserMin = this.userMin, this.oldUserMax = this.userMax, this.isDirty || (this.isDirty = c || this.min !== this.oldMin || this.max !== this.oldMax)) : this.cleanStacks && this.cleanStacks();\n      }, setExtremes: function setExtremes(a, c, e, h, n) {\n        var k = this,\n            m = k.chart;e = w(e, !0);b(k.series, function (a) {\n          delete a.kdTree;\n        });n = p(n, { min: a, max: c });C(k, \"setExtremes\", n, function () {\n          k.userMin = a;k.userMax = c;k.eventArgs = n;e && m.redraw(h);\n        });\n      }, zoom: function zoom(a, b) {\n        var c = this.dataMin,\n            k = this.dataMax,\n            e = this.options,\n            h = Math.min(c, w(e.min, c)),\n            e = Math.max(k, w(e.max, k));if (a !== this.min || b !== this.max) this.allowZoomOutside || (l(c) && (a < h && (a = h), a > e && (a = e)), l(k) && (b < h && (b = h), b > e && (b = e))), this.displayBtn = void 0 !== a || void 0 !== b, this.setExtremes(a, b, !1, void 0, { trigger: \"zoom\" });return !0;\n      }, setAxisSize: function setAxisSize() {\n        var a = this.chart,\n            b = this.options,\n            c = b.offsets || [0, 0, 0, 0],\n            e = this.horiz,\n            h = w(b.width, a.plotWidth - c[3] + c[1]),\n            n = w(b.height, a.plotHeight - c[0] + c[2]),\n            m = w(b.top, a.plotTop + c[0]),\n            b = w(b.left, a.plotLeft + c[3]),\n            c = /%$/;c.test(n) && (n = Math.round(parseFloat(n) / 100 * a.plotHeight));c.test(m) && (m = Math.round(parseFloat(m) / 100 * a.plotHeight + a.plotTop));this.left = b;this.top = m;this.width = h;this.height = n;this.bottom = a.chartHeight - n - m;this.right = a.chartWidth - h - b;this.len = Math.max(e ? h : n, 0);this.pos = e ? b : m;\n      }, getExtremes: function getExtremes() {\n        var a = this.isLog,\n            b = this.lin2log;return { min: a ? f(b(this.min)) : this.min, max: a ? f(b(this.max)) : this.max, dataMin: this.dataMin, dataMax: this.dataMax, userMin: this.userMin, userMax: this.userMax };\n      }, getThreshold: function getThreshold(a) {\n        var b = this.isLog,\n            c = this.lin2log,\n            k = b ? c(this.min) : this.min,\n            b = b ? c(this.max) : this.max;null === a ? a = k : k > a ? a = k : b < a && (a = b);return this.translate(a, 0, 1, 0, 1);\n      }, autoLabelAlign: function autoLabelAlign(a) {\n        a = (w(a, 0) - 90 * this.side + 720) % 360;return 15 < a && 165 > a ? \"right\" : 195 < a && 345 > a ? \"left\" : \"center\";\n      }, tickSize: function tickSize(a) {\n        var b = this.options,\n            c = b[a + \"Length\"],\n            k = w(b[a + \"Width\"], \"tick\" === a && this.isXAxis ? 1 : 0);if (k && c) return \"inside\" === b[a + \"Position\"] && (c = -c), [c, k];\n      }, labelMetrics: function labelMetrics() {\n        return this.chart.renderer.fontMetrics(this.options.labels.style && this.options.labels.style.fontSize, this.ticks[0] && this.ticks[0].label);\n      }, unsquish: function unsquish() {\n        var a = this.options.labels,\n            c = this.horiz,\n            e = this.tickInterval,\n            h = e,\n            n = this.len / (((this.categories ? 1 : 0) + this.max - this.min) / e),\n            m,\n            d = a.rotation,\n            f = this.labelMetrics(),\n            p,\n            y = Number.MAX_VALUE,\n            t,\n            x = function x(a) {\n          a /= n || 1;a = 1 < a ? Math.ceil(a) : 1;return a * e;\n        };c ? (t = !a.staggerLines && !a.step && (l(d) ? [d] : n < w(a.autoRotationLimit, 80) && a.autoRotation)) && b(t, function (a) {\n          var b;if (a === d || a && -90 <= a && 90 >= a) p = x(Math.abs(f.h / Math.sin(q * a))), b = p + Math.abs(a / 360), b < y && (y = b, m = a, h = p);\n        }) : a.step || (h = x(f.h));this.autoRotation = t;this.labelRotation = w(m, d);return h;\n      }, getSlotWidth: function getSlotWidth() {\n        var a = this.chart,\n            b = this.horiz,\n            c = this.options.labels,\n            e = Math.max(this.tickPositions.length - (this.categories ? 0 : 1), 1),\n            h = a.margin[3];return b && 2 > (c.step || 0) && !c.rotation && (this.staggerLines || 1) * this.len / e || !b && (h && h - a.spacing[3] || .33 * a.chartWidth);\n      }, renderUnsquish: function renderUnsquish() {\n        var a = this.chart,\n            c = a.renderer,\n            h = this.tickPositions,\n            n = this.ticks,\n            m = this.options.labels,\n            d = this.horiz,\n            v = this.getSlotWidth(),\n            f = Math.max(1, Math.round(v - 2 * (m.padding || 5))),\n            p = {},\n            y = this.labelMetrics(),\n            t = m.style && m.style.textOverflow,\n            g,\n            z = 0,\n            E,\n            w;e(m.rotation) || (p.rotation = m.rotation || 0);b(h, function (a) {\n          (a = n[a]) && a.labelLength > z && (z = a.labelLength);\n        });this.maxLabelLength = z;if (this.autoRotation) z > f && z > y.h ? p.rotation = this.labelRotation : this.labelRotation = 0;else if (v && (g = { width: f + \"px\" }, !t)) for (g.textOverflow = \"clip\", E = h.length; !d && E--;) {\n          if (w = h[E], f = n[w].label) f.styles && \"ellipsis\" === f.styles.textOverflow ? f.css({ textOverflow: \"clip\" }) : n[w].labelLength > v && f.css({ width: v + \"px\" }), f.getBBox().height > this.len / h.length - (y.h - y.f) && (f.specCss = { textOverflow: \"ellipsis\" });\n        }p.rotation && (g = { width: (z > .5 * a.chartHeight ? .33 * a.chartHeight : a.chartHeight) + \"px\" }, t || (g.textOverflow = \"ellipsis\"));if (this.labelAlign = m.align || this.autoLabelAlign(this.labelRotation)) p.align = this.labelAlign;b(h, function (a) {\n          var b = (a = n[a]) && a.label;b && (b.attr(p), g && b.css(x(g, b.specCss)), delete b.specCss, a.rotation = p.rotation);\n        });this.tickRotCorr = c.rotCorr(y.b, this.labelRotation || 0, 0 !== this.side);\n      }, hasData: function hasData() {\n        return this.hasVisibleSeries || l(this.min) && l(this.max) && !!this.tickPositions;\n      }, addTitle: function addTitle(a) {\n        var b = this.chart.renderer,\n            c = this.horiz,\n            k = this.opposite,\n            e = this.options.title,\n            h;this.axisTitle || ((h = e.textAlign) || (h = (c ? { low: \"left\", middle: \"center\", high: \"right\" } : { low: k ? \"right\" : \"left\", middle: \"center\", high: k ? \"left\" : \"right\" })[e.align]), this.axisTitle = b.text(e.text, 0, 0, e.useHTML).attr({ zIndex: 7, rotation: e.rotation || 0, align: h }).addClass(\"highcharts-axis-title\").css(e.style).add(this.axisGroup), this.axisTitle.isNew = !0);this.axisTitle[a ? \"show\" : \"hide\"](!0);\n      }, generateTick: function generateTick(a) {\n        var b = this.ticks;b[a] ? b[a].addLabel() : b[a] = new I(this, a);\n      }, getOffset: function getOffset() {\n        var a = this,\n            c = a.chart,\n            e = c.renderer,\n            h = a.options,\n            n = a.tickPositions,\n            m = a.ticks,\n            d = a.horiz,\n            f = a.side,\n            p = c.inverted ? [1, 0, 3, 2][f] : f,\n            y,\n            t,\n            x = 0,\n            g,\n            z = 0,\n            E = h.title,\n            q = h.labels,\n            F = 0,\n            J = c.axisOffset,\n            c = c.clipOffset,\n            K = [-1, 1, 1, -1][f],\n            C,\n            I = h.className,\n            r = a.axisParent,\n            u = this.tickSize(\"tick\");y = a.hasData();a.showAxis = t = y || w(h.showEmpty, !0);a.staggerLines = a.horiz && q.staggerLines;\n        a.axisGroup || (a.gridGroup = e.g(\"grid\").attr({ zIndex: h.gridZIndex || 1 }).addClass(\"highcharts-\" + this.coll.toLowerCase() + \"-grid \" + (I || \"\")).add(r), a.axisGroup = e.g(\"axis\").attr({ zIndex: h.zIndex || 2 }).addClass(\"highcharts-\" + this.coll.toLowerCase() + \" \" + (I || \"\")).add(r), a.labelGroup = e.g(\"axis-labels\").attr({ zIndex: q.zIndex || 7 }).addClass(\"highcharts-\" + a.coll.toLowerCase() + \"-labels \" + (I || \"\")).add(r));if (y || a.isLinked) b(n, function (b, c) {\n          a.generateTick(b, c);\n        }), a.renderUnsquish(), !1 === q.reserveSpace || 0 !== f && 2 !== f && { 1: \"left\", 3: \"right\" }[f] !== a.labelAlign && \"center\" !== a.labelAlign || b(n, function (a) {\n          F = Math.max(m[a].getLabelSize(), F);\n        }), a.staggerLines && (F *= a.staggerLines, a.labelOffset = F * (a.opposite ? -1 : 1));else for (C in m) {\n          m[C].destroy(), delete m[C];\n        }E && E.text && !1 !== E.enabled && (a.addTitle(t), t && (x = a.axisTitle.getBBox()[d ? \"height\" : \"width\"], g = E.offset, z = l(g) ? 0 : w(E.margin, d ? 5 : 10)));a.renderLine();a.offset = K * w(h.offset, J[f]);a.tickRotCorr = a.tickRotCorr || { x: 0, y: 0 };e = 0 === f ? -a.labelMetrics().h : 2 === f ? a.tickRotCorr.y : 0;z = Math.abs(F) + z;F && (z = z - e + K * (d ? w(q.y, a.tickRotCorr.y + 8 * K) : q.x));a.axisTitleMargin = w(g, z);J[f] = Math.max(J[f], a.axisTitleMargin + x + K * a.offset, z, y && n.length && u ? u[0] : 0);h = h.offset ? 0 : 2 * Math.floor(a.axisLine.strokeWidth() / 2);c[p] = Math.max(c[p], h);\n      }, getLinePath: function getLinePath(a) {\n        var b = this.chart,\n            c = this.opposite,\n            k = this.offset,\n            e = this.horiz,\n            h = this.left + (c ? this.width : 0) + k,\n            k = b.chartHeight - this.bottom - (c ? this.height : 0) + k;c && (a *= -1);return b.renderer.crispLine([\"M\", e ? this.left : h, e ? k : this.top, \"L\", e ? b.chartWidth - this.right : h, e ? k : b.chartHeight - this.bottom], a);\n      }, renderLine: function renderLine() {\n        this.axisLine || (this.axisLine = this.chart.renderer.path().addClass(\"highcharts-axis-line\").add(this.axisGroup), this.axisLine.attr({ stroke: this.options.lineColor, \"stroke-width\": this.options.lineWidth, zIndex: 7 }));\n      }, getTitlePosition: function getTitlePosition() {\n        var a = this.horiz,\n            b = this.left,\n            c = this.top,\n            e = this.len,\n            h = this.options.title,\n            n = a ? b : c,\n            m = this.opposite,\n            d = this.offset,\n            f = h.x || 0,\n            p = h.y || 0,\n            y = this.chart.renderer.fontMetrics(h.style && h.style.fontSize, this.axisTitle).f,\n            e = { low: n + (a ? 0 : e),\n          middle: n + e / 2, high: n + (a ? e : 0) }[h.align],\n            b = (a ? c + this.height : b) + (a ? 1 : -1) * (m ? -1 : 1) * this.axisTitleMargin + (2 === this.side ? y : 0);return { x: a ? e + f : b + (m ? this.width : 0) + d + f, y: a ? b + p - (m ? this.height : 0) + d : e + p };\n      }, renderMinorTick: function renderMinorTick(a) {\n        var b = this.chart.hasRendered && z(this.oldMin),\n            c = this.minorTicks;c[a] || (c[a] = new I(this, a, \"minor\"));b && c[a].isNew && c[a].render(null, !0);c[a].render(null, !1, 1);\n      }, renderTick: function renderTick(a, b) {\n        var c = this.isLinked,\n            e = this.ticks,\n            k = this.chart.hasRendered && z(this.oldMin);if (!c || a >= this.min && a <= this.max) e[a] || (e[a] = new I(this, a)), k && e[a].isNew && e[a].render(b, !0, .1), e[a].render(b);\n      }, render: function render() {\n        var a = this,\n            c = a.chart,\n            e = a.options,\n            n = a.isLog,\n            m = a.lin2log,\n            d = a.isLinked,\n            v = a.tickPositions,\n            f = a.axisTitle,\n            p = a.ticks,\n            y = a.minorTicks,\n            t = a.alternateBands,\n            x = e.stackLabels,\n            z = e.alternateGridColor,\n            g = a.tickmarkOffset,\n            E = a.axisLine,\n            w = a.showAxis,\n            l = A(c.renderer.globalAnimation),\n            q,\n            F;a.labelEdge.length = 0;a.overlap = !1;b([p, y, t], function (a) {\n          for (var b in a) {\n            a[b].isActive = !1;\n          }\n        });if (a.hasData() || d) a.minorTickInterval && !a.categories && b(a.getMinorTickPositions(), function (b) {\n          a.renderMinorTick(b);\n        }), v.length && (b(v, function (b, c) {\n          a.renderTick(b, c);\n        }), g && (0 === a.min || a.single) && (p[-1] || (p[-1] = new I(a, -1, null, !0)), p[-1].render(-1))), z && b(v, function (b, e) {\n          F = void 0 !== v[e + 1] ? v[e + 1] + g : a.max - g;0 === e % 2 && b < a.max && F <= a.max + (c.polar ? -g : g) && (t[b] || (t[b] = new h(a)), q = b + g, t[b].options = { from: n ? m(q) : q, to: n ? m(F) : F, color: z }, t[b].render(), t[b].isActive = !0);\n        }), a._addedPlotLB || (b((e.plotLines || []).concat(e.plotBands || []), function (b) {\n          a.addPlotBandOrLine(b);\n        }), a._addedPlotLB = !0);b([p, y, t], function (a) {\n          var b,\n              e,\n              h = [],\n              k = l.duration;for (b in a) {\n            a[b].isActive || (a[b].render(b, !1, 0), a[b].isActive = !1, h.push(b));\n          }K(function () {\n            for (e = h.length; e--;) {\n              a[h[e]] && !a[h[e]].isActive && (a[h[e]].destroy(), delete a[h[e]]);\n            }\n          }, a !== t && c.hasRendered && k ? k : 0);\n        });E && (E[E.isPlaced ? \"animate\" : \"attr\"]({ d: this.getLinePath(E.strokeWidth()) }), E.isPlaced = !0, E[w ? \"show\" : \"hide\"](!0));f && w && (f[f.isNew ? \"attr\" : \"animate\"](a.getTitlePosition()), f.isNew = !1);x && x.enabled && a.renderStackTotals();a.isDirty = !1;\n      }, redraw: function redraw() {\n        this.visible && (this.render(), b(this.plotLinesAndBands, function (a) {\n          a.render();\n        }));b(this.series, function (a) {\n          a.isDirty = !0;\n        });\n      }, keepProps: \"extKey hcEvents names series userMax userMin\".split(\" \"), destroy: function destroy(a) {\n        var c = this,\n            e = c.stacks,\n            h,\n            k = c.plotLinesAndBands,\n            m;a || y(c);for (h in e) {\n          d(e[h]), e[h] = null;\n        }b([c.ticks, c.minorTicks, c.alternateBands], function (a) {\n          d(a);\n        });if (k) for (a = k.length; a--;) {\n          k[a].destroy();\n        }b(\"stackTotalGroup axisLine axisTitle axisGroup gridGroup labelGroup cross\".split(\" \"), function (a) {\n          c[a] && (c[a] = c[a].destroy());\n        });\n        for (m in c) {\n          c.hasOwnProperty(m) && -1 === n(m, c.keepProps) && delete c[m];\n        }\n      }, drawCrosshair: function drawCrosshair(a, b) {\n        var c,\n            e = this.crosshair,\n            h = w(e.snap, !0),\n            k,\n            n = this.cross;a || (a = this.cross && this.cross.e);this.crosshair && !1 !== (l(b) || !h) ? (h ? l(b) && (k = this.isXAxis ? b.plotX : this.len - b.plotY) : k = a && (this.horiz ? a.chartX - this.pos : this.len - a.chartY + this.pos), l(k) && (c = this.getPlotLinePath(b && (this.isXAxis ? b.x : w(b.stackY, b.y)), null, null, null, k) || null), l(c) ? (b = this.categories && !this.isRadial, n || (this.cross = n = this.chart.renderer.path().addClass(\"highcharts-crosshair highcharts-crosshair-\" + (b ? \"category \" : \"thin \") + e.className).attr({ zIndex: w(e.zIndex, 2) }).add(), n.attr({ stroke: e.color || (b ? g(\"#ccd6eb\").setOpacity(.25).get() : \"#cccccc\"), \"stroke-width\": w(e.width, 1) }), e.dashStyle && n.attr({ dashstyle: e.dashStyle })), n.show().attr({ d: c }), b && !e.width && n.attr({ \"stroke-width\": this.transA }), this.cross.e = a) : this.hideCrosshair()) : this.hideCrosshair();\n      }, hideCrosshair: function hideCrosshair() {\n        this.cross && this.cross.hide();\n      } };p(a.Axis.prototype, r);\n  })(L);(function (a) {\n    var B = a.Axis,\n        A = a.Date,\n        H = a.dateFormat,\n        G = a.defaultOptions,\n        r = a.defined,\n        g = a.each,\n        f = a.extend,\n        u = a.getMagnitude,\n        l = a.getTZOffset,\n        q = a.normalizeTickInterval,\n        d = a.pick,\n        b = a.timeUnits;B.prototype.getTimeTicks = function (a, q, t, m) {\n      var c = [],\n          n = {},\n          p = G.global.useUTC,\n          z,\n          e = new A(q - l(q)),\n          x = A.hcMakeTime,\n          F = a.unitRange,\n          w = a.count,\n          h;if (r(q)) {\n        e[A.hcSetMilliseconds](F >= b.second ? 0 : w * Math.floor(e.getMilliseconds() / w));if (F >= b.second) e[A.hcSetSeconds](F >= b.minute ? 0 : w * Math.floor(e.getSeconds() / w));if (F >= b.minute) e[A.hcSetMinutes](F >= b.hour ? 0 : w * Math.floor(e[A.hcGetMinutes]() / w));if (F >= b.hour) e[A.hcSetHours](F >= b.day ? 0 : w * Math.floor(e[A.hcGetHours]() / w));if (F >= b.day) e[A.hcSetDate](F >= b.month ? 1 : w * Math.floor(e[A.hcGetDate]() / w));F >= b.month && (e[A.hcSetMonth](F >= b.year ? 0 : w * Math.floor(e[A.hcGetMonth]() / w)), z = e[A.hcGetFullYear]());if (F >= b.year) e[A.hcSetFullYear](z - z % w);if (F === b.week) e[A.hcSetDate](e[A.hcGetDate]() - e[A.hcGetDay]() + d(m, 1));z = e[A.hcGetFullYear]();m = e[A.hcGetMonth]();var y = e[A.hcGetDate](),\n            J = e[A.hcGetHours]();if (A.hcTimezoneOffset || A.hcGetTimezoneOffset) h = (!p || !!A.hcGetTimezoneOffset) && (t - q > 4 * b.month || l(q) !== l(t)), e = e.getTime(), e = new A(e + l(e));p = e.getTime();for (q = 1; p < t;) {\n          c.push(p), p = F === b.year ? x(z + q * w, 0) : F === b.month ? x(z, m + q * w) : !h || F !== b.day && F !== b.week ? h && F === b.hour ? x(z, m, y, J + q * w) : p + F * w : x(z, m, y + q * w * (F === b.day ? 1 : 7)), q++;\n        }c.push(p);F <= b.hour && 1E4 > c.length && g(c, function (a) {\n          0 === a % 18E5 && \"000000000\" === H(\"%H%M%S%L\", a) && (n[a] = \"day\");\n        });\n      }c.info = f(a, { higherRanks: n, totalRange: F * w });return c;\n    };B.prototype.normalizeTimeTickInterval = function (a, d) {\n      var f = d || [[\"millisecond\", [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]], [\"second\", [1, 2, 5, 10, 15, 30]], [\"minute\", [1, 2, 5, 10, 15, 30]], [\"hour\", [1, 2, 3, 4, 6, 8, 12]], [\"day\", [1, 2]], [\"week\", [1, 2]], [\"month\", [1, 2, 3, 4, 6]], [\"year\", null]];d = f[f.length - 1];var m = b[d[0]],\n          c = d[1],\n          n;for (n = 0; n < f.length && !(d = f[n], m = b[d[0]], c = d[1], f[n + 1] && a <= (m * c[c.length - 1] + b[f[n + 1][0]]) / 2); n++) {}m === b.year && a < 5 * m && (c = [1, 2, 5]);a = q(a / m, c, \"year\" === d[0] ? Math.max(u(a / m), 1) : 1);return { unitRange: m, count: a, unitName: d[0] };\n    };\n  })(L);(function (a) {\n    var B = a.Axis,\n        A = a.getMagnitude,\n        H = a.map,\n        G = a.normalizeTickInterval,\n        r = a.pick;B.prototype.getLogTickPositions = function (a, f, u, l) {\n      var g = this.options,\n          d = this.len,\n          b = this.lin2log,\n          p = this.log2lin,\n          C = [];l || (this._minorAutoInterval = null);if (.5 <= a) a = Math.round(a), C = this.getLinearTickPositions(a, f, u);else if (.08 <= a) for (var d = Math.floor(f), t, m, c, n, E, g = .3 < a ? [1, 2, 4] : .15 < a ? [1, 2, 4, 6, 8] : [1, 2, 3, 4, 5, 6, 7, 8, 9]; d < u + 1 && !E; d++) {\n        for (m = g.length, t = 0; t < m && !E; t++) {\n          c = p(b(d) * g[t]), c > f && (!l || n <= u) && void 0 !== n && C.push(n), n > u && (E = !0), n = c;\n        }\n      } else f = b(f), u = b(u), a = g[l ? \"minorTickInterval\" : \"tickInterval\"], a = r(\"auto\" === a ? null : a, this._minorAutoInterval, g.tickPixelInterval / (l ? 5 : 1) * (u - f) / ((l ? d / this.tickPositions.length : d) || 1)), a = G(a, null, A(a)), C = H(this.getLinearTickPositions(a, f, u), p), l || (this._minorAutoInterval = a / 5);l || (this.tickInterval = a);return C;\n    };B.prototype.log2lin = function (a) {\n      return Math.log(a) / Math.LN10;\n    };B.prototype.lin2log = function (a) {\n      return Math.pow(10, a);\n    };\n  })(L);(function (a) {\n    var B = a.dateFormat,\n        A = a.each,\n        H = a.extend,\n        G = a.format,\n        r = a.isNumber,\n        g = a.map,\n        f = a.merge,\n        u = a.pick,\n        l = a.splat,\n        q = a.syncTimeout,\n        d = a.timeUnits;a.Tooltip = function () {\n      this.init.apply(this, arguments);\n    };a.Tooltip.prototype = { init: function init(a, d) {\n        this.chart = a;this.options = d;this.crosshairs = [];this.now = { x: 0, y: 0 };this.isHidden = !0;this.split = d.split && !a.inverted;this.shared = d.shared || this.split;\n      }, cleanSplit: function cleanSplit(a) {\n        A(this.chart.series, function (b) {\n          var d = b && b.tt;d && (!d.isActive || a ? b.tt = d.destroy() : d.isActive = !1);\n        });\n      }, getLabel: function getLabel() {\n        var a = this.chart.renderer,\n            d = this.options;this.label || (this.split ? this.label = a.g(\"tooltip\") : (this.label = a.label(\"\", 0, 0, d.shape || \"callout\", null, null, d.useHTML, null, \"tooltip\").attr({ padding: d.padding, r: d.borderRadius }), this.label.attr({ fill: d.backgroundColor, \"stroke-width\": d.borderWidth }).css(d.style).shadow(d.shadow)), this.label.attr({ zIndex: 8 }).add());return this.label;\n      }, update: function update(a) {\n        this.destroy();this.init(this.chart, f(!0, this.options, a));\n      }, destroy: function destroy() {\n        this.label && (this.label = this.label.destroy());this.split && this.tt && (this.cleanSplit(this.chart, !0), this.tt = this.tt.destroy());clearTimeout(this.hideTimer);clearTimeout(this.tooltipTimeout);\n      },\n      move: function move(a, d, f, t) {\n        var b = this,\n            c = b.now,\n            n = !1 !== b.options.animation && !b.isHidden && (1 < Math.abs(a - c.x) || 1 < Math.abs(d - c.y)),\n            p = b.followPointer || 1 < b.len;H(c, { x: n ? (2 * c.x + a) / 3 : a, y: n ? (c.y + d) / 2 : d, anchorX: p ? void 0 : n ? (2 * c.anchorX + f) / 3 : f, anchorY: p ? void 0 : n ? (c.anchorY + t) / 2 : t });b.getLabel().attr(c);n && (clearTimeout(this.tooltipTimeout), this.tooltipTimeout = setTimeout(function () {\n          b && b.move(a, d, f, t);\n        }, 32));\n      }, hide: function hide(a) {\n        var b = this;clearTimeout(this.hideTimer);a = u(a, this.options.hideDelay, 500);this.isHidden || (this.hideTimer = q(function () {\n          b.getLabel()[a ? \"fadeOut\" : \"hide\"]();b.isHidden = !0;\n        }, a));\n      }, getAnchor: function getAnchor(a, d) {\n        var b,\n            f = this.chart,\n            m = f.inverted,\n            c = f.plotTop,\n            n = f.plotLeft,\n            p = 0,\n            z = 0,\n            e,\n            x;a = l(a);b = a[0].tooltipPos;this.followPointer && d && (void 0 === d.chartX && (d = f.pointer.normalize(d)), b = [d.chartX - f.plotLeft, d.chartY - c]);b || (A(a, function (a) {\n          e = a.series.yAxis;x = a.series.xAxis;p += a.plotX + (!m && x ? x.left - n : 0);z += (a.plotLow ? (a.plotLow + a.plotHigh) / 2 : a.plotY) + (!m && e ? e.top - c : 0);\n        }), p /= a.length, z /= a.length, b = [m ? f.plotWidth - z : p, this.shared && !m && 1 < a.length && d ? d.chartY - c : m ? f.plotHeight - p : z]);return g(b, Math.round);\n      }, getPosition: function getPosition(a, d, f) {\n        var b = this.chart,\n            m = this.distance,\n            c = {},\n            n = f.h || 0,\n            p,\n            z = [\"y\", b.chartHeight, d, f.plotY + b.plotTop, b.plotTop, b.plotTop + b.plotHeight],\n            e = [\"x\", b.chartWidth, a, f.plotX + b.plotLeft, b.plotLeft, b.plotLeft + b.plotWidth],\n            x = !this.followPointer && u(f.ttBelow, !b.inverted === !!f.negative),\n            g = function g(a, b, e, h, d, f) {\n          var k = e < h - m,\n              y = h + m + e < b,\n              p = h - m - e;h += m;if (x && y) c[a] = h;else if (!x && k) c[a] = p;else if (k) c[a] = Math.min(f - e, 0 > p - n ? p : p - n);else if (y) c[a] = Math.max(d, h + n + e > b ? h : h + n);else return !1;\n        },\n            w = function w(a, b, e, h) {\n          var k;h < m || h > b - m ? k = !1 : c[a] = h < e / 2 ? 1 : h > b - e / 2 ? b - e - 2 : h - e / 2;return k;\n        },\n            h = function h(a) {\n          var b = z;z = e;e = b;p = a;\n        },\n            y = function y() {\n          !1 !== g.apply(0, z) ? !1 !== w.apply(0, e) || p || (h(!0), y()) : p ? c.x = c.y = 0 : (h(!0), y());\n        };(b.inverted || 1 < this.len) && h();y();return c;\n      }, defaultFormatter: function defaultFormatter(a) {\n        var b = this.points || l(this),\n            d;d = [a.tooltipFooterHeaderFormatter(b[0])];d = d.concat(a.bodyFormatter(b));d.push(a.tooltipFooterHeaderFormatter(b[0], !0));return d;\n      }, refresh: function refresh(a, d) {\n        var b = this.chart,\n            f,\n            m = this.options,\n            c,\n            n,\n            p = {},\n            z = [];f = m.formatter || this.defaultFormatter;var p = b.hoverPoints,\n            e = this.shared;clearTimeout(this.hideTimer);this.followPointer = l(a)[0].series.tooltipOptions.followPointer;n = this.getAnchor(a, d);d = n[0];c = n[1];!e || a.series && a.series.noSharedTooltip ? p = a.getLabelConfig() : (b.hoverPoints = a, p && A(p, function (a) {\n          a.setState();\n        }), A(a, function (a) {\n          a.setState(\"hover\");z.push(a.getLabelConfig());\n        }), p = { x: a[0].category, y: a[0].y }, p.points = z, a = a[0]);this.len = z.length;p = f.call(p, this);e = a.series;this.distance = u(e.tooltipOptions.distance, 16);!1 === p ? this.hide() : (f = this.getLabel(), this.isHidden && f.attr({ opacity: 1 }).show(), this.split ? this.renderSplit(p, b.hoverPoints) : (f.attr({ text: p && p.join ? p.join(\"\") : p }), f.removeClass(/highcharts-color-[\\d]+/g).addClass(\"highcharts-color-\" + u(a.colorIndex, e.colorIndex)), f.attr({ stroke: m.borderColor || a.color || e.color || \"#666666\" }), this.updatePosition({ plotX: d, plotY: c, negative: a.negative, ttBelow: a.ttBelow, h: n[2] || 0 })), this.isHidden = !1);\n      }, renderSplit: function renderSplit(b, d) {\n        var f = this,\n            p = [],\n            m = this.chart,\n            c = m.renderer,\n            n = !0,\n            g = this.options,\n            z,\n            e = this.getLabel();A(b.slice(0, d.length + 1), function (a, b) {\n          b = d[b - 1] || { isHeader: !0, plotX: d[0].plotX };var x = b.series || f,\n              h = x.tt,\n              y = b.series || {},\n              t = \"highcharts-color-\" + u(b.colorIndex, y.colorIndex, \"none\");h || (x.tt = h = c.label(null, null, null, \"callout\").addClass(\"highcharts-tooltip-box \" + t).attr({ padding: g.padding, r: g.borderRadius, fill: g.backgroundColor, stroke: b.color || y.color || \"#333333\", \"stroke-width\": g.borderWidth }).add(e));h.isActive = !0;h.attr({ text: a });\n          h.css(g.style);a = h.getBBox();y = a.width + h.strokeWidth();b.isHeader ? (z = a.height, y = Math.max(0, Math.min(b.plotX + m.plotLeft - y / 2, m.chartWidth - y))) : y = b.plotX + m.plotLeft - u(g.distance, 16) - y;0 > y && (n = !1);a = (b.series && b.series.yAxis && b.series.yAxis.pos) + (b.plotY || 0);a -= m.plotTop;p.push({ target: b.isHeader ? m.plotHeight + z : a, rank: b.isHeader ? 1 : 0, size: x.tt.getBBox().height + 1, point: b, x: y, tt: h });\n        });this.cleanSplit();a.distribute(p, m.plotHeight + z);A(p, function (a) {\n          var b = a.point,\n              c = b.series;a.tt.attr({ visibility: void 0 === a.pos ? \"hidden\" : \"inherit\", x: n || b.isHeader ? a.x : b.plotX + m.plotLeft + u(g.distance, 16), y: a.pos + m.plotTop, anchorX: b.isHeader ? b.plotX + m.plotLeft : b.plotX + c.xAxis.pos, anchorY: b.isHeader ? a.pos + m.plotTop - 15 : b.plotY + c.yAxis.pos });\n        });\n      }, updatePosition: function updatePosition(a) {\n        var b = this.chart,\n            d = this.getLabel(),\n            d = (this.options.positioner || this.getPosition).call(this, d.width, d.height, a);this.move(Math.round(d.x), Math.round(d.y || 0), a.plotX + b.plotLeft, a.plotY + b.plotTop);\n      }, getDateFormat: function getDateFormat(a, f, g, t) {\n        var b = B(\"%m-%d %H:%M:%S.%L\", f),\n            c,\n            n,\n            p = { millisecond: 15, second: 12, minute: 9, hour: 6, day: 3 },\n            z = \"millisecond\";for (n in d) {\n          if (a === d.week && +B(\"%w\", f) === g && \"00:00:00.000\" === b.substr(6)) {\n            n = \"week\";break;\n          }if (d[n] > a) {\n            n = z;break;\n          }if (p[n] && b.substr(p[n]) !== \"01-01 00:00:00.000\".substr(p[n])) break;\"week\" !== n && (z = n);\n        }n && (c = t[n]);return c;\n      }, getXDateFormat: function getXDateFormat(a, d, f) {\n        d = d.dateTimeLabelFormats;var b = f && f.closestPointRange;return (b ? this.getDateFormat(b, a.x, f.options.startOfWeek, d) : d.day) || d.year;\n      }, tooltipFooterHeaderFormatter: function tooltipFooterHeaderFormatter(a, d) {\n        var b = d ? \"footer\" : \"header\";d = a.series;var f = d.tooltipOptions,\n            m = f.xDateFormat,\n            c = d.xAxis,\n            n = c && \"datetime\" === c.options.type && r(a.key),\n            b = f[b + \"Format\"];n && !m && (m = this.getXDateFormat(a, f, c));n && m && (b = b.replace(\"{point.key}\", \"{point.key:\" + m + \"}\"));return G(b, { point: a, series: d });\n      }, bodyFormatter: function bodyFormatter(a) {\n        return g(a, function (a) {\n          var b = a.series.tooltipOptions;return (b.pointFormatter || a.point.tooltipFormatter).call(a.point, b.pointFormat);\n        });\n      } };\n  })(L);(function (a) {\n    var B = a.addEvent,\n        A = a.attr,\n        H = a.charts,\n        G = a.color,\n        r = a.css,\n        g = a.defined,\n        f = a.doc,\n        u = a.each,\n        l = a.extend,\n        q = a.fireEvent,\n        d = a.offset,\n        b = a.pick,\n        p = a.removeEvent,\n        C = a.splat,\n        t = a.Tooltip,\n        m = a.win;a.Pointer = function (a, b) {\n      this.init(a, b);\n    };a.Pointer.prototype = { init: function init(a, d) {\n        this.options = d;this.chart = a;this.runChartClick = d.chart.events && !!d.chart.events.click;this.pinchDown = [];this.lastValidTouch = {};t && d.tooltip.enabled && (a.tooltip = new t(a, d.tooltip), this.followTouchMove = b(d.tooltip.followTouchMove, !0));this.setDOMEvents();\n      }, zoomOption: function zoomOption(a) {\n        var c = this.chart,\n            d = c.options.chart,\n            m = d.zoomType || \"\",\n            c = c.inverted;/touch/.test(a.type) && (m = b(d.pinchType, m));this.zoomX = a = /x/.test(m);this.zoomY = m = /y/.test(m);this.zoomHor = a && !c || m && c;this.zoomVert = m && !c || a && c;this.hasZoom = a || m;\n      }, normalize: function normalize(a, b) {\n        var c, n;a = a || m.event;a.target || (a.target = a.srcElement);n = a.touches ? a.touches.length ? a.touches.item(0) : a.changedTouches[0] : a;b || (this.chartPosition = b = d(this.chart.container));void 0 === n.pageX ? (c = Math.max(a.x, a.clientX - b.left), b = a.y) : (c = n.pageX - b.left, b = n.pageY - b.top);return l(a, { chartX: Math.round(c),\n          chartY: Math.round(b) });\n      }, getCoordinates: function getCoordinates(a) {\n        var b = { xAxis: [], yAxis: [] };u(this.chart.axes, function (c) {\n          b[c.isXAxis ? \"xAxis\" : \"yAxis\"].push({ axis: c, value: c.toValue(a[c.horiz ? \"chartX\" : \"chartY\"]) });\n        });return b;\n      }, runPointActions: function runPointActions(c) {\n        var d = this.chart,\n            m = d.series,\n            p = d.tooltip,\n            e = p ? p.shared : !1,\n            g = !0,\n            t = d.hoverPoint,\n            w = d.hoverSeries,\n            h,\n            y,\n            l,\n            q = [],\n            r;if (!e && !w) for (h = 0; h < m.length; h++) {\n          if (m[h].directTouch || !m[h].options.stickyTracking) m = [];\n        }w && (e ? w.noSharedTooltip : w.directTouch) && t ? q = [t] : (e || !w || w.options.stickyTracking || (m = [w]), u(m, function (a) {\n          y = a.noSharedTooltip && e;l = !e && a.directTouch;a.visible && !y && !l && b(a.options.enableMouseTracking, !0) && (r = a.searchPoint(c, !y && 1 === a.kdDimensions)) && r.series && q.push(r);\n        }), q.sort(function (a, b) {\n          var c = a.distX - b.distX,\n              h = a.dist - b.dist,\n              k = (b.series.group && b.series.group.zIndex) - (a.series.group && a.series.group.zIndex);return 0 !== c && e ? c : 0 !== h ? h : 0 !== k ? k : a.series.index > b.series.index ? -1 : 1;\n        }));if (e) for (h = q.length; h--;) {\n          (q[h].x !== q[0].x || q[h].series.noSharedTooltip) && q.splice(h, 1);\n        }if (q[0] && (q[0] !== this.prevKDPoint || p && p.isHidden)) {\n          if (e && !q[0].series.noSharedTooltip) {\n            for (h = 0; h < q.length; h++) {\n              q[h].onMouseOver(c, q[h] !== (w && w.directTouch && t || q[0]));\n            }q.length && p && p.refresh(q.sort(function (a, b) {\n              return a.series.index - b.series.index;\n            }), c);\n          } else if (p && p.refresh(q[0], c), !w || !w.directTouch) q[0].onMouseOver(c);this.prevKDPoint = q[0];g = !1;\n        }g && (m = w && w.tooltipOptions.followPointer, p && m && !p.isHidden && (m = p.getAnchor([{}], c), p.updatePosition({ plotX: m[0], plotY: m[1] })));this.unDocMouseMove || (this.unDocMouseMove = B(f, \"mousemove\", function (b) {\n          if (H[a.hoverChartIndex]) H[a.hoverChartIndex].pointer.onDocumentMouseMove(b);\n        }));u(e ? q : [b(t, q[0])], function (a) {\n          u(d.axes, function (b) {\n            (!a || a.series && a.series[b.coll] === b) && b.drawCrosshair(c, a);\n          });\n        });\n      }, reset: function reset(a, b) {\n        var c = this.chart,\n            d = c.hoverSeries,\n            e = c.hoverPoint,\n            n = c.hoverPoints,\n            m = c.tooltip,\n            f = m && m.shared ? n : e;a && f && u(C(f), function (b) {\n          b.series.isCartesian && void 0 === b.plotX && (a = !1);\n        });if (a) m && f && (m.refresh(f), e && (e.setState(e.state, !0), u(c.axes, function (a) {\n          a.crosshair && a.drawCrosshair(null, e);\n        })));else {\n          if (e) e.onMouseOut();n && u(n, function (a) {\n            a.setState();\n          });if (d) d.onMouseOut();m && m.hide(b);this.unDocMouseMove && (this.unDocMouseMove = this.unDocMouseMove());u(c.axes, function (a) {\n            a.hideCrosshair();\n          });this.hoverX = this.prevKDPoint = c.hoverPoints = c.hoverPoint = null;\n        }\n      }, scaleGroups: function scaleGroups(a, b) {\n        var c = this.chart,\n            d;u(c.series, function (e) {\n          d = a || e.getPlotBox();e.xAxis && e.xAxis.zoomEnabled && e.group && (e.group.attr(d), e.markerGroup && (e.markerGroup.attr(d), e.markerGroup.clip(b ? c.clipRect : null)), e.dataLabelsGroup && e.dataLabelsGroup.attr(d));\n        });c.clipRect.attr(b || c.clipBox);\n      }, dragStart: function dragStart(a) {\n        var b = this.chart;b.mouseIsDown = a.type;b.cancelClick = !1;b.mouseDownX = this.mouseDownX = a.chartX;b.mouseDownY = this.mouseDownY = a.chartY;\n      }, drag: function drag(a) {\n        var b = this.chart,\n            c = b.options.chart,\n            d = a.chartX,\n            e = a.chartY,\n            m = this.zoomHor,\n            f = this.zoomVert,\n            p = b.plotLeft,\n            h = b.plotTop,\n            y = b.plotWidth,\n            g = b.plotHeight,\n            t,\n            q = this.selectionMarker,\n            k = this.mouseDownX,\n            l = this.mouseDownY,\n            r = c.panKey && a[c.panKey + \"Key\"];q && q.touch || (d < p ? d = p : d > p + y && (d = p + y), e < h ? e = h : e > h + g && (e = h + g), this.hasDragged = Math.sqrt(Math.pow(k - d, 2) + Math.pow(l - e, 2)), 10 < this.hasDragged && (t = b.isInsidePlot(k - p, l - h), b.hasCartesianSeries && (this.zoomX || this.zoomY) && t && !r && !q && (this.selectionMarker = q = b.renderer.rect(p, h, m ? 1 : y, f ? 1 : g, 0).attr({ fill: c.selectionMarkerFill || G(\"#335cad\").setOpacity(.25).get(), \"class\": \"highcharts-selection-marker\", zIndex: 7 }).add()), q && m && (d -= k, q.attr({ width: Math.abs(d), x: (0 < d ? 0 : d) + k })), q && f && (d = e - l, q.attr({ height: Math.abs(d), y: (0 < d ? 0 : d) + l })), t && !q && c.panning && b.pan(a, c.panning)));\n      }, drop: function drop(a) {\n        var b = this,\n            c = this.chart,\n            d = this.hasPinched;if (this.selectionMarker) {\n          var e = { originalEvent: a, xAxis: [], yAxis: [] },\n              m = this.selectionMarker,\n              f = m.attr ? m.attr(\"x\") : m.x,\n              p = m.attr ? m.attr(\"y\") : m.y,\n              h = m.attr ? m.attr(\"width\") : m.width,\n              y = m.attr ? m.attr(\"height\") : m.height,\n              t;if (this.hasDragged || d) u(c.axes, function (c) {\n            if (c.zoomEnabled && g(c.min) && (d || b[{ xAxis: \"zoomX\", yAxis: \"zoomY\" }[c.coll]])) {\n              var m = c.horiz,\n                  k = \"touchend\" === a.type ? c.minPixelPadding : 0,\n                  n = c.toValue((m ? f : p) + k),\n                  m = c.toValue((m ? f + h : p + y) - k);e[c.coll].push({ axis: c, min: Math.min(n, m), max: Math.max(n, m) });t = !0;\n            }\n          }), t && q(c, \"selection\", e, function (a) {\n            c.zoom(l(a, d ? { animation: !1 } : null));\n          });this.selectionMarker = this.selectionMarker.destroy();d && this.scaleGroups();\n        }c && (r(c.container, { cursor: c._cursor }), c.cancelClick = 10 < this.hasDragged, c.mouseIsDown = this.hasDragged = this.hasPinched = !1, this.pinchDown = []);\n      }, onContainerMouseDown: function onContainerMouseDown(a) {\n        a = this.normalize(a);this.zoomOption(a);a.preventDefault && a.preventDefault();this.dragStart(a);\n      }, onDocumentMouseUp: function onDocumentMouseUp(b) {\n        H[a.hoverChartIndex] && H[a.hoverChartIndex].pointer.drop(b);\n      }, onDocumentMouseMove: function onDocumentMouseMove(a) {\n        var b = this.chart,\n            c = this.chartPosition;a = this.normalize(a, c);!c || this.inClass(a.target, \"highcharts-tracker\") || b.isInsidePlot(a.chartX - b.plotLeft, a.chartY - b.plotTop) || this.reset();\n      }, onContainerMouseLeave: function onContainerMouseLeave(b) {\n        var c = H[a.hoverChartIndex];c && (b.relatedTarget || b.toElement) && (c.pointer.reset(), c.pointer.chartPosition = null);\n      }, onContainerMouseMove: function onContainerMouseMove(b) {\n        var c = this.chart;g(a.hoverChartIndex) && H[a.hoverChartIndex] && H[a.hoverChartIndex].mouseIsDown || (a.hoverChartIndex = c.index);b = this.normalize(b);b.returnValue = !1;\"mousedown\" === c.mouseIsDown && this.drag(b);!this.inClass(b.target, \"highcharts-tracker\") && !c.isInsidePlot(b.chartX - c.plotLeft, b.chartY - c.plotTop) || c.openMenu || this.runPointActions(b);\n      }, inClass: function inClass(a, b) {\n        for (var c; a;) {\n          if (c = A(a, \"class\")) {\n            if (-1 !== c.indexOf(b)) return !0;if (-1 !== c.indexOf(\"highcharts-container\")) return !1;\n          }a = a.parentNode;\n        }\n      }, onTrackerMouseOut: function onTrackerMouseOut(a) {\n        var b = this.chart.hoverSeries;a = a.relatedTarget || a.toElement;if (!(!b || !a || b.options.stickyTracking || this.inClass(a, \"highcharts-tooltip\") || this.inClass(a, \"highcharts-series-\" + b.index) && this.inClass(a, \"highcharts-tracker\"))) b.onMouseOut();\n      }, onContainerClick: function onContainerClick(a) {\n        var b = this.chart,\n            c = b.hoverPoint,\n            d = b.plotLeft,\n            e = b.plotTop;a = this.normalize(a);b.cancelClick || (c && this.inClass(a.target, \"highcharts-tracker\") ? (q(c.series, \"click\", l(a, { point: c })), b.hoverPoint && c.firePointEvent(\"click\", a)) : (l(a, this.getCoordinates(a)), b.isInsidePlot(a.chartX - d, a.chartY - e) && q(b, \"click\", a)));\n      }, setDOMEvents: function setDOMEvents() {\n        var b = this,\n            d = b.chart.container;d.onmousedown = function (a) {\n          b.onContainerMouseDown(a);\n        };d.onmousemove = function (a) {\n          b.onContainerMouseMove(a);\n        };d.onclick = function (a) {\n          b.onContainerClick(a);\n        };B(d, \"mouseleave\", b.onContainerMouseLeave);1 === a.chartCount && B(f, \"mouseup\", b.onDocumentMouseUp);a.hasTouch && (d.ontouchstart = function (a) {\n          b.onContainerTouchStart(a);\n        }, d.ontouchmove = function (a) {\n          b.onContainerTouchMove(a);\n        }, 1 === a.chartCount && B(f, \"touchend\", b.onDocumentTouchEnd));\n      }, destroy: function destroy() {\n        var b;p(this.chart.container, \"mouseleave\", this.onContainerMouseLeave);a.chartCount || (p(f, \"mouseup\", this.onDocumentMouseUp), p(f, \"touchend\", this.onDocumentTouchEnd));clearInterval(this.tooltipTimeout);for (b in this) {\n          this[b] = null;\n        }\n      } };\n  })(L);(function (a) {\n    var B = a.charts,\n        A = a.each,\n        H = a.extend,\n        G = a.map,\n        r = a.noop,\n        g = a.pick;H(a.Pointer.prototype, { pinchTranslate: function pinchTranslate(a, g, l, q, d, b) {\n        this.zoomHor && this.pinchTranslateDirection(!0, a, g, l, q, d, b);this.zoomVert && this.pinchTranslateDirection(!1, a, g, l, q, d, b);\n      }, pinchTranslateDirection: function pinchTranslateDirection(a, g, l, q, d, b, p, r) {\n        var f = this.chart,\n            m = a ? \"x\" : \"y\",\n            c = a ? \"X\" : \"Y\",\n            n = \"chart\" + c,\n            E = a ? \"width\" : \"height\",\n            z = f[\"plot\" + (a ? \"Left\" : \"Top\")],\n            e,\n            x,\n            F = r || 1,\n            w = f.inverted,\n            h = f.bounds[a ? \"h\" : \"v\"],\n            y = 1 === g.length,\n            J = g[0][n],\n            u = l[0][n],\n            I = !y && g[1][n],\n            k = !y && l[1][n],\n            D;l = function l() {\n          !y && 20 < Math.abs(J - I) && (F = r || Math.abs(u - k) / Math.abs(J - I));x = (z - u) / F + J;e = f[\"plot\" + (a ? \"Width\" : \"Height\")] / F;\n        };l();g = x;g < h.min ? (g = h.min, D = !0) : g + e > h.max && (g = h.max - e, D = !0);D ? (u -= .8 * (u - p[m][0]), y || (k -= .8 * (k - p[m][1])), l()) : p[m] = [u, k];w || (b[m] = x - z, b[E] = e);b = w ? 1 / F : F;d[E] = e;d[m] = g;q[w ? a ? \"scaleY\" : \"scaleX\" : \"scale\" + c] = F;q[\"translate\" + c] = b * z + (u - b * J);\n      }, pinch: function pinch(a) {\n        var f = this,\n            l = f.chart,\n            q = f.pinchDown,\n            d = a.touches,\n            b = d.length,\n            p = f.lastValidTouch,\n            C = f.hasZoom,\n            t = f.selectionMarker,\n            m = {},\n            c = 1 === b && (f.inClass(a.target, \"highcharts-tracker\") && l.runTrackerClick || f.runChartClick),\n            n = {};1 < b && (f.initiated = !0);C && f.initiated && !c && a.preventDefault();G(d, function (a) {\n          return f.normalize(a);\n        });\"touchstart\" === a.type ? (A(d, function (a, b) {\n          q[b] = { chartX: a.chartX, chartY: a.chartY };\n        }), p.x = [q[0].chartX, q[1] && q[1].chartX], p.y = [q[0].chartY, q[1] && q[1].chartY], A(l.axes, function (a) {\n          if (a.zoomEnabled) {\n            var b = l.bounds[a.horiz ? \"h\" : \"v\"],\n                c = a.minPixelPadding,\n                d = a.toPixels(g(a.options.min, a.dataMin)),\n                m = a.toPixels(g(a.options.max, a.dataMax)),\n                f = Math.max(d, m);b.min = Math.min(a.pos, Math.min(d, m) - c);b.max = Math.max(a.pos + a.len, f + c);\n          }\n        }), f.res = !0) : f.followTouchMove && 1 === b ? this.runPointActions(f.normalize(a)) : q.length && (t || (f.selectionMarker = t = H({ destroy: r, touch: !0 }, l.plotBox)), f.pinchTranslate(q, d, m, t, n, p), f.hasPinched = C, f.scaleGroups(m, n), f.res && (f.res = !1, this.reset(!1, 0)));\n      }, touch: function touch(f, r) {\n        var l = this.chart,\n            q,\n            d;if (l.index !== a.hoverChartIndex) this.onContainerMouseLeave({ relatedTarget: !0 });a.hoverChartIndex = l.index;1 === f.touches.length ? (f = this.normalize(f), (d = l.isInsidePlot(f.chartX - l.plotLeft, f.chartY - l.plotTop)) && !l.openMenu ? (r && this.runPointActions(f), \"touchmove\" === f.type && (r = this.pinchDown, q = r[0] ? 4 <= Math.sqrt(Math.pow(r[0].chartX - f.chartX, 2) + Math.pow(r[0].chartY - f.chartY, 2)) : !1), g(q, !0) && this.pinch(f)) : r && this.reset()) : 2 === f.touches.length && this.pinch(f);\n      }, onContainerTouchStart: function onContainerTouchStart(a) {\n        this.zoomOption(a);this.touch(a, !0);\n      }, onContainerTouchMove: function onContainerTouchMove(a) {\n        this.touch(a);\n      }, onDocumentTouchEnd: function onDocumentTouchEnd(f) {\n        B[a.hoverChartIndex] && B[a.hoverChartIndex].pointer.drop(f);\n      } });\n  })(L);(function (a) {\n    var B = a.addEvent,\n        A = a.charts,\n        H = a.css,\n        G = a.doc,\n        r = a.extend,\n        g = a.noop,\n        f = a.Pointer,\n        u = a.removeEvent,\n        l = a.win,\n        q = a.wrap;if (l.PointerEvent || l.MSPointerEvent) {\n      var d = {},\n          b = !!l.PointerEvent,\n          p = function p() {\n        var a,\n            b = [];b.item = function (a) {\n          return this[a];\n        };for (a in d) {\n          d.hasOwnProperty(a) && b.push({ pageX: d[a].pageX, pageY: d[a].pageY, target: d[a].target });\n        }return b;\n      },\n          C = function C(b, d, c, f) {\n        \"touch\" !== b.pointerType && b.pointerType !== b.MSPOINTER_TYPE_TOUCH || !A[a.hoverChartIndex] || (f(b), f = A[a.hoverChartIndex].pointer, f[d]({ type: c, target: b.currentTarget, preventDefault: g, touches: p() }));\n      };r(f.prototype, { onContainerPointerDown: function onContainerPointerDown(a) {\n          C(a, \"onContainerTouchStart\", \"touchstart\", function (a) {\n            d[a.pointerId] = { pageX: a.pageX, pageY: a.pageY, target: a.currentTarget };\n          });\n        }, onContainerPointerMove: function onContainerPointerMove(a) {\n          C(a, \"onContainerTouchMove\", \"touchmove\", function (a) {\n            d[a.pointerId] = { pageX: a.pageX, pageY: a.pageY };d[a.pointerId].target || (d[a.pointerId].target = a.currentTarget);\n          });\n        }, onDocumentPointerUp: function onDocumentPointerUp(a) {\n          C(a, \"onDocumentTouchEnd\", \"touchend\", function (a) {\n            delete d[a.pointerId];\n          });\n        }, batchMSEvents: function batchMSEvents(a) {\n          a(this.chart.container, b ? \"pointerdown\" : \"MSPointerDown\", this.onContainerPointerDown);a(this.chart.container, b ? \"pointermove\" : \"MSPointerMove\", this.onContainerPointerMove);a(G, b ? \"pointerup\" : \"MSPointerUp\", this.onDocumentPointerUp);\n        } });q(f.prototype, \"init\", function (a, b, c) {\n        a.call(this, b, c);this.hasZoom && H(b.container, { \"-ms-touch-action\": \"none\", \"touch-action\": \"none\" });\n      });q(f.prototype, \"setDOMEvents\", function (a) {\n        a.apply(this);(this.hasZoom || this.followTouchMove) && this.batchMSEvents(B);\n      });q(f.prototype, \"destroy\", function (a) {\n        this.batchMSEvents(u);a.call(this);\n      });\n    }\n  })(L);(function (a) {\n    var B,\n        A = a.addEvent,\n        H = a.css,\n        G = a.discardElement,\n        r = a.defined,\n        g = a.each,\n        f = a.extend,\n        u = a.isFirefox,\n        l = a.marginNames,\n        q = a.merge,\n        d = a.pick,\n        b = a.setAnimation,\n        p = a.stableSort,\n        C = a.win,\n        t = a.wrap;\n    B = a.Legend = function (a, b) {\n      this.init(a, b);\n    };B.prototype = { init: function init(a, b) {\n        this.chart = a;this.setOptions(b);b.enabled && (this.render(), A(this.chart, \"endResize\", function () {\n          this.legend.positionCheckboxes();\n        }));\n      }, setOptions: function setOptions(a) {\n        var b = d(a.padding, 8);this.options = a;this.itemStyle = a.itemStyle;this.itemHiddenStyle = q(this.itemStyle, a.itemHiddenStyle);this.itemMarginTop = a.itemMarginTop || 0;this.initialItemX = this.padding = b;this.initialItemY = b - 5;this.itemHeight = this.maxItemWidth = 0;this.symbolWidth = d(a.symbolWidth, 16);this.pages = [];\n      }, update: function update(a, b) {\n        var c = this.chart;this.setOptions(q(!0, this.options, a));this.destroy();c.isDirtyLegend = c.isDirtyBox = !0;d(b, !0) && c.redraw();\n      }, colorizeItem: function colorizeItem(a, b) {\n        a.legendGroup[b ? \"removeClass\" : \"addClass\"](\"highcharts-legend-item-hidden\");var c = this.options,\n            d = a.legendItem,\n            m = a.legendLine,\n            e = a.legendSymbol,\n            f = this.itemHiddenStyle.color,\n            c = b ? c.itemStyle.color : f,\n            p = b ? a.color || f : f,\n            g = a.options && a.options.marker,\n            h = { fill: p },\n            y;d && d.css({ fill: c, color: c });m && m.attr({ stroke: p });if (e) {\n          if (g && e.isMarker && (h = a.pointAttribs(), !b)) for (y in h) {\n            h[y] = f;\n          }e.attr(h);\n        }\n      }, positionItem: function positionItem(a) {\n        var b = this.options,\n            d = b.symbolPadding,\n            b = !b.rtl,\n            m = a._legendItemPos,\n            f = m[0],\n            m = m[1],\n            e = a.checkbox;(a = a.legendGroup) && a.element && a.translate(b ? f : this.legendWidth - f - 2 * d - 4, m);e && (e.x = f, e.y = m);\n      }, destroyItem: function destroyItem(a) {\n        var b = a.checkbox;g([\"legendItem\", \"legendLine\", \"legendSymbol\", \"legendGroup\"], function (b) {\n          a[b] && (a[b] = a[b].destroy());\n        });b && G(a.checkbox);\n      }, destroy: function destroy() {\n        function a(a) {\n          this[a] && (this[a] = this[a].destroy());\n        }\n        g(this.getAllItems(), function (b) {\n          g([\"legendItem\", \"legendGroup\"], a, b);\n        });g([\"box\", \"title\", \"group\"], a, this);this.display = null;\n      }, positionCheckboxes: function positionCheckboxes(a) {\n        var b = this.group && this.group.alignAttr,\n            d,\n            m = this.clipHeight || this.legendHeight,\n            f = this.titleHeight;b && (d = b.translateY, g(this.allItems, function (c) {\n          var e = c.checkbox,\n              n;e && (n = d + f + e.y + (a || 0) + 3, H(e, { left: b.translateX + c.checkboxOffset + e.x - 20 + \"px\", top: n + \"px\", display: n > d - 6 && n < d + m - 6 ? \"\" : \"none\" }));\n        }));\n      }, renderTitle: function renderTitle() {\n        var a = this.padding,\n            b = this.options.title,\n            d = 0;b.text && (this.title || (this.title = this.chart.renderer.label(b.text, a - 3, a - 4, null, null, null, null, null, \"legend-title\").attr({ zIndex: 1 }).css(b.style).add(this.group)), a = this.title.getBBox(), d = a.height, this.offsetWidth = a.width, this.contentGroup.attr({ translateY: d }));this.titleHeight = d;\n      }, setText: function setText(b) {\n        var c = this.options;b.legendItem.attr({ text: c.labelFormat ? a.format(c.labelFormat, b) : c.labelFormatter.call(b) });\n      }, renderItem: function renderItem(a) {\n        var b = this.chart,\n            f = b.renderer,\n            m = this.options,\n            p = \"horizontal\" === m.layout,\n            e = this.symbolWidth,\n            g = m.symbolPadding,\n            l = this.itemStyle,\n            t = this.itemHiddenStyle,\n            h = this.padding,\n            y = p ? d(m.itemDistance, 20) : 0,\n            J = !m.rtl,\n            r = m.width,\n            I = m.itemMarginBottom || 0,\n            k = this.itemMarginTop,\n            u = this.initialItemX,\n            C = a.legendItem,\n            N = !a.series,\n            A = !N && a.series.drawLegendSymbol ? a.series : a,\n            B = A.options,\n            B = this.createCheckboxForItem && B && B.showCheckbox,\n            v = m.useHTML;C || (a.legendGroup = f.g(\"legend-item\").addClass(\"highcharts-\" + A.type + \"-series highcharts-color-\" + a.colorIndex + (a.options.className ? \" \" + a.options.className : \"\") + (N ? \" highcharts-series-\" + a.index : \"\")).attr({ zIndex: 1 }).add(this.scrollGroup), a.legendItem = C = f.text(\"\", J ? e + g : -g, this.baseline || 0, v).css(q(a.visible ? l : t)).attr({ align: J ? \"left\" : \"right\", zIndex: 2 }).add(a.legendGroup), this.baseline || (l = l.fontSize, this.fontMetrics = f.fontMetrics(l, C), this.baseline = this.fontMetrics.f + 3 + k, C.attr(\"y\", this.baseline)), this.symbolHeight = m.symbolHeight || this.fontMetrics.f, A.drawLegendSymbol(this, a), this.setItemEvents && this.setItemEvents(a, C, v), B && this.createCheckboxForItem(a));\n        this.colorizeItem(a, a.visible);this.setText(a);f = C.getBBox();e = a.checkboxOffset = m.itemWidth || a.legendItemWidth || e + g + f.width + y + (B ? 20 : 0);this.itemHeight = g = Math.round(a.legendItemHeight || f.height);p && this.itemX - u + e > (r || b.chartWidth - 2 * h - u - m.x) && (this.itemX = u, this.itemY += k + this.lastLineHeight + I, this.lastLineHeight = 0);this.maxItemWidth = Math.max(this.maxItemWidth, e);this.lastItemY = k + this.itemY + I;this.lastLineHeight = Math.max(g, this.lastLineHeight);a._legendItemPos = [this.itemX, this.itemY];p ? this.itemX += e : (this.itemY += k + g + I, this.lastLineHeight = g);this.offsetWidth = r || Math.max((p ? this.itemX - u - y : e) + h, this.offsetWidth);\n      }, getAllItems: function getAllItems() {\n        var a = [];g(this.chart.series, function (b) {\n          var c = b && b.options;b && d(c.showInLegend, r(c.linkedTo) ? !1 : void 0, !0) && (a = a.concat(b.legendItems || (\"point\" === c.legendType ? b.data : b)));\n        });return a;\n      }, adjustMargins: function adjustMargins(a, b) {\n        var c = this.chart,\n            f = this.options,\n            m = f.align.charAt(0) + f.verticalAlign.charAt(0) + f.layout.charAt(0);f.floating || g([/(lth|ct|rth)/, /(rtv|rm|rbv)/, /(rbh|cb|lbh)/, /(lbv|lm|ltv)/], function (e, n) {\n          e.test(m) && !r(a[n]) && (c[l[n]] = Math.max(c[l[n]], c.legend[(n + 1) % 2 ? \"legendHeight\" : \"legendWidth\"] + [1, -1, -1, 1][n] * f[n % 2 ? \"x\" : \"y\"] + d(f.margin, 12) + b[n]));\n        });\n      }, render: function render() {\n        var a = this,\n            b = a.chart,\n            d = b.renderer,\n            q = a.group,\n            l,\n            e,\n            t,\n            r,\n            w = a.box,\n            h = a.options,\n            y = a.padding;a.itemX = a.initialItemX;a.itemY = a.initialItemY;a.offsetWidth = 0;a.lastItemY = 0;q || (a.group = q = d.g(\"legend\").attr({ zIndex: 7 }).add(), a.contentGroup = d.g().attr({ zIndex: 1 }).add(q), a.scrollGroup = d.g().add(a.contentGroup));a.renderTitle();\n        l = a.getAllItems();p(l, function (a, b) {\n          return (a.options && a.options.legendIndex || 0) - (b.options && b.options.legendIndex || 0);\n        });h.reversed && l.reverse();a.allItems = l;a.display = e = !!l.length;a.lastLineHeight = 0;g(l, function (b) {\n          a.renderItem(b);\n        });t = (h.width || a.offsetWidth) + y;r = a.lastItemY + a.lastLineHeight + a.titleHeight;r = a.handleOverflow(r);r += y;w || (a.box = w = d.rect().addClass(\"highcharts-legend-box\").attr({ r: h.borderRadius }).add(q), w.isNew = !0);w.attr({ stroke: h.borderColor, \"stroke-width\": h.borderWidth || 0, fill: h.backgroundColor || \"none\" }).shadow(h.shadow);0 < t && 0 < r && (w[w.isNew ? \"attr\" : \"animate\"](w.crisp({ x: 0, y: 0, width: t, height: r }, w.strokeWidth())), w.isNew = !1);w[e ? \"show\" : \"hide\"]();a.legendWidth = t;a.legendHeight = r;g(l, function (b) {\n          a.positionItem(b);\n        });e && q.align(f({ width: t, height: r }, h), !0, \"spacingBox\");b.isResizing || this.positionCheckboxes();\n      }, handleOverflow: function handleOverflow(a) {\n        var b = this,\n            f = this.chart,\n            m = f.renderer,\n            p = this.options,\n            e = p.y,\n            f = f.spacingBox.height + (\"top\" === p.verticalAlign ? -e : e) - this.padding,\n            e = p.maxHeight,\n            q,\n            l = this.clipRect,\n            t = p.navigation,\n            h = d(t.animation, !0),\n            y = t.arrowSize || 12,\n            r = this.nav,\n            u = this.pages,\n            I = this.padding,\n            k,\n            D = this.allItems,\n            C = function C(a) {\n          a ? l.attr({ height: a }) : l && (b.clipRect = l.destroy(), b.contentGroup.clip());b.contentGroup.div && (b.contentGroup.div.style.clip = a ? \"rect(\" + I + \"px,9999px,\" + (I + a) + \"px,0)\" : \"auto\");\n        };\"horizontal\" !== p.layout || \"middle\" === p.verticalAlign || p.floating || (f /= 2);e && (f = Math.min(f, e));u.length = 0;a > f && !1 !== t.enabled ? (this.clipHeight = q = Math.max(f - 20 - this.titleHeight - I, 0), this.currentPage = d(this.currentPage, 1), this.fullHeight = a, g(D, function (a, b) {\n          var c = a._legendItemPos[1];a = Math.round(a.legendItem.getBBox().height);var e = u.length;if (!e || c - u[e - 1] > q && (k || c) !== u[e - 1]) u.push(k || c), e++;b === D.length - 1 && c + a - u[e - 1] > q && u.push(c);c !== k && (k = c);\n        }), l || (l = b.clipRect = m.clipRect(0, I, 9999, 0), b.contentGroup.clip(l)), C(q), r || (this.nav = r = m.g().attr({ zIndex: 1 }).add(this.group), this.up = m.symbol(\"triangle\", 0, 0, y, y).on(\"click\", function () {\n          b.scroll(-1, h);\n        }).add(r), this.pager = m.text(\"\", 15, 10).addClass(\"highcharts-legend-navigation\").css(t.style).add(r), this.down = m.symbol(\"triangle-down\", 0, 0, y, y).on(\"click\", function () {\n          b.scroll(1, h);\n        }).add(r)), b.scroll(0), a = f) : r && (C(), r.hide(), this.scrollGroup.attr({ translateY: 1 }), this.clipHeight = 0);return a;\n      }, scroll: function scroll(a, c) {\n        var d = this.pages,\n            f = d.length;a = this.currentPage + a;var m = this.clipHeight,\n            e = this.options.navigation,\n            p = this.pager,\n            g = this.padding;a > f && (a = f);0 < a && (void 0 !== c && b(c, this.chart), this.nav.attr({ translateX: g, translateY: m + this.padding + 7 + this.titleHeight, visibility: \"visible\" }), this.up.attr({ \"class\": 1 === a ? \"highcharts-legend-nav-inactive\" : \"highcharts-legend-nav-active\" }), p.attr({ text: a + \"/\" + f }), this.down.attr({ x: 18 + this.pager.getBBox().width, \"class\": a === f ? \"highcharts-legend-nav-inactive\" : \"highcharts-legend-nav-active\" }), this.up.attr({ fill: 1 === a ? e.inactiveColor : e.activeColor }).css({ cursor: 1 === a ? \"default\" : \"pointer\" }), this.down.attr({ fill: a === f ? e.inactiveColor : e.activeColor }).css({ cursor: a === f ? \"default\" : \"pointer\" }), c = -d[a - 1] + this.initialItemY, this.scrollGroup.animate({ translateY: c }), this.currentPage = a, this.positionCheckboxes(c));\n      } };a.LegendSymbolMixin = { drawRectangle: function drawRectangle(a, b) {\n        var c = a.symbolHeight,\n            f = a.options.squareSymbol;b.legendSymbol = this.chart.renderer.rect(f ? (a.symbolWidth - c) / 2 : 0, a.baseline - c + 1, f ? c : a.symbolWidth, c, d(a.options.symbolRadius, c / 2)).addClass(\"highcharts-point\").attr({ zIndex: 3 }).add(b.legendGroup);\n      }, drawLineMarker: function drawLineMarker(a) {\n        var b = this.options,\n            f = b.marker,\n            m = a.symbolWidth,\n            p = a.symbolHeight,\n            e = p / 2,\n            g = this.chart.renderer,\n            l = this.legendGroup;a = a.baseline - Math.round(.3 * a.fontMetrics.b);\n        var t;t = { \"stroke-width\": b.lineWidth || 0 };b.dashStyle && (t.dashstyle = b.dashStyle);this.legendLine = g.path([\"M\", 0, a, \"L\", m, a]).addClass(\"highcharts-graph\").attr(t).add(l);f && !1 !== f.enabled && (b = Math.min(d(f.radius, e), e), 0 === this.symbol.indexOf(\"url\") && (f = q(f, { width: p, height: p }), b = 0), this.legendSymbol = f = g.symbol(this.symbol, m / 2 - b, a - b, 2 * b, 2 * b, f).addClass(\"highcharts-point\").add(l), f.isMarker = !0);\n      } };(/Trident\\/7\\.0/.test(C.navigator.userAgent) || u) && t(B.prototype, \"positionItem\", function (a, b) {\n      var c = this,\n          d = function d() {\n        b._legendItemPos && a.call(c, b);\n      };d();setTimeout(d);\n    });\n  })(L);(function (a) {\n    var B = a.addEvent,\n        A = a.animate,\n        H = a.animObject,\n        G = a.attr,\n        r = a.doc,\n        g = a.Axis,\n        f = a.createElement,\n        u = a.defaultOptions,\n        l = a.discardElement,\n        q = a.charts,\n        d = a.css,\n        b = a.defined,\n        p = a.each,\n        C = a.extend,\n        t = a.find,\n        m = a.fireEvent,\n        c = a.getStyle,\n        n = a.grep,\n        E = a.isNumber,\n        z = a.isObject,\n        e = a.isString,\n        x = a.Legend,\n        F = a.marginNames,\n        w = a.merge,\n        h = a.Pointer,\n        y = a.pick,\n        J = a.pInt,\n        K = a.removeEvent,\n        I = a.seriesTypes,\n        k = a.splat,\n        D = a.svg,\n        P = a.syncTimeout,\n        N = a.win,\n        S = a.Renderer,\n        O = a.Chart = function () {\n      this.getArgs.apply(this, arguments);\n    };a.chart = function (a, b, c) {\n      return new O(a, b, c);\n    };O.prototype = { callbacks: [], getArgs: function getArgs() {\n        var a = [].slice.call(arguments);if (e(a[0]) || a[0].nodeName) this.renderTo = a.shift();this.init(a[0], a[1]);\n      }, init: function init(b, c) {\n        var e,\n            h = b.series;b.series = null;e = w(u, b);e.series = b.series = h;this.userOptions = b;this.respRules = [];b = e.chart;h = b.events;this.margin = [];this.spacing = [];this.bounds = { h: {}, v: {} };this.callback = c;this.isResizing = 0;this.options = e;this.axes = [];this.series = [];this.hasCartesianSeries = b.showAxes;\n        var d;this.index = q.length;q.push(this);a.chartCount++;if (h) for (d in h) {\n          B(this, d, h[d]);\n        }this.xAxis = [];this.yAxis = [];this.pointCount = this.colorCounter = this.symbolCounter = 0;this.firstRender();\n      }, initSeries: function initSeries(b) {\n        var c = this.options.chart;(c = I[b.type || c.type || c.defaultSeriesType]) || a.error(17, !0);c = new c();c.init(this, b);return c;\n      }, orderSeries: function orderSeries(a) {\n        var b = this.series;for (a = a || 0; a < b.length; a++) {\n          b[a] && (b[a].index = a, b[a].name = b[a].name || \"Series \" + (b[a].index + 1));\n        }\n      }, isInsidePlot: function isInsidePlot(a, b, c) {\n        var e = c ? b : a;a = c ? a : b;return 0 <= e && e <= this.plotWidth && 0 <= a && a <= this.plotHeight;\n      }, redraw: function redraw(b) {\n        var c = this.axes,\n            e = this.series,\n            h = this.pointer,\n            d = this.legend,\n            k = this.isDirtyLegend,\n            f,\n            n,\n            y = this.hasCartesianSeries,\n            g = this.isDirtyBox,\n            v = e.length,\n            l = v,\n            q = this.renderer,\n            t = q.isHidden(),\n            w = [];this.setResponsive && this.setResponsive(!1);a.setAnimation(b, this);t && this.cloneRenderTo();for (this.layOutTitles(); l--;) {\n          if (b = e[l], b.options.stacking && (f = !0, b.isDirty)) {\n            n = !0;break;\n          }\n        }if (n) for (l = v; l--;) {\n          b = e[l], b.options.stacking && (b.isDirty = !0);\n        }p(e, function (a) {\n          a.isDirty && \"point\" === a.options.legendType && (a.updateTotals && a.updateTotals(), k = !0);a.isDirtyData && m(a, \"updatedData\");\n        });k && d.options.enabled && (d.render(), this.isDirtyLegend = !1);f && this.getStacks();y && p(c, function (a) {\n          a.updateNames();a.setScale();\n        });this.getMargins();y && (p(c, function (a) {\n          a.isDirty && (g = !0);\n        }), p(c, function (a) {\n          var b = a.min + \",\" + a.max;a.extKey !== b && (a.extKey = b, w.push(function () {\n            m(a, \"afterSetExtremes\", C(a.eventArgs, a.getExtremes()));delete a.eventArgs;\n          }));(g || f) && a.redraw();\n        }));\n        g && this.drawChartBox();m(this, \"predraw\");p(e, function (a) {\n          (g || a.isDirty) && a.visible && a.redraw();a.isDirtyData = !1;\n        });h && h.reset(!0);q.draw();m(this, \"redraw\");m(this, \"render\");t && this.cloneRenderTo(!0);p(w, function (a) {\n          a.call();\n        });\n      }, get: function get(a) {\n        function b(b) {\n          return b.id === a || b.options && b.options.id === a;\n        }var c,\n            e = this.series,\n            h;c = t(this.axes, b) || t(this.series, b);for (h = 0; !c && h < e.length; h++) {\n          c = t(e[h].points || [], b);\n        }return c;\n      }, getAxes: function getAxes() {\n        var a = this,\n            b = this.options,\n            c = b.xAxis = k(b.xAxis || {}),\n            b = b.yAxis = k(b.yAxis || {});p(c, function (a, b) {\n          a.index = b;a.isX = !0;\n        });p(b, function (a, b) {\n          a.index = b;\n        });c = c.concat(b);p(c, function (b) {\n          new g(a, b);\n        });\n      }, getSelectedPoints: function getSelectedPoints() {\n        var a = [];p(this.series, function (b) {\n          a = a.concat(n(b.points || [], function (a) {\n            return a.selected;\n          }));\n        });return a;\n      }, getSelectedSeries: function getSelectedSeries() {\n        return n(this.series, function (a) {\n          return a.selected;\n        });\n      }, setTitle: function setTitle(a, b, c) {\n        var e = this,\n            h = e.options,\n            d;d = h.title = w({ style: { color: \"#333333\", fontSize: h.isStock ? \"16px\" : \"18px\" } }, h.title, a);h = h.subtitle = w({ style: { color: \"#666666\" } }, h.subtitle, b);p([[\"title\", a, d], [\"subtitle\", b, h]], function (a, b) {\n          var c = a[0],\n              h = e[c],\n              d = a[1];a = a[2];h && d && (e[c] = h = h.destroy());a && a.text && !h && (e[c] = e.renderer.text(a.text, 0, 0, a.useHTML).attr({ align: a.align, \"class\": \"highcharts-\" + c, zIndex: a.zIndex || 4 }).add(), e[c].update = function (a) {\n            e.setTitle(!b && a, b && a);\n          }, e[c].css(a.style));\n        });e.layOutTitles(c);\n      }, layOutTitles: function layOutTitles(a) {\n        var b = 0,\n            c,\n            e = this.renderer,\n            h = this.spacingBox;p([\"title\", \"subtitle\"], function (a) {\n          var c = this[a],\n              d = this.options[a],\n              k;c && (k = d.style.fontSize, k = e.fontMetrics(k, c).b, c.css({ width: (d.width || h.width + d.widthAdjust) + \"px\" }).align(C({ y: b + k + (\"title\" === a ? -3 : 2) }, d), !1, \"spacingBox\"), d.floating || d.verticalAlign || (b = Math.ceil(b + c.getBBox().height)));\n        }, this);c = this.titleOffset !== b;this.titleOffset = b;!this.isDirtyBox && c && (this.isDirtyBox = c, this.hasRendered && y(a, !0) && this.isDirtyBox && this.redraw());\n      }, getChartSize: function getChartSize() {\n        var a = this.options.chart,\n            e = a.width,\n            a = a.height,\n            h = this.renderToClone || this.renderTo;b(e) || (this.containerWidth = c(h, \"width\"));b(a) || (this.containerHeight = c(h, \"height\"));this.chartWidth = Math.max(0, e || this.containerWidth || 600);this.chartHeight = Math.max(0, a || this.containerHeight || 400);\n      }, cloneRenderTo: function cloneRenderTo(a) {\n        var b = this.renderToClone,\n            c = this.container;if (a) {\n          if (b) {\n            for (; b.childNodes.length;) {\n              this.renderTo.appendChild(b.firstChild);\n            }l(b);delete this.renderToClone;\n          }\n        } else c && c.parentNode === this.renderTo && this.renderTo.removeChild(c), this.renderToClone = b = this.renderTo.cloneNode(0), d(b, { position: \"absolute\", top: \"-9999px\", display: \"block\" }), b.style.setProperty && b.style.setProperty(\"display\", \"block\", \"important\"), r.body.appendChild(b), c && b.appendChild(c);\n      }, setClassName: function setClassName(a) {\n        this.container.className = \"highcharts-container \" + (a || \"\");\n      }, getContainer: function getContainer() {\n        var b,\n            c = this.options,\n            h = c.chart,\n            d,\n            k;b = this.renderTo;var m = a.uniqueKey(),\n            n;b || (this.renderTo = b = h.renderTo);e(b) && (this.renderTo = b = r.getElementById(b));b || a.error(13, !0);d = J(G(b, \"data-highcharts-chart\"));E(d) && q[d] && q[d].hasRendered && q[d].destroy();G(b, \"data-highcharts-chart\", this.index);b.innerHTML = \"\";\n        h.skipClone || b.offsetWidth || this.cloneRenderTo();this.getChartSize();d = this.chartWidth;k = this.chartHeight;n = C({ position: \"relative\", overflow: \"hidden\", width: d + \"px\", height: k + \"px\", textAlign: \"left\", lineHeight: \"normal\", zIndex: 0, \"-webkit-tap-highlight-color\": \"rgba(0,0,0,0)\" }, h.style);this.container = b = f(\"div\", { id: m }, n, this.renderToClone || b);this._cursor = b.style.cursor;this.renderer = new (a[h.renderer] || S)(b, d, k, null, h.forExport, c.exporting && c.exporting.allowHTML);this.setClassName(h.className);this.renderer.setStyle(h.style);\n        this.renderer.chartIndex = this.index;\n      }, getMargins: function getMargins(a) {\n        var c = this.spacing,\n            e = this.margin,\n            h = this.titleOffset;this.resetMargins();h && !b(e[0]) && (this.plotTop = Math.max(this.plotTop, h + this.options.title.margin + c[0]));this.legend.display && this.legend.adjustMargins(e, c);this.extraMargin && (this[this.extraMargin.type] = (this[this.extraMargin.type] || 0) + this.extraMargin.value);this.extraTopMargin && (this.plotTop += this.extraTopMargin);a || this.getAxisMargins();\n      }, getAxisMargins: function getAxisMargins() {\n        var a = this,\n            c = a.axisOffset = [0, 0, 0, 0],\n            e = a.margin;a.hasCartesianSeries && p(a.axes, function (a) {\n          a.visible && a.getOffset();\n        });p(F, function (h, d) {\n          b(e[d]) || (a[h] += c[d]);\n        });a.setChartSize();\n      }, reflow: function reflow(a) {\n        var e = this,\n            h = e.options.chart,\n            d = e.renderTo,\n            k = b(h.width),\n            f = h.width || c(d, \"width\"),\n            h = h.height || c(d, \"height\"),\n            d = a ? a.target : N;if (!k && !e.isPrinting && f && h && (d === N || d === r)) {\n          if (f !== e.containerWidth || h !== e.containerHeight) clearTimeout(e.reflowTimeout), e.reflowTimeout = P(function () {\n            e.container && e.setSize(void 0, void 0, !1);\n          }, a ? 100 : 0);e.containerWidth = f;e.containerHeight = h;\n        }\n      }, initReflow: function initReflow() {\n        var a = this,\n            b;b = B(N, \"resize\", function (b) {\n          a.reflow(b);\n        });B(a, \"destroy\", b);\n      }, setSize: function setSize(b, c, e) {\n        var h = this,\n            k = h.renderer;h.isResizing += 1;a.setAnimation(e, h);h.oldChartHeight = h.chartHeight;h.oldChartWidth = h.chartWidth;void 0 !== b && (h.options.chart.width = b);void 0 !== c && (h.options.chart.height = c);h.getChartSize();b = k.globalAnimation;(b ? A : d)(h.container, { width: h.chartWidth + \"px\", height: h.chartHeight + \"px\" }, b);h.setChartSize(!0);k.setSize(h.chartWidth, h.chartHeight, e);p(h.axes, function (a) {\n          a.isDirty = !0;a.setScale();\n        });h.isDirtyLegend = !0;h.isDirtyBox = !0;h.layOutTitles();h.getMargins();h.redraw(e);h.oldChartHeight = null;m(h, \"resize\");P(function () {\n          h && m(h, \"endResize\", null, function () {\n            --h.isResizing;\n          });\n        }, H(b).duration);\n      }, setChartSize: function setChartSize(a) {\n        var b = this.inverted,\n            c = this.renderer,\n            e = this.chartWidth,\n            h = this.chartHeight,\n            d = this.options.chart,\n            k = this.spacing,\n            f = this.clipOffset,\n            m,\n            n,\n            y,\n            g;this.plotLeft = m = Math.round(this.plotLeft);this.plotTop = n = Math.round(this.plotTop);this.plotWidth = y = Math.max(0, Math.round(e - m - this.marginRight));this.plotHeight = g = Math.max(0, Math.round(h - n - this.marginBottom));this.plotSizeX = b ? g : y;this.plotSizeY = b ? y : g;this.plotBorderWidth = d.plotBorderWidth || 0;this.spacingBox = c.spacingBox = { x: k[3], y: k[0], width: e - k[3] - k[1], height: h - k[0] - k[2] };this.plotBox = c.plotBox = { x: m, y: n, width: y, height: g };e = 2 * Math.floor(this.plotBorderWidth / 2);b = Math.ceil(Math.max(e, f[3]) / 2);c = Math.ceil(Math.max(e, f[0]) / 2);this.clipBox = { x: b, y: c, width: Math.floor(this.plotSizeX - Math.max(e, f[1]) / 2 - b), height: Math.max(0, Math.floor(this.plotSizeY - Math.max(e, f[2]) / 2 - c)) };a || p(this.axes, function (a) {\n          a.setAxisSize();a.setAxisTranslation();\n        });\n      }, resetMargins: function resetMargins() {\n        var a = this,\n            b = a.options.chart;p([\"margin\", \"spacing\"], function (c) {\n          var e = b[c],\n              h = z(e) ? e : [e, e, e, e];p([\"Top\", \"Right\", \"Bottom\", \"Left\"], function (e, d) {\n            a[c][d] = y(b[c + e], h[d]);\n          });\n        });p(F, function (b, c) {\n          a[b] = y(a.margin[c], a.spacing[c]);\n        });a.axisOffset = [0, 0, 0, 0];a.clipOffset = [0, 0, 0, 0];\n      }, drawChartBox: function drawChartBox() {\n        var a = this.options.chart,\n            b = this.renderer,\n            c = this.chartWidth,\n            e = this.chartHeight,\n            h = this.chartBackground,\n            d = this.plotBackground,\n            k = this.plotBorder,\n            f,\n            m = this.plotBGImage,\n            n = a.backgroundColor,\n            p = a.plotBackgroundColor,\n            y = a.plotBackgroundImage,\n            g,\n            l = this.plotLeft,\n            q = this.plotTop,\n            t = this.plotWidth,\n            w = this.plotHeight,\n            x = this.plotBox,\n            r = this.clipRect,\n            z = this.clipBox,\n            J = \"animate\";h || (this.chartBackground = h = b.rect().addClass(\"highcharts-background\").add(), J = \"attr\");f = a.borderWidth || 0;g = f + (a.shadow ? 8 : 0);n = { fill: n || \"none\" };if (f || h[\"stroke-width\"]) n.stroke = a.borderColor, n[\"stroke-width\"] = f;h.attr(n).shadow(a.shadow);h[J]({ x: g / 2, y: g / 2, width: c - g - f % 2, height: e - g - f % 2, r: a.borderRadius });J = \"animate\";d || (J = \"attr\", this.plotBackground = d = b.rect().addClass(\"highcharts-plot-background\").add());d[J](x);d.attr({ fill: p || \"none\" }).shadow(a.plotShadow);y && (m ? m.animate(x) : this.plotBGImage = b.image(y, l, q, t, w).add());r ? r.animate({ width: z.width, height: z.height }) : this.clipRect = b.clipRect(z);J = \"animate\";k || (J = \"attr\", this.plotBorder = k = b.rect().addClass(\"highcharts-plot-border\").attr({ zIndex: 1 }).add());\n        k.attr({ stroke: a.plotBorderColor, \"stroke-width\": a.plotBorderWidth || 0, fill: \"none\" });k[J](k.crisp({ x: l, y: q, width: t, height: w }, -k.strokeWidth()));this.isDirtyBox = !1;\n      }, propFromSeries: function propFromSeries() {\n        var a = this,\n            b = a.options.chart,\n            c,\n            e = a.options.series,\n            h,\n            d;p([\"inverted\", \"angular\", \"polar\"], function (k) {\n          c = I[b.type || b.defaultSeriesType];d = b[k] || c && c.prototype[k];for (h = e && e.length; !d && h--;) {\n            (c = I[e[h].type]) && c.prototype[k] && (d = !0);\n          }a[k] = d;\n        });\n      }, linkSeries: function linkSeries() {\n        var a = this,\n            b = a.series;p(b, function (a) {\n          a.linkedSeries.length = 0;\n        });p(b, function (b) {\n          var c = b.options.linkedTo;e(c) && (c = \":previous\" === c ? a.series[b.index - 1] : a.get(c)) && c.linkedParent !== b && (c.linkedSeries.push(b), b.linkedParent = c, b.visible = y(b.options.visible, c.options.visible, b.visible));\n        });\n      }, renderSeries: function renderSeries() {\n        p(this.series, function (a) {\n          a.translate();a.render();\n        });\n      }, renderLabels: function renderLabels() {\n        var a = this,\n            b = a.options.labels;b.items && p(b.items, function (c) {\n          var e = C(b.style, c.style),\n              h = J(e.left) + a.plotLeft,\n              d = J(e.top) + a.plotTop + 12;delete e.left;delete e.top;a.renderer.text(c.html, h, d).attr({ zIndex: 2 }).css(e).add();\n        });\n      }, render: function render() {\n        var a = this.axes,\n            b = this.renderer,\n            c = this.options,\n            e,\n            h,\n            d;this.setTitle();this.legend = new x(this, c.legend);this.getStacks && this.getStacks();this.getMargins(!0);this.setChartSize();c = this.plotWidth;e = this.plotHeight -= 21;p(a, function (a) {\n          a.setScale();\n        });this.getAxisMargins();h = 1.1 < c / this.plotWidth;d = 1.05 < e / this.plotHeight;if (h || d) p(a, function (a) {\n          (a.horiz && h || !a.horiz && d) && a.setTickInterval(!0);\n        }), this.getMargins();this.drawChartBox();this.hasCartesianSeries && p(a, function (a) {\n          a.visible && a.render();\n        });this.seriesGroup || (this.seriesGroup = b.g(\"series-group\").attr({ zIndex: 3 }).add());this.renderSeries();this.renderLabels();this.addCredits();this.setResponsive && this.setResponsive();this.hasRendered = !0;\n      }, addCredits: function addCredits(a) {\n        var b = this;a = w(!0, this.options.credits, a);a.enabled && !this.credits && (this.credits = this.renderer.text(a.text + (this.mapCredits || \"\"), 0, 0).addClass(\"highcharts-credits\").on(\"click\", function () {\n          a.href && (N.location.href = a.href);\n        }).attr({ align: a.position.align,\n          zIndex: 8 }).css(a.style).add().align(a.position), this.credits.update = function (a) {\n          b.credits = b.credits.destroy();b.addCredits(a);\n        });\n      }, destroy: function destroy() {\n        var b = this,\n            c = b.axes,\n            e = b.series,\n            h = b.container,\n            d,\n            k = h && h.parentNode;m(b, \"destroy\");q[b.index] = void 0;a.chartCount--;b.renderTo.removeAttribute(\"data-highcharts-chart\");K(b);for (d = c.length; d--;) {\n          c[d] = c[d].destroy();\n        }this.scroller && this.scroller.destroy && this.scroller.destroy();for (d = e.length; d--;) {\n          e[d] = e[d].destroy();\n        }p(\"title subtitle chartBackground plotBackground plotBGImage plotBorder seriesGroup clipRect credits pointer rangeSelector legend resetZoomButton tooltip renderer\".split(\" \"), function (a) {\n          var c = b[a];c && c.destroy && (b[a] = c.destroy());\n        });h && (h.innerHTML = \"\", K(h), k && l(h));for (d in b) {\n          delete b[d];\n        }\n      }, isReadyToRender: function isReadyToRender() {\n        var a = this;return D || N != N.top || \"complete\" === r.readyState ? !0 : (r.attachEvent(\"onreadystatechange\", function () {\n          r.detachEvent(\"onreadystatechange\", a.firstRender);\"complete\" === r.readyState && a.firstRender();\n        }), !1);\n      }, firstRender: function firstRender() {\n        var a = this,\n            b = a.options;if (a.isReadyToRender()) {\n          a.getContainer();m(a, \"init\");a.resetMargins();a.setChartSize();a.propFromSeries();\n          a.getAxes();p(b.series || [], function (b) {\n            a.initSeries(b);\n          });a.linkSeries();m(a, \"beforeRender\");h && (a.pointer = new h(a, b));a.render();if (!a.renderer.imgCount && a.onload) a.onload();a.cloneRenderTo(!0);\n        }\n      }, onload: function onload() {\n        p([this.callback].concat(this.callbacks), function (a) {\n          a && void 0 !== this.index && a.apply(this, [this]);\n        }, this);m(this, \"load\");m(this, \"render\");b(this.index) && !1 !== this.options.chart.reflow && this.initReflow();this.onload = null;\n      } };\n  })(L);(function (a) {\n    var B,\n        A = a.each,\n        H = a.extend,\n        G = a.erase,\n        r = a.fireEvent,\n        g = a.format,\n        f = a.isArray,\n        u = a.isNumber,\n        l = a.pick,\n        q = a.removeEvent;B = a.Point = function () {};B.prototype = { init: function init(a, b, f) {\n        this.series = a;this.color = a.color;this.applyOptions(b, f);a.options.colorByPoint ? (b = a.options.colors || a.chart.options.colors, this.color = this.color || b[a.colorCounter], b = b.length, f = a.colorCounter, a.colorCounter++, a.colorCounter === b && (a.colorCounter = 0)) : f = a.colorIndex;this.colorIndex = l(this.colorIndex, f);a.chart.pointCount++;return this;\n      }, applyOptions: function applyOptions(a, b) {\n        var d = this.series,\n            f = d.options.pointValKey || d.pointValKey;a = B.prototype.optionsToObject.call(this, a);H(this, a);this.options = this.options ? H(this.options, a) : a;a.group && delete this.group;f && (this.y = this[f]);this.isNull = l(this.isValid && !this.isValid(), null === this.x || !u(this.y, !0));this.selected && (this.state = \"select\");\"name\" in this && void 0 === b && d.xAxis && d.xAxis.hasNames && (this.x = d.xAxis.nameToX(this));void 0 === this.x && d && (this.x = void 0 === b ? d.autoIncrement(this) : b);return this;\n      }, optionsToObject: function optionsToObject(a) {\n        var b = {},\n            d = this.series,\n            g = d.options.keys,\n            l = g || d.pointArrayMap || [\"y\"],\n            m = l.length,\n            c = 0,\n            n = 0;if (u(a) || null === a) b[l[0]] = a;else if (f(a)) for (!g && a.length > m && (d = _typeof(a[0]), \"string\" === d ? b.name = a[0] : \"number\" === d && (b.x = a[0]), c++); n < m;) {\n          g && void 0 === a[c] || (b[l[n]] = a[c]), c++, n++;\n        } else \"object\" === (typeof a === \"undefined\" ? \"undefined\" : _typeof(a)) && (b = a, a.dataLabels && (d._hasPointLabels = !0), a.marker && (d._hasPointMarkers = !0));return b;\n      }, getClassName: function getClassName() {\n        return \"highcharts-point\" + (this.selected ? \" highcharts-point-select\" : \"\") + (this.negative ? \" highcharts-negative\" : \"\") + (this.isNull ? \" highcharts-null-point\" : \"\") + (void 0 !== this.colorIndex ? \" highcharts-color-\" + this.colorIndex : \"\") + (this.options.className ? \" \" + this.options.className : \"\") + (this.zone && this.zone.className ? \" \" + this.zone.className.replace(\"highcharts-negative\", \"\") : \"\");\n      }, getZone: function getZone() {\n        var a = this.series,\n            b = a.zones,\n            a = a.zoneAxis || \"y\",\n            f = 0,\n            g;for (g = b[f]; this[a] >= g.value;) {\n          g = b[++f];\n        }g && g.color && !this.options.color && (this.color = g.color);return g;\n      }, destroy: function destroy() {\n        var a = this.series.chart,\n            b = a.hoverPoints,\n            f;a.pointCount--;b && (this.setState(), G(b, this), b.length || (a.hoverPoints = null));if (this === a.hoverPoint) this.onMouseOut();if (this.graphic || this.dataLabel) q(this), this.destroyElements();this.legendItem && a.legend.destroyItem(this);for (f in this) {\n          this[f] = null;\n        }\n      }, destroyElements: function destroyElements() {\n        for (var a = [\"graphic\", \"dataLabel\", \"dataLabelUpper\", \"connector\", \"shadowGroup\"], b, f = 6; f--;) {\n          b = a[f], this[b] && (this[b] = this[b].destroy());\n        }\n      }, getLabelConfig: function getLabelConfig() {\n        return { x: this.category, y: this.y, color: this.color, colorIndex: this.colorIndex, key: this.name || this.category, series: this.series,\n          point: this, percentage: this.percentage, total: this.total || this.stackTotal };\n      }, tooltipFormatter: function tooltipFormatter(a) {\n        var b = this.series,\n            d = b.tooltipOptions,\n            f = l(d.valueDecimals, \"\"),\n            q = d.valuePrefix || \"\",\n            m = d.valueSuffix || \"\";A(b.pointArrayMap || [\"y\"], function (b) {\n          b = \"{point.\" + b;if (q || m) a = a.replace(b + \"}\", q + b + \"}\" + m);a = a.replace(b + \"}\", b + \":,.\" + f + \"f}\");\n        });return g(a, { point: this, series: this.series });\n      }, firePointEvent: function firePointEvent(a, b, f) {\n        var d = this,\n            g = this.series.options;(g.point.events[a] || d.options && d.options.events && d.options.events[a]) && this.importEvents();\"click\" === a && g.allowPointSelect && (f = function f(a) {\n          d.select && d.select(null, a.ctrlKey || a.metaKey || a.shiftKey);\n        });r(this, a, b, f);\n      }, visible: !0 };\n  })(L);(function (a) {\n    var B = a.addEvent,\n        A = a.animObject,\n        H = a.arrayMax,\n        G = a.arrayMin,\n        r = a.correctFloat,\n        g = a.Date,\n        f = a.defaultOptions,\n        u = a.defaultPlotOptions,\n        l = a.defined,\n        q = a.each,\n        d = a.erase,\n        b = a.extend,\n        p = a.fireEvent,\n        C = a.grep,\n        t = a.isArray,\n        m = a.isNumber,\n        c = a.isString,\n        n = a.merge,\n        E = a.pick,\n        z = a.removeEvent,\n        e = a.splat,\n        x = a.SVGElement,\n        F = a.syncTimeout,\n        w = a.win;a.Series = a.seriesType(\"line\", null, { lineWidth: 2, allowPointSelect: !1, showCheckbox: !1, animation: { duration: 1E3 }, events: {}, marker: { lineWidth: 0, lineColor: \"#ffffff\", radius: 4, states: { hover: { animation: { duration: 50 }, enabled: !0, radiusPlus: 2, lineWidthPlus: 1 }, select: { fillColor: \"#cccccc\", lineColor: \"#000000\", lineWidth: 2 } } }, point: { events: {} }, dataLabels: { align: \"center\", formatter: function formatter() {\n          return null === this.y ? \"\" : a.numberFormat(this.y, -1);\n        }, style: { fontSize: \"11px\", fontWeight: \"bold\", color: \"contrast\", textOutline: \"1px contrast\" }, verticalAlign: \"bottom\",\n        x: 0, y: 0, padding: 5 }, cropThreshold: 300, pointRange: 0, softThreshold: !0, states: { hover: { lineWidthPlus: 1, marker: {}, halo: { size: 10, opacity: .25 } }, select: { marker: {} } }, stickyTracking: !0, turboThreshold: 1E3 }, { isCartesian: !0, pointClass: a.Point, sorted: !0, requireSorting: !0, directTouch: !1, axisTypes: [\"xAxis\", \"yAxis\"], colorCounter: 0, parallelArrays: [\"x\", \"y\"], coll: \"series\", init: function init(a, c) {\n        var e = this,\n            h,\n            d,\n            k = a.series,\n            f;e.chart = a;e.options = c = e.setOptions(c);e.linkedSeries = [];e.bindAxes();b(e, { name: c.name, state: \"\", visible: !1 !== c.visible, selected: !0 === c.selected });d = c.events;for (h in d) {\n          B(e, h, d[h]);\n        }if (d && d.click || c.point && c.point.events && c.point.events.click || c.allowPointSelect) a.runTrackerClick = !0;e.getColor();e.getSymbol();q(e.parallelArrays, function (a) {\n          e[a + \"Data\"] = [];\n        });e.setData(c.data, !1);e.isCartesian && (a.hasCartesianSeries = !0);k.length && (f = k[k.length - 1]);e._i = E(f && f._i, -1) + 1;a.orderSeries(this.insert(k));\n      }, insert: function insert(a) {\n        var b = this.options.index,\n            c;if (m(b)) {\n          for (c = a.length; c--;) {\n            if (b >= E(a[c].options.index, a[c]._i)) {\n              a.splice(c + 1, 0, this);break;\n            }\n          }-1 === c && a.unshift(this);c += 1;\n        } else a.push(this);return E(c, a.length - 1);\n      }, bindAxes: function bindAxes() {\n        var b = this,\n            c = b.options,\n            e = b.chart,\n            d;q(b.axisTypes || [], function (h) {\n          q(e[h], function (a) {\n            d = a.options;if (c[h] === d.index || void 0 !== c[h] && c[h] === d.id || void 0 === c[h] && 0 === d.index) b.insert(a.series), b[h] = a, a.isDirty = !0;\n          });b[h] || b.optionalAxis === h || a.error(18, !0);\n        });\n      }, updateParallelArrays: function updateParallelArrays(a, b) {\n        var c = a.series,\n            e = arguments,\n            h = m(b) ? function (e) {\n          var h = \"y\" === e && c.toYData ? c.toYData(a) : a[e];c[e + \"Data\"][b] = h;\n        } : function (a) {\n          Array.prototype[b].apply(c[a + \"Data\"], Array.prototype.slice.call(e, 2));\n        };q(c.parallelArrays, h);\n      }, autoIncrement: function autoIncrement() {\n        var a = this.options,\n            b = this.xIncrement,\n            c,\n            e = a.pointIntervalUnit,\n            b = E(b, a.pointStart, 0);this.pointInterval = c = E(this.pointInterval, a.pointInterval, 1);e && (a = new g(b), \"day\" === e ? a = +a[g.hcSetDate](a[g.hcGetDate]() + c) : \"month\" === e ? a = +a[g.hcSetMonth](a[g.hcGetMonth]() + c) : \"year\" === e && (a = +a[g.hcSetFullYear](a[g.hcGetFullYear]() + c)), c = a - b);this.xIncrement = b + c;return b;\n      }, setOptions: function setOptions(a) {\n        var b = this.chart,\n            c = b.options.plotOptions,\n            b = b.userOptions || {},\n            e = b.plotOptions || {},\n            h = c[this.type];this.userOptions = a;c = n(h, c.series, a);this.tooltipOptions = n(f.tooltip, f.plotOptions[this.type].tooltip, b.tooltip, e.series && e.series.tooltip, e[this.type] && e[this.type].tooltip, a.tooltip);null === h.marker && delete c.marker;this.zoneAxis = c.zoneAxis;a = this.zones = (c.zones || []).slice();!c.negativeColor && !c.negativeFillColor || c.zones || a.push({ value: c[this.zoneAxis + \"Threshold\"] || c.threshold || 0, className: \"highcharts-negative\",\n          color: c.negativeColor, fillColor: c.negativeFillColor });a.length && l(a[a.length - 1].value) && a.push({ color: this.color, fillColor: this.fillColor });return c;\n      }, getCyclic: function getCyclic(a, b, c) {\n        var e,\n            h = this.chart,\n            d = this.userOptions,\n            f = a + \"Index\",\n            n = a + \"Counter\",\n            m = c ? c.length : E(h.options.chart[a + \"Count\"], h[a + \"Count\"]);b || (e = E(d[f], d[\"_\" + f]), l(e) || (h.series.length || (h[n] = 0), d[\"_\" + f] = e = h[n] % m, h[n] += 1), c && (b = c[e]));void 0 !== e && (this[f] = e);this[a] = b;\n      }, getColor: function getColor() {\n        this.options.colorByPoint ? this.options.color = null : this.getCyclic(\"color\", this.options.color || u[this.type].color, this.chart.options.colors);\n      }, getSymbol: function getSymbol() {\n        this.getCyclic(\"symbol\", this.options.marker.symbol, this.chart.options.symbols);\n      }, drawLegendSymbol: a.LegendSymbolMixin.drawLineMarker, setData: function setData(b, e, d, f) {\n        var h = this,\n            k = h.points,\n            n = k && k.length || 0,\n            g,\n            p = h.options,\n            y = h.chart,\n            l = null,\n            w = h.xAxis,\n            x = p.turboThreshold,\n            r = this.xData,\n            z = this.yData,\n            F = (g = h.pointArrayMap) && g.length;b = b || [];g = b.length;e = E(e, !0);if (!1 !== f && g && n === g && !h.cropped && !h.hasGroupedData && h.visible) q(b, function (a, b) {\n          k[b].update && a !== p.data[b] && k[b].update(a, !1, null, !1);\n        });else {\n          h.xIncrement = null;h.colorCounter = 0;q(this.parallelArrays, function (a) {\n            h[a + \"Data\"].length = 0;\n          });if (x && g > x) {\n            for (d = 0; null === l && d < g;) {\n              l = b[d], d++;\n            }if (m(l)) for (d = 0; d < g; d++) {\n              r[d] = this.autoIncrement(), z[d] = b[d];\n            } else if (t(l)) {\n              if (F) for (d = 0; d < g; d++) {\n                l = b[d], r[d] = l[0], z[d] = l.slice(1, F + 1);\n              } else for (d = 0; d < g; d++) {\n                l = b[d], r[d] = l[0], z[d] = l[1];\n              }\n            } else a.error(12);\n          } else for (d = 0; d < g; d++) {\n            void 0 !== b[d] && (l = { series: h }, h.pointClass.prototype.applyOptions.apply(l, [b[d]]), h.updateParallelArrays(l, d));\n          }c(z[0]) && a.error(14, !0);h.data = [];h.options.data = h.userOptions.data = b;for (d = n; d--;) {\n            k[d] && k[d].destroy && k[d].destroy();\n          }w && (w.minRange = w.userMinRange);h.isDirty = y.isDirtyBox = !0;h.isDirtyData = !!k;d = !1;\n        }\"point\" === p.legendType && (this.processData(), this.generatePoints());e && y.redraw(d);\n      }, processData: function processData(b) {\n        var c = this.xData,\n            e = this.yData,\n            h = c.length,\n            d;d = 0;var k,\n            f,\n            n = this.xAxis,\n            m,\n            g = this.options;m = g.cropThreshold;var p = this.getExtremesFromAll || g.getExtremesFromAll,\n            l = this.isCartesian,\n            g = n && n.val2lin,\n            q = n && n.isLog,\n            t,\n            w;if (l && !this.isDirty && !n.isDirty && !this.yAxis.isDirty && !b) return !1;n && (b = n.getExtremes(), t = b.min, w = b.max);if (l && this.sorted && !p && (!m || h > m || this.forceCrop)) if (c[h - 1] < t || c[0] > w) c = [], e = [];else if (c[0] < t || c[h - 1] > w) d = this.cropData(this.xData, this.yData, t, w), c = d.xData, e = d.yData, d = d.start, k = !0;for (m = c.length || 1; --m;) {\n          h = q ? g(c[m]) - g(c[m - 1]) : c[m] - c[m - 1], 0 < h && (void 0 === f || h < f) ? f = h : 0 > h && this.requireSorting && a.error(15);\n        }this.cropped = k;this.cropStart = d;this.processedXData = c;this.processedYData = e;this.closestPointRange = f;\n      }, cropData: function cropData(a, b, c, e) {\n        var h = a.length,\n            d = 0,\n            f = h,\n            n = E(this.cropShoulder, 1),\n            m;for (m = 0; m < h; m++) {\n          if (a[m] >= c) {\n            d = Math.max(0, m - n);break;\n          }\n        }for (c = m; c < h; c++) {\n          if (a[c] > e) {\n            f = c + n;break;\n          }\n        }return { xData: a.slice(d, f), yData: b.slice(d, f), start: d, end: f };\n      }, generatePoints: function generatePoints() {\n        var a = this.options.data,\n            b = this.data,\n            c,\n            d = this.processedXData,\n            f = this.processedYData,\n            k = this.pointClass,\n            n = d.length,\n            m = this.cropStart || 0,\n            g,\n            p = this.hasGroupedData,\n            l,\n            q = [],\n            t;b || p || (b = [], b.length = a.length, b = this.data = b);for (t = 0; t < n; t++) {\n          g = m + t, p ? (l = new k().init(this, [d[t]].concat(e(f[t]))), l.dataGroup = this.groupMap[t]) : (l = b[g]) || void 0 === a[g] || (b[g] = l = new k().init(this, a[g], d[t])), l.index = g, q[t] = l;\n        }if (b && (n !== (c = b.length) || p)) for (t = 0; t < c; t++) {\n          t !== m || p || (t += n), b[t] && (b[t].destroyElements(), b[t].plotX = void 0);\n        }this.data = b;this.points = q;\n      }, getExtremes: function getExtremes(a) {\n        var b = this.yAxis,\n            c = this.processedXData,\n            e,\n            h = [],\n            d = 0;e = this.xAxis.getExtremes();var f = e.min,\n            n = e.max,\n            g,\n            p,\n            l,\n            q;a = a || this.stackedYData || this.processedYData || [];e = a.length;for (q = 0; q < e; q++) {\n          if (p = c[q], l = a[q], g = (m(l, !0) || t(l)) && (!b.isLog || l.length || 0 < l), p = this.getExtremesFromAll || this.options.getExtremesFromAll || this.cropped || (c[q + 1] || p) >= f && (c[q - 1] || p) <= n, g && p) if (g = l.length) for (; g--;) {\n            null !== l[g] && (h[d++] = l[g]);\n          } else h[d++] = l;\n        }this.dataMin = G(h);this.dataMax = H(h);\n      }, translate: function translate() {\n        this.processedXData || this.processData();this.generatePoints();var a = this.options,\n            b = a.stacking,\n            c = this.xAxis,\n            e = c.categories,\n            d = this.yAxis,\n            k = this.points,\n            f = k.length,\n            n = !!this.modifyValue,\n            g = a.pointPlacement,\n            p = \"between\" === g || m(g),\n            q = a.threshold,\n            t = a.startFromThreshold ? q : 0,\n            w,\n            x,\n            z,\n            F,\n            u = Number.MAX_VALUE;\"between\" === g && (g = .5);m(g) && (g *= E(a.pointRange || c.pointRange));for (a = 0; a < f; a++) {\n          var C = k[a],\n              A = C.x,\n              B = C.y;x = C.low;var H = b && d.stacks[(this.negStacks && B < (t ? 0 : q) ? \"-\" : \"\") + this.stackKey],\n              G;d.isLog && null !== B && 0 >= B && (C.isNull = !0);C.plotX = w = r(Math.min(Math.max(-1E5, c.translate(A, 0, 0, 0, 1, g, \"flags\" === this.type)), 1E5));b && this.visible && !C.isNull && H && H[A] && (F = this.getStackIndicator(F, A, this.index), G = H[A], B = G.points[F.key], x = B[0], B = B[1], x === t && F.key === H[A].base && (x = E(q, d.min)), d.isLog && 0 >= x && (x = null), C.total = C.stackTotal = G.total, C.percentage = G.total && C.y / G.total * 100, C.stackY = B, G.setOffset(this.pointXOffset || 0, this.barW || 0));C.yBottom = l(x) ? d.translate(x, 0, 1, 0, 1) : null;n && (B = this.modifyValue(B, C));C.plotY = x = \"number\" === typeof B && Infinity !== B ? Math.min(Math.max(-1E5, d.translate(B, 0, 1, 0, 1)), 1E5) : void 0;C.isInside = void 0 !== x && 0 <= x && x <= d.len && 0 <= w && w <= c.len;C.clientX = p ? r(c.translate(A, 0, 0, 0, 1, g)) : w;C.negative = C.y < (q || 0);C.category = e && void 0 !== e[C.x] ? e[C.x] : C.x;C.isNull || (void 0 !== z && (u = Math.min(u, Math.abs(w - z))), z = w);C.zone = this.zones.length && C.getZone();\n        }this.closestPointRangePx = u;\n      }, getValidPoints: function getValidPoints(a, b) {\n        var c = this.chart;return C(a || this.points || [], function (a) {\n          return b && !c.isInsidePlot(a.plotX, a.plotY, c.inverted) ? !1 : !a.isNull;\n        });\n      }, setClip: function setClip(a) {\n        var b = this.chart,\n            c = this.options,\n            e = b.renderer,\n            d = b.inverted,\n            h = this.clipBox,\n            f = h || b.clipBox,\n            n = this.sharedClipKey || [\"_sharedClip\", a && a.duration, a && a.easing, f.height, c.xAxis, c.yAxis].join(),\n            m = b[n],\n            g = b[n + \"m\"];m || (a && (f.width = 0, b[n + \"m\"] = g = e.clipRect(-99, d ? -b.plotLeft : -b.plotTop, 99, d ? b.chartWidth : b.chartHeight)), b[n] = m = e.clipRect(f), m.count = { length: 0 });a && !m.count[this.index] && (m.count[this.index] = !0, m.count.length += 1);!1 !== c.clip && (this.group.clip(a || h ? m : b.clipRect), this.markerGroup.clip(g), this.sharedClipKey = n);a || (m.count[this.index] && (delete m.count[this.index], --m.count.length), 0 === m.count.length && n && b[n] && (h || (b[n] = b[n].destroy()), b[n + \"m\"] && (this.markerGroup.clip(), b[n + \"m\"] = b[n + \"m\"].destroy())));\n      }, animate: function animate(a) {\n        var b = this.chart,\n            c = A(this.options.animation),\n            e;a ? this.setClip(c) : (e = this.sharedClipKey, (a = b[e]) && a.animate({ width: b.plotSizeX }, c), b[e + \"m\"] && b[e + \"m\"].animate({ width: b.plotSizeX + 99 }, c), this.animate = null);\n      }, afterAnimate: function afterAnimate() {\n        this.setClip();p(this, \"afterAnimate\");\n      }, drawPoints: function drawPoints() {\n        var a = this.points,\n            b = this.chart,\n            c,\n            e,\n            d,\n            k,\n            f = this.options.marker,\n            n,\n            g,\n            p,\n            l,\n            q = this.markerGroup,\n            t = E(f.enabled, this.xAxis.isRadial ? !0 : null, this.closestPointRangePx > 2 * f.radius);if (!1 !== f.enabled || this._hasPointMarkers) for (e = 0; e < a.length; e++) {\n          d = a[e], c = d.plotY, k = d.graphic, n = d.marker || {}, g = !!d.marker, p = t && void 0 === n.enabled || n.enabled, l = d.isInside, p && m(c) && null !== d.y ? (c = E(n.symbol, this.symbol), d.hasImage = 0 === c.indexOf(\"url\"), p = this.markerAttribs(d, d.selected && \"select\"), k ? k[l ? \"show\" : \"hide\"](!0).animate(p) : l && (0 < p.width || d.hasImage) && (d.graphic = k = b.renderer.symbol(c, p.x, p.y, p.width, p.height, g ? n : f).add(q)), k && k.attr(this.pointAttribs(d, d.selected && \"select\")), k && k.addClass(d.getClassName(), !0)) : k && (d.graphic = k.destroy());\n        }\n      }, markerAttribs: function markerAttribs(a, b) {\n        var c = this.options.marker,\n            e = a.marker || {},\n            d = E(e.radius, c.radius);b && (c = c.states[b], b = e.states && e.states[b], d = E(b && b.radius, c && c.radius, d + (c && c.radiusPlus || 0)));a.hasImage && (d = 0);a = { x: Math.floor(a.plotX) - d, y: a.plotY - d };d && (a.width = a.height = 2 * d);return a;\n      }, pointAttribs: function pointAttribs(a, b) {\n        var c = this.options.marker,\n            e = a && a.options,\n            d = e && e.marker || {},\n            h = this.color,\n            f = e && e.color,\n            n = a && a.color,\n            e = E(d.lineWidth, c.lineWidth);a = a && a.zone && a.zone.color;h = f || a || n || h;a = d.fillColor || c.fillColor || h;h = d.lineColor || c.lineColor || h;b && (c = c.states[b], b = d.states && d.states[b] || {}, e = E(b.lineWidth, c.lineWidth, e + E(b.lineWidthPlus, c.lineWidthPlus, 0)), a = b.fillColor || c.fillColor || a, h = b.lineColor || c.lineColor || h);return { stroke: h, \"stroke-width\": e, fill: a };\n      }, destroy: function destroy() {\n        var a = this,\n            b = a.chart,\n            c = /AppleWebKit\\/533/.test(w.navigator.userAgent),\n            e,\n            f = a.data || [],\n            k,\n            n,\n            m;p(a, \"destroy\");z(a);q(a.axisTypes || [], function (b) {\n          (m = a[b]) && m.series && (d(m.series, a), m.isDirty = m.forceRedraw = !0);\n        });a.legendItem && a.chart.legend.destroyItem(a);for (e = f.length; e--;) {\n          (k = f[e]) && k.destroy && k.destroy();\n        }a.points = null;clearTimeout(a.animationTimeout);for (n in a) {\n          a[n] instanceof x && !a[n].survive && (e = c && \"group\" === n ? \"hide\" : \"destroy\", a[n][e]());\n        }b.hoverSeries === a && (b.hoverSeries = null);d(b.series, a);b.orderSeries();for (n in a) {\n          delete a[n];\n        }\n      }, getGraphPath: function getGraphPath(a, b, c) {\n        var e = this,\n            d = e.options,\n            h = d.step,\n            f,\n            n = [],\n            m = [],\n            g;a = a || e.points;(f = a.reversed) && a.reverse();(h = { right: 1, center: 2 }[h] || h && 3) && f && (h = 4 - h);!d.connectNulls || b || c || (a = this.getValidPoints(a));q(a, function (f, k) {\n          var p = f.plotX,\n              q = f.plotY,\n              t = a[k - 1];(f.leftCliff || t && t.rightCliff) && !c && (g = !0);f.isNull && !l(b) && 0 < k ? g = !d.connectNulls : f.isNull && !b ? g = !0 : (0 === k || g ? k = [\"M\", f.plotX, f.plotY] : e.getPointSpline ? k = e.getPointSpline(a, f, k) : h ? (k = 1 === h ? [\"L\", t.plotX, q] : 2 === h ? [\"L\", (t.plotX + p) / 2, t.plotY, \"L\", (t.plotX + p) / 2, q] : [\"L\", p, t.plotY], k.push(\"L\", p, q)) : k = [\"L\", p, q], m.push(f.x), h && m.push(f.x), n.push.apply(n, k), g = !1);\n        });n.xMap = m;return e.graphPath = n;\n      }, drawGraph: function drawGraph() {\n        var a = this,\n            b = this.options,\n            c = (this.gappedPath || this.getGraphPath).call(this),\n            e = [[\"graph\", \"highcharts-graph\", b.lineColor || this.color, b.dashStyle]];q(this.zones, function (c, d) {\n          e.push([\"zone-graph-\" + d, \"highcharts-graph highcharts-zone-graph-\" + d + \" \" + (c.className || \"\"), c.color || a.color, c.dashStyle || b.dashStyle]);\n        });q(e, function (e, d) {\n          var h = e[0],\n              f = a[h];f ? (f.endX = c.xMap, f.animate({ d: c })) : c.length && (a[h] = a.chart.renderer.path(c).addClass(e[1]).attr({ zIndex: 1 }).add(a.group), f = { stroke: e[2], \"stroke-width\": b.lineWidth, fill: a.fillGraph && a.color || \"none\" }, e[3] ? f.dashstyle = e[3] : \"square\" !== b.linecap && (f[\"stroke-linecap\"] = f[\"stroke-linejoin\"] = \"round\"), f = a[h].attr(f).shadow(2 > d && b.shadow));f && (f.startX = c.xMap, f.isArea = c.isArea);\n        });\n      }, applyZones: function applyZones() {\n        var a = this,\n            b = this.chart,\n            c = b.renderer,\n            e = this.zones,\n            d,\n            f,\n            n = this.clips || [],\n            m,\n            g = this.graph,\n            p = this.area,\n            l = Math.max(b.chartWidth, b.chartHeight),\n            t = this[(this.zoneAxis || \"y\") + \"Axis\"],\n            w,\n            x,\n            r = b.inverted,\n            z,\n            F,\n            u,\n            C,\n            A = !1;e.length && (g || p) && t && void 0 !== t.min && (x = t.reversed, z = t.horiz, g && g.hide(), p && p.hide(), w = t.getExtremes(), q(e, function (e, h) {\n          d = x ? z ? b.plotWidth : 0 : z ? 0 : t.toPixels(w.min);d = Math.min(Math.max(E(f, d), 0), l);f = Math.min(Math.max(Math.round(t.toPixels(E(e.value, w.max), !0)), 0), l);A && (d = f = t.toPixels(w.max));F = Math.abs(d - f);u = Math.min(d, f);C = Math.max(d, f);t.isXAxis ? (m = { x: r ? C : u, y: 0, width: F, height: l }, z || (m.x = b.plotHeight - m.x)) : (m = { x: 0, y: r ? C : u, width: l, height: F }, z && (m.y = b.plotWidth - m.y));r && c.isVML && (m = t.isXAxis ? { x: 0, y: x ? u : C, height: m.width, width: b.chartWidth } : { x: m.y - b.plotLeft - b.spacingBox.x, y: 0, width: m.height, height: b.chartHeight });n[h] ? n[h].animate(m) : (n[h] = c.clipRect(m), g && a[\"zone-graph-\" + h].clip(n[h]), p && a[\"zone-area-\" + h].clip(n[h]));A = e.value > w.max;\n        }), this.clips = n);\n      }, invertGroups: function invertGroups(a) {\n        function b() {\n          q([\"group\", \"markerGroup\"], function (b) {\n            c[b] && (c[b].width = c.yAxis.len, c[b].height = c.xAxis.len, c[b].invert(a));\n          });\n        }var c = this,\n            e;c.xAxis && (e = B(c.chart, \"resize\", b), B(c, \"destroy\", e), b(a), c.invertGroups = b);\n      }, plotGroup: function plotGroup(a, b, c, e, d) {\n        var h = this[a],\n            f = !h;f && (this[a] = h = this.chart.renderer.g(b).attr({ zIndex: e || .1 }).add(d), h.addClass(\"highcharts-series-\" + this.index + \" highcharts-\" + this.type + \"-series highcharts-color-\" + this.colorIndex + \" \" + (this.options.className || \"\")));h.attr({ visibility: c })[f ? \"attr\" : \"animate\"](this.getPlotBox());return h;\n      }, getPlotBox: function getPlotBox() {\n        var a = this.chart,\n            b = this.xAxis,\n            c = this.yAxis;a.inverted && (b = c, c = this.xAxis);return { translateX: b ? b.left : a.plotLeft, translateY: c ? c.top : a.plotTop, scaleX: 1, scaleY: 1 };\n      }, render: function render() {\n        var a = this,\n            b = a.chart,\n            c,\n            e = a.options,\n            d = !!a.animate && b.renderer.isSVG && A(e.animation).duration,\n            f = a.visible ? \"inherit\" : \"hidden\",\n            n = e.zIndex,\n            m = a.hasRendered,\n            g = b.seriesGroup,\n            p = b.inverted;c = a.plotGroup(\"group\", \"series\", f, n, g);a.markerGroup = a.plotGroup(\"markerGroup\", \"markers\", f, n, g);d && a.animate(!0);c.inverted = a.isCartesian ? p : !1;a.drawGraph && (a.drawGraph(), a.applyZones());a.drawDataLabels && a.drawDataLabels();a.visible && a.drawPoints();a.drawTracker && !1 !== a.options.enableMouseTracking && a.drawTracker();a.invertGroups(p);!1 === e.clip || a.sharedClipKey || m || c.clip(b.clipRect);d && a.animate();m || (a.animationTimeout = F(function () {\n          a.afterAnimate();\n        }, d));a.isDirty = !1;a.hasRendered = !0;\n      }, redraw: function redraw() {\n        var a = this.chart,\n            b = this.isDirty || this.isDirtyData,\n            c = this.group,\n            e = this.xAxis,\n            d = this.yAxis;c && (a.inverted && c.attr({ width: a.plotWidth, height: a.plotHeight }), c.animate({ translateX: E(e && e.left, a.plotLeft), translateY: E(d && d.top, a.plotTop) }));this.translate();this.render();b && delete this.kdTree;\n      }, kdDimensions: 1, kdAxisArray: [\"clientX\", \"plotY\"], searchPoint: function searchPoint(a, b) {\n        var c = this.xAxis,\n            e = this.yAxis,\n            d = this.chart.inverted;return this.searchKDTree({ clientX: d ? c.len - a.chartY + c.pos : a.chartX - c.pos, plotY: d ? e.len - a.chartX + e.pos : a.chartY - e.pos }, b);\n      }, buildKDTree: function buildKDTree() {\n        function a(c, e, d) {\n          var h, f;if (f = c && c.length) return h = b.kdAxisArray[e % d], c.sort(function (a, b) {\n            return a[h] - b[h];\n          }), f = Math.floor(f / 2), { point: c[f], left: a(c.slice(0, f), e + 1, d), right: a(c.slice(f + 1), e + 1, d) };\n        }this.buildingKdTree = !0;var b = this,\n            c = b.kdDimensions;delete b.kdTree;F(function () {\n          b.kdTree = a(b.getValidPoints(null, !b.directTouch), c, c);b.buildingKdTree = !1;\n        }, b.options.kdNow ? 0 : 1);\n      }, searchKDTree: function searchKDTree(a, b) {\n        function c(a, b, k, n) {\n          var m = b.point,\n              g = e.kdAxisArray[k % n],\n              p,\n              t,\n              q = m;t = l(a[d]) && l(m[d]) ? Math.pow(a[d] - m[d], 2) : null;p = l(a[h]) && l(m[h]) ? Math.pow(a[h] - m[h], 2) : null;p = (t || 0) + (p || 0);m.dist = l(p) ? Math.sqrt(p) : Number.MAX_VALUE;m.distX = l(t) ? Math.sqrt(t) : Number.MAX_VALUE;g = a[g] - m[g];p = 0 > g ? \"left\" : \"right\";t = 0 > g ? \"right\" : \"left\";b[p] && (p = c(a, b[p], k + 1, n), q = p[f] < q[f] ? p : m);b[t] && Math.sqrt(g * g) < q[f] && (a = c(a, b[t], k + 1, n), q = a[f] < q[f] ? a : q);return q;\n        }var e = this,\n            d = this.kdAxisArray[0],\n            h = this.kdAxisArray[1],\n            f = b ? \"distX\" : \"dist\";\n        this.kdTree || this.buildingKdTree || this.buildKDTree();if (this.kdTree) return c(a, this.kdTree, this.kdDimensions, this.kdDimensions);\n      } });\n  })(L);(function (a) {\n    function B(a, d, b, f, g) {\n      var p = a.chart.inverted;this.axis = a;this.isNegative = b;this.options = d;this.x = f;this.total = null;this.points = {};this.stack = g;this.rightCliff = this.leftCliff = 0;this.alignOptions = { align: d.align || (p ? b ? \"left\" : \"right\" : \"center\"), verticalAlign: d.verticalAlign || (p ? \"middle\" : b ? \"bottom\" : \"top\"), y: l(d.y, p ? 4 : b ? 14 : -6), x: l(d.x, p ? b ? -6 : 6 : 0) };this.textAlign = d.textAlign || (p ? b ? \"right\" : \"left\" : \"center\");\n    }var A = a.Axis,\n        H = a.Chart,\n        G = a.correctFloat,\n        r = a.defined,\n        g = a.destroyObjectProperties,\n        f = a.each,\n        u = a.format,\n        l = a.pick;a = a.Series;B.prototype = { destroy: function destroy() {\n        g(this, this.axis);\n      }, render: function render(a) {\n        var d = this.options,\n            b = d.format,\n            b = b ? u(b, this) : d.formatter.call(this);this.label ? this.label.attr({ text: b, visibility: \"hidden\" }) : this.label = this.axis.chart.renderer.text(b, null, null, d.useHTML).css(d.style).attr({ align: this.textAlign, rotation: d.rotation, visibility: \"hidden\" }).add(a);\n      },\n      setOffset: function setOffset(a, d) {\n        var b = this.axis,\n            f = b.chart,\n            g = f.inverted,\n            l = b.reversed,\n            l = this.isNegative && !l || !this.isNegative && l,\n            m = b.translate(b.usePercentage ? 100 : this.total, 0, 0, 0, 1),\n            b = b.translate(0),\n            b = Math.abs(m - b);a = f.xAxis[0].translate(this.x) + a;var c = f.plotHeight,\n            g = { x: g ? l ? m : m - b : a, y: g ? c - a - d : l ? c - m - b : c - m, width: g ? b : d, height: g ? d : b };if (d = this.label) d.align(this.alignOptions, null, g), g = d.alignAttr, d[!1 === this.options.crop || f.isInsidePlot(g.x, g.y) ? \"show\" : \"hide\"](!0);\n      } };H.prototype.getStacks = function () {\n      var a = this;\n      f(a.yAxis, function (a) {\n        a.stacks && a.hasVisibleSeries && (a.oldStacks = a.stacks);\n      });f(a.series, function (d) {\n        !d.options.stacking || !0 !== d.visible && !1 !== a.options.chart.ignoreHiddenSeries || (d.stackKey = d.type + l(d.options.stack, \"\"));\n      });\n    };A.prototype.buildStacks = function () {\n      var a = this.series,\n          d,\n          b = l(this.options.reversedStacks, !0),\n          f = a.length,\n          g;if (!this.isXAxis) {\n        this.usePercentage = !1;for (g = f; g--;) {\n          a[b ? g : f - g - 1].setStackedPoints();\n        }for (g = f; g--;) {\n          d = a[b ? g : f - g - 1], d.setStackCliffs && d.setStackCliffs();\n        }if (this.usePercentage) for (g = 0; g < f; g++) {\n          a[g].setPercentStacks();\n        }\n      }\n    };A.prototype.renderStackTotals = function () {\n      var a = this.chart,\n          d = a.renderer,\n          b = this.stacks,\n          f,\n          g,\n          l = this.stackTotalGroup;l || (this.stackTotalGroup = l = d.g(\"stack-labels\").attr({ visibility: \"visible\", zIndex: 6 }).add());l.translate(a.plotLeft, a.plotTop);for (f in b) {\n        for (g in a = b[f], a) {\n          a[g].render(l);\n        }\n      }\n    };A.prototype.resetStacks = function () {\n      var a = this.stacks,\n          d,\n          b;if (!this.isXAxis) for (d in a) {\n        for (b in a[d]) {\n          a[d][b].touched < this.stacksTouched ? (a[d][b].destroy(), delete a[d][b]) : (a[d][b].total = null, a[d][b].cum = null);\n        }\n      }\n    };A.prototype.cleanStacks = function () {\n      var a, d, b;if (!this.isXAxis) for (d in this.oldStacks && (a = this.stacks = this.oldStacks), a) {\n        for (b in a[d]) {\n          a[d][b].cum = a[d][b].total;\n        }\n      }\n    };a.prototype.setStackedPoints = function () {\n      if (this.options.stacking && (!0 === this.visible || !1 === this.chart.options.chart.ignoreHiddenSeries)) {\n        var a = this.processedXData,\n            d = this.processedYData,\n            b = [],\n            f = d.length,\n            g = this.options,\n            t = g.threshold,\n            m = g.startFromThreshold ? t : 0,\n            c = g.stack,\n            g = g.stacking,\n            n = this.stackKey,\n            u = \"-\" + n,\n            z = this.negStacks,\n            e = this.yAxis,\n            x = e.stacks,\n            F = e.oldStacks,\n            w,\n            h,\n            y,\n            A,\n            K,\n            I,\n            k;e.stacksTouched += 1;for (K = 0; K < f; K++) {\n          I = a[K], k = d[K], w = this.getStackIndicator(w, I, this.index), A = w.key, y = (h = z && k < (m ? 0 : t)) ? u : n, x[y] || (x[y] = {}), x[y][I] || (F[y] && F[y][I] ? (x[y][I] = F[y][I], x[y][I].total = null) : x[y][I] = new B(e, e.options.stackLabels, h, I, c)), y = x[y][I], null !== k && (y.points[A] = y.points[this.index] = [l(y.cum, m)], r(y.cum) || (y.base = A), y.touched = e.stacksTouched, 0 < w.index && !1 === this.singleStacks && (y.points[A][0] = y.points[this.index + \",\" + I + \",0\"][0])), \"percent\" === g ? (h = h ? n : u, z && x[h] && x[h][I] ? (h = x[h][I], y.total = h.total = Math.max(h.total, y.total) + Math.abs(k) || 0) : y.total = G(y.total + (Math.abs(k) || 0))) : y.total = G(y.total + (k || 0)), y.cum = l(y.cum, m) + (k || 0), null !== k && (y.points[A].push(y.cum), b[K] = y.cum);\n        }\"percent\" === g && (e.usePercentage = !0);this.stackedYData = b;e.oldStacks = {};\n      }\n    };a.prototype.setPercentStacks = function () {\n      var a = this,\n          d = a.stackKey,\n          b = a.yAxis.stacks,\n          g = a.processedXData,\n          l;f([d, \"-\" + d], function (d) {\n        for (var f = g.length, c, n; f--;) {\n          if (c = g[f], l = a.getStackIndicator(l, c, a.index, d), c = (n = b[d] && b[d][c]) && n.points[l.key]) n = n.total ? 100 / n.total : 0, c[0] = G(c[0] * n), c[1] = G(c[1] * n), a.stackedYData[f] = c[1];\n        }\n      });\n    };a.prototype.getStackIndicator = function (a, d, b, f) {\n      !r(a) || a.x !== d || f && a.key !== f ? a = { x: d, index: 0, key: f } : a.index++;a.key = [b, d, a.index].join();return a;\n    };\n  })(L);(function (a) {\n    var B = a.addEvent,\n        A = a.animate,\n        H = a.Axis,\n        G = a.createElement,\n        r = a.css,\n        g = a.defined,\n        f = a.each,\n        u = a.erase,\n        l = a.extend,\n        q = a.fireEvent,\n        d = a.inArray,\n        b = a.isNumber,\n        p = a.isObject,\n        C = a.merge,\n        t = a.pick,\n        m = a.Point,\n        c = a.Series,\n        n = a.seriesTypes,\n        E = a.setAnimation,\n        z = a.splat;l(a.Chart.prototype, { addSeries: function addSeries(a, b, c) {\n        var e,\n            d = this;a && (b = t(b, !0), q(d, \"addSeries\", { options: a }, function () {\n          e = d.initSeries(a);d.isDirtyLegend = !0;d.linkSeries();b && d.redraw(c);\n        }));return e;\n      }, addAxis: function addAxis(a, b, c, d) {\n        var e = b ? \"xAxis\" : \"yAxis\",\n            f = this.options;a = C(a, { index: this[e].length, isX: b });new H(this, a);f[e] = z(f[e] || {});f[e].push(a);t(c, !0) && this.redraw(d);\n      }, showLoading: function showLoading(a) {\n        var b = this,\n            c = b.options,\n            e = b.loadingDiv,\n            d = c.loading,\n            f = function f() {\n          e && r(e, { left: b.plotLeft + \"px\", top: b.plotTop + \"px\", width: b.plotWidth + \"px\", height: b.plotHeight + \"px\" });\n        };e || (b.loadingDiv = e = G(\"div\", { className: \"highcharts-loading highcharts-loading-hidden\" }, null, b.container), b.loadingSpan = G(\"span\", { className: \"highcharts-loading-inner\" }, null, e), B(b, \"redraw\", f));e.className = \"highcharts-loading\";b.loadingSpan.innerHTML = a || c.lang.loading;r(e, l(d.style, { zIndex: 10 }));r(b.loadingSpan, d.labelStyle);b.loadingShown || (r(e, { opacity: 0, display: \"\" }), A(e, { opacity: d.style.opacity || .5 }, { duration: d.showDuration || 0 }));b.loadingShown = !0;f();\n      }, hideLoading: function hideLoading() {\n        var a = this.options,\n            b = this.loadingDiv;b && (b.className = \"highcharts-loading highcharts-loading-hidden\", A(b, { opacity: 0 }, { duration: a.loading.hideDuration || 100, complete: function complete() {\n            r(b, { display: \"none\" });\n          } }));this.loadingShown = !1;\n      }, propsRequireDirtyBox: \"backgroundColor borderColor borderWidth margin marginTop marginRight marginBottom marginLeft spacing spacingTop spacingRight spacingBottom spacingLeft borderRadius plotBackgroundColor plotBackgroundImage plotBorderColor plotBorderWidth plotShadow shadow\".split(\" \"),\n      propsRequireUpdateSeries: \"chart.inverted chart.polar chart.ignoreHiddenSeries chart.type colors plotOptions\".split(\" \"), update: function update(a, c) {\n        var e,\n            n = { credits: \"addCredits\", title: \"setTitle\", subtitle: \"setSubtitle\" },\n            h = a.chart,\n            m,\n            p;if (h) {\n          C(!0, this.options.chart, h);\"className\" in h && this.setClassName(h.className);if (\"inverted\" in h || \"polar\" in h) this.propFromSeries(), m = !0;for (e in h) {\n            h.hasOwnProperty(e) && (-1 !== d(\"chart.\" + e, this.propsRequireUpdateSeries) && (p = !0), -1 !== d(e, this.propsRequireDirtyBox) && (this.isDirtyBox = !0));\n          }\"style\" in h && this.renderer.setStyle(h.style);\n        }for (e in a) {\n          if (this[e] && \"function\" === typeof this[e].update) this[e].update(a[e], !1);else if (\"function\" === typeof this[n[e]]) this[n[e]](a[e]);\"chart\" !== e && -1 !== d(e, this.propsRequireUpdateSeries) && (p = !0);\n        }a.colors && (this.options.colors = a.colors);a.plotOptions && C(!0, this.options.plotOptions, a.plotOptions);f([\"xAxis\", \"yAxis\", \"series\"], function (b) {\n          a[b] && f(z(a[b]), function (a, c) {\n            (c = g(a.id) && this.get(a.id) || this[b][c]) && c.coll === b && c.update(a, !1);\n          }, this);\n        }, this);\n        m && f(this.axes, function (a) {\n          a.update({}, !1);\n        });p && f(this.series, function (a) {\n          a.update({}, !1);\n        });a.loading && C(!0, this.options.loading, a.loading);e = h && h.width;h = h && h.height;b(e) && e !== this.chartWidth || b(h) && h !== this.chartHeight ? this.setSize(e, h) : t(c, !0) && this.redraw();\n      }, setSubtitle: function setSubtitle(a) {\n        this.setTitle(void 0, a);\n      } });l(m.prototype, { update: function update(a, b, c, d) {\n        function e() {\n          f.applyOptions(a);null === f.y && n && (f.graphic = n.destroy());p(a, !0) && (n && n.element && a && a.marker && a.marker.symbol && (f.graphic = n.destroy()), a && a.dataLabels && f.dataLabel && (f.dataLabel = f.dataLabel.destroy()));m = f.index;g.updateParallelArrays(f, m);l.data[m] = p(l.data[m], !0) ? f.options : a;g.isDirty = g.isDirtyData = !0;!g.fixedBox && g.hasCartesianSeries && (k.isDirtyBox = !0);\"point\" === l.legendType && (k.isDirtyLegend = !0);b && k.redraw(c);\n        }var f = this,\n            g = f.series,\n            n = f.graphic,\n            m,\n            k = g.chart,\n            l = g.options;b = t(b, !0);!1 === d ? e() : f.firePointEvent(\"update\", { options: a }, e);\n      }, remove: function remove(a, b) {\n        this.series.removePoint(d(this, this.series.data), a, b);\n      } });l(c.prototype, { addPoint: function addPoint(a, b, c, d) {\n        var e = this.options,\n            f = this.data,\n            g = this.chart,\n            n = this.xAxis,\n            n = n && n.hasNames && n.names,\n            m = e.data,\n            k,\n            p,\n            l = this.xData,\n            q,\n            w;b = t(b, !0);k = { series: this };this.pointClass.prototype.applyOptions.apply(k, [a]);w = k.x;q = l.length;if (this.requireSorting && w < l[q - 1]) for (p = !0; q && l[q - 1] > w;) {\n          q--;\n        }this.updateParallelArrays(k, \"splice\", q, 0, 0);this.updateParallelArrays(k, q);n && k.name && (n[w] = k.name);m.splice(q, 0, a);p && (this.data.splice(q, 0, null), this.processData());\"point\" === e.legendType && this.generatePoints();c && (f[0] && f[0].remove ? f[0].remove(!1) : (f.shift(), this.updateParallelArrays(k, \"shift\"), m.shift()));this.isDirtyData = this.isDirty = !0;b && g.redraw(d);\n      }, removePoint: function removePoint(a, b, c) {\n        var e = this,\n            d = e.data,\n            f = d[a],\n            g = e.points,\n            n = e.chart,\n            m = function m() {\n          g && g.length === d.length && g.splice(a, 1);d.splice(a, 1);e.options.data.splice(a, 1);e.updateParallelArrays(f || { series: e }, \"splice\", a, 1);f && f.destroy();e.isDirty = !0;e.isDirtyData = !0;b && n.redraw();\n        };E(c, n);b = t(b, !0);f ? f.firePointEvent(\"remove\", null, m) : m();\n      }, remove: function remove(a, b, c) {\n        function e() {\n          d.destroy();\n          f.isDirtyLegend = f.isDirtyBox = !0;f.linkSeries();t(a, !0) && f.redraw(b);\n        }var d = this,\n            f = d.chart;!1 !== c ? q(d, \"remove\", null, e) : e();\n      }, update: function update(a, b) {\n        var c = this,\n            e = this.chart,\n            d = this.userOptions,\n            g = this.type,\n            m = a.type || d.type || e.options.chart.type,\n            p = n[g].prototype,\n            q = [\"group\", \"markerGroup\", \"dataLabelsGroup\"],\n            k;if (m && m !== g || void 0 !== a.zIndex) q.length = 0;f(q, function (a) {\n          q[a] = c[a];delete c[a];\n        });a = C(d, { animation: !1, index: this.index, pointStart: this.xData[0] }, { data: this.options.data }, a);this.remove(!1, null, !1);for (k in p) {\n          this[k] = void 0;\n        }l(this, n[m || g].prototype);f(q, function (a) {\n          c[a] = q[a];\n        });this.init(e, a);e.linkSeries();t(b, !0) && e.redraw(!1);\n      } });l(H.prototype, { update: function update(a, b) {\n        var c = this.chart;a = c.options[this.coll][this.options.index] = C(this.userOptions, a);this.destroy(!0);this.init(c, l(a, { events: void 0 }));c.isDirtyBox = !0;t(b, !0) && c.redraw();\n      }, remove: function remove(a) {\n        for (var b = this.chart, c = this.coll, e = this.series, d = e.length; d--;) {\n          e[d] && e[d].remove(!1);\n        }u(b.axes, this);u(b[c], this);b.options[c].splice(this.options.index, 1);f(b[c], function (a, b) {\n          a.options.index = b;\n        });this.destroy();b.isDirtyBox = !0;t(a, !0) && b.redraw();\n      }, setTitle: function setTitle(a, b) {\n        this.update({ title: a }, b);\n      }, setCategories: function setCategories(a, b) {\n        this.update({ categories: a }, b);\n      } });\n  })(L);(function (a) {\n    var B = a.color,\n        A = a.each,\n        H = a.map,\n        G = a.pick,\n        r = a.Series,\n        g = a.seriesType;g(\"area\", \"line\", { softThreshold: !1, threshold: 0 }, { singleStacks: !1, getStackPoints: function getStackPoints() {\n        var a = [],\n            g = [],\n            l = this.xAxis,\n            q = this.yAxis,\n            d = q.stacks[this.stackKey],\n            b = {},\n            p = this.points,\n            r = this.index,\n            t = q.series,\n            m = t.length,\n            c,\n            n = G(q.options.reversedStacks, !0) ? 1 : -1,\n            E,\n            z;if (this.options.stacking) {\n          for (E = 0; E < p.length; E++) {\n            b[p[E].x] = p[E];\n          }for (z in d) {\n            null !== d[z].total && g.push(z);\n          }g.sort(function (a, b) {\n            return a - b;\n          });c = H(t, function () {\n            return this.visible;\n          });A(g, function (e, f) {\n            var p = 0,\n                t,\n                h;if (b[e] && !b[e].isNull) a.push(b[e]), A([-1, 1], function (a) {\n              var p = 1 === a ? \"rightNull\" : \"leftNull\",\n                  l = 0,\n                  q = d[g[f + a]];if (q) for (E = r; 0 <= E && E < m;) {\n                t = q.points[E], t || (E === r ? b[e][p] = !0 : c[E] && (h = d[e].points[E]) && (l -= h[1] - h[0])), E += n;\n              }b[e][1 === a ? \"rightCliff\" : \"leftCliff\"] = l;\n            });else {\n              for (E = r; 0 <= E && E < m;) {\n                if (t = d[e].points[E]) {\n                  p = t[1];break;\n                }E += n;\n              }p = q.toPixels(p, !0);a.push({ isNull: !0, plotX: l.toPixels(e, !0), plotY: p, yBottom: p });\n            }\n          });\n        }return a;\n      }, getGraphPath: function getGraphPath(a) {\n        var f = r.prototype.getGraphPath,\n            g = this.options,\n            q = g.stacking,\n            d = this.yAxis,\n            b,\n            p,\n            C = [],\n            t = [],\n            m = this.index,\n            c,\n            n = d.stacks[this.stackKey],\n            E = g.threshold,\n            z = d.getThreshold(g.threshold),\n            e,\n            g = g.connectNulls || \"percent\" === q,\n            x = function x(b, e, f) {\n          var h = a[b];b = q && n[h.x].points[m];var g = h[f + \"Null\"] || 0;f = h[f + \"Cliff\"] || 0;var p,\n              l,\n              h = !0;f || g ? (p = (g ? b[0] : b[1]) + f, l = b[0] + f, h = !!g) : !q && a[e] && a[e].isNull && (p = l = E);void 0 !== p && (t.push({ plotX: c, plotY: null === p ? z : d.getThreshold(p), isNull: h }), C.push({ plotX: c, plotY: null === l ? z : d.getThreshold(l), doCurve: !1 }));\n        };a = a || this.points;q && (a = this.getStackPoints());for (b = 0; b < a.length; b++) {\n          if (p = a[b].isNull, c = G(a[b].rectPlotX, a[b].plotX), e = G(a[b].yBottom, z), !p || g) g || x(b, b - 1, \"left\"), p && !q && g || (t.push(a[b]), C.push({ x: b, plotX: c, plotY: e })), g || x(b, b + 1, \"right\");\n        }b = f.call(this, t, !0, !0);C.reversed = !0;p = f.call(this, C, !0, !0);p.length && (p[0] = \"L\");p = b.concat(p);f = f.call(this, t, !1, g);p.xMap = b.xMap;this.areaPath = p;return f;\n      }, drawGraph: function drawGraph() {\n        this.areaPath = [];r.prototype.drawGraph.apply(this);var a = this,\n            g = this.areaPath,\n            l = this.options,\n            q = [[\"area\", \"highcharts-area\", this.color, l.fillColor]];A(this.zones, function (d, b) {\n          q.push([\"zone-area-\" + b, \"highcharts-area highcharts-zone-area-\" + b + \" \" + d.className, d.color || a.color, d.fillColor || l.fillColor]);\n        });A(q, function (d) {\n          var b = d[0],\n              f = a[b];f ? (f.endX = g.xMap, f.animate({ d: g })) : (f = a[b] = a.chart.renderer.path(g).addClass(d[1]).attr({ fill: G(d[3], B(d[2]).setOpacity(G(l.fillOpacity, .75)).get()), zIndex: 0 }).add(a.group), f.isArea = !0);f.startX = g.xMap;f.shiftUnit = l.step ? 2 : 1;\n        });\n      }, drawLegendSymbol: a.LegendSymbolMixin.drawRectangle });\n  })(L);(function (a) {\n    var B = a.pick;a = a.seriesType;a(\"spline\", \"line\", {}, { getPointSpline: function getPointSpline(a, H, G) {\n        var r = H.plotX,\n            g = H.plotY,\n            f = a[G - 1];G = a[G + 1];var u, l, q, d;if (f && !f.isNull && !1 !== f.doCurve && G && !G.isNull && !1 !== G.doCurve) {\n          a = f.plotY;q = G.plotX;G = G.plotY;var b = 0;u = (1.5 * r + f.plotX) / 2.5;l = (1.5 * g + a) / 2.5;q = (1.5 * r + q) / 2.5;d = (1.5 * g + G) / 2.5;\n          q !== u && (b = (d - l) * (q - r) / (q - u) + g - d);l += b;d += b;l > a && l > g ? (l = Math.max(a, g), d = 2 * g - l) : l < a && l < g && (l = Math.min(a, g), d = 2 * g - l);d > G && d > g ? (d = Math.max(G, g), l = 2 * g - d) : d < G && d < g && (d = Math.min(G, g), l = 2 * g - d);H.rightContX = q;H.rightContY = d;\n        }H = [\"C\", B(f.rightContX, f.plotX), B(f.rightContY, f.plotY), B(u, r), B(l, g), r, g];f.rightContX = f.rightContY = null;return H;\n      } });\n  })(L);(function (a) {\n    var B = a.seriesTypes.area.prototype,\n        A = a.seriesType;A(\"areaspline\", \"spline\", a.defaultPlotOptions.area, { getStackPoints: B.getStackPoints, getGraphPath: B.getGraphPath,\n      setStackCliffs: B.setStackCliffs, drawGraph: B.drawGraph, drawLegendSymbol: a.LegendSymbolMixin.drawRectangle });\n  })(L);(function (a) {\n    var B = a.animObject,\n        A = a.color,\n        H = a.each,\n        G = a.extend,\n        r = a.isNumber,\n        g = a.merge,\n        f = a.pick,\n        u = a.Series,\n        l = a.seriesType,\n        q = a.svg;l(\"column\", \"line\", { borderRadius: 0, groupPadding: .2, marker: null, pointPadding: .1, minPointLength: 0, cropThreshold: 50, pointRange: null, states: { hover: { halo: !1, brightness: .1, shadow: !1 }, select: { color: \"#cccccc\", borderColor: \"#000000\", shadow: !1 } }, dataLabels: { align: null, verticalAlign: null,\n        y: null }, softThreshold: !1, startFromThreshold: !0, stickyTracking: !1, tooltip: { distance: 6 }, threshold: 0, borderColor: \"#ffffff\" }, { cropShoulder: 0, directTouch: !0, trackerGroups: [\"group\", \"dataLabelsGroup\"], negStacks: !0, init: function init() {\n        u.prototype.init.apply(this, arguments);var a = this,\n            b = a.chart;b.hasRendered && H(b.series, function (b) {\n          b.type === a.type && (b.isDirty = !0);\n        });\n      }, getColumnMetrics: function getColumnMetrics() {\n        var a = this,\n            b = a.options,\n            g = a.xAxis,\n            l = a.yAxis,\n            t = g.reversed,\n            m,\n            c = {},\n            n = 0;!1 === b.grouping ? n = 1 : H(a.chart.series, function (b) {\n          var e = b.options,\n              d = b.yAxis,\n              f;b.type === a.type && b.visible && l.len === d.len && l.pos === d.pos && (e.stacking ? (m = b.stackKey, void 0 === c[m] && (c[m] = n++), f = c[m]) : !1 !== e.grouping && (f = n++), b.columnIndex = f);\n        });var q = Math.min(Math.abs(g.transA) * (g.ordinalSlope || b.pointRange || g.closestPointRange || g.tickInterval || 1), g.len),\n            r = q * b.groupPadding,\n            e = (q - 2 * r) / (n || 1),\n            b = Math.min(b.maxPointWidth || g.len, f(b.pointWidth, e * (1 - 2 * b.pointPadding)));a.columnMetrics = { width: b, offset: (e - b) / 2 + (r + ((a.columnIndex || 0) + (t ? 1 : 0)) * e - q / 2) * (t ? -1 : 1) };return a.columnMetrics;\n      },\n      crispCol: function crispCol(a, b, f, g) {\n        var d = this.chart,\n            m = this.borderWidth,\n            c = -(m % 2 ? .5 : 0),\n            m = m % 2 ? .5 : 1;d.inverted && d.renderer.isVML && (m += 1);f = Math.round(a + f) + c;a = Math.round(a) + c;g = Math.round(b + g) + m;c = .5 >= Math.abs(b) && .5 < g;b = Math.round(b) + m;g -= b;c && g && (--b, g += 1);return { x: a, y: b, width: f - a, height: g };\n      }, translate: function translate() {\n        var a = this,\n            b = a.chart,\n            g = a.options,\n            l = a.dense = 2 > a.closestPointRange * a.xAxis.transA,\n            l = a.borderWidth = f(g.borderWidth, l ? 0 : 1),\n            t = a.yAxis,\n            m = a.translatedThreshold = t.getThreshold(g.threshold),\n            c = f(g.minPointLength, 5),\n            n = a.getColumnMetrics(),\n            q = n.width,\n            r = a.barW = Math.max(q, 1 + 2 * l),\n            e = a.pointXOffset = n.offset;b.inverted && (m -= .5);g.pointPadding && (r = Math.ceil(r));u.prototype.translate.apply(a);H(a.points, function (d) {\n          var g = f(d.yBottom, m),\n              n = 999 + Math.abs(g),\n              n = Math.min(Math.max(-n, d.plotY), t.len + n),\n              h = d.plotX + e,\n              l = r,\n              p = Math.min(n, g),\n              z,\n              x = Math.max(n, g) - p;Math.abs(x) < c && c && (x = c, z = !t.reversed && !d.negative || t.reversed && d.negative, p = Math.abs(p - m) > c ? g - c : m - (z ? c : 0));d.barX = h;d.pointWidth = q;d.tooltipPos = b.inverted ? [t.len + t.pos - b.plotLeft - n, a.xAxis.len - h - l / 2, x] : [h + l / 2, n + t.pos - b.plotTop, x];d.shapeType = \"rect\";d.shapeArgs = a.crispCol.apply(a, d.isNull ? [d.plotX, t.len / 2, 0, 0] : [h, p, l, x]);\n        });\n      }, getSymbol: a.noop, drawLegendSymbol: a.LegendSymbolMixin.drawRectangle, drawGraph: function drawGraph() {\n        this.group[this.dense ? \"addClass\" : \"removeClass\"](\"highcharts-dense-data\");\n      }, pointAttribs: function pointAttribs(a, b) {\n        var d = this.options,\n            f,\n            g = this.pointAttrToOptions || {};f = g.stroke || \"borderColor\";var m = g[\"stroke-width\"] || \"borderWidth\",\n            c = a && a.color || this.color,\n            n = a[f] || d[f] || this.color || c,\n            l = a[m] || d[m] || this[m] || 0,\n            g = d.dashStyle;a && this.zones.length && (c = (c = a.getZone()) && c.color || a.options.color || this.color);b && (a = d.states[b], b = a.brightness, c = a.color || void 0 !== b && A(c).brighten(a.brightness).get() || c, n = a[f] || n, l = a[m] || l, g = a.dashStyle || g);f = { fill: c, stroke: n, \"stroke-width\": l };d.borderRadius && (f.r = d.borderRadius);g && (f.dashstyle = g);return f;\n      }, drawPoints: function drawPoints() {\n        var a = this,\n            b = this.chart,\n            f = a.options,\n            l = b.renderer,\n            t = f.animationLimit || 250,\n            m;H(a.points, function (c) {\n          var d = c.graphic;if (r(c.plotY) && null !== c.y) {\n            m = c.shapeArgs;if (d) d[b.pointCount < t ? \"animate\" : \"attr\"](g(m));else c.graphic = d = l[c.shapeType](m).attr({ \"class\": c.getClassName() }).add(c.group || a.group);d.attr(a.pointAttribs(c, c.selected && \"select\")).shadow(f.shadow, null, f.stacking && !f.borderRadius);\n          } else d && (c.graphic = d.destroy());\n        });\n      }, animate: function animate(a) {\n        var b = this,\n            d = this.yAxis,\n            f = b.options,\n            g = this.chart.inverted,\n            m = {};q && (a ? (m.scaleY = .001, a = Math.min(d.pos + d.len, Math.max(d.pos, d.toPixels(f.threshold))), g ? m.translateX = a - d.len : m.translateY = a, b.group.attr(m)) : (m[g ? \"translateX\" : \"translateY\"] = d.pos, b.group.animate(m, G(B(b.options.animation), { step: function step(a, d) {\n            b.group.attr({ scaleY: Math.max(.001, d.pos) });\n          } })), b.animate = null));\n      }, remove: function remove() {\n        var a = this,\n            b = a.chart;b.hasRendered && H(b.series, function (b) {\n          b.type === a.type && (b.isDirty = !0);\n        });u.prototype.remove.apply(a, arguments);\n      } });\n  })(L);(function (a) {\n    a = a.seriesType;a(\"bar\", \"column\", null, { inverted: !0 });\n  })(L);(function (a) {\n    var B = a.Series;a = a.seriesType;a(\"scatter\", \"line\", { lineWidth: 0, marker: { enabled: !0 }, tooltip: { headerFormat: \"<span style=\\\"color:{point.color}\\\">\\u25CF</span> <span style=\\\"font-size: 0.85em\\\"> {series.name}</span><br/>\",\n        pointFormat: \"x: \\x3cb\\x3e{point.x}\\x3c/b\\x3e\\x3cbr/\\x3ey: \\x3cb\\x3e{point.y}\\x3c/b\\x3e\\x3cbr/\\x3e\" } }, { sorted: !1, requireSorting: !1, noSharedTooltip: !0, trackerGroups: [\"group\", \"markerGroup\", \"dataLabelsGroup\"], takeOrdinalPosition: !1, kdDimensions: 2, drawGraph: function drawGraph() {\n        this.options.lineWidth && B.prototype.drawGraph.call(this);\n      } });\n  })(L);(function (a) {\n    var B = a.pick,\n        A = a.relativeLength;a.CenteredSeriesMixin = { getCenter: function getCenter() {\n        var a = this.options,\n            G = this.chart,\n            r = 2 * (a.slicedOffset || 0),\n            g = G.plotWidth - 2 * r,\n            G = G.plotHeight - 2 * r,\n            f = a.center,\n            f = [B(f[0], \"50%\"), B(f[1], \"50%\"), a.size || \"100%\", a.innerSize || 0],\n            u = Math.min(g, G),\n            l,\n            q;for (l = 0; 4 > l; ++l) {\n          q = f[l], a = 2 > l || 2 === l && /%$/.test(q), f[l] = A(q, [g, G, u, f[2]][l]) + (a ? r : 0);\n        }f[3] > f[2] && (f[3] = f[2]);return f;\n      } };\n  })(L);(function (a) {\n    var B = a.addEvent,\n        A = a.defined,\n        H = a.each,\n        G = a.extend,\n        r = a.inArray,\n        g = a.noop,\n        f = a.pick,\n        u = a.Point,\n        l = a.Series,\n        q = a.seriesType,\n        d = a.setAnimation;q(\"pie\", \"line\", { center: [null, null], clip: !1, colorByPoint: !0, dataLabels: { distance: 30, enabled: !0, formatter: function formatter() {\n          return null === this.y ? void 0 : this.point.name;\n        }, x: 0 }, ignoreHiddenPoint: !0, legendType: \"point\", marker: null, size: null, showInLegend: !1, slicedOffset: 10, stickyTracking: !1, tooltip: { followPointer: !0 }, borderColor: \"#ffffff\", borderWidth: 1, states: { hover: { brightness: .1, shadow: !1 } } }, { isCartesian: !1, requireSorting: !1, directTouch: !0, noSharedTooltip: !0, trackerGroups: [\"group\", \"dataLabelsGroup\"], axisTypes: [], pointAttribs: a.seriesTypes.column.prototype.pointAttribs, animate: function animate(a) {\n        var b = this,\n            d = b.points,\n            f = b.startAngleRad;a || (H(d, function (a) {\n          var c = a.graphic,\n              d = a.shapeArgs;c && (c.attr({ r: a.startR || b.center[3] / 2, start: f, end: f }), c.animate({ r: d.r, start: d.start, end: d.end }, b.options.animation));\n        }), b.animate = null);\n      }, updateTotals: function updateTotals() {\n        var a,\n            d = 0,\n            f = this.points,\n            g = f.length,\n            m,\n            c = this.options.ignoreHiddenPoint;for (a = 0; a < g; a++) {\n          m = f[a], 0 > m.y && (m.y = null), d += c && !m.visible ? 0 : m.y;\n        }this.total = d;for (a = 0; a < g; a++) {\n          m = f[a], m.percentage = 0 < d && (m.visible || !c) ? m.y / d * 100 : 0, m.total = d;\n        }\n      }, generatePoints: function generatePoints() {\n        l.prototype.generatePoints.call(this);this.updateTotals();\n      }, translate: function translate(a) {\n        this.generatePoints();\n        var b = 0,\n            d = this.options,\n            g = d.slicedOffset,\n            m = g + (d.borderWidth || 0),\n            c,\n            n,\n            l,\n            q = d.startAngle || 0,\n            e = this.startAngleRad = Math.PI / 180 * (q - 90),\n            q = (this.endAngleRad = Math.PI / 180 * (f(d.endAngle, q + 360) - 90)) - e,\n            r = this.points,\n            u = d.dataLabels.distance,\n            d = d.ignoreHiddenPoint,\n            w,\n            h = r.length,\n            y;a || (this.center = a = this.getCenter());this.getX = function (b, c) {\n          l = Math.asin(Math.min((b - a[1]) / (a[2] / 2 + u), 1));return a[0] + (c ? -1 : 1) * Math.cos(l) * (a[2] / 2 + u);\n        };for (w = 0; w < h; w++) {\n          y = r[w];c = e + b * q;if (!d || y.visible) b += y.percentage / 100;n = e + b * q;y.shapeType = \"arc\";y.shapeArgs = { x: a[0], y: a[1], r: a[2] / 2, innerR: a[3] / 2, start: Math.round(1E3 * c) / 1E3, end: Math.round(1E3 * n) / 1E3 };l = (n + c) / 2;l > 1.5 * Math.PI ? l -= 2 * Math.PI : l < -Math.PI / 2 && (l += 2 * Math.PI);y.slicedTranslation = { translateX: Math.round(Math.cos(l) * g), translateY: Math.round(Math.sin(l) * g) };c = Math.cos(l) * a[2] / 2;n = Math.sin(l) * a[2] / 2;y.tooltipPos = [a[0] + .7 * c, a[1] + .7 * n];y.half = l < -Math.PI / 2 || l > Math.PI / 2 ? 1 : 0;y.angle = l;m = Math.min(m, u / 5);y.labelPos = [a[0] + c + Math.cos(l) * u, a[1] + n + Math.sin(l) * u, a[0] + c + Math.cos(l) * m, a[1] + n + Math.sin(l) * m, a[0] + c, a[1] + n, 0 > u ? \"center\" : y.half ? \"right\" : \"left\", l];\n        }\n      }, drawGraph: null, drawPoints: function drawPoints() {\n        var a = this,\n            d = a.chart.renderer,\n            f,\n            g,\n            m,\n            c,\n            n = a.options.shadow;n && !a.shadowGroup && (a.shadowGroup = d.g(\"shadow\").add(a.group));H(a.points, function (b) {\n          if (null !== b.y) {\n            g = b.graphic;c = b.shapeArgs;f = b.sliced ? b.slicedTranslation : {};var l = b.shadowGroup;n && !l && (l = b.shadowGroup = d.g(\"shadow\").add(a.shadowGroup));l && l.attr(f);m = a.pointAttribs(b, b.selected && \"select\");g ? g.setRadialReference(a.center).attr(m).animate(G(c, f)) : (b.graphic = g = d[b.shapeType](c).addClass(b.getClassName()).setRadialReference(a.center).attr(f).add(a.group), b.visible || g.attr({ visibility: \"hidden\" }), g.attr(m).attr({ \"stroke-linejoin\": \"round\" }).shadow(n, l));\n          }\n        });\n      }, searchPoint: g, sortByAngle: function sortByAngle(a, d) {\n        a.sort(function (a, b) {\n          return void 0 !== a.angle && (b.angle - a.angle) * d;\n        });\n      }, drawLegendSymbol: a.LegendSymbolMixin.drawRectangle, getCenter: a.CenteredSeriesMixin.getCenter, getSymbol: g }, { init: function init() {\n        u.prototype.init.apply(this, arguments);var a = this,\n            d;a.name = f(a.name, \"Slice\");\n        d = function d(b) {\n          a.slice(\"select\" === b.type);\n        };B(a, \"select\", d);B(a, \"unselect\", d);return a;\n      }, setVisible: function setVisible(a, d) {\n        var b = this,\n            g = b.series,\n            m = g.chart,\n            c = g.options.ignoreHiddenPoint;d = f(d, c);a !== b.visible && (b.visible = b.options.visible = a = void 0 === a ? !b.visible : a, g.options.data[r(b, g.data)] = b.options, H([\"graphic\", \"dataLabel\", \"connector\", \"shadowGroup\"], function (c) {\n          if (b[c]) b[c][a ? \"show\" : \"hide\"](!0);\n        }), b.legendItem && m.legend.colorizeItem(b, a), a || \"hover\" !== b.state || b.setState(\"\"), c && (g.isDirty = !0), d && m.redraw());\n      },\n      slice: function slice(a, g, l) {\n        var b = this.series;d(l, b.chart);f(g, !0);this.sliced = this.options.sliced = a = A(a) ? a : !this.sliced;b.options.data[r(this, b.data)] = this.options;a = a ? this.slicedTranslation : { translateX: 0, translateY: 0 };this.graphic.animate(a);this.shadowGroup && this.shadowGroup.animate(a);\n      }, haloPath: function haloPath(a) {\n        var b = this.shapeArgs;return this.sliced || !this.visible ? [] : this.series.chart.renderer.symbols.arc(b.x, b.y, b.r + a, b.r + a, { innerR: this.shapeArgs.r, start: b.start, end: b.end });\n      } });\n  })(L);(function (a) {\n    var B = a.addEvent,\n        A = a.arrayMax,\n        H = a.defined,\n        G = a.each,\n        r = a.extend,\n        g = a.format,\n        f = a.map,\n        u = a.merge,\n        l = a.noop,\n        q = a.pick,\n        d = a.relativeLength,\n        b = a.Series,\n        p = a.seriesTypes,\n        C = a.stableSort;a.distribute = function (a, b) {\n      function c(a, b) {\n        return a.target - b.target;\n      }var d,\n          g = !0,\n          m = a,\n          e = [],\n          l;l = 0;for (d = a.length; d--;) {\n        l += a[d].size;\n      }if (l > b) {\n        C(a, function (a, b) {\n          return (b.rank || 0) - (a.rank || 0);\n        });for (l = d = 0; l <= b;) {\n          l += a[d].size, d++;\n        }e = a.splice(d - 1, a.length);\n      }C(a, c);for (a = f(a, function (a) {\n        return { size: a.size, targets: [a.target] };\n      }); g;) {\n        for (d = a.length; d--;) {\n          g = a[d], l = (Math.min.apply(0, g.targets) + Math.max.apply(0, g.targets)) / 2, g.pos = Math.min(Math.max(0, l - g.size / 2), b - g.size);\n        }d = a.length;for (g = !1; d--;) {\n          0 < d && a[d - 1].pos + a[d - 1].size > a[d].pos && (a[d - 1].size += a[d].size, a[d - 1].targets = a[d - 1].targets.concat(a[d].targets), a[d - 1].pos + a[d - 1].size > b && (a[d - 1].pos = b - a[d - 1].size), a.splice(d, 1), g = !0);\n        }\n      }d = 0;G(a, function (a) {\n        var b = 0;G(a.targets, function () {\n          m[d].pos = a.pos + b;b += m[d].size;d++;\n        });\n      });m.push.apply(m, e);C(m, c);\n    };b.prototype.drawDataLabels = function () {\n      var a = this,\n          b = a.options,\n          c = b.dataLabels,\n          d = a.points,\n          f,\n          l,\n          e = a.hasRendered || 0,\n          p,\n          r,\n          w = q(c.defer, !0),\n          h = a.chart.renderer;if (c.enabled || a._hasPointLabels) a.dlProcessOptions && a.dlProcessOptions(c), r = a.plotGroup(\"dataLabelsGroup\", \"data-labels\", w && !e ? \"hidden\" : \"visible\", c.zIndex || 6), w && (r.attr({ opacity: +e }), e || B(a, \"afterAnimate\", function () {\n        a.visible && r.show(!0);r[b.animation ? \"animate\" : \"attr\"]({ opacity: 1 }, { duration: 200 });\n      })), l = c, G(d, function (e) {\n        var d,\n            m = e.dataLabel,\n            n,\n            k,\n            t,\n            z = e.connector,\n            w = !m,\n            x;f = e.dlOptions || e.options && e.options.dataLabels;\n        if (d = q(f && f.enabled, l.enabled) && null !== e.y) for (k in c = u(l, f), n = e.getLabelConfig(), p = c.format ? g(c.format, n) : c.formatter.call(n, c), x = c.style, t = c.rotation, x.color = q(c.color, x.color, a.color, \"#000000\"), \"contrast\" === x.color && (x.color = c.inside || 0 > c.distance || b.stacking ? h.getContrast(e.color || a.color) : \"#000000\"), b.cursor && (x.cursor = b.cursor), n = { fill: c.backgroundColor, stroke: c.borderColor, \"stroke-width\": c.borderWidth, r: c.borderRadius || 0, rotation: t, padding: c.padding, zIndex: 1 }, n) {\n          void 0 === n[k] && delete n[k];\n        }!m || d && H(p) ? d && H(p) && (m ? n.text = p : (m = e.dataLabel = h[t ? \"text\" : \"label\"](p, 0, -9999, c.shape, null, null, c.useHTML, null, \"data-label\"), m.addClass(\"highcharts-data-label-color-\" + e.colorIndex + \" \" + (c.className || \"\") + (c.useHTML ? \"highcharts-tracker\" : \"\"))), m.attr(n), m.css(x).shadow(c.shadow), m.added || m.add(r), a.alignDataLabel(e, m, c, null, w)) : (e.dataLabel = m.destroy(), z && (e.connector = z.destroy()));\n      });\n    };b.prototype.alignDataLabel = function (a, b, c, d, f) {\n      var g = this.chart,\n          e = g.inverted,\n          m = q(a.plotX, -9999),\n          n = q(a.plotY, -9999),\n          l = b.getBBox(),\n          h,\n          p = c.rotation,\n          t = c.align,\n          u = this.visible && (a.series.forceDL || g.isInsidePlot(m, Math.round(n), e) || d && g.isInsidePlot(m, e ? d.x + 1 : d.y + d.height - 1, e)),\n          E = \"justify\" === q(c.overflow, \"justify\");u && (h = c.style.fontSize, h = g.renderer.fontMetrics(h, b).b, d = r({ x: e ? g.plotWidth - n : m, y: Math.round(e ? g.plotHeight - m : n), width: 0, height: 0 }, d), r(c, { width: l.width, height: l.height }), p ? (E = !1, e = g.renderer.rotCorr(h, p), e = { x: d.x + c.x + d.width / 2 + e.x, y: d.y + c.y + { top: 0, middle: .5, bottom: 1 }[c.verticalAlign] * d.height }, b[f ? \"attr\" : \"animate\"](e).attr({ align: t }), m = (p + 720) % 360, m = 180 < m && 360 > m, \"left\" === t ? e.y -= m ? l.height : 0 : \"center\" === t ? (e.x -= l.width / 2, e.y -= l.height / 2) : \"right\" === t && (e.x -= l.width, e.y -= m ? 0 : l.height)) : (b.align(c, null, d), e = b.alignAttr), E ? this.justifyDataLabel(b, c, e, l, d, f) : q(c.crop, !0) && (u = g.isInsidePlot(e.x, e.y) && g.isInsidePlot(e.x + l.width, e.y + l.height)), c.shape && !p && b.attr({ anchorX: a.plotX, anchorY: a.plotY }));u || (b.attr({ y: -9999 }), b.placed = !1);\n    };b.prototype.justifyDataLabel = function (a, b, c, d, f, g) {\n      var e = this.chart,\n          m = b.align,\n          n = b.verticalAlign,\n          l,\n          h,\n          p = a.box ? 0 : a.padding || 0;l = c.x + p;0 > l && (\"right\" === m ? b.align = \"left\" : b.x = -l, h = !0);l = c.x + d.width - p;l > e.plotWidth && (\"left\" === m ? b.align = \"right\" : b.x = e.plotWidth - l, h = !0);l = c.y + p;0 > l && (\"bottom\" === n ? b.verticalAlign = \"top\" : b.y = -l, h = !0);l = c.y + d.height - p;l > e.plotHeight && (\"top\" === n ? b.verticalAlign = \"bottom\" : b.y = e.plotHeight - l, h = !0);h && (a.placed = !g, a.align(b, null, f));\n    };p.pie && (p.pie.prototype.drawDataLabels = function () {\n      var d = this,\n          g = d.data,\n          c,\n          l = d.chart,\n          p = d.options.dataLabels,\n          r = q(p.connectorPadding, 10),\n          e = q(p.connectorWidth, 1),\n          u = l.plotWidth,\n          F = l.plotHeight,\n          w,\n          h = p.distance,\n          y = d.center,\n          C = y[2] / 2,\n          B = y[1],\n          H = 0 < h,\n          k,\n          D,\n          L,\n          N,\n          S = [[], []],\n          O,\n          v,\n          M,\n          Q,\n          R = [0, 0, 0, 0];d.visible && (p.enabled || d._hasPointLabels) && (b.prototype.drawDataLabels.apply(d), G(g, function (a) {\n        a.dataLabel && a.visible && (S[a.half].push(a), a.dataLabel._pos = null);\n      }), G(S, function (b, e) {\n        var g,\n            m,\n            n = b.length,\n            q,\n            t,\n            z;if (n) for (d.sortByAngle(b, e - .5), 0 < h && (g = Math.max(0, B - C - h), m = Math.min(B + C + h, l.plotHeight), q = f(b, function (a) {\n          if (a.dataLabel) return z = a.dataLabel.getBBox().height || 21, { target: a.labelPos[1] - g + z / 2, size: z, rank: a.y };\n        }), a.distribute(q, m + z - g)), Q = 0; Q < n; Q++) {\n          c = b[Q], L = c.labelPos, k = c.dataLabel, M = !1 === c.visible ? \"hidden\" : \"inherit\", t = L[1], q ? void 0 === q[Q].pos ? M = \"hidden\" : (N = q[Q].size, v = g + q[Q].pos) : v = t, O = p.justify ? y[0] + (e ? -1 : 1) * (C + h) : d.getX(v < g + 2 || v > m - 2 ? t : v, e), k._attr = { visibility: M, align: L[6] }, k._pos = { x: O + p.x + ({ left: r, right: -r }[L[6]] || 0), y: v + p.y - 10 }, L.x = O, L.y = v, null === d.options.size && (D = k.width, O - D < r ? R[3] = Math.max(Math.round(D - O + r), R[3]) : O + D > u - r && (R[1] = Math.max(Math.round(O + D - u + r), R[1])), 0 > v - N / 2 ? R[0] = Math.max(Math.round(-v + N / 2), R[0]) : v + N / 2 > F && (R[2] = Math.max(Math.round(v + N / 2 - F), R[2])));\n        }\n      }), 0 === A(R) || this.verifyDataLabelOverflow(R)) && (this.placeDataLabels(), H && e && G(this.points, function (a) {\n        var b;w = a.connector;if ((k = a.dataLabel) && k._pos && a.visible) {\n          M = k._attr.visibility;if (b = !w) a.connector = w = l.renderer.path().addClass(\"highcharts-data-label-connector highcharts-color-\" + a.colorIndex).add(d.dataLabelsGroup), w.attr({ \"stroke-width\": e, stroke: p.connectorColor || a.color || \"#666666\" });w[b ? \"attr\" : \"animate\"]({ d: d.connectorPath(a.labelPos) });\n          w.attr(\"visibility\", M);\n        } else w && (a.connector = w.destroy());\n      }));\n    }, p.pie.prototype.connectorPath = function (a) {\n      var b = a.x,\n          c = a.y;return q(this.options.dataLabels.softConnector, !0) ? [\"M\", b + (\"left\" === a[6] ? 5 : -5), c, \"C\", b, c, 2 * a[2] - a[4], 2 * a[3] - a[5], a[2], a[3], \"L\", a[4], a[5]] : [\"M\", b + (\"left\" === a[6] ? 5 : -5), c, \"L\", a[2], a[3], \"L\", a[4], a[5]];\n    }, p.pie.prototype.placeDataLabels = function () {\n      G(this.points, function (a) {\n        var b = a.dataLabel;b && a.visible && ((a = b._pos) ? (b.attr(b._attr), b[b.moved ? \"animate\" : \"attr\"](a), b.moved = !0) : b && b.attr({ y: -9999 }));\n      });\n    }, p.pie.prototype.alignDataLabel = l, p.pie.prototype.verifyDataLabelOverflow = function (a) {\n      var b = this.center,\n          c = this.options,\n          f = c.center,\n          g = c.minSize || 80,\n          l,\n          e;null !== f[0] ? l = Math.max(b[2] - Math.max(a[1], a[3]), g) : (l = Math.max(b[2] - a[1] - a[3], g), b[0] += (a[3] - a[1]) / 2);null !== f[1] ? l = Math.max(Math.min(l, b[2] - Math.max(a[0], a[2])), g) : (l = Math.max(Math.min(l, b[2] - a[0] - a[2]), g), b[1] += (a[0] - a[2]) / 2);l < b[2] ? (b[2] = l, b[3] = Math.min(d(c.innerSize || 0, l), l), this.translate(b), this.drawDataLabels && this.drawDataLabels()) : e = !0;return e;\n    });\n    p.column && (p.column.prototype.alignDataLabel = function (a, d, c, f, g) {\n      var l = this.chart.inverted,\n          e = a.series,\n          m = a.dlBox || a.shapeArgs,\n          n = q(a.below, a.plotY > q(this.translatedThreshold, e.yAxis.len)),\n          p = q(c.inside, !!this.options.stacking);m && (f = u(m), 0 > f.y && (f.height += f.y, f.y = 0), m = f.y + f.height - e.yAxis.len, 0 < m && (f.height -= m), l && (f = { x: e.yAxis.len - f.y - f.height, y: e.xAxis.len - f.x - f.width, width: f.height, height: f.width }), p || (l ? (f.x += n ? 0 : f.width, f.width = 0) : (f.y += n ? f.height : 0, f.height = 0)));c.align = q(c.align, !l || p ? \"center\" : n ? \"right\" : \"left\");c.verticalAlign = q(c.verticalAlign, l || p ? \"middle\" : n ? \"top\" : \"bottom\");b.prototype.alignDataLabel.call(this, a, d, c, f, g);\n    });\n  })(L);(function (a) {\n    var B = a.Chart,\n        A = a.each,\n        H = a.pick,\n        G = a.addEvent;B.prototype.callbacks.push(function (a) {\n      function g() {\n        var f = [];A(a.series, function (a) {\n          var g = a.options.dataLabels,\n              q = a.dataLabelCollections || [\"dataLabel\"];(g.enabled || a._hasPointLabels) && !g.allowOverlap && a.visible && A(q, function (d) {\n            A(a.points, function (a) {\n              a[d] && (a[d].labelrank = H(a.labelrank, a.shapeArgs && a.shapeArgs.height), f.push(a[d]));\n            });\n          });\n        });a.hideOverlappingLabels(f);\n      }g();G(a, \"redraw\", g);\n    });B.prototype.hideOverlappingLabels = function (a) {\n      var g = a.length,\n          f,\n          r,\n          l,\n          q,\n          d,\n          b,\n          p,\n          C,\n          t,\n          m = function m(a, b, d, f, e, g, l, _m) {\n        return !(e > a + d || e + l < a || g > b + f || g + _m < b);\n      };for (r = 0; r < g; r++) {\n        if (f = a[r]) f.oldOpacity = f.opacity, f.newOpacity = 1;\n      }a.sort(function (a, b) {\n        return (b.labelrank || 0) - (a.labelrank || 0);\n      });for (r = 0; r < g; r++) {\n        for (l = a[r], f = r + 1; f < g; ++f) {\n          if (q = a[f], l && q && l.placed && q.placed && 0 !== l.newOpacity && 0 !== q.newOpacity && (d = l.alignAttr, b = q.alignAttr, p = l.parentGroup, C = q.parentGroup, t = 2 * (l.box ? 0 : l.padding), d = m(d.x + p.translateX, d.y + p.translateY, l.width - t, l.height - t, b.x + C.translateX, b.y + C.translateY, q.width - t, q.height - t))) (l.labelrank < q.labelrank ? l : q).newOpacity = 0;\n        }\n      }A(a, function (a) {\n        var b, c;a && (c = a.newOpacity, a.oldOpacity !== c && a.placed && (c ? a.show(!0) : b = function b() {\n          a.hide();\n        }, a.alignAttr.opacity = c, a[a.isOld ? \"animate\" : \"attr\"](a.alignAttr, null, b)), a.isOld = !0);\n      });\n    };\n  })(L);(function (a) {\n    var B = a.addEvent,\n        A = a.Chart,\n        H = a.createElement,\n        G = a.css,\n        r = a.defaultOptions,\n        g = a.defaultPlotOptions,\n        f = a.each,\n        u = a.extend,\n        l = a.fireEvent,\n        q = a.hasTouch,\n        d = a.inArray,\n        b = a.isObject,\n        p = a.Legend,\n        C = a.merge,\n        t = a.pick,\n        m = a.Point,\n        c = a.Series,\n        n = a.seriesTypes,\n        E = a.svg;a = a.TrackerMixin = { drawTrackerPoint: function drawTrackerPoint() {\n        var a = this,\n            b = a.chart,\n            c = b.pointer,\n            d = function d(a) {\n          for (var c = a.target, e; c && !e;) {\n            e = c.point, c = c.parentNode;\n          }if (void 0 !== e && e !== b.hoverPoint) e.onMouseOver(a);\n        };f(a.points, function (a) {\n          a.graphic && (a.graphic.element.point = a);a.dataLabel && (a.dataLabel.div ? a.dataLabel.div.point = a : a.dataLabel.element.point = a);\n        });a._hasTracking || (f(a.trackerGroups, function (b) {\n          if (a[b]) {\n            a[b].addClass(\"highcharts-tracker\").on(\"mouseover\", d).on(\"mouseout\", function (a) {\n              c.onTrackerMouseOut(a);\n            });if (q) a[b].on(\"touchstart\", d);a.options.cursor && a[b].css(G).css({ cursor: a.options.cursor });\n          }\n        }), a._hasTracking = !0);\n      }, drawTrackerGraph: function drawTrackerGraph() {\n        var a = this,\n            b = a.options,\n            c = b.trackByArea,\n            d = [].concat(c ? a.areaPath : a.graphPath),\n            g = d.length,\n            h = a.chart,\n            l = h.pointer,\n            m = h.renderer,\n            n = h.options.tooltip.snap,\n            p = a.tracker,\n            k,\n            r = function r() {\n          if (h.hoverSeries !== a) a.onMouseOver();\n        },\n            t = \"rgba(192,192,192,\" + (E ? .0001 : .002) + \")\";if (g && !c) for (k = g + 1; k--;) {\n          \"M\" === d[k] && d.splice(k + 1, 0, d[k + 1] - n, d[k + 2], \"L\"), (k && \"M\" === d[k] || k === g) && d.splice(k, 0, \"L\", d[k - 2] + n, d[k - 1]);\n        }p ? p.attr({ d: d }) : a.graph && (a.tracker = m.path(d).attr({ \"stroke-linejoin\": \"round\", visibility: a.visible ? \"visible\" : \"hidden\", stroke: t, fill: c ? t : \"none\", \"stroke-width\": a.graph.strokeWidth() + (c ? 0 : 2 * n), zIndex: 2 }).add(a.group), f([a.tracker, a.markerGroup], function (a) {\n          a.addClass(\"highcharts-tracker\").on(\"mouseover\", r).on(\"mouseout\", function (a) {\n            l.onTrackerMouseOut(a);\n          });\n          b.cursor && a.css({ cursor: b.cursor });if (q) a.on(\"touchstart\", r);\n        }));\n      } };n.column && (n.column.prototype.drawTracker = a.drawTrackerPoint);n.pie && (n.pie.prototype.drawTracker = a.drawTrackerPoint);n.scatter && (n.scatter.prototype.drawTracker = a.drawTrackerPoint);u(p.prototype, { setItemEvents: function setItemEvents(a, b, c) {\n        var e = this,\n            d = e.chart,\n            f = \"highcharts-legend-\" + (a.series ? \"point\" : \"series\") + \"-active\";(c ? b : a.legendGroup).on(\"mouseover\", function () {\n          a.setState(\"hover\");d.seriesGroup.addClass(f);b.css(e.options.itemHoverStyle);\n        }).on(\"mouseout\", function () {\n          b.css(a.visible ? e.itemStyle : e.itemHiddenStyle);d.seriesGroup.removeClass(f);a.setState();\n        }).on(\"click\", function (b) {\n          var c = function c() {\n            a.setVisible && a.setVisible();\n          };b = { browserEvent: b };a.firePointEvent ? a.firePointEvent(\"legendItemClick\", b, c) : l(a, \"legendItemClick\", b, c);\n        });\n      }, createCheckboxForItem: function createCheckboxForItem(a) {\n        a.checkbox = H(\"input\", { type: \"checkbox\", checked: a.selected, defaultChecked: a.selected }, this.options.itemCheckboxStyle, this.chart.container);B(a.checkbox, \"click\", function (b) {\n          l(a.series || a, \"checkboxClick\", { checked: b.target.checked, item: a }, function () {\n            a.select();\n          });\n        });\n      } });r.legend.itemStyle.cursor = \"pointer\";u(A.prototype, { showResetZoom: function showResetZoom() {\n        var a = this,\n            b = r.lang,\n            c = a.options.chart.resetZoomButton,\n            d = c.theme,\n            f = d.states,\n            g = \"chart\" === c.relativeTo ? null : \"plotBox\";this.resetZoomButton = a.renderer.button(b.resetZoom, null, null, function () {\n          a.zoomOut();\n        }, d, f && f.hover).attr({ align: c.position.align, title: b.resetZoomTitle }).addClass(\"highcharts-reset-zoom\").add().align(c.position, !1, g);\n      }, zoomOut: function zoomOut() {\n        var a = this;\n        l(a, \"selection\", { resetSelection: !0 }, function () {\n          a.zoom();\n        });\n      }, zoom: function zoom(a) {\n        var c,\n            d = this.pointer,\n            g = !1,\n            l;!a || a.resetSelection ? f(this.axes, function (a) {\n          c = a.zoom();\n        }) : f(a.xAxis.concat(a.yAxis), function (a) {\n          var b = a.axis;d[b.isXAxis ? \"zoomX\" : \"zoomY\"] && (c = b.zoom(a.min, a.max), b.displayBtn && (g = !0));\n        });l = this.resetZoomButton;g && !l ? this.showResetZoom() : !g && b(l) && (this.resetZoomButton = l.destroy());c && this.redraw(t(this.options.chart.animation, a && a.animation, 100 > this.pointCount));\n      }, pan: function pan(a, b) {\n        var c = this,\n            d = c.hoverPoints,\n            e;d && f(d, function (a) {\n          a.setState();\n        });f(\"xy\" === b ? [1, 0] : [1], function (b) {\n          b = c[b ? \"xAxis\" : \"yAxis\"][0];var d = b.horiz,\n              f = a[d ? \"chartX\" : \"chartY\"],\n              d = d ? \"mouseDownX\" : \"mouseDownY\",\n              g = c[d],\n              h = (b.pointRange || 0) / 2,\n              k = b.getExtremes(),\n              l = b.toValue(g - f, !0) + h,\n              h = b.toValue(g + b.len - f, !0) - h,\n              m = h < l,\n              g = m ? h : l,\n              l = m ? l : h,\n              h = Math.min(k.dataMin, k.min) - g,\n              k = l - Math.max(k.dataMax, k.max);b.series.length && 0 > h && 0 > k && (b.setExtremes(g, l, !1, !1, { trigger: \"pan\" }), e = !0);c[d] = f;\n        });e && c.redraw(!1);G(c.container, { cursor: \"move\" });\n      } });u(m.prototype, { select: function select(a, b) {\n        var c = this,\n            e = c.series,\n            g = e.chart;a = t(a, !c.selected);c.firePointEvent(a ? \"select\" : \"unselect\", { accumulate: b }, function () {\n          c.selected = c.options.selected = a;e.options.data[d(c, e.data)] = c.options;c.setState(a && \"select\");b || f(g.getSelectedPoints(), function (a) {\n            a.selected && a !== c && (a.selected = a.options.selected = !1, e.options.data[d(a, e.data)] = a.options, a.setState(\"\"), a.firePointEvent(\"unselect\"));\n          });\n        });\n      }, onMouseOver: function onMouseOver(a, b) {\n        var c = this.series,\n            d = c.chart,\n            e = d.tooltip,\n            f = d.hoverPoint;if (this.series) {\n          if (!b) {\n            if (f && f !== this) f.onMouseOut();if (d.hoverSeries !== c) c.onMouseOver();d.hoverPoint = this;\n          }!e || e.shared && !c.noSharedTooltip ? e || this.setState(\"hover\") : (this.setState(\"hover\"), e.refresh(this, a));this.firePointEvent(\"mouseOver\");\n        }\n      }, onMouseOut: function onMouseOut() {\n        var a = this.series.chart,\n            b = a.hoverPoints;this.firePointEvent(\"mouseOut\");b && -1 !== d(this, b) || (this.setState(), a.hoverPoint = null);\n      }, importEvents: function importEvents() {\n        if (!this.hasImportedEvents) {\n          var a = C(this.series.options.point, this.options).events,\n              b;this.events = a;for (b in a) {\n            B(this, b, a[b]);\n          }this.hasImportedEvents = !0;\n        }\n      }, setState: function setState(a, b) {\n        var c = Math.floor(this.plotX),\n            d = this.plotY,\n            e = this.series,\n            f = e.options.states[a] || {},\n            l = g[e.type].marker && e.options.marker,\n            m = l && !1 === l.enabled,\n            n = l && l.states && l.states[a] || {},\n            p = !1 === n.enabled,\n            k = e.stateMarkerGraphic,\n            q = this.marker || {},\n            r = e.chart,\n            z = e.halo,\n            C,\n            A = l && e.markerAttribs;a = a || \"\";if (!(a === this.state && !b || this.selected && \"select\" !== a || !1 === f.enabled || a && (p || m && !1 === n.enabled) || a && q.states && q.states[a] && !1 === q.states[a].enabled)) {\n          A && (C = e.markerAttribs(this, a));if (this.graphic) this.state && this.graphic.removeClass(\"highcharts-point-\" + this.state), a && this.graphic.addClass(\"highcharts-point-\" + a), this.graphic.attr(e.pointAttribs(this, a)), C && this.graphic.animate(C, t(r.options.chart.animation, n.animation, l.animation)), k && k.hide();else {\n            if (a && n) {\n              l = q.symbol || e.symbol;k && k.currentSymbol !== l && (k = k.destroy());if (k) k[b ? \"animate\" : \"attr\"]({ x: C.x, y: C.y });else l && (e.stateMarkerGraphic = k = r.renderer.symbol(l, C.x, C.y, C.width, C.height).add(e.markerGroup), k.currentSymbol = l);k && k.attr(e.pointAttribs(this, a));\n            }k && (k[a && r.isInsidePlot(c, d, r.inverted) ? \"show\" : \"hide\"](), k.element.point = this);\n          }(c = f.halo) && c.size ? (z || (e.halo = z = r.renderer.path().add(A ? e.markerGroup : e.group)), z[b ? \"animate\" : \"attr\"]({ d: this.haloPath(c.size) }), z.attr({ \"class\": \"highcharts-halo highcharts-color-\" + t(this.colorIndex, e.colorIndex) }), z.point = this, z.attr(u({ fill: this.color || e.color, \"fill-opacity\": c.opacity, zIndex: -1 }, c.attributes))) : z && z.point && z.point.haloPath && z.animate({ d: z.point.haloPath(0) });this.state = a;\n        }\n      }, haloPath: function haloPath(a) {\n        return this.series.chart.renderer.symbols.circle(Math.floor(this.plotX) - a, this.plotY - a, 2 * a, 2 * a);\n      } });u(c.prototype, { onMouseOver: function onMouseOver() {\n        var a = this.chart,\n            b = a.hoverSeries;if (b && b !== this) b.onMouseOut();this.options.events.mouseOver && l(this, \"mouseOver\");this.setState(\"hover\");a.hoverSeries = this;\n      }, onMouseOut: function onMouseOut() {\n        var a = this.options,\n            b = this.chart,\n            c = b.tooltip,\n            d = b.hoverPoint;b.hoverSeries = null;if (d) d.onMouseOut();this && a.events.mouseOut && l(this, \"mouseOut\");!c || a.stickyTracking || c.shared && !this.noSharedTooltip || c.hide();this.setState();\n      }, setState: function setState(a) {\n        var b = this,\n            c = b.options,\n            d = b.graph,\n            g = c.states,\n            h = c.lineWidth,\n            c = 0;a = a || \"\";if (b.state !== a && (f([b.group, b.markerGroup], function (c) {\n          c && (b.state && c.removeClass(\"highcharts-series-\" + b.state), a && c.addClass(\"highcharts-series-\" + a));\n        }), b.state = a, !g[a] || !1 !== g[a].enabled) && (a && (h = g[a].lineWidth || h + (g[a].lineWidthPlus || 0)), d && !d.dashstyle)) for (g = { \"stroke-width\": h }, d.attr(g); b[\"zone-graph-\" + c];) {\n          b[\"zone-graph-\" + c].attr(g), c += 1;\n        }\n      }, setVisible: function setVisible(a, b) {\n        var c = this,\n            d = c.chart,\n            e = c.legendItem,\n            g,\n            m = d.options.chart.ignoreHiddenSeries,\n            n = c.visible;g = (c.visible = a = c.options.visible = c.userOptions.visible = void 0 === a ? !n : a) ? \"show\" : \"hide\";f([\"group\", \"dataLabelsGroup\", \"markerGroup\", \"tracker\", \"tt\"], function (a) {\n          if (c[a]) c[a][g]();\n        });if (d.hoverSeries === c || (d.hoverPoint && d.hoverPoint.series) === c) c.onMouseOut();e && d.legend.colorizeItem(c, a);c.isDirty = !0;c.options.stacking && f(d.series, function (a) {\n          a.options.stacking && a.visible && (a.isDirty = !0);\n        });f(c.linkedSeries, function (b) {\n          b.setVisible(a, !1);\n        });m && (d.isDirtyBox = !0);!1 !== b && d.redraw();l(c, g);\n      }, show: function show() {\n        this.setVisible(!0);\n      }, hide: function hide() {\n        this.setVisible(!1);\n      }, select: function select(a) {\n        this.selected = a = void 0 === a ? !this.selected : a;this.checkbox && (this.checkbox.checked = a);l(this, a ? \"select\" : \"unselect\");\n      }, drawTracker: a.drawTrackerGraph });\n  })(L);(function (a) {\n    var B = a.Chart,\n        A = a.each,\n        H = a.inArray,\n        G = a.isObject,\n        r = a.pick,\n        g = a.splat;B.prototype.setResponsive = function (a) {\n      var f = this.options.responsive;f && f.rules && A(f.rules, function (f) {\n        this.matchResponsiveRule(f, a);\n      }, this);\n    };B.prototype.matchResponsiveRule = function (f, g) {\n      var l = this.respRules,\n          q = f.condition,\n          d;d = q.callback || function () {\n        return this.chartWidth <= r(q.maxWidth, Number.MAX_VALUE) && this.chartHeight <= r(q.maxHeight, Number.MAX_VALUE) && this.chartWidth >= r(q.minWidth, 0) && this.chartHeight >= r(q.minHeight, 0);\n      };void 0 === f._id && (f._id = a.uniqueKey());d = d.call(this);!l[f._id] && d ? f.chartOptions && (l[f._id] = this.currentOptions(f.chartOptions), this.update(f.chartOptions, g)) : l[f._id] && !d && (this.update(l[f._id], g), delete l[f._id]);\n    };\n    B.prototype.currentOptions = function (a) {\n      function f(a, d, b, l) {\n        var p, q;for (p in a) {\n          if (!l && -1 < H(p, [\"series\", \"xAxis\", \"yAxis\"])) for (a[p] = g(a[p]), b[p] = [], q = 0; q < a[p].length; q++) {\n            b[p][q] = {}, f(a[p][q], d[p][q], b[p][q], l + 1);\n          } else G(a[p]) ? (b[p] = {}, f(a[p], d[p] || {}, b[p], l + 1)) : b[p] = d[p] || null;\n        }\n      }var l = {};f(a, this.options, l, 0);return l;\n    };\n  })(L);return L;\n});\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n}();\n\n;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(41)(module)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1265:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__ = __webpack_require__(602);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_value_date__ = __webpack_require__(1241);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_get_value__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_set_share_denomination__ = __webpack_require__(1240);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_share_denomination_label__ = __webpack_require__(1244);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\n\n\n\n\nvar MarketDetails = function MarketDetails(p) {\n  var outcomeName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_get_value__[\"a\" /* default */])(p, 'result.outcomeName');\n\n  var outstandingShares = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_set_share_denomination__[\"a\" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_get_value__[\"a\" /* default */])(p, 'outstandingShares.formatted'), p.selectedShareDenomination);\n  var shareDenomination = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_share_denomination_label__[\"a\" /* default */])(p.selectedShareDenomination, p.shareDenominations);\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'div',\n    { className: 'market-details market-content-scrollable' },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'ul',\n      { className: 'properties' },\n      p.type === 'binary' && outcomeName && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property outcome' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'result'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-value' },\n          outcomeName,\n          ' (',\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], p.result.proportionCorrect),\n          ')'\n        )\n      ),\n      p.type === 'categorical' && outcomeName && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property outcome' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'result'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-value' },\n          outcomeName\n        )\n      ),\n      p.type === 'scalar' && p.reportedOutcome && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property outcome' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'result'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-value' },\n          p.reportedOutcome\n        )\n      ),\n      p.author != null && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property author' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'author'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-value' },\n          p.author\n        )\n      ),\n      p.isOpen && p.outstandingShares != null && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property outstanding-shares' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'outstanding shares'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { className: 'property-value', formatted: outstandingShares, denomination: shareDenomination })\n      ),\n      p.extraInfo != null && p.extraInfo !== '' && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property extra-info' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'extra info'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-value' },\n          p.extraInfo\n        )\n      ),\n      p.resolution && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property resolution' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'resolution'\n        ),\n        getResolutionNode(p.resolution)\n      ),\n      p.type === 'scalar' && p.minValue != null && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property min-value' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'minimum value'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-value' },\n          p.minValue\n        )\n      ),\n      p.type === 'scalar' && p.maxValue != null && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property max-value' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'maximum value'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-value' },\n          p.maxValue\n        )\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property creation-date', 'data-tip': 'created: ' + p.creationTime.full },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'created'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_value_date__[\"a\" /* default */], _extends({ className: 'property-value' }, p.creationTime))\n      )\n    ),\n    !!p.reportedOutcome && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'reported-outcome' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('hr', null),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'center',\n        null,\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'h4',\n          null,\n          'This market is closed.'\n        )\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('hr', null)\n    )\n  );\n};\n\nMarketDetails.propTypes = {\n  author: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  extraInfo: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  resolution: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  outstandingShares: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].object,\n  creationTime: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].object,\n  type: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  minValue: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  maxValue: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  reportedOutcome: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string\n};\n\nvar _default = MarketDetails;\n/* harmony default export */ exports[\"a\"] = _default;\n\nfunction getResolutionNode(resolution) {\n  var resolutionText = void 0;\n  if (resolution === 'generic') {\n    resolutionText = 'Covered by local, national or international news media';\n  } else {\n    resolutionText = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'a',\n      { href: resolution },\n      resolution\n    );\n  }\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'span',\n    { className: 'property-value' },\n    resolutionText\n  );\n}\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketDetails, 'MarketDetails', '/home/jack/src/augur/src/modules/market/components/market-details.jsx');\n\n  __REACT_HOT_LOADER__.register(getResolutionNode, 'getResolutionNode', '/home/jack/src/augur/src/modules/market/components/market-details.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-details.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1266:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(114);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_em_dash__ = __webpack_require__(605);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__constants_trade_close_type__ = __webpack_require__(1258);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__ = __webpack_require__(125);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\n\n\nvar MarketTradeCloseDialog = function (_Component) {\n  _inherits(MarketTradeCloseDialog, _Component);\n\n  function MarketTradeCloseDialog(props) {\n    _classCallCheck(this, MarketTradeCloseDialog);\n\n    var _this = _possibleConstructorReturn(this, (MarketTradeCloseDialog.__proto__ || Object.getPrototypeOf(MarketTradeCloseDialog)).call(this, props));\n\n    _this.state = {\n      isConfirming: false,\n      status: props.status\n    };\n\n    _this.renderCloseDialogContent = _this.renderCloseDialogContent.bind(_this);\n    return _this;\n  }\n\n  _createClass(MarketTradeCloseDialog, [{\n    key: 'renderCloseDialogContent',\n    value: function renderCloseDialogContent(marketID, orderID, closeType, isClosable, isFullyClosable, quantityOfShares, isConfirming, closePosition, status, orderType, cancelOrder, isTradeCommitLocked) {\n      var _this2 = this;\n\n      // Position -- No Available Actions\n      if (closeType === __WEBPACK_IMPORTED_MODULE_3__constants_trade_close_type__[\"a\" /* POSITION */] && !status && (!parseFloat(quantityOfShares, 10) || !isClosable)) {\n        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_em_dash__[\"a\" /* default */], null);\n      }\n\n      if (isConfirming) {\n        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'confirming-dialog' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'unstyled confirming-no',\n              onClick: function onClick() {\n                _this2.setState({ isConfirming: false });\n              }\n            },\n            'No'\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'unstyled confirming-yes',\n              onClick: function onClick(event) {\n                if (closeType === __WEBPACK_IMPORTED_MODULE_3__constants_trade_close_type__[\"a\" /* POSITION */]) {\n                  closePosition(marketID, orderID);\n                } else if (closeType === __WEBPACK_IMPORTED_MODULE_3__constants_trade_close_type__[\"b\" /* ORDER */]) {\n                  cancelOrder(orderID, marketID, orderType);\n                }\n                _this2.setState({ isConfirming: false });\n              }\n            },\n            'Yes'\n          )\n        );\n      }\n\n      switch (status) {\n        case __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__[\"a\" /* CLOSE_DIALOG_CLOSING */]:\n          return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            null,\n            'closing'\n          );\n        case __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__[\"b\" /* CLOSE_DIALOG_FAILED */]:\n          return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            null,\n            'failed'\n          );\n        case __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__[\"c\" /* CLOSE_DIALOG_PARTIALLY_FAILED */]:\n          return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            null,\n            'partially failed'\n          );\n        case __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__[\"d\" /* CLOSE_DIALOG_SUCCESS */]:\n          return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            null,\n            'success'\n          );\n        default:\n          return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'unstyled close-order-button',\n              onClick: function onClick() {\n                if (!isTradeCommitLocked) {\n                  _this2.setState({ isConfirming: true });\n                }\n              }\n            },\n            closeType === __WEBPACK_IMPORTED_MODULE_3__constants_trade_close_type__[\"a\" /* POSITION */] ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'span',\n              null,\n              isFullyClosable ? 'close' : 'minimize'\n            ) : 'cancel'\n          );\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var p = this.props;\n      var s = this.state;\n\n      var orderID = p.closeType === __WEBPACK_IMPORTED_MODULE_3__constants_trade_close_type__[\"a\" /* POSITION */] ? p.outcomeID : p.orderID;\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        {\n          className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('close-dialog', {\n            'action-disabled': p.isTradeCommitLocked && p.closeType === __WEBPACK_IMPORTED_MODULE_3__constants_trade_close_type__[\"a\" /* POSITION */],\n            'action-running': p.status === __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__[\"a\" /* CLOSE_DIALOG_CLOSING */],\n            'action-failed': p.status === __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__[\"b\" /* CLOSE_DIALOG_FAILED */] || p.status === __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__[\"c\" /* CLOSE_DIALOG_PARTIALLY_FAILED */],\n            'action-succeeded': p.status === __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__[\"d\" /* CLOSE_DIALOG_SUCCESS */]\n          })\n        },\n        this.renderCloseDialogContent(p.marketID, orderID, p.closeType, p.isClosable, p.isFullyClosable, p.quantityOfShares, s.isConfirming, p.closePosition, p.status, p.orderType, p.cancelOrder, p.isTradeCommitLocked)\n      );\n    }\n  }]);\n\n  return MarketTradeCloseDialog;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nMarketTradeCloseDialog.propTypes = {\n  status: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string\n};\nvar _default = MarketTradeCloseDialog;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketTradeCloseDialog, 'MarketTradeCloseDialog', '/home/jack/src/augur/src/modules/market/components/market-trade-close-dialog.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-trade-close-dialog.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1267:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__order_book_header__ = __webpack_require__(1311);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__order_book_rows__ = __webpack_require__(1313);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_components_em_dash__ = __webpack_require__(605);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__markets_constants_market_types__ = __webpack_require__(28);\n\n\n\n\n\n\n\n\n// NOTE --\n// Bids + Asks are rendered into individual row components -- flexbox is utilized for side-by-side layout\nvar OrderBook = function OrderBook(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'order-book' },\n    p.marketType !== __WEBPACK_IMPORTED_MODULE_4__markets_constants_market_types__[\"b\" /* SCALAR */] ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'h3',\n      null,\n      'Order Book ',\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_em_dash__[\"a\" /* default */], null),\n      ' ',\n      p.outcome.name\n    ) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'h3',\n      null,\n      'Order Book'\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__order_book_header__[\"a\" /* default */], null),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'market-content-scrollable' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__order_book_rows__[\"a\" /* default */], {\n        id: p.outcome.id,\n        trade: p.outcome.trade,\n        bids: p.outcome.orderBook.bids,\n        asks: p.outcome.orderBook.asks,\n        selectedTradeSide: p.selectedTradeSide,\n        updateTradeFromSelectedOrder: p.updateTradeFromSelectedOrder,\n        selectedShareDenomination: p.selectedShareDenomination\n      })\n    )\n  );\n};\n\nvar _default = OrderBook;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(OrderBook, 'OrderBook', '/home/jack/src/augur/src/modules/order-book/components/order-book.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/order-book/components/order-book.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vcmRlci1ib29rL2NvbXBvbmVudHMvb3JkZXItYm9vay5qc3g/MTE5YiJdLCJuYW1lcyI6WyJPcmRlckJvb2siLCJwIiwibWFya2V0VHlwZSIsIm91dGNvbWUiLCJuYW1lIiwiaWQiLCJ0cmFkZSIsIm9yZGVyQm9vayIsImJpZHMiLCJhc2tzIiwic2VsZWN0ZWRUcmFkZVNpZGUiLCJ1cGRhdGVUcmFkZUZyb21TZWxlY3RlZE9yZGVyIiwic2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxJQUFNQSxZQUFZLFNBQVpBLFNBQVk7QUFBQSxTQUNoQjtBQUFBO0FBQUEsTUFBUyxXQUFVLFlBQW5CO0FBQ0dDLE1BQUVDLFVBQUYsS0FBaUIsK0VBQWpCLEdBQ0M7QUFBQTtBQUFBO0FBQUE7QUFBZSxrRUFBQywyRUFBRCxPQUFmO0FBQUE7QUFBMkJELFFBQUVFLE9BQUYsQ0FBVUM7QUFBckMsS0FERCxHQUVDO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FISjtBQUtFLGdFQUFDLG1FQUFELE9BTEY7QUFNRTtBQUFBO0FBQUEsUUFBSyxXQUFVLDJCQUFmO0FBQ0Usa0VBQUMsaUVBQUQ7QUFDRSxZQUFJSCxFQUFFRSxPQUFGLENBQVVFLEVBRGhCO0FBRUUsZUFBT0osRUFBRUUsT0FBRixDQUFVRyxLQUZuQjtBQUdFLGNBQU1MLEVBQUVFLE9BQUYsQ0FBVUksU0FBVixDQUFvQkMsSUFINUI7QUFJRSxjQUFNUCxFQUFFRSxPQUFGLENBQVVJLFNBQVYsQ0FBb0JFLElBSjVCO0FBS0UsMkJBQW1CUixFQUFFUyxpQkFMdkI7QUFNRSxzQ0FBOEJULEVBQUVVLDRCQU5sQztBQU9FLG1DQUEyQlYsRUFBRVc7QUFQL0I7QUFERjtBQU5GLEdBRGdCO0FBQUEsQ0FBbEI7O2VBcUJlWixTO0FBQWY7Ozs7Ozs7O2dDQXJCTUEsUyIsImZpbGUiOiIxMjY3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IE9yZGVyQm9va0hlYWRlciBmcm9tICdtb2R1bGVzL29yZGVyLWJvb2svY29tcG9uZW50cy9vcmRlci1ib29rLWhlYWRlcic7XG5pbXBvcnQgT3JkZXJCb29rUm93cyBmcm9tICdtb2R1bGVzL29yZGVyLWJvb2svY29tcG9uZW50cy9vcmRlci1ib29rLXJvd3MnO1xuaW1wb3J0IEVtRGFzaCBmcm9tICdtb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL2VtLWRhc2gnO1xuXG5pbXBvcnQgeyBTQ0FMQVIgfSBmcm9tICdtb2R1bGVzL21hcmtldHMvY29uc3RhbnRzL21hcmtldC10eXBlcyc7XG5cbi8vIE5PVEUgLS1cbi8vIEJpZHMgKyBBc2tzIGFyZSByZW5kZXJlZCBpbnRvIGluZGl2aWR1YWwgcm93IGNvbXBvbmVudHMgLS0gZmxleGJveCBpcyB1dGlsaXplZCBmb3Igc2lkZS1ieS1zaWRlIGxheW91dFxuY29uc3QgT3JkZXJCb29rID0gcCA9PiAoXG4gIDxhcnRpY2xlIGNsYXNzTmFtZT1cIm9yZGVyLWJvb2tcIj5cbiAgICB7cC5tYXJrZXRUeXBlICE9PSBTQ0FMQVIgP1xuICAgICAgPGgzPk9yZGVyIEJvb2sgPEVtRGFzaCAvPiB7cC5vdXRjb21lLm5hbWV9PC9oMz4gOlxuICAgICAgPGgzPk9yZGVyIEJvb2s8L2gzPlxuICAgIH1cbiAgICA8T3JkZXJCb29rSGVhZGVyIC8+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJtYXJrZXQtY29udGVudC1zY3JvbGxhYmxlXCIgPlxuICAgICAgPE9yZGVyQm9va1Jvd3NcbiAgICAgICAgaWQ9e3Aub3V0Y29tZS5pZH1cbiAgICAgICAgdHJhZGU9e3Aub3V0Y29tZS50cmFkZX1cbiAgICAgICAgYmlkcz17cC5vdXRjb21lLm9yZGVyQm9vay5iaWRzfVxuICAgICAgICBhc2tzPXtwLm91dGNvbWUub3JkZXJCb29rLmFza3N9XG4gICAgICAgIHNlbGVjdGVkVHJhZGVTaWRlPXtwLnNlbGVjdGVkVHJhZGVTaWRlfVxuICAgICAgICB1cGRhdGVUcmFkZUZyb21TZWxlY3RlZE9yZGVyPXtwLnVwZGF0ZVRyYWRlRnJvbVNlbGVjdGVkT3JkZXJ9XG4gICAgICAgIHNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb249e3Auc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbn1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gIDwvYXJ0aWNsZT5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IE9yZGVyQm9vaztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL29yZGVyLWJvb2svY29tcG9uZW50cy9vcmRlci1ib29rLmpzeCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 1268:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(114);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_input__ = __webpack_require__(1239);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__outcome_trade_summary__ = __webpack_require__(1315);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__outcome_trade_action__ = __webpack_require__(1314);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_components_component_nav__ = __webpack_require__(1250);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_components_em_dash__ = __webpack_require__(605);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__ = __webpack_require__(603);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__constants_trade_types__ = __webpack_require__(1261);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__order_book_constants_order_book_order_types__ = __webpack_require__(321);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__markets_constants_market_types__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_get_value__ = __webpack_require__(78);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar OutcomeTrade = function (_Component) {\n  _inherits(OutcomeTrade, _Component);\n\n  function OutcomeTrade(props) {\n    _classCallCheck(this, OutcomeTrade);\n\n    var _this = _possibleConstructorReturn(this, (OutcomeTrade.__proto__ || Object.getPrototypeOf(OutcomeTrade)).call(this, props));\n\n    _this.state = {\n      timestamp: Date.now(), // Utilized to force a re-render and subsequent update of the input fields' values on `selectedOutcome` change\n      shareInputPlaceholder: generateShareInputPlaceholder(props.selectedShareDenomination),\n      maxSharesDenominated: denominateShares(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(props, 'selectedOutcome.trade.maxNumShares.value', __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"c\" /* SHARE */], props.selectedShareDenomination)), // NOTE -- this value is not currently used in the component, but may be used later, so leaving here until this decision is finalized\n      sharesDenominated: denominateShares(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(props, 'selectedOutcome.trade.numShares'), __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"c\" /* SHARE */], props.selectedShareDenomination) || '',\n      minLimitPrice: props.marketType && props.marketType === __WEBPACK_IMPORTED_MODULE_10__markets_constants_market_types__[\"b\" /* SCALAR */] ? props.minLimitPrice : 0,\n      maxLimitPrice: props.marketType && props.marketType === __WEBPACK_IMPORTED_MODULE_10__markets_constants_market_types__[\"b\" /* SCALAR */] ? props.maxLimitPrice : 1,\n      isSharesValueValid: true,\n      isLimitPriceValueValid: true,\n      incrementAmount: 0.1\n    };\n\n    _this.updateTimestamp = _this.updateTimestamp.bind(_this);\n    _this.updateSelectedNav = _this.updateSelectedNav.bind(_this);\n    _this.handleSharesInput = _this.handleSharesInput.bind(_this);\n    _this.validateShares = _this.validateShares.bind(_this);\n    _this.validatePrice = _this.validatePrice.bind(_this);\n    return _this;\n  }\n\n  _createClass(OutcomeTrade, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.marketType !== nextProps.markettype) {\n        this.setState({\n          minLimitPrice: nextProps.marketType && nextProps.marketType === __WEBPACK_IMPORTED_MODULE_10__markets_constants_market_types__[\"b\" /* SCALAR */] ? nextProps.minLimitPrice : 0,\n          maxLimitPrice: nextProps.marketType && nextProps.marketType === __WEBPACK_IMPORTED_MODULE_10__markets_constants_market_types__[\"b\" /* SCALAR */] ? nextProps.maxLimitPrice : 1\n        });\n      }\n\n      var oldTrade = JSON.stringify(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'selectedOutcome.trade'));\n      var newTrade = JSON.stringify(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(nextProps, 'selectedOutcome.trade'));\n\n      if (newTrade !== oldTrade || this.props.selectedShareDenomination !== nextProps.selectedShareDenomination) {\n        this.setState({\n          shareInputPlaceholder: generateShareInputPlaceholder(nextProps.selectedShareDenomination),\n          maxSharesDenominated: denominateShares(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(nextProps, 'selectedOutcome.trade.maxNumShares.value', __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"c\" /* SHARE */], nextProps.selectedShareDenomination)),\n          sharesDenominated: denominateShares(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(nextProps, 'selectedOutcome.trade.numShares'), __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"c\" /* SHARE */], nextProps.selectedShareDenomination) || ''\n        });\n      }\n\n      var oldID = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'selectedOutcome.id');\n      var newID = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(nextProps, 'selectedOutcome.id');\n\n      if (oldID !== newID) {\n        // If the outcome selection changes, re-render trade component\n        this.updateTimestamp();\n      }\n\n      var oldTradeOrders = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'tradeSummary.tradeOrders');\n      var newTradeOrders = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(nextProps, 'tradeSummary.tradeOrders');\n\n      // Currently whenever a trade is submitted, all market's in-process orders are cleared\n      // Will re-render trade component upon tradeOrders clearing\n      if (oldTradeOrders.length !== newTradeOrders.length && newTradeOrders.length === 0) {\n        this.updateTimestamp();\n      }\n    }\n  }, {\n    key: 'updateTimestamp',\n    value: function updateTimestamp() {\n      // forces re-render of trade component via key value\n      this.setState({ timestamp: Date.now() });\n    }\n  }, {\n    key: 'updateSelectedNav',\n    value: function updateSelectedNav(selectedTradeSide, id) {\n      this.props.updateSelectedTradeSide(selectedTradeSide, id);\n\n      var availableOrderType = selectedTradeSide === __WEBPACK_IMPORTED_MODULE_8__constants_trade_types__[\"a\" /* BUY */] ? __WEBPACK_IMPORTED_MODULE_9__order_book_constants_order_book_order_types__[\"a\" /* ASKS */] : __WEBPACK_IMPORTED_MODULE_9__order_book_constants_order_book_order_types__[\"b\" /* BIDS */];\n      var orderBookSide = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'selectedOutcome.orderBook.' + availableOrderType);\n      var bestOrderPrice = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(orderBookSide[0], 'price.value') || '';\n\n      var trade = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'selectedOutcome.trade');\n      if (trade && trade.updateTradeOrder) {\n        if (bestOrderPrice === '') {\n          trade.updateTradeOrder(null, bestOrderPrice, selectedTradeSide); // Clears order\n          trade.updateTradeOrder(null, null, selectedTradeSide); // Sets to default\n        } else {\n          trade.updateTradeOrder(null, bestOrderPrice, selectedTradeSide); // Updates to best\n        }\n      }\n    }\n  }, {\n    key: 'handleSharesInput',\n    value: function handleSharesInput(value) {\n      var trade = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'selectedOutcome.trade');\n      var valueDenominated = denominateShares(value, this.props.selectedShareDenomination, __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"c\" /* SHARE */]);\n\n      trade.updateTradeOrder(valueDenominated, null, trade.side);\n    }\n  }, {\n    key: 'validatePrice',\n    value: function validatePrice(value, trade) {\n      if (value != null) {\n        if (value >= parseFloat(this.state.minLimitPrice) && value <= parseFloat(this.state.maxLimitPrice) || value === '') {\n          this.setState({ isLimitPriceValueValid: true });\n          trade.updateTradeOrder(null, value, trade.side);\n        } else {\n          this.setState({ isLimitPriceValueValid: false });\n        }\n      }\n    }\n  }, {\n    key: 'validateShares',\n    value: function validateShares(value, trade) {\n      if (value != null) {\n        if (value >= 0 || value === '') {\n          this.handleSharesInput(value);\n          this.setState({ isSharesValueValid: true });\n        } else {\n          this.setState({ isSharesValueValid: false });\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var p = this.props;\n      var s = this.state;\n\n      var selectedID = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'selectedOutcome.id');\n      var name = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'selectedOutcome.name');\n      var trade = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'selectedOutcome.trade');\n      var selectedTradeSide = selectedID && p.selectedTradeSide[selectedID] || __WEBPACK_IMPORTED_MODULE_8__constants_trade_types__[\"a\" /* BUY */];\n      var tradeOrder = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'tradeSummary.tradeOrders').find(function (order) {\n        return order.data.outcomeID === selectedID;\n      });\n      var hasFunds = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'tradeSummary.hasUserEnoughFunds');\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: 'outcome-trade market-content-scrollable' },\n        p.marketType !== __WEBPACK_IMPORTED_MODULE_10__markets_constants_market_types__[\"b\" /* SCALAR */] ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'h3',\n          null,\n          'Create Order ',\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_6__common_components_em_dash__[\"a\" /* default */], null),\n          ' ',\n          name && name\n        ) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'h3',\n          null,\n          'Create Order'\n        ),\n        trade && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          {\n            key: s.timestamp,\n            className: 'outcome-trade-inputs'\n          },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'div',\n            { className: 'outcome-trade-inputs-sides' },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_5__common_components_component_nav__[\"a\" /* default */], {\n              fullWidth: true,\n              navItems: p.outcomeTradeNavItems,\n              selectedNav: selectedTradeSide,\n              updateSelectedNav: function updateSelectedNav(side) {\n                _this2.updateSelectedNav(side, selectedID);\n              }\n            })\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'div',\n            { className: 'outcome-trade-inputs-fields' },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_input__[\"a\" /* default */], {\n              className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()({ 'input-error': !s.isSharesValueValid }),\n              placeholder: s.shareInputPlaceholder,\n              value: s.sharesDenominated,\n              isIncrementable: true,\n              incrementAmount: s.incrementAmount,\n              updateValue: function updateValue(value) {\n                _this2.validateShares(value, trade);\n              },\n              onChange: function onChange(value) {\n                _this2.validateShares(value, trade);\n              }\n            }),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'span',\n              null,\n              '@'\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_input__[\"a\" /* default */], {\n              className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('trade-price-input', { 'input-error': !s.isLimitPriceValueValid }),\n              placeholder: 'Price',\n              value: trade.limitPrice,\n              isIncrementable: true,\n              incrementAmount: s.incrementAmount,\n              updateValue: function updateValue(value) {\n                _this2.validatePrice(value, trade);\n              },\n              onChange: function onChange(value) {\n                _this2.validatePrice(value, trade);\n              }\n            })\n          )\n        ),\n        !s.isSharesValueValid && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'outcome-trade-input-error-message' },\n          'Shares amount must be greater than 0.'\n        ),\n        !s.isLimitPriceValueValid && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'outcome-trade-input-error-message' },\n          'Limit price must be between ' + s.minLimitPrice + ' - ' + s.maxLimitPrice + '.'\n        ),\n        tradeOrder && s.isSharesValueValid && s.isLimitPriceValueValid && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__outcome_trade_summary__[\"a\" /* default */], {\n          trade: trade,\n          tradeOrder: tradeOrder\n        }),\n        tradeOrder && s.isSharesValueValid && s.isLimitPriceValueValid && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__outcome_trade_action__[\"a\" /* default */], {\n          hasFunds: hasFunds,\n          selectedID: selectedID,\n          submitTrade: p.submitTrade,\n          disabled: p.isTradeCommitLocked\n        }),\n        tradeOrder && s.isSharesValueValid && s.isLimitPriceValueValid && p.isTradeCommitLocked && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'trade-in-progress-notice' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            null,\n            'Trade Currently In-Progress'\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            null,\n            'You may trade once your previous trade has completed'\n          )\n        )\n      );\n    }\n  }]);\n\n  return OutcomeTrade;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nOutcomeTrade.propTypes = {\n  selectedShareDenomination: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  updateSelectedTradeSide: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].func,\n  marketType: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  minLimitPrice: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  maxLimitPrice: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  submitTrade: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].func,\n  tradeSummary: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].object\n};\nvar _default = OutcomeTrade;\n/* harmony default export */ exports[\"a\"] = _default;\n\n\nfunction denominateShares(shares, fromDenomination, toDenomination) {\n  if (shares == null || fromDenomination === toDenomination) {\n    return shares;\n  }\n\n  // Determine numerical representation of from/to values for shares mutation calc\n  var options = [__WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"c\" /* SHARE */], __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"b\" /* MILLI_SHARE */], __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"a\" /* MICRO_SHARE */]];\n  var fromValue = 0;\n  options.some(function (value, i) {\n    if (value === fromDenomination) {\n      fromValue = i;\n      return true;\n    }\n\n    return false;\n  });\n\n  var toValue = 0;\n  options.some(function (value, i) {\n    if (value === toDenomination) {\n      toValue = i;\n      return true;\n    }\n\n    return false;\n  });\n\n  if (fromValue === toValue) {\n    return shares;\n  } else if (fromValue < toValue) {\n    return shares * Math.pow(1000, toValue - fromValue);\n  }\n\n  // fromValue > toValue\n  return shares / Math.pow(1000, Math.abs(toValue - fromValue));\n}\n\nfunction generateShareInputPlaceholder(denomination) {\n  var base = 'Quantity';\n\n  switch (denomination) {\n    case __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"a\" /* MICRO_SHARE */]:\n      return base + ' (\\u03BCShare)';\n    case __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"b\" /* MILLI_SHARE */]:\n      return base + ' (mShare)';\n    default:\n    case __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"c\" /* SHARE */]:\n      return base;\n  }\n}\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(OutcomeTrade, 'OutcomeTrade', '/home/jack/src/augur/src/modules/outcomes/components/outcome-trade.jsx');\n\n  __REACT_HOT_LOADER__.register(denominateShares, 'denominateShares', '/home/jack/src/augur/src/modules/outcomes/components/outcome-trade.jsx');\n\n  __REACT_HOT_LOADER__.register(generateShareInputPlaceholder, 'generateShareInputPlaceholder', '/home/jack/src/augur/src/modules/outcomes/components/outcome-trade.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/outcomes/components/outcome-trade.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1269:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(114);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__markets_constants_market_types__ = __webpack_require__(28);\n\n\n\n\nvar OutcomeOptions = function OutcomeOptions(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'outcome-options' },\n    p.type === __WEBPACK_IMPORTED_MODULE_2__markets_constants_market_types__[\"b\" /* SCALAR */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'reportable-outcomes' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'label',\n        {\n          key: 'scalar-outcome',\n          className: 'outcome-option',\n          htmlFor: 'outcome-scalar-input'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input', {\n          type: 'text',\n          className: 'outcome-option-input',\n          name: 'outcome-scalar-input',\n          value: p.reportedOutcomeID,\n          disabled: p.isReported || p.isIndeterminate,\n          onChange: p.onOutcomeChange\n        })\n      )\n    ),\n    p.type !== __WEBPACK_IMPORTED_MODULE_2__markets_constants_market_types__[\"b\" /* SCALAR */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'reportable-outcomes' },\n      (p.reportableOutcomes || []).map(function (outcome) {\n        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'label',\n          {\n            key: outcome.id,\n            className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('outcome-option', { disabled: p.isReported || p.isIndeterminate }),\n            htmlFor: 'outcome-option-radio'\n          },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input', {\n            type: 'radio',\n            className: 'outcome-option-radio',\n            name: 'outcome-option-radio',\n            value: outcome.id,\n            checked: p.reportedOutcomeID === outcome.id,\n            disabled: p.isReported || p.isIndeterminate,\n            onChange: p.onOutcomeChange\n          }),\n          outcome.name\n        );\n      })\n    )\n  );\n};\n\nOutcomeOptions.propTypes = {\n  className: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.string,\n  type: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.string,\n  reportableOutcomes: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.array,\n  reportedOutcomeID: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.string,\n  isReported: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.bool,\n  isIndeterminate: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.bool,\n  onOutcomeChange: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.func\n};\n\nvar _default = OutcomeOptions;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(OutcomeOptions, 'OutcomeOptions', '/home/jack/src/augur/src/modules/reports/components/outcome-options.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/reports/components/outcome-options.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9yZXBvcnRzL2NvbXBvbmVudHMvb3V0Y29tZS1vcHRpb25zLmpzeD9hMjI4Il0sIm5hbWVzIjpbIk91dGNvbWVPcHRpb25zIiwicCIsInR5cGUiLCJyZXBvcnRlZE91dGNvbWVJRCIsImlzUmVwb3J0ZWQiLCJpc0luZGV0ZXJtaW5hdGUiLCJvbk91dGNvbWVDaGFuZ2UiLCJyZXBvcnRhYmxlT3V0Y29tZXMiLCJtYXAiLCJvdXRjb21lIiwiaWQiLCJjbGFzc25hbWVzIiwiZGlzYWJsZWQiLCJuYW1lIiwicHJvcFR5cGVzIiwiY2xhc3NOYW1lIiwiUmVhY3QiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJhcnJheSIsImJvb2wiLCJmdW5jIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTs7QUFFQSxJQUFNQSxpQkFBaUIsU0FBakJBLGNBQWlCO0FBQUEsU0FDckI7QUFBQTtBQUFBLE1BQVMsV0FBVSxpQkFBbkI7QUFDR0MsTUFBRUMsSUFBRixLQUFXLCtFQUFYLElBQ0M7QUFBQTtBQUFBLFFBQUssV0FBVSxxQkFBZjtBQUNFO0FBQUE7QUFBQTtBQUNFLGVBQUksZ0JBRE47QUFFRSxxQkFBVSxnQkFGWjtBQUdFLG1CQUFRO0FBSFY7QUFLRTtBQUNFLGdCQUFLLE1BRFA7QUFFRSxxQkFBVSxzQkFGWjtBQUdFLGdCQUFLLHNCQUhQO0FBSUUsaUJBQU9ELEVBQUVFLGlCQUpYO0FBS0Usb0JBQVVGLEVBQUVHLFVBQUYsSUFBZ0JILEVBQUVJLGVBTDlCO0FBTUUsb0JBQVVKLEVBQUVLO0FBTmQ7QUFMRjtBQURGLEtBRko7QUFtQkdMLE1BQUVDLElBQUYsS0FBVywrRUFBWCxJQUNDO0FBQUE7QUFBQSxRQUFLLFdBQVUscUJBQWY7QUFDRyxPQUFDRCxFQUFFTSxrQkFBRixJQUF3QixFQUF6QixFQUE2QkMsR0FBN0IsQ0FBaUM7QUFBQSxlQUNoQztBQUFBO0FBQUE7QUFDRSxpQkFBS0MsUUFBUUMsRUFEZjtBQUVFLHVCQUFXLGtEQUFBQyxDQUFXLGdCQUFYLEVBQTZCLEVBQUVDLFVBQVVYLEVBQUVHLFVBQUYsSUFBZ0JILEVBQUVJLGVBQTlCLEVBQTdCLENBRmI7QUFHRSxxQkFBUTtBQUhWO0FBS0U7QUFDRSxrQkFBSyxPQURQO0FBRUUsdUJBQVUsc0JBRlo7QUFHRSxrQkFBSyxzQkFIUDtBQUlFLG1CQUFPSSxRQUFRQyxFQUpqQjtBQUtFLHFCQUFTVCxFQUFFRSxpQkFBRixLQUF3Qk0sUUFBUUMsRUFMM0M7QUFNRSxzQkFBVVQsRUFBRUcsVUFBRixJQUFnQkgsRUFBRUksZUFOOUI7QUFPRSxzQkFBVUosRUFBRUs7QUFQZCxZQUxGO0FBY0dHLGtCQUFRSTtBQWRYLFNBRGdDO0FBQUEsT0FBakM7QUFESDtBQXBCSixHQURxQjtBQUFBLENBQXZCOztBQTZDQWIsZUFBZWMsU0FBZixHQUEyQjtBQUN6QkMsYUFBVyw2Q0FBQUMsQ0FBTUMsU0FBTixDQUFnQkMsTUFERjtBQUV6QmhCLFFBQU0sNkNBQUFjLENBQU1DLFNBQU4sQ0FBZ0JDLE1BRkc7QUFHekJYLHNCQUFvQiw2Q0FBQVMsQ0FBTUMsU0FBTixDQUFnQkUsS0FIWDtBQUl6QmhCLHFCQUFtQiw2Q0FBQWEsQ0FBTUMsU0FBTixDQUFnQkMsTUFKVjtBQUt6QmQsY0FBWSw2Q0FBQVksQ0FBTUMsU0FBTixDQUFnQkcsSUFMSDtBQU16QmYsbUJBQWlCLDZDQUFBVyxDQUFNQyxTQUFOLENBQWdCRyxJQU5SO0FBT3pCZCxtQkFBaUIsNkNBQUFVLENBQU1DLFNBQU4sQ0FBZ0JJO0FBUFIsQ0FBM0I7O2VBVWVyQixjO0FBQWY7Ozs7Ozs7O2dDQXZETUEsYyIsImZpbGUiOiIxMjY5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgU0NBTEFSIH0gZnJvbSAnbW9kdWxlcy9tYXJrZXRzL2NvbnN0YW50cy9tYXJrZXQtdHlwZXMnO1xuXG5jb25zdCBPdXRjb21lT3B0aW9ucyA9IHAgPT4gKFxuICA8YXJ0aWNsZSBjbGFzc05hbWU9XCJvdXRjb21lLW9wdGlvbnNcIj5cbiAgICB7cC50eXBlID09PSBTQ0FMQVIgJiZcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVwb3J0YWJsZS1vdXRjb21lc1wiPlxuICAgICAgICA8bGFiZWxcbiAgICAgICAgICBrZXk9XCJzY2FsYXItb3V0Y29tZVwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwib3V0Y29tZS1vcHRpb25cIlxuICAgICAgICAgIGh0bWxGb3I9XCJvdXRjb21lLXNjYWxhci1pbnB1dFwiXG4gICAgICAgID5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIm91dGNvbWUtb3B0aW9uLWlucHV0XCJcbiAgICAgICAgICAgIG5hbWU9XCJvdXRjb21lLXNjYWxhci1pbnB1dFwiXG4gICAgICAgICAgICB2YWx1ZT17cC5yZXBvcnRlZE91dGNvbWVJRH1cbiAgICAgICAgICAgIGRpc2FibGVkPXtwLmlzUmVwb3J0ZWQgfHwgcC5pc0luZGV0ZXJtaW5hdGV9XG4gICAgICAgICAgICBvbkNoYW5nZT17cC5vbk91dGNvbWVDaGFuZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgIH1cbiAgICB7cC50eXBlICE9PSBTQ0FMQVIgJiZcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVwb3J0YWJsZS1vdXRjb21lc1wiPlxuICAgICAgICB7KHAucmVwb3J0YWJsZU91dGNvbWVzIHx8IFtdKS5tYXAob3V0Y29tZSA9PiAoXG4gICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICBrZXk9e291dGNvbWUuaWR9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ291dGNvbWUtb3B0aW9uJywgeyBkaXNhYmxlZDogcC5pc1JlcG9ydGVkIHx8IHAuaXNJbmRldGVybWluYXRlIH0pfVxuICAgICAgICAgICAgaHRtbEZvcj1cIm91dGNvbWUtb3B0aW9uLXJhZGlvXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwib3V0Y29tZS1vcHRpb24tcmFkaW9cIlxuICAgICAgICAgICAgICBuYW1lPVwib3V0Y29tZS1vcHRpb24tcmFkaW9cIlxuICAgICAgICAgICAgICB2YWx1ZT17b3V0Y29tZS5pZH1cbiAgICAgICAgICAgICAgY2hlY2tlZD17cC5yZXBvcnRlZE91dGNvbWVJRCA9PT0gb3V0Y29tZS5pZH1cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e3AuaXNSZXBvcnRlZCB8fCBwLmlzSW5kZXRlcm1pbmF0ZX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e3Aub25PdXRjb21lQ2hhbmdlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtvdXRjb21lLm5hbWV9XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgKSl9XG4gICAgICA8L2Rpdj5cbiAgICB9XG4gIDwvYXJ0aWNsZT5cbik7XG5cbk91dGNvbWVPcHRpb25zLnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICB0eXBlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICByZXBvcnRhYmxlT3V0Y29tZXM6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcbiAgcmVwb3J0ZWRPdXRjb21lSUQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gIGlzUmVwb3J0ZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICBpc0luZGV0ZXJtaW5hdGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICBvbk91dGNvbWVDaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG59O1xuXG5leHBvcnQgZGVmYXVsdCBPdXRjb21lT3B0aW9ucztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL3JlcG9ydHMvY29tcG9uZW50cy9vdXRjb21lLW9wdGlvbnMuanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1270:
/***/ function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n!function (t, r) {\n  \"object\" == ( false ? \"undefined\" : _typeof(exports)) && \"object\" == ( false ? \"undefined\" : _typeof(module)) ? module.exports = r(__webpack_require__(15), __webpack_require__(1262)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(1262)], __WEBPACK_AMD_DEFINE_FACTORY__ = (r), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : \"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) ? exports.ReactHighcharts = r(require(\"react\"), require(\"highcharts\")) : t.ReactHighcharts = r(t.React, t.Highcharts);\n}(this, function (t, r) {\n  return function (t) {\n    function r(o) {\n      if (e[o]) return e[o].exports;var n = e[o] = { exports: {}, id: o, loaded: !1 };return t[o].call(n.exports, n, n.exports, r), n.loaded = !0, n.exports;\n    }var e = {};return r.m = t, r.c = e, r.p = \"\", r(0);\n  }([function (t, r, e) {\n    t.exports = e(3);\n  }, function (r, e) {\n    r.exports = t;\n  }, function (t, r, e) {\n    (function (r) {\n      \"use strict\";\n      var o = Object.assign || function (t) {\n        for (var r = 1; r < arguments.length; r++) {\n          var e = arguments[r];for (var o in e) {\n            Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);\n          }\n        }return t;\n      },\n          n = e(1),\n          i = \"undefined\" == typeof r ? window : r;t.exports = function (r, e) {\n        var c = \"Highcharts\" + r,\n            s = n.createClass({ displayName: c, propTypes: { config: n.PropTypes.object.isRequired, isPureConfig: n.PropTypes.bool, neverReflow: n.PropTypes.bool, callback: n.PropTypes.func, domProps: n.PropTypes.object }, defaultProps: { callback: function callback() {}, domProps: {} }, renderChart: function renderChart(t) {\n            var n = this;if (!t) throw new Error(\"Config must be specified for the \" + c + \" component\");var s = t.chart;this.chart = new e[r](o({}, t, { chart: o({}, s, { renderTo: this.refs.chart }) }), this.props.callback), this.props.neverReflow || i.requestAnimationFrame && requestAnimationFrame(function () {\n              n.chart && n.chart.options && n.chart.reflow();\n            });\n          }, shouldComponentUpdate: function shouldComponentUpdate(t) {\n            return !!(t.neverReflow || t.isPureConfig && this.props.config === t.config) || (this.renderChart(t.config), !1);\n          }, getChart: function getChart() {\n            if (!this.chart) throw new Error(\"getChart() should not be called before the component is mounted\");return this.chart;\n          }, componentDidMount: function componentDidMount() {\n            this.renderChart(this.props.config);\n          }, componentWillUnmount: function componentWillUnmount() {\n            this.chart.destroy();\n          }, render: function render() {\n            return n.createElement(\"div\", o({ ref: \"chart\" }, this.props.domProps));\n          } });return s.Highcharts = e, s.withHighcharts = function (e) {\n          return t.exports(r, e);\n        }, s;\n      };\n    }).call(r, function () {\n      return this;\n    }());\n  }, function (t, r, e) {\n    \"use strict\";\n    t.exports = e(2)(\"Chart\", e(4));\n  }, function (t, e) {\n    t.exports = r;\n  }]);\n});\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n}();\n\n;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(41)(module)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1291:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__market_data__ = __webpack_require__(1293);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__market_user_data__ = __webpack_require__(1301);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__order_book_components_order_book__ = __webpack_require__(1267);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__outcomes_components_outcome_trade__ = __webpack_require__(1268);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__constants_share_denominations__ = __webpack_require__(603);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__ = __webpack_require__(1260);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__outcomes_constants_trade_types__ = __webpack_require__(1261);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__ = __webpack_require__(471);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__order_book_constants_order_book_order_types__ = __webpack_require__(321);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__markets_constants_market_types__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_get_value__ = __webpack_require__(78);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar MarketActive = function (_Component) {\n  _inherits(MarketActive, _Component);\n\n  function MarketActive(props) {\n    _classCallCheck(this, MarketActive);\n\n    var _this = _possibleConstructorReturn(this, (MarketActive.__proto__ || Object.getPrototypeOf(MarketActive)).call(this, props));\n\n    _this.state = {\n      selectedOutcome: _this.props.market.outcomes[0],\n      selectedTradeSide: {}\n    };\n\n    _this.updateSelectedOutcome = _this.updateSelectedOutcome.bind(_this);\n    _this.updateSelectedTradeSide = _this.updateSelectedTradeSide.bind(_this);\n    _this.determineDefaultShareDenomination = _this.determineDefaultShareDenomination.bind(_this);\n    _this.updateTradeFromSelectedOrder = _this.updateTradeFromSelectedOrder.bind(_this);\n    return _this;\n  }\n\n  _createClass(MarketActive, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      var marketType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'market.type');\n\n      if (marketType === __WEBPACK_IMPORTED_MODULE_10__markets_constants_market_types__[\"b\" /* SCALAR */]) {\n        this.determineDefaultShareDenomination();\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var selectedOutcomeID = this.state.selectedOutcome.id;\n      var nextPropsOutcome = nextProps.market.outcomes.find(function (outcome) {\n        return outcome.id === selectedOutcomeID;\n      });\n\n      if (JSON.stringify(nextPropsOutcome) !== JSON.stringify(this.state.selectedOutcome)) {\n        this.setState({ selectedOutcome: nextPropsOutcome });\n      }\n    }\n  }, {\n    key: 'updateSelectedOutcome',\n    value: function updateSelectedOutcome(selectedOutcome) {\n      this.setState({ selectedOutcome: selectedOutcome });\n    }\n  }, {\n    key: 'updateSelectedTradeSide',\n    value: function updateSelectedTradeSide(selectedTradeSide, id) {\n      this.setState({\n        selectedTradeSide: _extends({}, this.state.selectedTradeSide, _defineProperty({}, id, selectedTradeSide))\n      });\n    }\n  }, {\n    key: 'updateTradeFromSelectedOrder',\n    value: function updateTradeFromSelectedOrder(outcomeID, orderIndex, side, orderValueType) {\n      var outcomes = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'market.outcomes');\n\n      if (outcomes) {\n        var outcome = outcomes.find(function (outcome) {\n          return outcome.id === outcomeID;\n        });\n        var orderBookSide = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(outcome, 'orderBook.' + (side === __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] ? __WEBPACK_IMPORTED_MODULE_9__order_book_constants_order_book_order_types__[\"b\" /* BIDS */] : __WEBPACK_IMPORTED_MODULE_9__order_book_constants_order_book_order_types__[\"a\" /* ASKS */]));\n        var order = orderBookSide && orderBookSide[orderIndex] || null;\n        var price = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(order, 'price.value') || '';\n        var trade = outcome.trade;\n        var tradeSide = side === __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] ? __WEBPACK_IMPORTED_MODULE_7__outcomes_constants_trade_types__[\"b\" /* SELL */] : __WEBPACK_IMPORTED_MODULE_7__outcomes_constants_trade_types__[\"a\" /* BUY */];\n\n        if (orderValueType === __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__[\"b\" /* PRICE */]) {\n          trade.updateTradeOrder(0, null, tradeSide); // Clear Shares\n          if (price === '') {\n            trade.updateTradeOrder(null, price, tradeSide);\n            trade.updateTradeOrder(null, null, tradeSide);\n          } else {\n            trade.updateTradeOrder(null, price, tradeSide);\n          }\n        } else {\n          var shares = trade.totalSharesUpToOrder(orderIndex, side);\n\n          trade.updateTradeOrder(shares, price, tradeSide);\n        }\n\n        this.updateSelectedTradeSide(tradeSide, outcomeID);\n      }\n    }\n\n    // NOTE -- only called if a market is of type SCALAR from `componentWillMount`\n\n  }, {\n    key: 'determineDefaultShareDenomination',\n    value: function determineDefaultShareDenomination() {\n      var marketID = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'market.id');\n      var shareDenomination = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'scalarShareDenomination.markets.' + marketID);\n\n      if (!shareDenomination) {\n        var maxValue = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'market.maxValue');\n\n        if (maxValue >= 10000000) {\n          this.props.scalarShareDenomination.updateSelectedShareDenomination(marketID, __WEBPACK_IMPORTED_MODULE_5__constants_share_denominations__[\"a\" /* MICRO_SHARE */]);\n        } else if (maxValue >= 10000) {\n          this.props.scalarShareDenomination.updateSelectedShareDenomination(marketID, __WEBPACK_IMPORTED_MODULE_5__constants_share_denominations__[\"b\" /* MILLI_SHARE */]);\n        } else {\n          this.props.scalarShareDenomination.updateSelectedShareDenomination(marketID, __WEBPACK_IMPORTED_MODULE_5__constants_share_denominations__[\"c\" /* SHARE */]);\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var p = this.props;\n      var s = this.state;\n\n      var marketID = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'market.id');\n      var tradeSummary = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'market.tradeSummary');\n      var _submitTrade = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'market.onSubmitPlaceTrade');\n      var marketType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'market.type');\n      var minValue = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'market.minValue');\n      var maxValue = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'market.maxValue');\n\n      var selectedShareDenomination = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'scalarShareDenomination.markets.' + marketID);\n      var shareDenominations = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'scalarShareDenomination.denominations');\n      var updateSelectedShareDenomination = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'scalarShareDenomination.updateSelectedShareDenomination');\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: 'market-active' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'market-group' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__market_data__[\"a\" /* default */], _extends({}, p, {\n            marketID: marketID,\n            marketType: marketType,\n            selectedOutcome: s.selectedOutcome,\n            updateSelectedOutcome: this.updateSelectedOutcome,\n            selectedShareDenomination: selectedShareDenomination,\n            shareDenominations: shareDenominations,\n            updateSelectedShareDenomination: updateSelectedShareDenomination,\n            tradeSummary: tradeSummary,\n            submitTrade: function submitTrade(id) {\n              _submitTrade(id);\n            },\n            selectedTradeSide: s.selectedTradeSide,\n            updateSelectedTradeSide: this.updateSelectedTradeSide,\n            updateTradeFromSelectedOrder: this.updateTradeFromSelectedOrder,\n            outcomeTradeNavItems: p.outcomeTradeNavItems,\n            minLimitPrice: minValue,\n            maxLimitPrice: maxValue\n          })),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__order_book_components_order_book__[\"a\" /* default */], {\n            marketType: marketType,\n            outcome: s.selectedOutcome,\n            selectedTradeSide: s.selectedTradeSide,\n            updateTradeFromSelectedOrder: this.updateTradeFromSelectedOrder,\n            selectedShareDenomination: selectedShareDenomination\n          })\n        ),\n        p.logged && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'market-group' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__market_user_data__[\"a\" /* default */], _extends({}, p, {\n            marketType: marketType,\n            navItems: p.marketUserDataNavItems,\n            selectedShareDenomination: selectedShareDenomination\n          })),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__outcomes_components_outcome_trade__[\"a\" /* default */], {\n            marketType: marketType,\n            selectedOutcome: s.selectedOutcome,\n            tradeSummary: tradeSummary,\n            submitTrade: function submitTrade(id) {\n              _submitTrade(id);\n            },\n            selectedTradeSide: s.selectedTradeSide,\n            selectedShareDenomination: selectedShareDenomination,\n            updateSelectedTradeSide: this.updateSelectedTradeSide,\n            outcomeTradeNavItems: p.outcomeTradeNavItems,\n            minLimitPrice: minValue,\n            maxLimitPrice: maxValue,\n            isTradeCommitLocked: p.isTradeCommitLocked\n          })\n        )\n      );\n    }\n  }]);\n\n  return MarketActive;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nvar _default = MarketActive;\n/* harmony default export */ exports[\"a\"] = _default;\n\n\nMarketActive.propTypes = {\n  market: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].shape({\n    outcomes: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].array\n  }),\n  scalarShareDenomination: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].shape({\n    updateSelectedShareDenomination: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].func\n  })\n};\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketActive, 'MarketActive', '/home/jack/src/augur/src/modules/market/components/market-active.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-active.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1292:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_highcharts__ = __webpack_require__(1270);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_highcharts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_highcharts__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_null_state_message__ = __webpack_require__(604);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\nvar MarketChart = function (_Component) {\n  _inherits(MarketChart, _Component);\n\n  function MarketChart(props) {\n    _classCallCheck(this, MarketChart);\n\n    var _this = _possibleConstructorReturn(this, (MarketChart.__proto__ || Object.getPrototypeOf(MarketChart)).call(this, props));\n\n    _this.state = {\n      nullMessage: 'No Completed Trades'\n    };\n    return _this;\n  }\n\n  _createClass(MarketChart, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps) {\n      if (nextProps.series.length === this.props.series.length) return false;\n\n      return true;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var p = this.props;\n      var s = this.state;\n\n      var config = {\n        title: {\n          text: ''\n        },\n        rangeSelector: { selected: 1 },\n        xAxis: {\n          type: 'datetime'\n        },\n        yAxis: {\n          title: {\n            text: 'price'\n          },\n          min: 0,\n          max: 1\n        },\n        legend: {\n          enabled: true\n        },\n        tooltip: {\n          pointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b><br/>',\n          valueDecimals: 2\n        },\n        series: p.series\n      };\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: 'price-history-chart market-content-scrollable' },\n        !p.series || !p.series.length ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_null_state_message__[\"a\" /* default */], { message: s.nullMessage }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1_react_highcharts___default.a, { config: config })\n      );\n    }\n  }]);\n\n  return MarketChart;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nMarketChart.propTypes = {\n  series: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].array\n};\nvar _default = MarketChart;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketChart, 'MarketChart', '/home/jack/src/augur/src/modules/market/components/market-chart.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-chart.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtY2hhcnQuanN4P2E0MWQiXSwibmFtZXMiOlsiTWFya2V0Q2hhcnQiLCJwcm9wcyIsInN0YXRlIiwibnVsbE1lc3NhZ2UiLCJuZXh0UHJvcHMiLCJzZXJpZXMiLCJsZW5ndGgiLCJwIiwicyIsImNvbmZpZyIsInRpdGxlIiwidGV4dCIsInJhbmdlU2VsZWN0b3IiLCJzZWxlY3RlZCIsInhBeGlzIiwidHlwZSIsInlBeGlzIiwibWluIiwibWF4IiwibGVnZW5kIiwiZW5hYmxlZCIsInRvb2x0aXAiLCJwb2ludEZvcm1hdCIsInZhbHVlRGVjaW1hbHMiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhcnJheSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7O0FBRUE7O0lBRXFCQSxXOzs7QUFLbkIsdUJBQVlDLEtBQVosRUFBbUI7QUFBQTs7QUFBQSwwSEFDWEEsS0FEVzs7QUFHakIsVUFBS0MsS0FBTCxHQUFhO0FBQ1hDLG1CQUFhO0FBREYsS0FBYjtBQUhpQjtBQU1sQjs7OzswQ0FFcUJDLFMsRUFBVztBQUMvQixVQUFJQSxVQUFVQyxNQUFWLENBQWlCQyxNQUFqQixLQUE0QixLQUFLTCxLQUFMLENBQVdJLE1BQVgsQ0FBa0JDLE1BQWxELEVBQTBELE9BQU8sS0FBUDs7QUFFMUQsYUFBTyxJQUFQO0FBQ0Q7Ozs2QkFFUTtBQUNQLFVBQU1DLElBQUksS0FBS04sS0FBZjtBQUNBLFVBQU1PLElBQUksS0FBS04sS0FBZjs7QUFFQSxVQUFNTyxTQUFTO0FBQ2JDLGVBQU87QUFDTEMsZ0JBQU07QUFERCxTQURNO0FBSWJDLHVCQUFlLEVBQUVDLFVBQVUsQ0FBWixFQUpGO0FBS2JDLGVBQU87QUFDTEMsZ0JBQU07QUFERCxTQUxNO0FBUWJDLGVBQU87QUFDTE4saUJBQU87QUFDTEMsa0JBQU07QUFERCxXQURGO0FBSUxNLGVBQUssQ0FKQTtBQUtMQyxlQUFLO0FBTEEsU0FSTTtBQWViQyxnQkFBUTtBQUNOQyxtQkFBUztBQURILFNBZks7QUFrQmJDLGlCQUFTO0FBQ1BDLHVCQUFhLGdGQUROO0FBRVBDLHlCQUFlO0FBRlIsU0FsQkk7QUFzQmJsQixnQkFBUUUsRUFBRUY7QUF0QkcsT0FBZjs7QUF5QkEsYUFDRTtBQUFBO0FBQUEsVUFBUyxXQUFVLCtDQUFuQjtBQUNHLFNBQUNFLEVBQUVGLE1BQUgsSUFBYSxDQUFDRSxFQUFFRixNQUFGLENBQVNDLE1BQXZCLEdBQ0MsNERBQUMsc0ZBQUQsSUFBa0IsU0FBU0UsRUFBRUwsV0FBN0IsR0FERCxHQUVDLDREQUFDLHdEQUFELElBQWlCLFFBQVFNLE1BQXpCO0FBSEosT0FERjtBQVFEOzs7O0VBeERzQyxnRDs7QUFBcEJULFcsQ0FDWndCLFMsR0FBWTtBQUNqQm5CLFVBQVEsZ0RBQUFvQixDQUFVQztBQURELEM7ZUFEQTFCLFc7Ozs7Ozs7OztnQ0FBQUEsVyIsImZpbGUiOiIxMjkyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0SGlnaGNoYXJ0cyBmcm9tICdyZWFjdC1oaWdoY2hhcnRzJztcblxuaW1wb3J0IE51bGxTdGF0ZU1lc3NhZ2UgZnJvbSAnbW9kdWxlcy9jb21tb24vY29tcG9uZW50cy9udWxsLXN0YXRlLW1lc3NhZ2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXJrZXRDaGFydCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgc2VyaWVzOiBQcm9wVHlwZXMuYXJyYXlcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBudWxsTWVzc2FnZTogJ05vIENvbXBsZXRlZCBUcmFkZXMnXG4gICAgfTtcbiAgfVxuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLnNlcmllcy5sZW5ndGggPT09IHRoaXMucHJvcHMuc2VyaWVzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgcCA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgcyA9IHRoaXMuc3RhdGU7XG5cbiAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICB0aXRsZToge1xuICAgICAgICB0ZXh0OiAnJ1xuICAgICAgfSxcbiAgICAgIHJhbmdlU2VsZWN0b3I6IHsgc2VsZWN0ZWQ6IDEgfSxcbiAgICAgIHhBeGlzOiB7XG4gICAgICAgIHR5cGU6ICdkYXRldGltZSdcbiAgICAgIH0sXG4gICAgICB5QXhpczoge1xuICAgICAgICB0aXRsZToge1xuICAgICAgICAgIHRleHQ6ICdwcmljZSdcbiAgICAgICAgfSxcbiAgICAgICAgbWluOiAwLFxuICAgICAgICBtYXg6IDFcbiAgICAgIH0sXG4gICAgICBsZWdlbmQ6IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgcG9pbnRGb3JtYXQ6ICc8c3BhbiBzdHlsZT1cImNvbG9yOntzZXJpZXMuY29sb3J9XCI+e3Nlcmllcy5uYW1lfTwvc3Bhbj46IDxiPntwb2ludC55fTwvYj48YnIvPicsXG4gICAgICAgIHZhbHVlRGVjaW1hbHM6IDJcbiAgICAgIH0sXG4gICAgICBzZXJpZXM6IHAuc2VyaWVzXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8YXJ0aWNsZSBjbGFzc05hbWU9XCJwcmljZS1oaXN0b3J5LWNoYXJ0IG1hcmtldC1jb250ZW50LXNjcm9sbGFibGVcIj5cbiAgICAgICAgeyFwLnNlcmllcyB8fCAhcC5zZXJpZXMubGVuZ3RoID9cbiAgICAgICAgICA8TnVsbFN0YXRlTWVzc2FnZSBtZXNzYWdlPXtzLm51bGxNZXNzYWdlfSAvPiA6XG4gICAgICAgICAgPFJlYWN0SGlnaGNoYXJ0cyBjb25maWc9e2NvbmZpZ30gLz5cbiAgICAgICAgfVxuICAgICAgPC9hcnRpY2xlPlxuICAgICk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL21hcmtldC9jb21wb25lbnRzL21hcmtldC1jaGFydC5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1293:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__market_header__ = __webpack_require__(1294);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_component_nav__ = __webpack_require__(1250);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__outcomes_components_outcomes__ = __webpack_require__(1317);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__order_book_components_order_book__ = __webpack_require__(1267);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__market_chart__ = __webpack_require__(1292);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__market_details__ = __webpack_require__(1265);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__reports_components_report_form__ = __webpack_require__(1321);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__reports_components_snitch_form__ = __webpack_require__(1322);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__app_constants_views__ = __webpack_require__(49);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar MarketData = function (_Component) {\n  _inherits(MarketData, _Component);\n\n  function MarketData(props) {\n    _classCallCheck(this, MarketData);\n\n    var _this = _possibleConstructorReturn(this, (MarketData.__proto__ || Object.getPrototypeOf(MarketData)).call(this, props));\n\n    _this.state = {\n      marketDataNavItems: props.marketDataNavItems,\n      selectedNav: props.isPendingReport ? __WEBPACK_IMPORTED_MODULE_9__app_constants_views__[\"n\" /* MARKET_DATA_NAV_REPORT */] : __WEBPACK_IMPORTED_MODULE_9__app_constants_views__[\"o\" /* MARKET_DATA_NAV_OUTCOMES */]\n    };\n\n    _this.updateSelectedNav = _this.updateSelectedNav.bind(_this);\n    _this.setMarketDataNavItems = _this.setMarketDataNavItems.bind(_this);\n    return _this;\n  }\n\n  _createClass(MarketData, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.setMarketDataNavItems();\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.isReportTabVisible !== nextProps.isReportTabVisible) {\n        this.setMarketDataNavItems();\n      }\n    }\n  }, {\n    key: 'setMarketDataNavItems',\n    value: function setMarketDataNavItems() {\n      var _this2 = this;\n\n      if (!this.props.isReportTabVisible) {\n        var marketDataNavItems = Object.keys(this.props.marketDataNavItems).reduce(function (prev, nav) {\n          if (_this2.props.marketDataNavItems[nav].isReportTabVisible !== true) {\n            prev[nav] = _this2.props.marketDataNavItems[nav];\n          }\n          return prev;\n        }, {});\n\n        this.setState({ marketDataNavItems: marketDataNavItems });\n      }\n    }\n  }, {\n    key: 'updateSelectedNav',\n    value: function updateSelectedNav(selectedNav) {\n      this.setState({ selectedNav: selectedNav });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var p = this.props;\n      var s = this.state;\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: 'market-data' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__market_header__[\"a\" /* default */], _extends({}, p.market, {\n          selectedShareDenomination: p.selectedShareDenomination,\n          shareDenominations: p.shareDenominations,\n          updateSelectedShareDenomination: p.updateSelectedShareDenomination\n        })),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_component_nav__[\"a\" /* default */], {\n          navItems: s.marketDataNavItems,\n          selectedNav: s.selectedNav,\n          updateSelectedNav: this.updateSelectedNav\n        }),\n        s.selectedNav === __WEBPACK_IMPORTED_MODULE_9__app_constants_views__[\"o\" /* MARKET_DATA_NAV_OUTCOMES */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__outcomes_components_outcomes__[\"a\" /* default */], {\n          marketType: p.marketType,\n          outcomes: p.market.outcomes,\n          selectedOutcome: p.selectedOutcome,\n          updateSelectedOutcome: p.updateSelectedOutcome,\n          selectedShareDenomination: p.selectedShareDenomination,\n          tradeSummary: p.tradeSummary,\n          submitTrade: p.submitTrade,\n          selectedTradeSide: p.selectedTradeSide,\n          updateSelectedTradeSide: p.updateSelectedTradeSide,\n          outcomeTradeNavItems: p.outcomeTradeNavItems,\n          updateTradeFromSelectedOrder: p.updateTradeFromSelectedOrder,\n          minLimitPrice: p.minLimitPrice,\n          maxLimitPrice: p.maxLimitPrice,\n          isTradeCommitLocked: p.isTradeCommitLocked\n        }),\n        s.selectedNav === __WEBPACK_IMPORTED_MODULE_9__app_constants_views__[\"p\" /* MARKET_DATA_ORDERS */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__order_book_components_order_book__[\"a\" /* default */], {\n          marketType: p.marketType,\n          outcome: p.selectedOutcome,\n          selectedTradeSide: p.selectedTradeSide,\n          updateTradeFromSelectedOrder: p.updateTradeFromSelectedOrder,\n          selectedShareDenomination: p.selectedShareDenomination\n        }),\n        s.selectedNav === __WEBPACK_IMPORTED_MODULE_9__app_constants_views__[\"q\" /* MARKET_DATA_NAV_CHARTS */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_5__market_chart__[\"a\" /* default */], { series: p.market.priceTimeSeries }),\n        s.selectedNav === __WEBPACK_IMPORTED_MODULE_9__app_constants_views__[\"r\" /* MARKET_DATA_NAV_DETAILS */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_6__market_details__[\"a\" /* default */], _extends({}, p.market, {\n          selectedShareDenomination: p.selectedShareDenomination,\n          shareDenominations: p.shareDenominations\n        })),\n        s.selectedNav === __WEBPACK_IMPORTED_MODULE_9__app_constants_views__[\"n\" /* MARKET_DATA_NAV_REPORT */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_7__reports_components_report_form__[\"a\" /* default */], _extends({}, p.market, {\n          branch: p.branch,\n          isReported: p.market.isReported || p.market.isReportSubmitted,\n          onClickSubmit: p.market.report.onSubmitReport\n        })),\n        s.selectedNav === __WEBPACK_IMPORTED_MODULE_9__app_constants_views__[\"s\" /* MARKET_DATA_NAV_SNITCH */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_8__reports_components_snitch_form__[\"a\" /* default */], {\n          type: p.market.type,\n          reportableOutcomes: p.market.reportableOutcomes,\n          branch: p.branch,\n          onSubmitSlashRep: p.market.onSubmitSlashRep\n        })\n      );\n    }\n  }]);\n\n  return MarketData;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nMarketData.propTypes = {\n  marketDataNavItems: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].object,\n  isReportTabVisible: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].bool,\n  isPendingReport: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].bool\n};\nvar _default = MarketData;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketData, 'MarketData', '/home/jack/src/augur/src/modules/market/components/market-data.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-data.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1294:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_components_dropdown__ = __webpack_require__(1254);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__market_properties__ = __webpack_require__(1243);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__ = __webpack_require__(28);\n\n\n\n\n\n\n\nvar MarketDataHeader = function MarketDataHeader(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'market-header' },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'market-header-info' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'h3',\n        null,\n        p.description\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__market_properties__[\"a\" /* default */], p)\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'market-header-actions' },\n      p.type === __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__[\"b\" /* SCALAR */] && p.selectedShareDenomination && !p.isPendingReport && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_dropdown__[\"a\" /* default */], {\n        'default': p.selectedShareDenomination,\n        options: p.shareDenominations,\n        onChange: function onChange(denomination) {\n          p.updateSelectedShareDenomination(p.id, denomination);\n        }\n      })\n    )\n  );\n};\n\nvar _default = MarketDataHeader;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketDataHeader, 'MarketDataHeader', '/home/jack/src/augur/src/modules/market/components/market-header.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-header.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtaGVhZGVyLmpzeD8xZGI4Il0sIm5hbWVzIjpbIk1hcmtldERhdGFIZWFkZXIiLCJwIiwiZGVzY3JpcHRpb24iLCJ0eXBlIiwic2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbiIsImlzUGVuZGluZ1JlcG9ydCIsInNoYXJlRGVub21pbmF0aW9ucyIsImRlbm9taW5hdGlvbiIsInVwZGF0ZVNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24iLCJpZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBLElBQU1BLG1CQUFtQixTQUFuQkEsZ0JBQW1CO0FBQUEsU0FDdkI7QUFBQTtBQUFBLE1BQVMsV0FBVSxlQUFuQjtBQUNFO0FBQUE7QUFBQSxRQUFLLFdBQVUsb0JBQWY7QUFDRTtBQUFBO0FBQUE7QUFBS0MsVUFBRUM7QUFBUCxPQURGO0FBRUUsa0VBQUMsbUVBQUQsRUFBc0JELENBQXRCO0FBRkYsS0FERjtBQUtFO0FBQUE7QUFBQSxRQUFLLFdBQVUsdUJBQWY7QUFDR0EsUUFBRUUsSUFBRixLQUFXLCtFQUFYLElBQXFCRixFQUFFRyx5QkFBdkIsSUFBb0QsQ0FBQ0gsRUFBRUksZUFBdkQsSUFDQyw0REFBQyw0RUFBRDtBQUNFLG1CQUFTSixFQUFFRyx5QkFEYjtBQUVFLGlCQUFTSCxFQUFFSyxrQkFGYjtBQUdFLGtCQUFVLGtCQUFDQyxZQUFELEVBQWtCO0FBQUVOLFlBQUVPLCtCQUFGLENBQWtDUCxFQUFFUSxFQUFwQyxFQUF3Q0YsWUFBeEM7QUFBd0Q7QUFIeEY7QUFGSjtBQUxGLEdBRHVCO0FBQUEsQ0FBekI7O2VBa0JlUCxnQjtBQUFmOzs7Ozs7OztnQ0FsQk1BLGdCIiwiZmlsZSI6IjEyOTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgRHJvcGRvd24gZnJvbSAnbW9kdWxlcy9jb21tb24vY29tcG9uZW50cy9kcm9wZG93bic7XG5pbXBvcnQgTWFya2V0UHJvcGVydGllcyBmcm9tICdtb2R1bGVzL21hcmtldC9jb21wb25lbnRzL21hcmtldC1wcm9wZXJ0aWVzJztcblxuaW1wb3J0IHsgU0NBTEFSIH0gZnJvbSAnbW9kdWxlcy9tYXJrZXRzL2NvbnN0YW50cy9tYXJrZXQtdHlwZXMnO1xuXG5jb25zdCBNYXJrZXREYXRhSGVhZGVyID0gcCA9PiAoXG4gIDxhcnRpY2xlIGNsYXNzTmFtZT1cIm1hcmtldC1oZWFkZXJcIj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1hcmtldC1oZWFkZXItaW5mb1wiPlxuICAgICAgPGgzPntwLmRlc2NyaXB0aW9ufTwvaDM+XG4gICAgICA8TWFya2V0UHJvcGVydGllcyB7Li4ucH0gLz5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1hcmtldC1oZWFkZXItYWN0aW9uc1wiPlxuICAgICAge3AudHlwZSA9PT0gU0NBTEFSICYmIHAuc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbiAmJiAhcC5pc1BlbmRpbmdSZXBvcnQgJiZcbiAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgZGVmYXVsdD17cC5zZWxlY3RlZFNoYXJlRGVub21pbmF0aW9ufVxuICAgICAgICAgIG9wdGlvbnM9e3Auc2hhcmVEZW5vbWluYXRpb25zfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZGVub21pbmF0aW9uKSA9PiB7IHAudXBkYXRlU2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbihwLmlkLCBkZW5vbWluYXRpb24pOyB9fVxuICAgICAgICAvPlxuICAgICAgfVxuICAgIDwvZGl2PlxuICA8L2FydGljbGU+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBNYXJrZXREYXRhSGVhZGVyO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LWhlYWRlci5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1295:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__market_open_orders_row__ = __webpack_require__(1296);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\nvar MarketOpenOrdersGroup = function MarketOpenOrdersGroup(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'market-open-orders-group' },\n    (p.userOpenOrders || []).map(function (order, i) {\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__market_open_orders_row__[\"a\" /* default */], _extends({\n        key: order.id,\n        isFirst: i === 0\n      }, order, {\n        name: p.name,\n        marketType: p.marketType,\n        lastPricePercent: p.lastPricePercent,\n        status: p.orderCancellation[order.id],\n        cancellationStatuses: p.orderCancellation.cancellationStatuses,\n        cancelOrder: p.orderCancellation.cancelOrder,\n        abortCancelOrderConfirmation: p.orderCancellation.abortCancelOrderConfirmation,\n        showCancelOrderConfirmation: p.orderCancellation.showCancelOrderConfirmation,\n        selectedShareDenomination: p.selectedShareDenomination\n      }));\n    })\n  );\n};\n\nvar _default = MarketOpenOrdersGroup;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketOpenOrdersGroup, 'MarketOpenOrdersGroup', '/home/jack/src/augur/src/modules/market/components/market-open-orders-group.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-open-orders-group.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtb3Blbi1vcmRlcnMtZ3JvdXAuanN4PzQwMzYiXSwibmFtZXMiOlsiTWFya2V0T3Blbk9yZGVyc0dyb3VwIiwicCIsInVzZXJPcGVuT3JkZXJzIiwibWFwIiwib3JkZXIiLCJpIiwiaWQiLCJuYW1lIiwibWFya2V0VHlwZSIsImxhc3RQcmljZVBlcmNlbnQiLCJvcmRlckNhbmNlbGxhdGlvbiIsImNhbmNlbGxhdGlvblN0YXR1c2VzIiwiY2FuY2VsT3JkZXIiLCJhYm9ydENhbmNlbE9yZGVyQ29uZmlybWF0aW9uIiwic2hvd0NhbmNlbE9yZGVyQ29uZmlybWF0aW9uIiwic2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFFQTs7QUFFQSxJQUFNQSx3QkFBd0IsU0FBeEJBLHFCQUF3QjtBQUFBLFNBQzVCO0FBQUE7QUFBQSxNQUFTLFdBQVUsMEJBQW5CO0FBQ0csS0FBQ0MsRUFBRUMsY0FBRixJQUFvQixFQUFyQixFQUF5QkMsR0FBekIsQ0FBNkIsVUFBQ0MsS0FBRCxFQUFRQyxDQUFSO0FBQUEsYUFDNUIsNERBQUMsd0VBQUQ7QUFDRSxhQUFLRCxNQUFNRSxFQURiO0FBRUUsaUJBQVNELE1BQU07QUFGakIsU0FHTUQsS0FITjtBQUlFLGNBQU1ILEVBQUVNLElBSlY7QUFLRSxvQkFBWU4sRUFBRU8sVUFMaEI7QUFNRSwwQkFBa0JQLEVBQUVRLGdCQU50QjtBQU9FLGdCQUFRUixFQUFFUyxpQkFBRixDQUFvQk4sTUFBTUUsRUFBMUIsQ0FQVjtBQVFFLDhCQUFzQkwsRUFBRVMsaUJBQUYsQ0FBb0JDLG9CQVI1QztBQVNFLHFCQUFhVixFQUFFUyxpQkFBRixDQUFvQkUsV0FUbkM7QUFVRSxzQ0FBOEJYLEVBQUVTLGlCQUFGLENBQW9CRyw0QkFWcEQ7QUFXRSxxQ0FBNkJaLEVBQUVTLGlCQUFGLENBQW9CSSwyQkFYbkQ7QUFZRSxtQ0FBMkJiLEVBQUVjO0FBWi9CLFNBRDRCO0FBQUEsS0FBN0I7QUFESCxHQUQ0QjtBQUFBLENBQTlCOztlQXFCZWYscUI7QUFBZjs7Ozs7Ozs7Z0NBckJNQSxxQiIsImZpbGUiOiIxMjk1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IE1hcmtldE9wZW5PcmRlcnNSb3cgZnJvbSAnbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtb3Blbi1vcmRlcnMtcm93JztcblxuY29uc3QgTWFya2V0T3Blbk9yZGVyc0dyb3VwID0gcCA9PiAoXG4gIDxhcnRpY2xlIGNsYXNzTmFtZT1cIm1hcmtldC1vcGVuLW9yZGVycy1ncm91cFwiPlxuICAgIHsocC51c2VyT3Blbk9yZGVycyB8fCBbXSkubWFwKChvcmRlciwgaSkgPT4gKFxuICAgICAgPE1hcmtldE9wZW5PcmRlcnNSb3dcbiAgICAgICAga2V5PXtvcmRlci5pZH1cbiAgICAgICAgaXNGaXJzdD17aSA9PT0gMH1cbiAgICAgICAgey4uLm9yZGVyfVxuICAgICAgICBuYW1lPXtwLm5hbWV9XG4gICAgICAgIG1hcmtldFR5cGU9e3AubWFya2V0VHlwZX1cbiAgICAgICAgbGFzdFByaWNlUGVyY2VudD17cC5sYXN0UHJpY2VQZXJjZW50fVxuICAgICAgICBzdGF0dXM9e3Aub3JkZXJDYW5jZWxsYXRpb25bb3JkZXIuaWRdfVxuICAgICAgICBjYW5jZWxsYXRpb25TdGF0dXNlcz17cC5vcmRlckNhbmNlbGxhdGlvbi5jYW5jZWxsYXRpb25TdGF0dXNlc31cbiAgICAgICAgY2FuY2VsT3JkZXI9e3Aub3JkZXJDYW5jZWxsYXRpb24uY2FuY2VsT3JkZXJ9XG4gICAgICAgIGFib3J0Q2FuY2VsT3JkZXJDb25maXJtYXRpb249e3Aub3JkZXJDYW5jZWxsYXRpb24uYWJvcnRDYW5jZWxPcmRlckNvbmZpcm1hdGlvbn1cbiAgICAgICAgc2hvd0NhbmNlbE9yZGVyQ29uZmlybWF0aW9uPXtwLm9yZGVyQ2FuY2VsbGF0aW9uLnNob3dDYW5jZWxPcmRlckNvbmZpcm1hdGlvbn1cbiAgICAgICAgc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbj17cC5zZWxlY3RlZFNoYXJlRGVub21pbmF0aW9ufVxuICAgICAgLz5cbiAgICApKX1cbiAgPC9hcnRpY2xlPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgTWFya2V0T3Blbk9yZGVyc0dyb3VwO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LW9wZW4tb3JkZXJzLWdyb3VwLmpzeCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 1296:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__ = __webpack_require__(602);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__market_trade_close_dialog__ = __webpack_require__(1266);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__constants_trade_close_type__ = __webpack_require__(1258);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_get_value__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_set_share_denomination__ = __webpack_require__(1240);\n\n\n\n\n\n\n\n\n\n\n\nvar MarketOpenOrdersRow = function MarketOpenOrdersRow(p) {\n  var unmatchedShares = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils_set_share_denomination__[\"a\" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'unmatchedShares.formatted'), p.selectedShareDenomination);\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'market-open-orders-row not-selectable ' + (p.isFirst ? 'isFirst' : '') },\n    p.isFirst ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'span',\n      null,\n      p.marketType === __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__[\"b\" /* SCALAR */] ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: p.lastPricePercent }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        null,\n        p.name\n      )\n    ) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('span', null),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'span',\n      null,\n      p.type\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: unmatchedShares }),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], p.avgPrice),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__market_trade_close_dialog__[\"a\" /* default */], {\n      closeType: __WEBPACK_IMPORTED_MODULE_4__constants_trade_close_type__[\"b\" /* ORDER */],\n      marketID: p.marketID,\n      orderID: p.id,\n      status: p.status,\n      orderType: p.type,\n      cancelOrder: p.cancelOrder\n    })\n  );\n};\n\nvar _default = MarketOpenOrdersRow;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketOpenOrdersRow, 'MarketOpenOrdersRow', '/home/jack/src/augur/src/modules/market/components/market-open-orders-row.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-open-orders-row.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtb3Blbi1vcmRlcnMtcm93LmpzeD85Mjg0Il0sIm5hbWVzIjpbIk1hcmtldE9wZW5PcmRlcnNSb3ciLCJwIiwidW5tYXRjaGVkU2hhcmVzIiwic2V0U2hhcmVEZW5vbWluYXRpb24iLCJnZXRWYWx1ZSIsInNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24iLCJpc0ZpcnN0IiwibWFya2V0VHlwZSIsImxhc3RQcmljZVBlcmNlbnQiLCJuYW1lIiwidHlwZSIsImF2Z1ByaWNlIiwibWFya2V0SUQiLCJpZCIsInN0YXR1cyIsImNhbmNlbE9yZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLElBQU1BLHNCQUFzQixTQUF0QkEsbUJBQXNCLENBQUNDLENBQUQsRUFBTztBQUNqQyxNQUFNQyxrQkFBa0IscUdBQUFDLENBQXFCLHdGQUFBQyxDQUFTSCxDQUFULEVBQVksMkJBQVosQ0FBckIsRUFBK0RBLEVBQUVJLHlCQUFqRSxDQUF4Qjs7QUFFQSxTQUNFO0FBQUE7QUFBQSxNQUFTLHVEQUFvREosRUFBRUssT0FBRixHQUFZLFNBQVosR0FBd0IsRUFBNUUsQ0FBVDtBQUNHTCxNQUFFSyxPQUFGLEdBQ0M7QUFBQTtBQUFBO0FBQ0dMLFFBQUVNLFVBQUYsS0FBaUIsK0VBQWpCLEdBQ0MsNERBQUMsc0ZBQUQsSUFBbUIsV0FBV04sRUFBRU8sZ0JBQWhDLEdBREQsR0FFQztBQUFBO0FBQUE7QUFBT1AsVUFBRVE7QUFBVDtBQUhKLEtBREQsR0FPQyx5RUFSSjtBQVVFO0FBQUE7QUFBQTtBQUFPUixRQUFFUztBQUFULEtBVkY7QUFXRSxnRUFBQyxzRkFBRCxJQUFtQixXQUFXUixlQUE5QixHQVhGO0FBWUUsZ0VBQUMsc0ZBQUQsRUFBdUJELEVBQUVVLFFBQXpCLENBWkY7QUFhRSxnRUFBQywyRUFBRDtBQUNFLGlCQUFXLDBFQURiO0FBRUUsZ0JBQVVWLEVBQUVXLFFBRmQ7QUFHRSxlQUFTWCxFQUFFWSxFQUhiO0FBSUUsY0FBUVosRUFBRWEsTUFKWjtBQUtFLGlCQUFXYixFQUFFUyxJQUxmO0FBTUUsbUJBQWFULEVBQUVjO0FBTmpCO0FBYkYsR0FERjtBQXdCRCxDQTNCRDs7ZUE2QmVmLG1CO0FBQWY7Ozs7Ozs7O2dDQTdCTUEsbUIiLCJmaWxlIjoiMTI5Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBWYWx1ZURlbm9taW5hdGlvbiBmcm9tICdtb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL3ZhbHVlLWRlbm9taW5hdGlvbic7XG5pbXBvcnQgTWFya2V0VHJhZGVDbG9zZURpYWxvZyBmcm9tICdtb2R1bGVzL21hcmtldC9jb21wb25lbnRzL21hcmtldC10cmFkZS1jbG9zZS1kaWFsb2cnO1xuXG5pbXBvcnQgeyBTQ0FMQVIgfSBmcm9tICdtb2R1bGVzL21hcmtldHMvY29uc3RhbnRzL21hcmtldC10eXBlcyc7XG5pbXBvcnQgeyBPUkRFUiB9IGZyb20gJ21vZHVsZXMvbWFya2V0L2NvbnN0YW50cy90cmFkZS1jbG9zZS10eXBlJztcblxuaW1wb3J0IGdldFZhbHVlIGZyb20gJ3V0aWxzL2dldC12YWx1ZSc7XG5pbXBvcnQgc2V0U2hhcmVEZW5vbWluYXRpb24gZnJvbSAndXRpbHMvc2V0LXNoYXJlLWRlbm9taW5hdGlvbic7XG5cbmNvbnN0IE1hcmtldE9wZW5PcmRlcnNSb3cgPSAocCkgPT4ge1xuICBjb25zdCB1bm1hdGNoZWRTaGFyZXMgPSBzZXRTaGFyZURlbm9taW5hdGlvbihnZXRWYWx1ZShwLCAndW5tYXRjaGVkU2hhcmVzLmZvcm1hdHRlZCcpLCBwLnNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24pO1xuXG4gIHJldHVybiAoXG4gICAgPGFydGljbGUgY2xhc3NOYW1lPXtgbWFya2V0LW9wZW4tb3JkZXJzLXJvdyBub3Qtc2VsZWN0YWJsZSAke3AuaXNGaXJzdCA/ICdpc0ZpcnN0JyA6ICcnfWB9ID5cbiAgICAgIHtwLmlzRmlyc3QgP1xuICAgICAgICA8c3Bhbj5cbiAgICAgICAgICB7cC5tYXJrZXRUeXBlID09PSBTQ0FMQVIgP1xuICAgICAgICAgICAgPFZhbHVlRGVub21pbmF0aW9uIGZvcm1hdHRlZD17cC5sYXN0UHJpY2VQZXJjZW50fSAvPiA6XG4gICAgICAgICAgICA8c3Bhbj57cC5uYW1lfTwvc3Bhbj5cbiAgICAgICAgICB9XG4gICAgICAgIDwvc3Bhbj4gOlxuICAgICAgICA8c3BhbiAvPlxuICAgICAgfVxuICAgICAgPHNwYW4+e3AudHlwZX08L3NwYW4+XG4gICAgICA8VmFsdWVEZW5vbWluYXRpb24gZm9ybWF0dGVkPXt1bm1hdGNoZWRTaGFyZXN9IC8+XG4gICAgICA8VmFsdWVEZW5vbWluYXRpb24gey4uLnAuYXZnUHJpY2V9IC8+XG4gICAgICA8TWFya2V0VHJhZGVDbG9zZURpYWxvZ1xuICAgICAgICBjbG9zZVR5cGU9e09SREVSfVxuICAgICAgICBtYXJrZXRJRD17cC5tYXJrZXRJRH1cbiAgICAgICAgb3JkZXJJRD17cC5pZH1cbiAgICAgICAgc3RhdHVzPXtwLnN0YXR1c31cbiAgICAgICAgb3JkZXJUeXBlPXtwLnR5cGV9XG4gICAgICAgIGNhbmNlbE9yZGVyPXtwLmNhbmNlbE9yZGVyfVxuICAgICAgLz5cbiAgICA8L2FydGljbGU+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNYXJrZXRPcGVuT3JkZXJzUm93O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LW9wZW4tb3JkZXJzLXJvdy5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1297:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__market_open_orders_group__ = __webpack_require__(1295);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_null_state_message__ = __webpack_require__(604);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_get_value__ = __webpack_require__(78);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\n\n\n\nvar MarketOpenOrders = function (_Component) {\n  _inherits(MarketOpenOrders, _Component);\n\n  function MarketOpenOrders(props) {\n    _classCallCheck(this, MarketOpenOrders);\n\n    var _this = _possibleConstructorReturn(this, (MarketOpenOrders.__proto__ || Object.getPrototypeOf(MarketOpenOrders)).call(this, props));\n\n    _this.state = {\n      nullMessage: 'No Current Open Orders',\n      hasOrders: false\n    };\n\n    _this.updateHasOrders = _this.updateHasOrders.bind(_this);\n    return _this;\n  }\n\n  _createClass(MarketOpenOrders, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.updateHasOrders(this.props);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      this.updateHasOrders(nextProps);\n    }\n  }, {\n    key: 'updateHasOrders',\n    value: function updateHasOrders(props) {\n      this.setState({ hasOrders: !!(props.outcomes || []).find(function (outcome) {\n          return outcome.userOpenOrders && outcome.userOpenOrders.length;\n        }) });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var p = this.props;\n      var s = this.state;\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: 'market-open-orders' },\n        !s.hasOrders ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_null_state_message__[\"a\" /* default */], { message: s.nullMessage }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          null,\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'div',\n            { className: 'market-open-orders-header' },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'span',\n              null,\n              !p.marketType === __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__[\"b\" /* SCALAR */] ? 'Outcomes' : 'Outcome'\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'span',\n              null,\n              'Type'\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'span',\n              null,\n              'Shares'\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'span',\n              null,\n              'Price'\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'span',\n              null,\n              'Action'\n            )\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'div',\n            { className: 'market-content-scrollable' },\n            (p.outcomes || []).map(function (outcome, index) {\n              var lastPricePercent = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_get_value__[\"a\" /* default */])(outcome, 'lastPricePercent.rounded');\n\n              return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__market_open_orders_group__[\"a\" /* default */], {\n                key: outcome.name,\n                id: outcome.id,\n                name: outcome.name,\n                marketType: p.marketType,\n                lastPricePercent: lastPricePercent,\n                userOpenOrders: outcome.userOpenOrders,\n                orderCancellation: p.orderCancellation,\n                selectedShareDenomination: p.selectedShareDenomination\n              });\n            })\n          )\n        )\n      );\n    }\n  }]);\n\n  return MarketOpenOrders;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nvar _default = MarketOpenOrders;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketOpenOrders, 'MarketOpenOrders', '/home/jack/src/augur/src/modules/market/components/market-open-orders.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-open-orders.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtb3Blbi1vcmRlcnMuanN4PzE5ODMiXSwibmFtZXMiOlsiTWFya2V0T3Blbk9yZGVycyIsInByb3BzIiwic3RhdGUiLCJudWxsTWVzc2FnZSIsImhhc09yZGVycyIsInVwZGF0ZUhhc09yZGVycyIsImJpbmQiLCJuZXh0UHJvcHMiLCJzZXRTdGF0ZSIsIm91dGNvbWVzIiwiZmluZCIsIm91dGNvbWUiLCJ1c2VyT3Blbk9yZGVycyIsImxlbmd0aCIsInAiLCJzIiwibWFya2V0VHlwZSIsIm1hcCIsImluZGV4IiwibGFzdFByaWNlUGVyY2VudCIsImdldFZhbHVlIiwibmFtZSIsImlkIiwib3JkZXJDYW5jZWxsYXRpb24iLCJzZWxlY3RlZFNoYXJlRGVub21pbmF0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0lBRXFCQSxnQjs7O0FBQ25CLDRCQUFZQyxLQUFaLEVBQW1CO0FBQUE7O0FBQUEsb0lBQ1hBLEtBRFc7O0FBR2pCLFVBQUtDLEtBQUwsR0FBYTtBQUNYQyxtQkFBYSx3QkFERjtBQUVYQyxpQkFBVztBQUZBLEtBQWI7O0FBS0EsVUFBS0MsZUFBTCxHQUF1QixNQUFLQSxlQUFMLENBQXFCQyxJQUFyQixPQUF2QjtBQVJpQjtBQVNsQjs7Ozt5Q0FFb0I7QUFDbkIsV0FBS0QsZUFBTCxDQUFxQixLQUFLSixLQUExQjtBQUNEOzs7OENBRXlCTSxTLEVBQVc7QUFDbkMsV0FBS0YsZUFBTCxDQUFxQkUsU0FBckI7QUFDRDs7O29DQUVlTixLLEVBQU87QUFDckIsV0FBS08sUUFBTCxDQUFjLEVBQUVKLFdBQVcsQ0FBQyxDQUFDLENBQUNILE1BQU1RLFFBQU4sSUFBa0IsRUFBbkIsRUFBdUJDLElBQXZCLENBQTRCO0FBQUEsaUJBQVdDLFFBQVFDLGNBQVIsSUFBMEJELFFBQVFDLGNBQVIsQ0FBdUJDLE1BQTVEO0FBQUEsU0FBNUIsQ0FBZixFQUFkO0FBQ0Q7Ozs2QkFFUTtBQUNQLFVBQU1DLElBQUksS0FBS2IsS0FBZjtBQUNBLFVBQU1jLElBQUksS0FBS2IsS0FBZjs7QUFFQSxhQUNFO0FBQUE7QUFBQSxVQUFTLFdBQVUsb0JBQW5CO0FBQ0csU0FBQ2EsRUFBRVgsU0FBSCxHQUNDLDREQUFDLHNGQUFELElBQWtCLFNBQVNXLEVBQUVaLFdBQTdCLEdBREQsR0FFQztBQUFBO0FBQUE7QUFDRTtBQUFBO0FBQUEsY0FBSyxXQUFVLDJCQUFmO0FBQ0U7QUFBQTtBQUFBO0FBQU8sZUFBQ1csRUFBRUUsVUFBSCxLQUFrQiwrRUFBbEIsR0FBMkIsVUFBM0IsR0FBd0M7QUFBL0MsYUFERjtBQUVFO0FBQUE7QUFBQTtBQUFBO0FBQUEsYUFGRjtBQUdFO0FBQUE7QUFBQTtBQUFBO0FBQUEsYUFIRjtBQUlFO0FBQUE7QUFBQTtBQUFBO0FBQUEsYUFKRjtBQUtFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFMRixXQURGO0FBUUU7QUFBQTtBQUFBLGNBQUssV0FBVSwyQkFBZjtBQUNHLGFBQUNGLEVBQUVMLFFBQUYsSUFBYyxFQUFmLEVBQW1CUSxHQUFuQixDQUF1QixVQUFDTixPQUFELEVBQVVPLEtBQVYsRUFBb0I7QUFDMUMsa0JBQU1DLG1CQUFtQix3RkFBQUMsQ0FBU1QsT0FBVCxFQUFrQiwwQkFBbEIsQ0FBekI7O0FBRUEscUJBQ0UsNERBQUMsMEVBQUQ7QUFDRSxxQkFBS0EsUUFBUVUsSUFEZjtBQUVFLG9CQUFJVixRQUFRVyxFQUZkO0FBR0Usc0JBQU1YLFFBQVFVLElBSGhCO0FBSUUsNEJBQVlQLEVBQUVFLFVBSmhCO0FBS0Usa0NBQWtCRyxnQkFMcEI7QUFNRSxnQ0FBZ0JSLFFBQVFDLGNBTjFCO0FBT0UsbUNBQW1CRSxFQUFFUyxpQkFQdkI7QUFRRSwyQ0FBMkJULEVBQUVVO0FBUi9CLGdCQURGO0FBWUQsYUFmQTtBQURIO0FBUkY7QUFISixPQURGO0FBa0NEOzs7O0VBOUQyQyxnRDs7ZUFBekJ4QixnQjs7Ozs7Ozs7O2dDQUFBQSxnQiIsImZpbGUiOiIxMjk3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IE1hcmtldE9wZW5PcmRlcnNHcm91cCBmcm9tICdtb2R1bGVzL21hcmtldC9jb21wb25lbnRzL21hcmtldC1vcGVuLW9yZGVycy1ncm91cCc7XG5pbXBvcnQgTnVsbFN0YXRlTWVzc2FnZSBmcm9tICdtb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL251bGwtc3RhdGUtbWVzc2FnZSc7XG5cbmltcG9ydCB7IFNDQUxBUiB9IGZyb20gJ21vZHVsZXMvbWFya2V0cy9jb25zdGFudHMvbWFya2V0LXR5cGVzJztcblxuaW1wb3J0IGdldFZhbHVlIGZyb20gJ3V0aWxzL2dldC12YWx1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hcmtldE9wZW5PcmRlcnMgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBudWxsTWVzc2FnZTogJ05vIEN1cnJlbnQgT3BlbiBPcmRlcnMnLFxuICAgICAgaGFzT3JkZXJzOiBmYWxzZVxuICAgIH07XG5cbiAgICB0aGlzLnVwZGF0ZUhhc09yZGVycyA9IHRoaXMudXBkYXRlSGFzT3JkZXJzLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVIYXNPcmRlcnModGhpcy5wcm9wcyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHRoaXMudXBkYXRlSGFzT3JkZXJzKG5leHRQcm9wcyk7XG4gIH1cblxuICB1cGRhdGVIYXNPcmRlcnMocHJvcHMpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaGFzT3JkZXJzOiAhIShwcm9wcy5vdXRjb21lcyB8fCBbXSkuZmluZChvdXRjb21lID0+IG91dGNvbWUudXNlck9wZW5PcmRlcnMgJiYgb3V0Y29tZS51c2VyT3Blbk9yZGVycy5sZW5ndGgpIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHAgPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHMgPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxhcnRpY2xlIGNsYXNzTmFtZT1cIm1hcmtldC1vcGVuLW9yZGVyc1wiPlxuICAgICAgICB7IXMuaGFzT3JkZXJzID9cbiAgICAgICAgICA8TnVsbFN0YXRlTWVzc2FnZSBtZXNzYWdlPXtzLm51bGxNZXNzYWdlfSAvPiA6XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFya2V0LW9wZW4tb3JkZXJzLWhlYWRlclwiPlxuICAgICAgICAgICAgICA8c3Bhbj57IXAubWFya2V0VHlwZSA9PT0gU0NBTEFSID8gJ091dGNvbWVzJyA6ICdPdXRjb21lJ308L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuPlR5cGU8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuPlNoYXJlczwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4+UHJpY2U8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuPkFjdGlvbjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYXJrZXQtY29udGVudC1zY3JvbGxhYmxlXCIgPlxuICAgICAgICAgICAgICB7KHAub3V0Y29tZXMgfHwgW10pLm1hcCgob3V0Y29tZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0UHJpY2VQZXJjZW50ID0gZ2V0VmFsdWUob3V0Y29tZSwgJ2xhc3RQcmljZVBlcmNlbnQucm91bmRlZCcpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIDxNYXJrZXRPcGVuT3JkZXJzR3JvdXBcbiAgICAgICAgICAgICAgICAgICAga2V5PXtvdXRjb21lLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgIGlkPXtvdXRjb21lLmlkfVxuICAgICAgICAgICAgICAgICAgICBuYW1lPXtvdXRjb21lLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgIG1hcmtldFR5cGU9e3AubWFya2V0VHlwZX1cbiAgICAgICAgICAgICAgICAgICAgbGFzdFByaWNlUGVyY2VudD17bGFzdFByaWNlUGVyY2VudH1cbiAgICAgICAgICAgICAgICAgICAgdXNlck9wZW5PcmRlcnM9e291dGNvbWUudXNlck9wZW5PcmRlcnN9XG4gICAgICAgICAgICAgICAgICAgIG9yZGVyQ2FuY2VsbGF0aW9uPXtwLm9yZGVyQ2FuY2VsbGF0aW9ufVxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFNoYXJlRGVub21pbmF0aW9uPXtwLnNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb259XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIH1cbiAgICAgIDwvYXJ0aWNsZT5cbiAgICApO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtb3Blbi1vcmRlcnMuanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1298:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__ = __webpack_require__(602);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__market_trade_close_dialog__ = __webpack_require__(1266);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__constants_trade_close_type__ = __webpack_require__(1258);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_get_value__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_set_share_denomination__ = __webpack_require__(1240);\n\n\n\n\n\n\n\n\n\n\n\nvar MarketPositionsRow = function MarketPositionsRow(p) {\n  var marketID = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.marketID');\n  var outcomeID = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.id');\n  var quantityOfShares = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils_set_share_denomination__[\"a\" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.position.qtyShares.formatted'), p.selectedShareDenomination);\n  var outcomeName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.name');\n  var lastPricePercent = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.lastPricePercent.rounded');\n  var purchasePrice = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.position.purchasePrice.formatted');\n  var lastPrice = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.lastPrice.formatted');\n  var realizedNet = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.position.realizedNet.formatted');\n  var unrealizedNet = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.position.unrealizedNet.formatted');\n  var totalNet = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.position.totalNet.formatted');\n\n  var isClosable = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.position.isClosable');\n  var isFullyClosable = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.position.isFullyClosable');\n  var closePosition = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.position.closePosition');\n\n  var status = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'closePositionStatus.' + marketID + '.' + outcomeID);\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'market-positions-row not-selectable' },\n    p.marketType === __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__[\"b\" /* SCALAR */] ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: lastPricePercent }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'span',\n      null,\n      outcomeName\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: quantityOfShares }),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: purchasePrice }),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: lastPrice }),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: realizedNet }),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: unrealizedNet }),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: totalNet }),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__market_trade_close_dialog__[\"a\" /* default */], {\n      closeType: __WEBPACK_IMPORTED_MODULE_4__constants_trade_close_type__[\"a\" /* POSITION */],\n      marketID: marketID,\n      outcomeID: outcomeID,\n      quantityOfShares: quantityOfShares,\n      closePosition: closePosition,\n      isClosable: isClosable,\n      isFullyClosable: isFullyClosable,\n      status: status,\n      isTradeCommitLocked: p.isTradeCommitLocked\n    })\n  );\n};\n\nvar _default = MarketPositionsRow;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketPositionsRow, 'MarketPositionsRow', '/home/jack/src/augur/src/modules/market/components/market-positions-row.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-positions-row.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtcG9zaXRpb25zLXJvdy5qc3g/NzM1MCJdLCJuYW1lcyI6WyJNYXJrZXRQb3NpdGlvbnNSb3ciLCJwIiwibWFya2V0SUQiLCJnZXRWYWx1ZSIsIm91dGNvbWVJRCIsInF1YW50aXR5T2ZTaGFyZXMiLCJzZXRTaGFyZURlbm9taW5hdGlvbiIsInNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24iLCJvdXRjb21lTmFtZSIsImxhc3RQcmljZVBlcmNlbnQiLCJwdXJjaGFzZVByaWNlIiwibGFzdFByaWNlIiwicmVhbGl6ZWROZXQiLCJ1bnJlYWxpemVkTmV0IiwidG90YWxOZXQiLCJpc0Nsb3NhYmxlIiwiaXNGdWxseUNsb3NhYmxlIiwiY2xvc2VQb3NpdGlvbiIsInN0YXR1cyIsIm1hcmtldFR5cGUiLCJpc1RyYWRlQ29tbWl0TG9ja2VkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLElBQU1BLHFCQUFxQixTQUFyQkEsa0JBQXFCLENBQUNDLENBQUQsRUFBTztBQUNoQyxNQUFNQyxXQUFXLHdGQUFBQyxDQUFTRixDQUFULEVBQVksa0JBQVosQ0FBakI7QUFDQSxNQUFNRyxZQUFZLHdGQUFBRCxDQUFTRixDQUFULEVBQVksWUFBWixDQUFsQjtBQUNBLE1BQU1JLG1CQUFtQixxR0FBQUMsQ0FBcUIsd0ZBQUFILENBQVNGLENBQVQsRUFBWSxzQ0FBWixDQUFyQixFQUEwRUEsRUFBRU0seUJBQTVFLENBQXpCO0FBQ0EsTUFBTUMsY0FBYyx3RkFBQUwsQ0FBU0YsQ0FBVCxFQUFZLGNBQVosQ0FBcEI7QUFDQSxNQUFNUSxtQkFBbUIsd0ZBQUFOLENBQVNGLENBQVQsRUFBWSxrQ0FBWixDQUF6QjtBQUNBLE1BQU1TLGdCQUFnQix3RkFBQVAsQ0FBU0YsQ0FBVCxFQUFZLDBDQUFaLENBQXRCO0FBQ0EsTUFBTVUsWUFBWSx3RkFBQVIsQ0FBU0YsQ0FBVCxFQUFZLDZCQUFaLENBQWxCO0FBQ0EsTUFBTVcsY0FBYyx3RkFBQVQsQ0FBU0YsQ0FBVCxFQUFZLHdDQUFaLENBQXBCO0FBQ0EsTUFBTVksZ0JBQWdCLHdGQUFBVixDQUFTRixDQUFULEVBQVksMENBQVosQ0FBdEI7QUFDQSxNQUFNYSxXQUFXLHdGQUFBWCxDQUFTRixDQUFULEVBQVkscUNBQVosQ0FBakI7O0FBRUEsTUFBTWMsYUFBYSx3RkFBQVosQ0FBU0YsQ0FBVCxFQUFZLDZCQUFaLENBQW5CO0FBQ0EsTUFBTWUsa0JBQWtCLHdGQUFBYixDQUFTRixDQUFULEVBQVksa0NBQVosQ0FBeEI7QUFDQSxNQUFNZ0IsZ0JBQWdCLHdGQUFBZCxDQUFTRixDQUFULEVBQVksZ0NBQVosQ0FBdEI7O0FBRUEsTUFBTWlCLFNBQVMsd0ZBQUFmLENBQVNGLENBQVQsMkJBQW1DQyxRQUFuQyxTQUErQ0UsU0FBL0MsQ0FBZjs7QUFFQSxTQUNFO0FBQUE7QUFBQSxNQUFTLFdBQVUscUNBQW5CO0FBQ0dILE1BQUVrQixVQUFGLEtBQWlCLCtFQUFqQixHQUNDLDREQUFDLHNGQUFELElBQW1CLFdBQVdWLGdCQUE5QixHQURELEdBRUM7QUFBQTtBQUFBO0FBQU9EO0FBQVAsS0FISjtBQUtFLGdFQUFDLHNGQUFELElBQW1CLFdBQVdILGdCQUE5QixHQUxGO0FBTUUsZ0VBQUMsc0ZBQUQsSUFBbUIsV0FBV0ssYUFBOUIsR0FORjtBQU9FLGdFQUFDLHNGQUFELElBQW1CLFdBQVdDLFNBQTlCLEdBUEY7QUFRRSxnRUFBQyxzRkFBRCxJQUFtQixXQUFXQyxXQUE5QixHQVJGO0FBU0UsZ0VBQUMsc0ZBQUQsSUFBbUIsV0FBV0MsYUFBOUIsR0FURjtBQVVFLGdFQUFDLHNGQUFELElBQW1CLFdBQVdDLFFBQTlCLEdBVkY7QUFXRSxnRUFBQywyRUFBRDtBQUNFLGlCQUFXLDZFQURiO0FBRUUsZ0JBQVVaLFFBRlo7QUFHRSxpQkFBV0UsU0FIYjtBQUlFLHdCQUFrQkMsZ0JBSnBCO0FBS0UscUJBQWVZLGFBTGpCO0FBTUUsa0JBQVlGLFVBTmQ7QUFPRSx1QkFBaUJDLGVBUG5CO0FBUUUsY0FBUUUsTUFSVjtBQVNFLDJCQUFxQmpCLEVBQUVtQjtBQVR6QjtBQVhGLEdBREY7QUF5QkQsQ0EzQ0Q7O2VBNkNlcEIsa0I7QUFBZjs7Ozs7Ozs7Z0NBN0NNQSxrQiIsImZpbGUiOiIxMjk4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IFZhbHVlRGVub21pbmF0aW9uIGZyb20gJ21vZHVsZXMvY29tbW9uL2NvbXBvbmVudHMvdmFsdWUtZGVub21pbmF0aW9uJztcbmltcG9ydCBNYXJrZXRUcmFkZUNsb3NlRGlhbG9nIGZyb20gJ21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LXRyYWRlLWNsb3NlLWRpYWxvZyc7XG5cbmltcG9ydCB7IFNDQUxBUiB9IGZyb20gJ21vZHVsZXMvbWFya2V0cy9jb25zdGFudHMvbWFya2V0LXR5cGVzJztcbmltcG9ydCB7IFBPU0lUSU9OIH0gZnJvbSAnbW9kdWxlcy9tYXJrZXQvY29uc3RhbnRzL3RyYWRlLWNsb3NlLXR5cGUnO1xuXG5pbXBvcnQgZ2V0VmFsdWUgZnJvbSAndXRpbHMvZ2V0LXZhbHVlJztcbmltcG9ydCBzZXRTaGFyZURlbm9taW5hdGlvbiBmcm9tICd1dGlscy9zZXQtc2hhcmUtZGVub21pbmF0aW9uJztcblxuY29uc3QgTWFya2V0UG9zaXRpb25zUm93ID0gKHApID0+IHtcbiAgY29uc3QgbWFya2V0SUQgPSBnZXRWYWx1ZShwLCAnb3V0Y29tZS5tYXJrZXRJRCcpO1xuICBjb25zdCBvdXRjb21lSUQgPSBnZXRWYWx1ZShwLCAnb3V0Y29tZS5pZCcpO1xuICBjb25zdCBxdWFudGl0eU9mU2hhcmVzID0gc2V0U2hhcmVEZW5vbWluYXRpb24oZ2V0VmFsdWUocCwgJ291dGNvbWUucG9zaXRpb24ucXR5U2hhcmVzLmZvcm1hdHRlZCcpLCBwLnNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24pO1xuICBjb25zdCBvdXRjb21lTmFtZSA9IGdldFZhbHVlKHAsICdvdXRjb21lLm5hbWUnKTtcbiAgY29uc3QgbGFzdFByaWNlUGVyY2VudCA9IGdldFZhbHVlKHAsICdvdXRjb21lLmxhc3RQcmljZVBlcmNlbnQucm91bmRlZCcpO1xuICBjb25zdCBwdXJjaGFzZVByaWNlID0gZ2V0VmFsdWUocCwgJ291dGNvbWUucG9zaXRpb24ucHVyY2hhc2VQcmljZS5mb3JtYXR0ZWQnKTtcbiAgY29uc3QgbGFzdFByaWNlID0gZ2V0VmFsdWUocCwgJ291dGNvbWUubGFzdFByaWNlLmZvcm1hdHRlZCcpO1xuICBjb25zdCByZWFsaXplZE5ldCA9IGdldFZhbHVlKHAsICdvdXRjb21lLnBvc2l0aW9uLnJlYWxpemVkTmV0LmZvcm1hdHRlZCcpO1xuICBjb25zdCB1bnJlYWxpemVkTmV0ID0gZ2V0VmFsdWUocCwgJ291dGNvbWUucG9zaXRpb24udW5yZWFsaXplZE5ldC5mb3JtYXR0ZWQnKTtcbiAgY29uc3QgdG90YWxOZXQgPSBnZXRWYWx1ZShwLCAnb3V0Y29tZS5wb3NpdGlvbi50b3RhbE5ldC5mb3JtYXR0ZWQnKTtcblxuICBjb25zdCBpc0Nsb3NhYmxlID0gZ2V0VmFsdWUocCwgJ291dGNvbWUucG9zaXRpb24uaXNDbG9zYWJsZScpO1xuICBjb25zdCBpc0Z1bGx5Q2xvc2FibGUgPSBnZXRWYWx1ZShwLCAnb3V0Y29tZS5wb3NpdGlvbi5pc0Z1bGx5Q2xvc2FibGUnKTtcbiAgY29uc3QgY2xvc2VQb3NpdGlvbiA9IGdldFZhbHVlKHAsICdvdXRjb21lLnBvc2l0aW9uLmNsb3NlUG9zaXRpb24nKTtcblxuICBjb25zdCBzdGF0dXMgPSBnZXRWYWx1ZShwLCBgY2xvc2VQb3NpdGlvblN0YXR1cy4ke21hcmtldElEfS4ke291dGNvbWVJRH1gKTtcblxuICByZXR1cm4gKFxuICAgIDxhcnRpY2xlIGNsYXNzTmFtZT1cIm1hcmtldC1wb3NpdGlvbnMtcm93IG5vdC1zZWxlY3RhYmxlXCIgPlxuICAgICAge3AubWFya2V0VHlwZSA9PT0gU0NBTEFSID9cbiAgICAgICAgPFZhbHVlRGVub21pbmF0aW9uIGZvcm1hdHRlZD17bGFzdFByaWNlUGVyY2VudH0gLz4gOlxuICAgICAgICA8c3Bhbj57b3V0Y29tZU5hbWV9PC9zcGFuPlxuICAgICAgfVxuICAgICAgPFZhbHVlRGVub21pbmF0aW9uIGZvcm1hdHRlZD17cXVhbnRpdHlPZlNoYXJlc30gLz5cbiAgICAgIDxWYWx1ZURlbm9taW5hdGlvbiBmb3JtYXR0ZWQ9e3B1cmNoYXNlUHJpY2V9IC8+XG4gICAgICA8VmFsdWVEZW5vbWluYXRpb24gZm9ybWF0dGVkPXtsYXN0UHJpY2V9IC8+XG4gICAgICA8VmFsdWVEZW5vbWluYXRpb24gZm9ybWF0dGVkPXtyZWFsaXplZE5ldH0gLz5cbiAgICAgIDxWYWx1ZURlbm9taW5hdGlvbiBmb3JtYXR0ZWQ9e3VucmVhbGl6ZWROZXR9IC8+XG4gICAgICA8VmFsdWVEZW5vbWluYXRpb24gZm9ybWF0dGVkPXt0b3RhbE5ldH0gLz5cbiAgICAgIDxNYXJrZXRUcmFkZUNsb3NlRGlhbG9nXG4gICAgICAgIGNsb3NlVHlwZT17UE9TSVRJT059XG4gICAgICAgIG1hcmtldElEPXttYXJrZXRJRH1cbiAgICAgICAgb3V0Y29tZUlEPXtvdXRjb21lSUR9XG4gICAgICAgIHF1YW50aXR5T2ZTaGFyZXM9e3F1YW50aXR5T2ZTaGFyZXN9XG4gICAgICAgIGNsb3NlUG9zaXRpb249e2Nsb3NlUG9zaXRpb259XG4gICAgICAgIGlzQ2xvc2FibGU9e2lzQ2xvc2FibGV9XG4gICAgICAgIGlzRnVsbHlDbG9zYWJsZT17aXNGdWxseUNsb3NhYmxlfVxuICAgICAgICBzdGF0dXM9e3N0YXR1c31cbiAgICAgICAgaXNUcmFkZUNvbW1pdExvY2tlZD17cC5pc1RyYWRlQ29tbWl0TG9ja2VkfVxuICAgICAgLz5cbiAgICA8L2FydGljbGU+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNYXJrZXRQb3NpdGlvbnNSb3c7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtcG9zaXRpb25zLXJvdy5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1299:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__market_positions_row__ = __webpack_require__(1298);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_null_state_message__ = __webpack_require__(604);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_get_value__ = __webpack_require__(78);\n\n\n\n\n\n\n\n\n\nvar MarketPositions = function MarketPositions(p) {\n  var outcomePositions = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_get_value__[\"a\" /* default */])(p, 'market.myPositionOutcomes');\n  var nullMessage = 'No Current Positions';\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'market-positions' },\n    !outcomePositions || !outcomePositions.length ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_null_state_message__[\"a\" /* default */], { message: nullMessage }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      null,\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        { className: 'market-positions-header' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          !p.marketType === __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__[\"b\" /* SCALAR */] ? 'Outcomes' : 'Outcome'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Shares'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Avg Price'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Last Price'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Realized P/L'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Unrealized P/L'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Total P/L'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Action'\n        )\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        { className: 'market-content-scrollable' },\n        (outcomePositions || []).map(function (outcome) {\n          return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__market_positions_row__[\"a\" /* default */], {\n            key: outcome.id,\n            marketType: p.marketType,\n            outcome: outcome,\n            selectedShareDenomination: p.selectedShareDenomination,\n            closePositionStatus: p.closePositionStatus,\n            isTradeCommitLocked: p.isTradeCommitLocked\n          });\n        })\n      )\n    )\n  );\n};\n\nvar _default = MarketPositions;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketPositions, 'MarketPositions', '/home/jack/src/augur/src/modules/market/components/market-positions.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-positions.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtcG9zaXRpb25zLmpzeD85MTY5Il0sIm5hbWVzIjpbIk1hcmtldFBvc2l0aW9ucyIsInAiLCJvdXRjb21lUG9zaXRpb25zIiwiZ2V0VmFsdWUiLCJudWxsTWVzc2FnZSIsImxlbmd0aCIsIm1hcmtldFR5cGUiLCJtYXAiLCJvdXRjb21lIiwiaWQiLCJzZWxlY3RlZFNoYXJlRGVub21pbmF0aW9uIiwiY2xvc2VQb3NpdGlvblN0YXR1cyIsImlzVHJhZGVDb21taXRMb2NrZWQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsSUFBTUEsa0JBQWtCLFNBQWxCQSxlQUFrQixDQUFDQyxDQUFELEVBQU87QUFDN0IsTUFBTUMsbUJBQW1CLHdGQUFBQyxDQUFTRixDQUFULEVBQVksMkJBQVosQ0FBekI7QUFDQSxNQUFNRyxjQUFjLHNCQUFwQjs7QUFFQSxTQUNFO0FBQUE7QUFBQSxNQUFTLFdBQVUsa0JBQW5CO0FBQ0csS0FBQ0YsZ0JBQUQsSUFBcUIsQ0FBQ0EsaUJBQWlCRyxNQUF2QyxHQUNDLDREQUFDLHNGQUFELElBQWtCLFNBQVNELFdBQTNCLEdBREQsR0FFQztBQUFBO0FBQUE7QUFDRTtBQUFBO0FBQUEsVUFBSyxXQUFVLHlCQUFmO0FBQ0U7QUFBQTtBQUFBO0FBQU8sV0FBQ0gsRUFBRUssVUFBSCxLQUFrQiwrRUFBbEIsR0FBMkIsVUFBM0IsR0FBd0M7QUFBL0MsU0FERjtBQUVFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FGRjtBQUdFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FIRjtBQUlFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FKRjtBQUtFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FMRjtBQU1FO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FORjtBQU9FO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FQRjtBQVFFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFSRixPQURGO0FBV0U7QUFBQTtBQUFBLFVBQUssV0FBVSwyQkFBZjtBQUNHLFNBQUNKLG9CQUFvQixFQUFyQixFQUF5QkssR0FBekIsQ0FBNkI7QUFBQSxpQkFDNUIsNERBQUMsc0VBQUQ7QUFDRSxpQkFBS0MsUUFBUUMsRUFEZjtBQUVFLHdCQUFZUixFQUFFSyxVQUZoQjtBQUdFLHFCQUFTRSxPQUhYO0FBSUUsdUNBQTJCUCxFQUFFUyx5QkFKL0I7QUFLRSxpQ0FBcUJULEVBQUVVLG1CQUx6QjtBQU1FLGlDQUFxQlYsRUFBRVc7QUFOekIsWUFENEI7QUFBQSxTQUE3QjtBQURIO0FBWEY7QUFISixHQURGO0FBK0JELENBbkNEOztlQXFDZVosZTtBQUFmOzs7Ozs7OztnQ0FyQ01BLGUiLCJmaWxlIjoiMTI5OS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBNYXJrZXRQb3NpdGlvbnNSb3cgZnJvbSAnbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtcG9zaXRpb25zLXJvdyc7XG5pbXBvcnQgTnVsbFN0YXRlTWVzc2FnZSBmcm9tICdtb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL251bGwtc3RhdGUtbWVzc2FnZSc7XG5cbmltcG9ydCB7IFNDQUxBUiB9IGZyb20gJ21vZHVsZXMvbWFya2V0cy9jb25zdGFudHMvbWFya2V0LXR5cGVzJztcblxuaW1wb3J0IGdldFZhbHVlIGZyb20gJ3V0aWxzL2dldC12YWx1ZSc7XG5cbmNvbnN0IE1hcmtldFBvc2l0aW9ucyA9IChwKSA9PiB7XG4gIGNvbnN0IG91dGNvbWVQb3NpdGlvbnMgPSBnZXRWYWx1ZShwLCAnbWFya2V0Lm15UG9zaXRpb25PdXRjb21lcycpO1xuICBjb25zdCBudWxsTWVzc2FnZSA9ICdObyBDdXJyZW50IFBvc2l0aW9ucyc7XG5cbiAgcmV0dXJuIChcbiAgICA8YXJ0aWNsZSBjbGFzc05hbWU9XCJtYXJrZXQtcG9zaXRpb25zXCI+XG4gICAgICB7IW91dGNvbWVQb3NpdGlvbnMgfHwgIW91dGNvbWVQb3NpdGlvbnMubGVuZ3RoID9cbiAgICAgICAgPE51bGxTdGF0ZU1lc3NhZ2UgbWVzc2FnZT17bnVsbE1lc3NhZ2V9IC8+IDpcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1hcmtldC1wb3NpdGlvbnMtaGVhZGVyXCI+XG4gICAgICAgICAgICA8c3Bhbj57IXAubWFya2V0VHlwZSA9PT0gU0NBTEFSID8gJ091dGNvbWVzJyA6ICdPdXRjb21lJ308L3NwYW4+XG4gICAgICAgICAgICA8c3Bhbj5TaGFyZXM8L3NwYW4+XG4gICAgICAgICAgICA8c3Bhbj5BdmcgUHJpY2U8L3NwYW4+XG4gICAgICAgICAgICA8c3Bhbj5MYXN0IFByaWNlPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4+UmVhbGl6ZWQgUC9MPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4+VW5yZWFsaXplZCBQL0w8L3NwYW4+XG4gICAgICAgICAgICA8c3Bhbj5Ub3RhbCBQL0w8L3NwYW4+XG4gICAgICAgICAgICA8c3Bhbj5BY3Rpb248L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYXJrZXQtY29udGVudC1zY3JvbGxhYmxlXCIgPlxuICAgICAgICAgICAgeyhvdXRjb21lUG9zaXRpb25zIHx8IFtdKS5tYXAob3V0Y29tZSA9PlxuICAgICAgICAgICAgICA8TWFya2V0UG9zaXRpb25zUm93XG4gICAgICAgICAgICAgICAga2V5PXtvdXRjb21lLmlkfVxuICAgICAgICAgICAgICAgIG1hcmtldFR5cGU9e3AubWFya2V0VHlwZX1cbiAgICAgICAgICAgICAgICBvdXRjb21lPXtvdXRjb21lfVxuICAgICAgICAgICAgICAgIHNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb249e3Auc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbn1cbiAgICAgICAgICAgICAgICBjbG9zZVBvc2l0aW9uU3RhdHVzPXtwLmNsb3NlUG9zaXRpb25TdGF0dXN9XG4gICAgICAgICAgICAgICAgaXNUcmFkZUNvbW1pdExvY2tlZD17cC5pc1RyYWRlQ29tbWl0TG9ja2VkfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICB9XG4gICAgPC9hcnRpY2xlPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTWFya2V0UG9zaXRpb25zO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LXBvc2l0aW9ucy5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1300:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__market_basics__ = __webpack_require__(1251);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__market_details__ = __webpack_require__(1265);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\n\nvar MarketReported = function MarketReported(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'market-reported' },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'market-group' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: 'market-reported-details' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__market_basics__[\"a\" /* default */], p.market),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__market_details__[\"a\" /* default */], _extends({ key: 'market-info' }, p.market))\n      )\n    )\n  );\n};\n\nvar _default = MarketReported;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketReported, 'MarketReported', '/home/jack/src/augur/src/modules/market/components/market-reported.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-reported.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtcmVwb3J0ZWQuanN4PzczYjgiXSwibmFtZXMiOlsiTWFya2V0UmVwb3J0ZWQiLCJwIiwibWFya2V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFFQTtBQUNBOztBQUVBLElBQU1BLGlCQUFpQixTQUFqQkEsY0FBaUI7QUFBQSxTQUNyQjtBQUFBO0FBQUEsTUFBUyxXQUFVLGlCQUFuQjtBQUNFO0FBQUE7QUFBQSxRQUFLLFdBQVUsY0FBZjtBQUNFO0FBQUE7QUFBQSxVQUFTLFdBQVUseUJBQW5CO0FBQ0Usb0VBQUMsK0RBQUQsRUFBa0JDLEVBQUVDLE1BQXBCLENBREY7QUFFRSxvRUFBQyxnRUFBRCxhQUFlLEtBQUksYUFBbkIsSUFBcUNELEVBQUVDLE1BQXZDO0FBRkY7QUFERjtBQURGLEdBRHFCO0FBQUEsQ0FBdkI7O2VBV2VGLGM7QUFBZjs7Ozs7Ozs7Z0NBWE1BLGMiLCJmaWxlIjoiMTMwMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBNYXJrZXRCYXNpY3MgZnJvbSAnbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtYmFzaWNzJztcbmltcG9ydCBNYXJrZXREZXRhaWxzIGZyb20gJ21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LWRldGFpbHMnO1xuXG5jb25zdCBNYXJrZXRSZXBvcnRlZCA9IHAgPT4gKFxuICA8YXJ0aWNsZSBjbGFzc05hbWU9XCJtYXJrZXQtcmVwb3J0ZWRcIj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1hcmtldC1ncm91cFwiPlxuICAgICAgPGFydGljbGUgY2xhc3NOYW1lPVwibWFya2V0LXJlcG9ydGVkLWRldGFpbHNcIj5cbiAgICAgICAgPE1hcmtldEJhc2ljcyB7Li4ucC5tYXJrZXR9IC8+XG4gICAgICAgIDxNYXJrZXREZXRhaWxzIGtleT1cIm1hcmtldC1pbmZvXCIgey4uLnAubWFya2V0fSAvPlxuICAgICAgPC9hcnRpY2xlPlxuICAgIDwvZGl2PlxuICA8L2FydGljbGU+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBNYXJrZXRSZXBvcnRlZDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL21hcmtldC9jb21wb25lbnRzL21hcmtldC1yZXBvcnRlZC5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1301:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_components_component_nav__ = __webpack_require__(1250);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__market_positions__ = __webpack_require__(1299);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__market_open_orders__ = __webpack_require__(1297);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__app_constants_views__ = __webpack_require__(49);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_get_value__ = __webpack_require__(78);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\n\n\n\n\nvar MarketUserData = function (_Component) {\n  _inherits(MarketUserData, _Component);\n\n  function MarketUserData(props) {\n    _classCallCheck(this, MarketUserData);\n\n    var _this = _possibleConstructorReturn(this, (MarketUserData.__proto__ || Object.getPrototypeOf(MarketUserData)).call(this, props));\n\n    _this.state = {\n      selectedNav: __WEBPACK_IMPORTED_MODULE_4__app_constants_views__[\"t\" /* MARKET_USER_DATA_NAV_POSITIONS */]\n    };\n\n    _this.updateSelectedNav = _this.updateSelectedNav.bind(_this);\n    return _this;\n  }\n\n  _createClass(MarketUserData, [{\n    key: 'updateSelectedNav',\n    value: function updateSelectedNav(selectedNav) {\n      this.setState({ selectedNav: selectedNav });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var p = this.props;\n      var s = this.state;\n\n      var outcomes = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'market.outcomes');\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: 'market-user-data' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'h3',\n          null,\n          'My Trading'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_component_nav__[\"a\" /* default */], {\n          navItems: p.navItems,\n          selectedNav: s.selectedNav,\n          updateSelectedNav: this.updateSelectedNav\n        }),\n        s.selectedNav === __WEBPACK_IMPORTED_MODULE_4__app_constants_views__[\"t\" /* MARKET_USER_DATA_NAV_POSITIONS */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__market_positions__[\"a\" /* default */], _extends({}, p, {\n          marketType: p.marketType,\n          selectedShareDenomination: p.selectedShareDenomination\n        })),\n        s.selectedNav === __WEBPACK_IMPORTED_MODULE_4__app_constants_views__[\"u\" /* MARKET_USER_DATA_NAV_OPEN_ORDERS */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__market_open_orders__[\"a\" /* default */], {\n          outcomes: outcomes,\n          marketType: p.marketType,\n          orderCancellation: p.orderCancellation,\n          selectedShareDenomination: p.selectedShareDenomination\n        })\n      );\n    }\n  }]);\n\n  return MarketUserData;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nvar _default = MarketUserData;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketUserData, 'MarketUserData', '/home/jack/src/augur/src/modules/market/components/market-user-data.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-user-data.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtdXNlci1kYXRhLmpzeD8yMWQyIl0sIm5hbWVzIjpbIk1hcmtldFVzZXJEYXRhIiwicHJvcHMiLCJzdGF0ZSIsInNlbGVjdGVkTmF2IiwiTUFSS0VUX1VTRVJfREFUQV9OQVZfUE9TSVRJT05TIiwidXBkYXRlU2VsZWN0ZWROYXYiLCJiaW5kIiwic2V0U3RhdGUiLCJwIiwicyIsIm91dGNvbWVzIiwiZ2V0VmFsdWUiLCJuYXZJdGVtcyIsIm1hcmtldFR5cGUiLCJzZWxlY3RlZFNoYXJlRGVub21pbmF0aW9uIiwib3JkZXJDYW5jZWxsYXRpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztJQUVxQkEsYzs7O0FBQ25CLDBCQUFZQyxLQUFaLEVBQW1CO0FBQUE7O0FBQUEsZ0lBQ1hBLEtBRFc7O0FBR2pCLFVBQUtDLEtBQUwsR0FBYTtBQUNYQyxtQkFBYSw0RkFBQUM7QUFERixLQUFiOztBQUlBLFVBQUtDLGlCQUFMLEdBQXlCLE1BQUtBLGlCQUFMLENBQXVCQyxJQUF2QixPQUF6QjtBQVBpQjtBQVFsQjs7OztzQ0FFaUJILFcsRUFBYTtBQUM3QixXQUFLSSxRQUFMLENBQWMsRUFBRUosd0JBQUYsRUFBZDtBQUNEOzs7NkJBRVE7QUFDUCxVQUFNSyxJQUFJLEtBQUtQLEtBQWY7QUFDQSxVQUFNUSxJQUFJLEtBQUtQLEtBQWY7O0FBRUEsVUFBTVEsV0FBVyx3RkFBQUMsQ0FBU0gsQ0FBVCxFQUFZLGlCQUFaLENBQWpCOztBQUVBLGFBQ0U7QUFBQTtBQUFBLFVBQVMsV0FBVSxrQkFBbkI7QUFDRTtBQUFBO0FBQUE7QUFBQTtBQUFBLFNBREY7QUFFRSxvRUFBQyxpRkFBRDtBQUNFLG9CQUFVQSxFQUFFSSxRQURkO0FBRUUsdUJBQWFILEVBQUVOLFdBRmpCO0FBR0UsNkJBQW1CLEtBQUtFO0FBSDFCLFVBRkY7QUFPR0ksVUFBRU4sV0FBRixLQUFrQiw0RkFBbEIsSUFDQyw0REFBQyxrRUFBRCxlQUNNSyxDQUROO0FBRUUsc0JBQVlBLEVBQUVLLFVBRmhCO0FBR0UscUNBQTJCTCxFQUFFTTtBQUgvQixXQVJKO0FBY0dMLFVBQUVOLFdBQUYsS0FBa0IsOEZBQWxCLElBQ0MsNERBQUMsb0VBQUQ7QUFDRSxvQkFBVU8sUUFEWjtBQUVFLHNCQUFZRixFQUFFSyxVQUZoQjtBQUdFLDZCQUFtQkwsRUFBRU8saUJBSHZCO0FBSUUscUNBQTJCUCxFQUFFTTtBQUovQjtBQWZKLE9BREY7QUF5QkQ7Ozs7RUE5Q3lDLGdEOztlQUF2QmQsYzs7Ozs7Ozs7O2dDQUFBQSxjIiwiZmlsZSI6IjEzMDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQ29tcG9uZW50TmF2IGZyb20gJ21vZHVsZXMvY29tbW9uL2NvbXBvbmVudHMvY29tcG9uZW50LW5hdic7XG5pbXBvcnQgTWFya2V0UG9zaXRpb25zIGZyb20gJ21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LXBvc2l0aW9ucyc7XG5pbXBvcnQgTWFya2V0T3Blbk9yZGVycyBmcm9tICdtb2R1bGVzL21hcmtldC9jb21wb25lbnRzL21hcmtldC1vcGVuLW9yZGVycyc7XG5cbmltcG9ydCB7IE1BUktFVF9VU0VSX0RBVEFfTkFWX1BPU0lUSU9OUywgTUFSS0VUX1VTRVJfREFUQV9OQVZfT1BFTl9PUkRFUlMgfSBmcm9tICdtb2R1bGVzL2FwcC9jb25zdGFudHMvdmlld3MnO1xuXG5pbXBvcnQgZ2V0VmFsdWUgZnJvbSAndXRpbHMvZ2V0LXZhbHVlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFya2V0VXNlckRhdGEgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzZWxlY3RlZE5hdjogTUFSS0VUX1VTRVJfREFUQV9OQVZfUE9TSVRJT05TXG4gICAgfTtcblxuICAgIHRoaXMudXBkYXRlU2VsZWN0ZWROYXYgPSB0aGlzLnVwZGF0ZVNlbGVjdGVkTmF2LmJpbmQodGhpcyk7XG4gIH1cblxuICB1cGRhdGVTZWxlY3RlZE5hdihzZWxlY3RlZE5hdikge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZE5hdiB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBwID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IG91dGNvbWVzID0gZ2V0VmFsdWUocCwgJ21hcmtldC5vdXRjb21lcycpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxhcnRpY2xlIGNsYXNzTmFtZT1cIm1hcmtldC11c2VyLWRhdGFcIj5cbiAgICAgICAgPGgzPk15IFRyYWRpbmc8L2gzPlxuICAgICAgICA8Q29tcG9uZW50TmF2XG4gICAgICAgICAgbmF2SXRlbXM9e3AubmF2SXRlbXN9XG4gICAgICAgICAgc2VsZWN0ZWROYXY9e3Muc2VsZWN0ZWROYXZ9XG4gICAgICAgICAgdXBkYXRlU2VsZWN0ZWROYXY9e3RoaXMudXBkYXRlU2VsZWN0ZWROYXZ9XG4gICAgICAgIC8+XG4gICAgICAgIHtzLnNlbGVjdGVkTmF2ID09PSBNQVJLRVRfVVNFUl9EQVRBX05BVl9QT1NJVElPTlMgJiZcbiAgICAgICAgICA8TWFya2V0UG9zaXRpb25zXG4gICAgICAgICAgICB7Li4ucH1cbiAgICAgICAgICAgIG1hcmtldFR5cGU9e3AubWFya2V0VHlwZX1cbiAgICAgICAgICAgIHNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb249e3Auc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbn1cbiAgICAgICAgICAvPlxuICAgICAgICB9XG4gICAgICAgIHtzLnNlbGVjdGVkTmF2ID09PSBNQVJLRVRfVVNFUl9EQVRBX05BVl9PUEVOX09SREVSUyAmJlxuICAgICAgICAgIDxNYXJrZXRPcGVuT3JkZXJzXG4gICAgICAgICAgICBvdXRjb21lcz17b3V0Y29tZXN9XG4gICAgICAgICAgICBtYXJrZXRUeXBlPXtwLm1hcmtldFR5cGV9XG4gICAgICAgICAgICBvcmRlckNhbmNlbGxhdGlvbj17cC5vcmRlckNhbmNlbGxhdGlvbn1cbiAgICAgICAgICAgIHNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb249e3Auc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbn1cbiAgICAgICAgICAvPlxuICAgICAgICB9XG4gICAgICA8L2FydGljbGU+XG4gICAgKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LXVzZXItZGF0YS5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1311:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n\n\nvar OrderBookHeader = function OrderBookHeader() {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    \"article\",\n    { className: \"order-book-header\" },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      \"span\",\n      null,\n      \"Bid Q.\"\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      \"span\",\n      null,\n      \"Bid\"\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      \"span\",\n      null,\n      \"Ask\"\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      \"span\",\n      null,\n      \"Ask Q.\"\n    )\n  );\n};\n\nvar _default = OrderBookHeader;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(OrderBookHeader, \"OrderBookHeader\", \"/home/jack/src/augur/src/modules/order-book/components/order-book-header.jsx\");\n\n  __REACT_HOT_LOADER__.register(_default, \"default\", \"/home/jack/src/augur/src/modules/order-book/components/order-book-header.jsx\");\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vcmRlci1ib29rL2NvbXBvbmVudHMvb3JkZXItYm9vay1oZWFkZXIuanN4Pzg0MWQiXSwibmFtZXMiOlsiT3JkZXJCb29rSGVhZGVyIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLElBQU1BLGtCQUFrQixTQUFsQkEsZUFBa0I7QUFBQSxTQUN0QjtBQUFBO0FBQUEsTUFBUyxXQUFVLG1CQUFuQjtBQUNFO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FERjtBQUVFO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FGRjtBQUdFO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FIRjtBQUlFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFKRixHQURzQjtBQUFBLENBQXhCOztlQVNlQSxlO0FBQWY7Ozs7Ozs7O2dDQVRNQSxlIiwiZmlsZSI6IjEzMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBPcmRlckJvb2tIZWFkZXIgPSAoKSA9PiAoXG4gIDxhcnRpY2xlIGNsYXNzTmFtZT1cIm9yZGVyLWJvb2staGVhZGVyXCI+XG4gICAgPHNwYW4+QmlkIFEuPC9zcGFuPlxuICAgIDxzcGFuPkJpZDwvc3Bhbj5cbiAgICA8c3Bhbj5Bc2s8L3NwYW4+XG4gICAgPHNwYW4+QXNrIFEuPC9zcGFuPlxuICA8L2FydGljbGU+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBPcmRlckJvb2tIZWFkZXI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9vcmRlci1ib29rL2NvbXBvbmVudHMvb3JkZXItYm9vay1oZWFkZXIuanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1312:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(114);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react_tooltip__ = __webpack_require__(319);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react_tooltip___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react_tooltip__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__ = __webpack_require__(602);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_components_null_state_message__ = __webpack_require__(604);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_get_value__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_set_share_denomination__ = __webpack_require__(1240);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__outcomes_constants_trade_types__ = __webpack_require__(1261);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__ = __webpack_require__(471);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__constants_order_book_value_types__ = __webpack_require__(1260);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar OrderBookRowSide = function OrderBookRowSide(p) {\n  var orders = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'orders');\n  var nullMessage = 'No Orders';\n  var side = p.type || __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"ASK\"];\n  var shouldHighlight = side === __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] && p.selectedTradeSide[p.id] === __WEBPACK_IMPORTED_MODULE_7__outcomes_constants_trade_types__[\"b\" /* SELL */] || side !== __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] && p.selectedTradeSide[p.id] === __WEBPACK_IMPORTED_MODULE_7__outcomes_constants_trade_types__[\"a\" /* BUY */] || side !== __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] && p.selectedTradeSide[p.id] == null;\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'order-book-row-side ' + (shouldHighlight ? 'order-book-row-side-trading' : '') },\n    !orders || !orders.length ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__common_components_null_state_message__[\"a\" /* default */], { message: nullMessage }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      null,\n      (p.orders || []).map(function (order, i) {\n        var shares = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils_set_share_denomination__[\"a\" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(order, 'shares.formatted'), p.selectedShareDenomination);\n        var price = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(order, 'price.formatted');\n        var type = p.type || __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"ASK\"];\n\n        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          {\n            key: i,\n            className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('order-book-side-row not-selectable', { 'is-of-current-user': order.isOfCurrentUser }),\n            'data-tip': true,\n            'data-for': type + '-' + i + '-orders',\n            'data-event': 'mouseenter',\n            'data-event-off': 'mouseleave'\n          },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'unstyled',\n              onClick: function onClick() {\n                p.updateTradeFromSelectedOrder(p.id, i, side, side === __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] ? __WEBPACK_IMPORTED_MODULE_9__constants_order_book_value_types__[\"a\" /* SHARE */] : __WEBPACK_IMPORTED_MODULE_9__constants_order_book_value_types__[\"b\" /* PRICE */]);\n              }\n            },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: side === __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] ? shares : price })\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'unstyled',\n              onClick: function onClick() {\n                p.updateTradeFromSelectedOrder(p.id, i, side, side === __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] ? __WEBPACK_IMPORTED_MODULE_9__constants_order_book_value_types__[\"b\" /* PRICE */] : __WEBPACK_IMPORTED_MODULE_9__constants_order_book_value_types__[\"a\" /* SHARE */]);\n              }\n            },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: side === __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] ? price : shares })\n          ),\n          order.isOfCurrentUser && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            __WEBPACK_IMPORTED_MODULE_2_react_tooltip___default.a,\n            {\n              id: type + '-' + i + '-orders',\n              type: 'info',\n              effect: 'solid',\n              place: 'top'\n            },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'span',\n              { className: 'tooltip-text' },\n              'Your Order'\n            )\n          )\n        );\n      })\n    )\n  );\n};\n\nvar _default = OrderBookRowSide;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(OrderBookRowSide, 'OrderBookRowSide', '/home/jack/src/augur/src/modules/order-book/components/order-book-row-side.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/order-book/components/order-book-row-side.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vcmRlci1ib29rL2NvbXBvbmVudHMvb3JkZXItYm9vay1yb3ctc2lkZS5qc3g/MmFmZiJdLCJuYW1lcyI6WyJPcmRlckJvb2tSb3dTaWRlIiwicCIsIm9yZGVycyIsImdldFZhbHVlIiwibnVsbE1lc3NhZ2UiLCJzaWRlIiwidHlwZSIsInNob3VsZEhpZ2hsaWdodCIsInNlbGVjdGVkVHJhZGVTaWRlIiwiaWQiLCJsZW5ndGgiLCJtYXAiLCJvcmRlciIsImkiLCJzaGFyZXMiLCJzZXRTaGFyZURlbm9taW5hdGlvbiIsInNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24iLCJwcmljZSIsImNsYXNzTmFtZXMiLCJpc09mQ3VycmVudFVzZXIiLCJ1cGRhdGVUcmFkZUZyb21TZWxlY3RlZE9yZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsSUFBTUEsbUJBQW1CLFNBQW5CQSxnQkFBbUIsQ0FBQ0MsQ0FBRCxFQUFPO0FBQzlCLE1BQU1DLFNBQVMsd0ZBQUFDLENBQVNGLENBQVQsRUFBWSxRQUFaLENBQWY7QUFDQSxNQUFNRyxjQUFjLFdBQXBCO0FBQ0EsTUFBTUMsT0FBT0osRUFBRUssSUFBRixJQUFVLGtFQUF2QjtBQUNBLE1BQU1DLGtCQUFtQkYsU0FBUyxrRUFBVCxJQUFnQkosRUFBRU8saUJBQUYsQ0FBb0JQLEVBQUVRLEVBQXRCLE1BQThCLDZFQUEvQyxJQUF5REosU0FBUyxrRUFBVCxJQUFnQkosRUFBRU8saUJBQUYsQ0FBb0JQLEVBQUVRLEVBQXRCLE1BQThCLDRFQUF2RyxJQUFnSEosU0FBUyxrRUFBVCxJQUFnQkosRUFBRU8saUJBQUYsQ0FBb0JQLEVBQUVRLEVBQXRCLEtBQTZCLElBQXJMOztBQUVBLFNBQ0U7QUFBQTtBQUFBLE1BQVMscUNBQWtDRixrQkFBa0IsNkJBQWxCLEdBQWtELEVBQXBGLENBQVQ7QUFDRyxLQUFDTCxNQUFELElBQVcsQ0FBQ0EsT0FBT1EsTUFBbkIsR0FDQyw0REFBQyxzRkFBRCxJQUFrQixTQUFTTixXQUEzQixHQURELEdBRUM7QUFBQTtBQUFBO0FBQ0csT0FBQ0gsRUFBRUMsTUFBRixJQUFZLEVBQWIsRUFBaUJTLEdBQWpCLENBQXFCLFVBQUNDLEtBQUQsRUFBUUMsQ0FBUixFQUFjO0FBQ2xDLFlBQU1DLFNBQVMscUdBQUFDLENBQXFCLHdGQUFBWixDQUFTUyxLQUFULEVBQWdCLGtCQUFoQixDQUFyQixFQUEwRFgsRUFBRWUseUJBQTVELENBQWY7QUFDQSxZQUFNQyxRQUFRLHdGQUFBZCxDQUFTUyxLQUFULEVBQWdCLGlCQUFoQixDQUFkO0FBQ0EsWUFBTU4sT0FBT0wsRUFBRUssSUFBRixJQUFVLGtFQUF2Qjs7QUFFQSxlQUNFO0FBQUE7QUFBQTtBQUNFLGlCQUFLTyxDQURQO0FBRUUsdUJBQVcsa0RBQUFLLENBQVcsb0NBQVgsRUFBaUQsRUFBRSxzQkFBc0JOLE1BQU1PLGVBQTlCLEVBQWpELENBRmI7QUFHRSw0QkFIRjtBQUlFLHdCQUFhYixJQUFiLFNBQXFCTyxDQUFyQixZQUpGO0FBS0UsMEJBQVcsWUFMYjtBQU1FLDhCQUFlO0FBTmpCO0FBUUU7QUFBQTtBQUFBO0FBQ0UseUJBQVUsVUFEWjtBQUVFLHVCQUFTLG1CQUFNO0FBQ2JaLGtCQUFFbUIsNEJBQUYsQ0FBK0JuQixFQUFFUSxFQUFqQyxFQUFxQ0ksQ0FBckMsRUFBd0NSLElBQXhDLEVBQThDQSxTQUFTLGtFQUFULEdBQWUsZ0ZBQWYsR0FBdUIsZ0ZBQXJFO0FBQ0Q7QUFKSDtBQU1FLHdFQUFDLHNGQUFELElBQW1CLFdBQVdBLFNBQVMsa0VBQVQsR0FBZVMsTUFBZixHQUF3QkcsS0FBdEQ7QUFORixXQVJGO0FBZ0JFO0FBQUE7QUFBQTtBQUNFLHlCQUFVLFVBRFo7QUFFRSx1QkFBUyxtQkFBTTtBQUNiaEIsa0JBQUVtQiw0QkFBRixDQUErQm5CLEVBQUVRLEVBQWpDLEVBQXFDSSxDQUFyQyxFQUF3Q1IsSUFBeEMsRUFBOENBLFNBQVMsa0VBQVQsR0FBZSxnRkFBZixHQUF1QixnRkFBckU7QUFDRDtBQUpIO0FBTUUsd0VBQUMsc0ZBQUQsSUFBbUIsV0FBV0EsU0FBUyxrRUFBVCxHQUFlWSxLQUFmLEdBQXVCSCxNQUFyRDtBQU5GLFdBaEJGO0FBd0JHRixnQkFBTU8sZUFBTixJQUNEO0FBQUMsaUVBQUQ7QUFBQTtBQUNFLGtCQUFPYixJQUFQLFNBQWVPLENBQWYsWUFERjtBQUVFLG9CQUFLLE1BRlA7QUFHRSxzQkFBTyxPQUhUO0FBSUUscUJBQU07QUFKUjtBQU1FO0FBQUE7QUFBQSxnQkFBTSxXQUFVLGNBQWhCO0FBQUE7QUFBQTtBQU5GO0FBekJGLFNBREY7QUF1Q0QsT0E1Q0E7QUFESDtBQUhKLEdBREY7QUFzREQsQ0E1REQ7O2VBOERlYixnQjtBQUFmOzs7Ozs7OztnQ0E5RE1BLGdCIiwiZmlsZSI6IjEzMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3RUb29sdGlwIGZyb20gJ3JlYWN0LXRvb2x0aXAnO1xuXG5pbXBvcnQgVmFsdWVEZW5vbWluYXRpb24gZnJvbSAnbW9kdWxlcy9jb21tb24vY29tcG9uZW50cy92YWx1ZS1kZW5vbWluYXRpb24nO1xuaW1wb3J0IE51bGxTdGF0ZU1lc3NhZ2UgZnJvbSAnbW9kdWxlcy9jb21tb24vY29tcG9uZW50cy9udWxsLXN0YXRlLW1lc3NhZ2UnO1xuXG5pbXBvcnQgZ2V0VmFsdWUgZnJvbSAndXRpbHMvZ2V0LXZhbHVlJztcbmltcG9ydCBzZXRTaGFyZURlbm9taW5hdGlvbiBmcm9tICd1dGlscy9zZXQtc2hhcmUtZGVub21pbmF0aW9uJztcblxuaW1wb3J0IHsgQlVZLCBTRUxMIH0gZnJvbSAnbW9kdWxlcy9vdXRjb21lcy9jb25zdGFudHMvdHJhZGUtdHlwZXMnO1xuaW1wb3J0IHsgQklELCBBU0sgfSBmcm9tICdtb2R1bGVzL3RyYW5zYWN0aW9ucy9jb25zdGFudHMvdHlwZXMnO1xuaW1wb3J0IHsgUFJJQ0UsIFNIQVJFIH0gZnJvbSAnbW9kdWxlcy9vcmRlci1ib29rL2NvbnN0YW50cy9vcmRlci1ib29rLXZhbHVlLXR5cGVzJztcblxuY29uc3QgT3JkZXJCb29rUm93U2lkZSA9IChwKSA9PiB7XG4gIGNvbnN0IG9yZGVycyA9IGdldFZhbHVlKHAsICdvcmRlcnMnKTtcbiAgY29uc3QgbnVsbE1lc3NhZ2UgPSAnTm8gT3JkZXJzJztcbiAgY29uc3Qgc2lkZSA9IHAudHlwZSB8fCBBU0s7XG4gIGNvbnN0IHNob3VsZEhpZ2hsaWdodCA9IChzaWRlID09PSBCSUQgJiYgcC5zZWxlY3RlZFRyYWRlU2lkZVtwLmlkXSA9PT0gU0VMTCkgfHwgKHNpZGUgIT09IEJJRCAmJiBwLnNlbGVjdGVkVHJhZGVTaWRlW3AuaWRdID09PSBCVVkpIHx8IChzaWRlICE9PSBCSUQgJiYgcC5zZWxlY3RlZFRyYWRlU2lkZVtwLmlkXSA9PSBudWxsKTtcblxuICByZXR1cm4gKFxuICAgIDxhcnRpY2xlIGNsYXNzTmFtZT17YG9yZGVyLWJvb2stcm93LXNpZGUgJHtzaG91bGRIaWdobGlnaHQgPyAnb3JkZXItYm9vay1yb3ctc2lkZS10cmFkaW5nJyA6ICcnfWB9PlxuICAgICAgeyFvcmRlcnMgfHwgIW9yZGVycy5sZW5ndGggP1xuICAgICAgICA8TnVsbFN0YXRlTWVzc2FnZSBtZXNzYWdlPXtudWxsTWVzc2FnZX0gLz4gOlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIHsocC5vcmRlcnMgfHwgW10pLm1hcCgob3JkZXIsIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNoYXJlcyA9IHNldFNoYXJlRGVub21pbmF0aW9uKGdldFZhbHVlKG9yZGVyLCAnc2hhcmVzLmZvcm1hdHRlZCcpLCBwLnNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24pO1xuICAgICAgICAgICAgY29uc3QgcHJpY2UgPSBnZXRWYWx1ZShvcmRlciwgJ3ByaWNlLmZvcm1hdHRlZCcpO1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHAudHlwZSB8fCBBU0s7XG5cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdvcmRlci1ib29rLXNpZGUtcm93IG5vdC1zZWxlY3RhYmxlJywgeyAnaXMtb2YtY3VycmVudC11c2VyJzogb3JkZXIuaXNPZkN1cnJlbnRVc2VyIH0pfVxuICAgICAgICAgICAgICAgIGRhdGEtdGlwXG4gICAgICAgICAgICAgICAgZGF0YS1mb3I9e2Ake3R5cGV9LSR7aX0tb3JkZXJzYH1cbiAgICAgICAgICAgICAgICBkYXRhLWV2ZW50PVwibW91c2VlbnRlclwiXG4gICAgICAgICAgICAgICAgZGF0YS1ldmVudC1vZmY9XCJtb3VzZWxlYXZlXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInVuc3R5bGVkXCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcC51cGRhdGVUcmFkZUZyb21TZWxlY3RlZE9yZGVyKHAuaWQsIGksIHNpZGUsIHNpZGUgPT09IEJJRCA/IFNIQVJFIDogUFJJQ0UpO1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8VmFsdWVEZW5vbWluYXRpb24gZm9ybWF0dGVkPXtzaWRlID09PSBCSUQgPyBzaGFyZXMgOiBwcmljZX0gLz5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ1bnN0eWxlZFwiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHAudXBkYXRlVHJhZGVGcm9tU2VsZWN0ZWRPcmRlcihwLmlkLCBpLCBzaWRlLCBzaWRlID09PSBCSUQgPyBQUklDRSA6IFNIQVJFKTtcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPFZhbHVlRGVub21pbmF0aW9uIGZvcm1hdHRlZD17c2lkZSA9PT0gQklEID8gcHJpY2UgOiBzaGFyZXN9IC8+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAge29yZGVyLmlzT2ZDdXJyZW50VXNlciAmJlxuICAgICAgICAgICAgICAgIDxSZWFjdFRvb2x0aXBcbiAgICAgICAgICAgICAgICAgIGlkPXtgJHt0eXBlfS0ke2l9LW9yZGVyc2B9XG4gICAgICAgICAgICAgICAgICB0eXBlPVwiaW5mb1wiXG4gICAgICAgICAgICAgICAgICBlZmZlY3Q9XCJzb2xpZFwiXG4gICAgICAgICAgICAgICAgICBwbGFjZT1cInRvcFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidG9vbHRpcC10ZXh0XCI+XG4gICAgICAgICAgICAgICAgICAgIFlvdXIgT3JkZXJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L1JlYWN0VG9vbHRpcD5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9kaXY+XG4gICAgICB9XG4gICAgPC9hcnRpY2xlPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgT3JkZXJCb29rUm93U2lkZTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL29yZGVyLWJvb2svY29tcG9uZW50cy9vcmRlci1ib29rLXJvdy1zaWRlLmpzeCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 1313:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__order_book_row_side__ = __webpack_require__(1312);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__transactions_constants_types__ = __webpack_require__(471);\n\n\n\n\n\n\nvar OrderBookRows = function OrderBookRows(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'order-book-rows' },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__order_book_row_side__[\"a\" /* default */], {\n      id: p.id,\n      type: __WEBPACK_IMPORTED_MODULE_2__transactions_constants_types__[\"BID\"],\n      trade: p.trade,\n      orders: p.bids,\n      selectedShareDenomination: p.selectedShareDenomination,\n      selectedTradeSide: p.selectedTradeSide,\n      updateTradeFromSelectedOrder: p.updateTradeFromSelectedOrder\n    }),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__order_book_row_side__[\"a\" /* default */], {\n      id: p.id,\n      trade: p.trade,\n      orders: p.asks,\n      selectedShareDenomination: p.selectedShareDenomination,\n      selectedTradeSide: p.selectedTradeSide,\n      updateTradeFromSelectedOrder: p.updateTradeFromSelectedOrder\n    })\n  );\n};\n\nvar _default = OrderBookRows;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(OrderBookRows, 'OrderBookRows', '/home/jack/src/augur/src/modules/order-book/components/order-book-rows.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/order-book/components/order-book-rows.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vcmRlci1ib29rL2NvbXBvbmVudHMvb3JkZXItYm9vay1yb3dzLmpzeD85ZjQ1Il0sIm5hbWVzIjpbIk9yZGVyQm9va1Jvd3MiLCJwIiwiaWQiLCJ0cmFkZSIsImJpZHMiLCJzZWxlY3RlZFNoYXJlRGVub21pbmF0aW9uIiwic2VsZWN0ZWRUcmFkZVNpZGUiLCJ1cGRhdGVUcmFkZUZyb21TZWxlY3RlZE9yZGVyIiwiYXNrcyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUVBOztBQUVBOztBQUVBLElBQU1BLGdCQUFnQixTQUFoQkEsYUFBZ0I7QUFBQSxTQUNwQjtBQUFBO0FBQUEsTUFBUyxXQUFVLGlCQUFuQjtBQUNFLGdFQUFDLHFFQUFEO0FBQ0UsVUFBSUMsRUFBRUMsRUFEUjtBQUVFLFlBQU0sa0VBRlI7QUFHRSxhQUFPRCxFQUFFRSxLQUhYO0FBSUUsY0FBUUYsRUFBRUcsSUFKWjtBQUtFLGlDQUEyQkgsRUFBRUkseUJBTC9CO0FBTUUseUJBQW1CSixFQUFFSyxpQkFOdkI7QUFPRSxvQ0FBOEJMLEVBQUVNO0FBUGxDLE1BREY7QUFVRSxnRUFBQyxxRUFBRDtBQUNFLFVBQUlOLEVBQUVDLEVBRFI7QUFFRSxhQUFPRCxFQUFFRSxLQUZYO0FBR0UsY0FBUUYsRUFBRU8sSUFIWjtBQUlFLGlDQUEyQlAsRUFBRUkseUJBSi9CO0FBS0UseUJBQW1CSixFQUFFSyxpQkFMdkI7QUFNRSxvQ0FBOEJMLEVBQUVNO0FBTmxDO0FBVkYsR0FEb0I7QUFBQSxDQUF0Qjs7ZUFzQmVQLGE7QUFBZjs7Ozs7Ozs7Z0NBdEJNQSxhIiwiZmlsZSI6IjEzMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgT3JkZXJCb29rUm93U2lkZSBmcm9tICdtb2R1bGVzL29yZGVyLWJvb2svY29tcG9uZW50cy9vcmRlci1ib29rLXJvdy1zaWRlJztcblxuaW1wb3J0IHsgQklEIH0gZnJvbSAnbW9kdWxlcy90cmFuc2FjdGlvbnMvY29uc3RhbnRzL3R5cGVzJztcblxuY29uc3QgT3JkZXJCb29rUm93cyA9IHAgPT4gKFxuICA8YXJ0aWNsZSBjbGFzc05hbWU9XCJvcmRlci1ib29rLXJvd3NcIj5cbiAgICA8T3JkZXJCb29rUm93U2lkZVxuICAgICAgaWQ9e3AuaWR9XG4gICAgICB0eXBlPXtCSUR9XG4gICAgICB0cmFkZT17cC50cmFkZX1cbiAgICAgIG9yZGVycz17cC5iaWRzfVxuICAgICAgc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbj17cC5zZWxlY3RlZFNoYXJlRGVub21pbmF0aW9ufVxuICAgICAgc2VsZWN0ZWRUcmFkZVNpZGU9e3Auc2VsZWN0ZWRUcmFkZVNpZGV9XG4gICAgICB1cGRhdGVUcmFkZUZyb21TZWxlY3RlZE9yZGVyPXtwLnVwZGF0ZVRyYWRlRnJvbVNlbGVjdGVkT3JkZXJ9XG4gICAgLz5cbiAgICA8T3JkZXJCb29rUm93U2lkZVxuICAgICAgaWQ9e3AuaWR9XG4gICAgICB0cmFkZT17cC50cmFkZX1cbiAgICAgIG9yZGVycz17cC5hc2tzfVxuICAgICAgc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbj17cC5zZWxlY3RlZFNoYXJlRGVub21pbmF0aW9ufVxuICAgICAgc2VsZWN0ZWRUcmFkZVNpZGU9e3Auc2VsZWN0ZWRUcmFkZVNpZGV9XG4gICAgICB1cGRhdGVUcmFkZUZyb21TZWxlY3RlZE9yZGVyPXtwLnVwZGF0ZVRyYWRlRnJvbVNlbGVjdGVkT3JkZXJ9XG4gICAgLz5cbiAgPC9hcnRpY2xlPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgT3JkZXJCb29rUm93cztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL29yZGVyLWJvb2svY29tcG9uZW50cy9vcmRlci1ib29rLXJvd3MuanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1314:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\nvar OutcomeTradeAction = function (_Component) {\n  _inherits(OutcomeTradeAction, _Component);\n\n  function OutcomeTradeAction(props) {\n    _classCallCheck(this, OutcomeTradeAction);\n\n    var _this = _possibleConstructorReturn(this, (OutcomeTradeAction.__proto__ || Object.getPrototypeOf(OutcomeTradeAction)).call(this, props));\n\n    _this.state = {\n      isConfirming: false\n    };\n    return _this;\n  }\n\n  _createClass(OutcomeTradeAction, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var p = this.props;\n      var s = this.state;\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        \"div\",\n        { className: \"outcome-trade-action\" },\n        !s.isConfirming && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          \"button\",\n          {\n            className: \"trade-action\",\n            disabled: p.disabled,\n            onClick: function onClick() {\n              _this2.setState({ isConfirming: true });\n            }\n          },\n          \"Place Trade\"\n        ),\n        s.isConfirming && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          \"div\",\n          { className: \"trade-confirmation\" },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            \"span\",\n            null,\n            \"Are you sure?\"\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            \"div\",\n            { className: \"trade-confirmation-actions\" },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              \"button\",\n              {\n                className: \"cancel\",\n                onClick: function onClick() {\n                  _this2.setState({ isConfirming: false });\n                }\n              },\n              \"Cancel\"\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              \"button\",\n              {\n                onClick: function onClick() {\n                  p.submitTrade(p.selectedID);\n                }\n              },\n              \"Yes\"\n            )\n          )\n        )\n      );\n    }\n  }]);\n\n  return OutcomeTradeAction;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nvar _default = OutcomeTradeAction;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(OutcomeTradeAction, \"OutcomeTradeAction\", \"/home/jack/src/augur/src/modules/outcomes/components/outcome-trade-action.jsx\");\n\n  __REACT_HOT_LOADER__.register(_default, \"default\", \"/home/jack/src/augur/src/modules/outcomes/components/outcome-trade-action.jsx\");\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vdXRjb21lcy9jb21wb25lbnRzL291dGNvbWUtdHJhZGUtYWN0aW9uLmpzeD84ZjcxIl0sIm5hbWVzIjpbIk91dGNvbWVUcmFkZUFjdGlvbiIsInByb3BzIiwic3RhdGUiLCJpc0NvbmZpcm1pbmciLCJwIiwicyIsImRpc2FibGVkIiwic2V0U3RhdGUiLCJzdWJtaXRUcmFkZSIsInNlbGVjdGVkSUQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7SUFFcUJBLGtCOzs7QUFDbkIsOEJBQVlDLEtBQVosRUFBbUI7QUFBQTs7QUFBQSx3SUFDWEEsS0FEVzs7QUFHakIsVUFBS0MsS0FBTCxHQUFhO0FBQ1hDLG9CQUFjO0FBREgsS0FBYjtBQUhpQjtBQU1sQjs7Ozs2QkFFUTtBQUFBOztBQUNQLFVBQU1DLElBQUksS0FBS0gsS0FBZjtBQUNBLFVBQU1JLElBQUksS0FBS0gsS0FBZjs7QUFFQSxhQUNFO0FBQUE7QUFBQSxVQUFLLFdBQVUsc0JBQWY7QUFDRyxTQUFDRyxFQUFFRixZQUFILElBQ0M7QUFBQTtBQUFBO0FBQ0UsdUJBQVUsY0FEWjtBQUVFLHNCQUFVQyxFQUFFRSxRQUZkO0FBR0UscUJBQVMsbUJBQU07QUFDYixxQkFBS0MsUUFBTCxDQUFjLEVBQUVKLGNBQWMsSUFBaEIsRUFBZDtBQUNEO0FBTEg7QUFBQTtBQUFBLFNBRko7QUFZR0UsVUFBRUYsWUFBRixJQUNDO0FBQUE7QUFBQSxZQUFLLFdBQVUsb0JBQWY7QUFDRTtBQUFBO0FBQUE7QUFBQTtBQUFBLFdBREY7QUFFRTtBQUFBO0FBQUEsY0FBSyxXQUFVLDRCQUFmO0FBQ0U7QUFBQTtBQUFBO0FBQ0UsMkJBQVUsUUFEWjtBQUVFLHlCQUFTLG1CQUFNO0FBQ2IseUJBQUtJLFFBQUwsQ0FBYyxFQUFFSixjQUFjLEtBQWhCLEVBQWQ7QUFDRDtBQUpIO0FBQUE7QUFBQSxhQURGO0FBU0U7QUFBQTtBQUFBO0FBQ0UseUJBQVMsbUJBQU07QUFDYkMsb0JBQUVJLFdBQUYsQ0FBY0osRUFBRUssVUFBaEI7QUFDRDtBQUhIO0FBQUE7QUFBQTtBQVRGO0FBRkY7QUFiSixPQURGO0FBcUNEOzs7O0VBbEQ2QyxnRDs7ZUFBM0JULGtCOzs7Ozs7Ozs7Z0NBQUFBLGtCIiwiZmlsZSI6IjEzMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPdXRjb21lVHJhZGVBY3Rpb24gZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0NvbmZpcm1pbmc6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBwID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm91dGNvbWUtdHJhZGUtYWN0aW9uXCIgPlxuICAgICAgICB7IXMuaXNDb25maXJtaW5nICYmXG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidHJhZGUtYWN0aW9uXCJcbiAgICAgICAgICAgIGRpc2FibGVkPXtwLmRpc2FibGVkfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNDb25maXJtaW5nOiB0cnVlIH0pO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBQbGFjZSBUcmFkZVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICB9XG4gICAgICAgIHtzLmlzQ29uZmlybWluZyAmJlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJhZGUtY29uZmlybWF0aW9uXCIgPlxuICAgICAgICAgICAgPHNwYW4+QXJlIHlvdSBzdXJlPzwvc3Bhbj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJhZGUtY29uZmlybWF0aW9uLWFjdGlvbnNcIj5cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNhbmNlbFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzQ29uZmlybWluZzogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIENhbmNlbFxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgIHAuc3VibWl0VHJhZGUocC5zZWxlY3RlZElEKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgWWVzXG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIH1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL291dGNvbWVzL2NvbXBvbmVudHMvb3V0Y29tZS10cmFkZS1hY3Rpb24uanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1315:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__ = __webpack_require__(602);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_get_value__ = __webpack_require__(78);\n\n\n\n\n\n\nvar OutcomeTradeSummary = function OutcomeTradeSummary(p) {\n  var tradingFees = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_get_value__[\"a\" /* default */])(p, 'tradeOrder.tradingFees');\n  var feePercent = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_get_value__[\"a\" /* default */])(p, 'tradeOrder.feePercent');\n  var gasFees = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_get_value__[\"a\" /* default */])(p, 'tradeOrder.gasFees');\n  var totalCost = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_get_value__[\"a\" /* default */])(p, 'trade.totalCost');\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'outcome-trade-summary' },\n    tradingFees && feePercent && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'outcome-trade-summary-group' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        null,\n        'Fees:'\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        null,\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: p.tradeOrder.tradingFees.formatted }),\n        ' ',\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'ETH (',\n          p.tradeOrder.feePercent.formatted,\n          '%)'\n        )\n      )\n    ),\n    gasFees && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'outcome-trade-summary-group' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        null,\n        'Gas:'\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        null,\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: p.tradeOrder.gasFees.formatted }),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'ETH'\n        )\n      )\n    ),\n    totalCost && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'outcome-trade-summary-group' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        null,\n        'Total:'\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        null,\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: p.trade.totalCost.formatted }),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'ETH'\n        )\n      )\n    )\n  );\n};\n\nvar _default = OutcomeTradeSummary;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(OutcomeTradeSummary, 'OutcomeTradeSummary', '/home/jack/src/augur/src/modules/outcomes/components/outcome-trade-summary.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/outcomes/components/outcome-trade-summary.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vdXRjb21lcy9jb21wb25lbnRzL291dGNvbWUtdHJhZGUtc3VtbWFyeS5qc3g/Mzg2ZSJdLCJuYW1lcyI6WyJPdXRjb21lVHJhZGVTdW1tYXJ5IiwicCIsInRyYWRpbmdGZWVzIiwiZ2V0VmFsdWUiLCJmZWVQZXJjZW50IiwiZ2FzRmVlcyIsInRvdGFsQ29zdCIsInRyYWRlT3JkZXIiLCJmb3JtYXR0ZWQiLCJ0cmFkZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUVBOztBQUVBOztBQUVBLElBQU1BLHNCQUFzQixTQUF0QkEsbUJBQXNCLENBQUNDLENBQUQsRUFBTztBQUNqQyxNQUFNQyxjQUFjLHdGQUFBQyxDQUFTRixDQUFULEVBQVksd0JBQVosQ0FBcEI7QUFDQSxNQUFNRyxhQUFhLHdGQUFBRCxDQUFTRixDQUFULEVBQVksdUJBQVosQ0FBbkI7QUFDQSxNQUFNSSxVQUFVLHdGQUFBRixDQUFTRixDQUFULEVBQVksb0JBQVosQ0FBaEI7QUFDQSxNQUFNSyxZQUFZLHdGQUFBSCxDQUFTRixDQUFULEVBQVksaUJBQVosQ0FBbEI7O0FBRUEsU0FDRTtBQUFBO0FBQUEsTUFBUyxXQUFVLHVCQUFuQjtBQUNHQyxtQkFBZUUsVUFBZixJQUNDO0FBQUE7QUFBQSxRQUFLLFdBQVUsNkJBQWY7QUFDRTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BREY7QUFFRTtBQUFBO0FBQUE7QUFBTSxvRUFBQyxzRkFBRCxJQUFtQixXQUFXSCxFQUFFTSxVQUFGLENBQWFMLFdBQWIsQ0FBeUJNLFNBQXZELEdBQU47QUFBQTtBQUEyRTtBQUFBO0FBQUE7QUFBQTtBQUFZUCxZQUFFTSxVQUFGLENBQWFILFVBQWIsQ0FBd0JJLFNBQXBDO0FBQUE7QUFBQTtBQUEzRTtBQUZGLEtBRko7QUFPR0gsZUFDQztBQUFBO0FBQUEsUUFBSyxXQUFVLDZCQUFmO0FBQ0U7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQURGO0FBRUU7QUFBQTtBQUFBO0FBQU0sb0VBQUMsc0ZBQUQsSUFBbUIsV0FBV0osRUFBRU0sVUFBRixDQUFhRixPQUFiLENBQXFCRyxTQUFuRCxHQUFOO0FBQXNFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBdEU7QUFGRixLQVJKO0FBYUdGLGlCQUNDO0FBQUE7QUFBQSxRQUFLLFdBQVUsNkJBQWY7QUFDRTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BREY7QUFFRTtBQUFBO0FBQUE7QUFBTSxvRUFBQyxzRkFBRCxJQUFtQixXQUFXTCxFQUFFUSxLQUFGLENBQVFILFNBQVIsQ0FBa0JFLFNBQWhELEdBQU47QUFBbUU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFuRTtBQUZGO0FBZEosR0FERjtBQXNCRCxDQTVCRDs7ZUE4QmVSLG1CO0FBQWY7Ozs7Ozs7O2dDQTlCTUEsbUIiLCJmaWxlIjoiMTMxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBWYWx1ZURlbm9taW5hdGlvbiBmcm9tICdtb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL3ZhbHVlLWRlbm9taW5hdGlvbic7XG5cbmltcG9ydCBnZXRWYWx1ZSBmcm9tICd1dGlscy9nZXQtdmFsdWUnO1xuXG5jb25zdCBPdXRjb21lVHJhZGVTdW1tYXJ5ID0gKHApID0+IHtcbiAgY29uc3QgdHJhZGluZ0ZlZXMgPSBnZXRWYWx1ZShwLCAndHJhZGVPcmRlci50cmFkaW5nRmVlcycpO1xuICBjb25zdCBmZWVQZXJjZW50ID0gZ2V0VmFsdWUocCwgJ3RyYWRlT3JkZXIuZmVlUGVyY2VudCcpO1xuICBjb25zdCBnYXNGZWVzID0gZ2V0VmFsdWUocCwgJ3RyYWRlT3JkZXIuZ2FzRmVlcycpO1xuICBjb25zdCB0b3RhbENvc3QgPSBnZXRWYWx1ZShwLCAndHJhZGUudG90YWxDb3N0Jyk7XG5cbiAgcmV0dXJuIChcbiAgICA8YXJ0aWNsZSBjbGFzc05hbWU9XCJvdXRjb21lLXRyYWRlLXN1bW1hcnlcIj5cbiAgICAgIHt0cmFkaW5nRmVlcyAmJiBmZWVQZXJjZW50ICYmXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3V0Y29tZS10cmFkZS1zdW1tYXJ5LWdyb3VwXCI+XG4gICAgICAgICAgPHNwYW4+RmVlczo8L3NwYW4+XG4gICAgICAgICAgPHNwYW4+PFZhbHVlRGVub21pbmF0aW9uIGZvcm1hdHRlZD17cC50cmFkZU9yZGVyLnRyYWRpbmdGZWVzLmZvcm1hdHRlZH0gLz4gPHNwYW4+RVRIICh7cC50cmFkZU9yZGVyLmZlZVBlcmNlbnQuZm9ybWF0dGVkfSUpPC9zcGFuPjwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICB9XG4gICAgICB7Z2FzRmVlcyAmJlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm91dGNvbWUtdHJhZGUtc3VtbWFyeS1ncm91cFwiPlxuICAgICAgICAgIDxzcGFuPkdhczo8L3NwYW4+XG4gICAgICAgICAgPHNwYW4+PFZhbHVlRGVub21pbmF0aW9uIGZvcm1hdHRlZD17cC50cmFkZU9yZGVyLmdhc0ZlZXMuZm9ybWF0dGVkfSAvPjxzcGFuPkVUSDwvc3Bhbj48L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgfVxuICAgICAge3RvdGFsQ29zdCAmJlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm91dGNvbWUtdHJhZGUtc3VtbWFyeS1ncm91cFwiPlxuICAgICAgICAgIDxzcGFuPlRvdGFsOjwvc3Bhbj5cbiAgICAgICAgICA8c3Bhbj48VmFsdWVEZW5vbWluYXRpb24gZm9ybWF0dGVkPXtwLnRyYWRlLnRvdGFsQ29zdC5mb3JtYXR0ZWR9IC8+PHNwYW4+RVRIPC9zcGFuPjwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICB9XG4gICAgPC9hcnRpY2xlPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgT3V0Y29tZVRyYWRlU3VtbWFyeTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL291dGNvbWVzL2NvbXBvbmVudHMvb3V0Y29tZS10cmFkZS1zdW1tYXJ5LmpzeCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 1316:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(114);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__link_components_link__ = __webpack_require__(601);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__ = __webpack_require__(602);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__outcome_trade__ = __webpack_require__(1268);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__transactions_constants_types__ = __webpack_require__(471);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__ = __webpack_require__(1260);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__markets_constants_market_types__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_get_value__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_set_share_denomination__ = __webpack_require__(1240);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Outcome = function Outcome(p) {\n  var outcomeName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_get_value__[\"a\" /* default */])(p, 'outcome.name');\n\n  var topBidShares = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__utils_set_share_denomination__[\"a\" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_get_value__[\"a\" /* default */])(p, 'outcome.topBid.shares.formatted'), p.selectedShareDenomination);\n  var topAskShares = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__utils_set_share_denomination__[\"a\" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_get_value__[\"a\" /* default */])(p, 'outcome.topAsk.shares.formatted'), p.selectedShareDenomination);\n\n  var topBidPrice = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_get_value__[\"a\" /* default */])(p, 'outcome.topBid.price.formatted');\n  var topAskPrice = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_get_value__[\"a\" /* default */])(p, 'outcome.topAsk.price.formatted');\n\n  var lastPrice = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_get_value__[\"a\" /* default */])(p, 'outcome.lastPrice.formatted');\n  var lastPricePercent = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_get_value__[\"a\" /* default */])(p, 'outcome.lastPricePercent.rounded');\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('outcome', { selected: p.selectedOutcome.id === p.outcome.id }) },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      __WEBPACK_IMPORTED_MODULE_2__link_components_link__[\"a\" /* default */],\n      {\n        className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('outcome-row-full', { selected: p.selectedOutcome.id === p.outcome.id }),\n        onClick: function onClick() {\n          p.updateSelectedOutcome(p.outcome);\n        }\n      },\n      p.marketType === __WEBPACK_IMPORTED_MODULE_7__markets_constants_market_types__[\"b\" /* SCALAR */] ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: lastPricePercent }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        { className: 'outcome' },\n        outcomeName\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'button',\n        {\n          className: 'unstyled',\n          onClick: function onClick() {\n            p.updateTradeFromSelectedOrder(p.outcome.id, 0, __WEBPACK_IMPORTED_MODULE_5__transactions_constants_types__[\"BID\"], __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__[\"a\" /* SHARE */]);\n          }\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: topBidShares })\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'button',\n        {\n          className: 'unstyled',\n          onClick: function onClick() {\n            p.updateTradeFromSelectedOrder(p.outcome.id, 0, __WEBPACK_IMPORTED_MODULE_5__transactions_constants_types__[\"BID\"], __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__[\"b\" /* PRICE */]);\n          }\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { className: 'emphasized', formatted: topBidPrice })\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'button',\n        {\n          className: 'unstyled',\n          onClick: function onClick() {\n            p.updateTradeFromSelectedOrder(p.outcome.id, 0, __WEBPACK_IMPORTED_MODULE_5__transactions_constants_types__[\"ASK\"], __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__[\"b\" /* PRICE */]);\n          }\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { className: 'emphasized', formatted: topAskPrice })\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'button',\n        {\n          className: 'unstyled',\n          onClick: function onClick() {\n            p.updateTradeFromSelectedOrder(p.outcome.id, 0, __WEBPACK_IMPORTED_MODULE_5__transactions_constants_types__[\"ASK\"], __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__[\"a\" /* SHARE */]);\n          }\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: topAskShares })\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: lastPrice })\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      __WEBPACK_IMPORTED_MODULE_2__link_components_link__[\"a\" /* default */],\n      {\n        className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('outcome-row-condensed', { selected: p.selectedOutcome.id === p.outcome.id }),\n        onClick: function onClick() {\n          p.updateSelectedOutcome(p.outcome);\n        }\n      },\n      p.marketType === __WEBPACK_IMPORTED_MODULE_7__markets_constants_market_types__[\"b\" /* SCALAR */] ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: lastPricePercent }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        { className: 'outcome-summary' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'outcome-name' },\n          outcomeName\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Last Price: ',\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: lastPrice })\n        )\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        { className: 'outcome-best-orders outcome-best-bid' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'button',\n          {\n            className: 'unstyled',\n            onClick: function onClick() {\n              p.updateTradeFromSelectedOrder(p.outcome.id, 0, __WEBPACK_IMPORTED_MODULE_5__transactions_constants_types__[\"BID\"], __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__[\"a\" /* SHARE */]);\n            }\n          },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            { className: 'outcome-best-container' },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { className: 'emphasized', formatted: topBidPrice }),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: topBidShares })\n          )\n        )\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        { className: 'outcome-best-orders outcome-best-ask' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'button',\n          {\n            className: 'unstyled',\n            onClick: function onClick() {\n              p.updateTradeFromSelectedOrder(p.outcome.id, 0, __WEBPACK_IMPORTED_MODULE_5__transactions_constants_types__[\"ASK\"], __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__[\"a\" /* SHARE */]);\n            }\n          },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            { className: 'outcome-best-container' },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { className: 'emphasized', formatted: topAskPrice }),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: topAskShares })\n          )\n        )\n      )\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__outcome_trade__[\"a\" /* default */], {\n      marketType: p.marketType,\n      selectedOutcome: p.selectedOutcome,\n      tradeSummary: p.tradeSummary,\n      submitTrade: p.submitTrade,\n      selectedTradeSide: p.selectedTradeSide,\n      selectedShareDenomination: p.selectedShareDenomination,\n      updateSelectedTradeSide: p.updateSelectedTradeSide,\n      outcomeTradeNavItems: p.outcomeTradeNavItems,\n      minLimitPrice: p.minLimitPrice,\n      maxLimitPrice: p.maxLimitPrice,\n      isTradeCommitLocked: p.isTradeCommitLocked\n    })\n  );\n};\n\nvar _default = Outcome;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(Outcome, 'Outcome', '/home/jack/src/augur/src/modules/outcomes/components/outcome.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/outcomes/components/outcome.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1317:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__outcome__ = __webpack_require__(1316);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__markets_constants_market_types__ = __webpack_require__(28);\n\n\n\n\n\n\nvar Outcomes = function Outcomes(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'outcomes' },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'outcomes-header' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        { className: 'outcomes-header-full' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Outcome',\n          !p.marketType === __WEBPACK_IMPORTED_MODULE_2__markets_constants_market_types__[\"b\" /* SCALAR */] && 's'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Bid Q.'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Bid'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Ask'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Ask Q'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Last'\n        )\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        { className: 'outcomes-header-condensed' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Outcome',\n          !p.marketType === __WEBPACK_IMPORTED_MODULE_2__markets_constants_market_types__[\"b\" /* SCALAR */] && 's'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Bid'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Ask'\n        )\n      )\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'market-content-scrollable' },\n      (p.outcomes || []).map(function (outcome) {\n        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__outcome__[\"a\" /* default */], {\n          key: outcome.id,\n          marketType: p.marketType,\n          outcome: outcome,\n          selectedOutcome: p.selectedOutcome,\n          updateSelectedOutcome: p.updateSelectedOutcome,\n          selectedShareDenomination: p.selectedShareDenomination,\n          tradeSummary: p.tradeSummary,\n          submitTrade: p.submitTrade,\n          selectedTradeSide: p.selectedTradeSide,\n          updateSelectedTradeSide: p.updateSelectedTradeSide,\n          outcomeTradeNavItems: p.outcomeTradeNavItems,\n          updateTradeFromSelectedOrder: p.updateTradeFromSelectedOrder,\n          minLimitPrice: p.minLimitPrice,\n          maxLimitPrice: p.maxLimitPrice,\n          isTradeCommitLocked: p.isTradeCommitLocked\n        });\n      })\n    )\n  );\n};\n\nvar _default = Outcomes;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(Outcomes, 'Outcomes', '/home/jack/src/augur/src/modules/outcomes/components/outcomes.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/outcomes/components/outcomes.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vdXRjb21lcy9jb21wb25lbnRzL291dGNvbWVzLmpzeD8xY2FmIl0sIm5hbWVzIjpbIk91dGNvbWVzIiwicCIsIm1hcmtldFR5cGUiLCJvdXRjb21lcyIsIm1hcCIsIm91dGNvbWUiLCJpZCIsInNlbGVjdGVkT3V0Y29tZSIsInVwZGF0ZVNlbGVjdGVkT3V0Y29tZSIsInNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24iLCJ0cmFkZVN1bW1hcnkiLCJzdWJtaXRUcmFkZSIsInNlbGVjdGVkVHJhZGVTaWRlIiwidXBkYXRlU2VsZWN0ZWRUcmFkZVNpZGUiLCJvdXRjb21lVHJhZGVOYXZJdGVtcyIsInVwZGF0ZVRyYWRlRnJvbVNlbGVjdGVkT3JkZXIiLCJtaW5MaW1pdFByaWNlIiwibWF4TGltaXRQcmljZSIsImlzVHJhZGVDb21taXRMb2NrZWQiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFFQTs7QUFFQTs7QUFFQSxJQUFNQSxXQUFXLFNBQVhBLFFBQVc7QUFBQSxTQUNmO0FBQUE7QUFBQSxNQUFTLFdBQVUsVUFBbkI7QUFDRTtBQUFBO0FBQUEsUUFBSyxXQUFVLGlCQUFmO0FBQ0U7QUFBQTtBQUFBLFVBQUssV0FBVSxzQkFBZjtBQUNFO0FBQUE7QUFBQTtBQUFBO0FBQWMsV0FBQ0MsRUFBRUMsVUFBSCxLQUFrQiwrRUFBbEIsSUFBNEI7QUFBMUMsU0FERjtBQUVFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FGRjtBQUdFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FIRjtBQUlFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FKRjtBQUtFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FMRjtBQU1FO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFORixPQURGO0FBU0U7QUFBQTtBQUFBLFVBQUssV0FBVSwyQkFBZjtBQUNFO0FBQUE7QUFBQTtBQUFBO0FBQWMsV0FBQ0QsRUFBRUMsVUFBSCxLQUFrQiwrRUFBbEIsSUFBNEI7QUFBMUMsU0FERjtBQUVFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FGRjtBQUdFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFIRjtBQVRGLEtBREY7QUFnQkU7QUFBQTtBQUFBLFFBQUssV0FBVSwyQkFBZjtBQUNHLE9BQUNELEVBQUVFLFFBQUYsSUFBYyxFQUFmLEVBQW1CQyxHQUFuQixDQUF1QjtBQUFBLGVBQ3RCLDREQUFDLHlEQUFEO0FBQ0UsZUFBS0MsUUFBUUMsRUFEZjtBQUVFLHNCQUFZTCxFQUFFQyxVQUZoQjtBQUdFLG1CQUFTRyxPQUhYO0FBSUUsMkJBQWlCSixFQUFFTSxlQUpyQjtBQUtFLGlDQUF1Qk4sRUFBRU8scUJBTDNCO0FBTUUscUNBQTJCUCxFQUFFUSx5QkFOL0I7QUFPRSx3QkFBY1IsRUFBRVMsWUFQbEI7QUFRRSx1QkFBYVQsRUFBRVUsV0FSakI7QUFTRSw2QkFBbUJWLEVBQUVXLGlCQVR2QjtBQVVFLG1DQUF5QlgsRUFBRVksdUJBVjdCO0FBV0UsZ0NBQXNCWixFQUFFYSxvQkFYMUI7QUFZRSx3Q0FBOEJiLEVBQUVjLDRCQVpsQztBQWFFLHlCQUFlZCxFQUFFZSxhQWJuQjtBQWNFLHlCQUFlZixFQUFFZ0IsYUFkbkI7QUFlRSwrQkFBcUJoQixFQUFFaUI7QUFmekIsVUFEc0I7QUFBQSxPQUF2QjtBQURIO0FBaEJGLEdBRGU7QUFBQSxDQUFqQjs7ZUF5Q2VsQixRO0FBQWY7Ozs7Ozs7O2dDQXpDTUEsUSIsImZpbGUiOiIxMzE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IE91dGNvbWUgZnJvbSAnbW9kdWxlcy9vdXRjb21lcy9jb21wb25lbnRzL291dGNvbWUnO1xuXG5pbXBvcnQgeyBTQ0FMQVIgfSBmcm9tICdtb2R1bGVzL21hcmtldHMvY29uc3RhbnRzL21hcmtldC10eXBlcyc7XG5cbmNvbnN0IE91dGNvbWVzID0gcCA9PiAoXG4gIDxhcnRpY2xlIGNsYXNzTmFtZT1cIm91dGNvbWVzXCIgPlxuICAgIDxkaXYgY2xhc3NOYW1lPVwib3V0Y29tZXMtaGVhZGVyXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm91dGNvbWVzLWhlYWRlci1mdWxsXCI+XG4gICAgICAgIDxzcGFuPk91dGNvbWV7IXAubWFya2V0VHlwZSA9PT0gU0NBTEFSICYmICdzJ308L3NwYW4+XG4gICAgICAgIDxzcGFuPkJpZCBRLjwvc3Bhbj5cbiAgICAgICAgPHNwYW4+QmlkPC9zcGFuPlxuICAgICAgICA8c3Bhbj5Bc2s8L3NwYW4+XG4gICAgICAgIDxzcGFuPkFzayBRPC9zcGFuPlxuICAgICAgICA8c3Bhbj5MYXN0PC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm91dGNvbWVzLWhlYWRlci1jb25kZW5zZWRcIj5cbiAgICAgICAgPHNwYW4+T3V0Y29tZXshcC5tYXJrZXRUeXBlID09PSBTQ0FMQVIgJiYgJ3MnfTwvc3Bhbj5cbiAgICAgICAgPHNwYW4+QmlkPC9zcGFuPlxuICAgICAgICA8c3Bhbj5Bc2s8L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1hcmtldC1jb250ZW50LXNjcm9sbGFibGVcIiA+XG4gICAgICB7KHAub3V0Y29tZXMgfHwgW10pLm1hcChvdXRjb21lID0+IChcbiAgICAgICAgPE91dGNvbWVcbiAgICAgICAgICBrZXk9e291dGNvbWUuaWR9XG4gICAgICAgICAgbWFya2V0VHlwZT17cC5tYXJrZXRUeXBlfVxuICAgICAgICAgIG91dGNvbWU9e291dGNvbWV9XG4gICAgICAgICAgc2VsZWN0ZWRPdXRjb21lPXtwLnNlbGVjdGVkT3V0Y29tZX1cbiAgICAgICAgICB1cGRhdGVTZWxlY3RlZE91dGNvbWU9e3AudXBkYXRlU2VsZWN0ZWRPdXRjb21lfVxuICAgICAgICAgIHNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb249e3Auc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbn1cbiAgICAgICAgICB0cmFkZVN1bW1hcnk9e3AudHJhZGVTdW1tYXJ5fVxuICAgICAgICAgIHN1Ym1pdFRyYWRlPXtwLnN1Ym1pdFRyYWRlfVxuICAgICAgICAgIHNlbGVjdGVkVHJhZGVTaWRlPXtwLnNlbGVjdGVkVHJhZGVTaWRlfVxuICAgICAgICAgIHVwZGF0ZVNlbGVjdGVkVHJhZGVTaWRlPXtwLnVwZGF0ZVNlbGVjdGVkVHJhZGVTaWRlfVxuICAgICAgICAgIG91dGNvbWVUcmFkZU5hdkl0ZW1zPXtwLm91dGNvbWVUcmFkZU5hdkl0ZW1zfVxuICAgICAgICAgIHVwZGF0ZVRyYWRlRnJvbVNlbGVjdGVkT3JkZXI9e3AudXBkYXRlVHJhZGVGcm9tU2VsZWN0ZWRPcmRlcn1cbiAgICAgICAgICBtaW5MaW1pdFByaWNlPXtwLm1pbkxpbWl0UHJpY2V9XG4gICAgICAgICAgbWF4TGltaXRQcmljZT17cC5tYXhMaW1pdFByaWNlfVxuICAgICAgICAgIGlzVHJhZGVDb21taXRMb2NrZWQ9e3AuaXNUcmFkZUNvbW1pdExvY2tlZH1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvZGl2PlxuICA8L2FydGljbGU+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBPdXRjb21lcztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL291dGNvbWVzL2NvbXBvbmVudHMvb3V0Y29tZXMuanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1321:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(114);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_checkbox__ = __webpack_require__(606);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__outcome_options__ = __webpack_require__(1269);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__markets_constants_market_types__ = __webpack_require__(28);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\nvar ReportForm = function (_Component) {\n  _inherits(ReportForm, _Component);\n\n  function ReportForm(props) {\n    _classCallCheck(this, ReportForm);\n\n    var _this = _possibleConstructorReturn(this, (ReportForm.__proto__ || Object.getPrototypeOf(ReportForm)).call(this, props));\n\n    _this.handleOutcomeChange = function () {\n      return _this.__handleOutcomeChange__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.state = {\n      type: props.type,\n      minValue: props.minValue,\n      maxValue: props.maxValue,\n      reportedOutcomeID: props.reportedOutcomeID,\n      isIndeterminate: props.isIndeterminate,\n      isUnethical: props.isUnethical,\n      isReported: props.isReported\n    };\n    _this.handleSubmit = _this.handleSubmit.bind(_this);\n    _this.handleOutcomeChange = _this.handleOutcomeChange.bind(_this);\n    return _this;\n  }\n  // TODO -- Prop Validations\n\n\n  _createClass(ReportForm, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.isReported !== this.state.isReported) {\n        this.setState({ isReported: nextProps.isReported });\n      }\n    }\n  }, {\n    key: '__handleOutcomeChange__REACT_HOT_LOADER__',\n    value: function __handleOutcomeChange__REACT_HOT_LOADER__(e) {\n      return this.setState({ reportedOutcomeID: e.target.value });\n    }\n  }, {\n    key: 'handleSubmit',\n    value: function handleSubmit() {\n      this.props.onClickSubmit(this.state.reportedOutcomeID, this.state.isUnethical, this.state.isIndeterminate);\n      this.setState({ reportedOutcomeID: '', isIndeterminate: undefined, isUnethical: undefined, isReported: false });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var p = this.props;\n      var s = this.state;\n      var indeterminateValue = p.type === __WEBPACK_IMPORTED_MODULE_4__markets_constants_market_types__[\"c\" /* BINARY */] ? '1.5' : '0.5';\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('report-form', { reported: s.isReported }) },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'outcome-options' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'h4',\n            null,\n            !s.isReported ? 'Report the outcome' : 'Outcome Reported'\n          ),\n          p.type === __WEBPACK_IMPORTED_MODULE_4__markets_constants_market_types__[\"b\" /* SCALAR */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            null,\n            'Enter the outcome of this event, if it was at least ',\n            p.minValue,\n            ' and at most ',\n            p.maxValue,\n            '.  If the outcome was above ',\n            p.maxValue,\n            ', you should report the outcome as ',\n            p.maxValue,\n            '; if the outcome was below ',\n            p.minValue,\n            ', you should report the outcome as ',\n            p.minValue,\n            '.'\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__outcome_options__[\"a\" /* default */], {\n            type: p.type,\n            reportableOutcomes: p.reportableOutcomes,\n            reportedOutcomeID: s.reportedOutcomeID,\n            isReported: s.isReported,\n            isIndeterminate: s.isIndeterminate,\n            onOutcomeChange: this.handleOutcomeChange\n          })\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'indeterminate' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'h4',\n            null,\n            'Is this question indeterminate?'\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            { className: 'indeterminate-message' },\n            'If this question is subjective, vague, or did not have a clear answer on the end date above, you should report indeterminate.'\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_checkbox__[\"a\" /* default */], {\n            className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('indeterminate-checkbox', { disabled: s.isReported }),\n            text: 'Yes, this question is indeterminate',\n            isChecked: !!s.isIndeterminate,\n            onClick: !s.isReported && function () {\n              return _this2.setState({\n                isIndeterminate: !s.isIndeterminate,\n                reportedOutcomeID: indeterminateValue\n              });\n            } || undefined\n          })\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'unethical' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'h4',\n            null,\n            'Is this question unethical?'\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            { className: 'unethical-message' },\n            'The consensus answer to this question will be over-ridden if the question is reported as unethical by 60% (or more) of those reporting this market.'\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_checkbox__[\"a\" /* default */], {\n            className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('unethical-checkbox', { disabled: s.isReported }),\n            text: 'Yes, this question is unethical',\n            isChecked: !!s.isUnethical,\n            onClick: !s.isReported && function () {\n              return _this2.setState({ isUnethical: !s.isUnethical });\n            } || undefined\n          })\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'report-actions' },\n          !s.isReported && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'button report',\n              disabled: !s.reportedOutcomeID,\n              onClick: !!s.reportedOutcomeID && !s.isReported && this.handleSubmit || undefined\n            },\n            'Submit Report'\n          ),\n          s.isReported && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'button report-again',\n              onClick: function onClick() {\n                return _this2.setState({ isReported: false });\n              }\n            },\n            'Report Again'\n          )\n        )\n      );\n    }\n  }]);\n\n  return ReportForm;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nReportForm.propTypes = {\n  type: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.string,\n  minValue: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.string,\n  maxValue: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.string,\n  // reportableOutcomes: React.PropTypes.array,\n  reportedOutcomeID: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.any,\n  isIndeterminate: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.bool,\n  isUnethical: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.bool,\n  isReported: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.bool,\n  onClickSubmit: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.func\n};\nvar _default = ReportForm;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(ReportForm, 'ReportForm', '/home/jack/src/augur/src/modules/reports/components/report-form.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/reports/components/report-form.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1322:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_components_checkbox__ = __webpack_require__(606);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__outcome_options__ = __webpack_require__(1269);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\nvar SnitchForm = function (_Component) {\n  _inherits(SnitchForm, _Component);\n\n  function SnitchForm(props) {\n    _classCallCheck(this, SnitchForm);\n\n    var _this = _possibleConstructorReturn(this, (SnitchForm.__proto__ || Object.getPrototypeOf(SnitchForm)).call(this, props));\n\n    _this.state = {\n      reporter: '',\n      report: '',\n      salt: '',\n      isIndeterminate: false,\n      isUnethical: false,\n      isReported: false\n    };\n    return _this;\n  }\n  // TODO -- Prop Validations\n\n\n  _createClass(SnitchForm, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var p = this.props;\n      var s = this.state;\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: 'snitch-form' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'p',\n          { className: 'snitch-message' },\n          'It is important for Augur\\'s security that Reporters keep their reports ',\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'b',\n            null,\n            'secret'\n          ),\n          ' until the first half of the reporting cycle is complete (in $',\n          p.branch.phaseTimeRemaining,\n          ').  If another Reporter has disclosed their Report (and its accompanying randomly-generated unique identifier) to you, you can enter the other Reporter\\'s reported values here and you will receive half of their Reputation balance.  (Note: there is no penalty to you if this fails.  The other Reporter will only be notified if the information you enter matches their report.)'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          null,\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'label',\n            { htmlFor: 'snitch-reporter' },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'h4',\n              null,\n              'Ethereum address of cheater'\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input', {\n              type: 'text',\n              className: 'snitch-input',\n              name: 'snitch-reporter',\n              value: s.reporter,\n              onChange: function onChange(reporter) {\n                return _this2.setState({ reporter: reporter.target.value });\n              }\n            })\n          )\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          null,\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'label',\n            { htmlFor: 'snitch-salt' },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'h4',\n              null,\n              'Report\\'s unique ID (salt)'\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input', {\n              type: 'text',\n              className: 'snitch-input',\n              name: 'snitch-salt',\n              value: s.salt,\n              onChange: function onChange(salt) {\n                return _this2.setState({ salt: salt.target.value });\n              }\n            })\n          )\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          null,\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'label',\n            { htmlFor: 'snitch-report' },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'h4',\n              null,\n              'Outcome reported by cheater'\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__outcome_options__[\"a\" /* default */], {\n              type: p.type,\n              reportableOutcomes: p.reportableOutcomes,\n              reportedOutcomeID: s.report,\n              isReported: s.isReported,\n              isIndeterminate: s.isIndeterminate,\n              onOutcomeChange: function onOutcomeChange(report) {\n                return _this2.setState({ report: report.target.value });\n              }\n            }),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_checkbox__[\"a\" /* default */], {\n              className: 'indeterminate-checkbox',\n              text: 'Indeterminate',\n              isChecked: s.isIndeterminate,\n              onClick: function onClick(isIndeterminate) {\n                return _this2.setState({ isIndeterminate: !s.isIndeterminate });\n              }\n            }),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_checkbox__[\"a\" /* default */], {\n              className: 'unethical-checkbox',\n              text: 'Unethical',\n              isChecked: s.isUnethical,\n              onClick: function onClick(isUnethical) {\n                return _this2.setState({ isUnethical: !s.isUnethical });\n              }\n            })\n          )\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'snitch-actions' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'button snitch',\n              disabled: !s.reporter && !s.report && !s.salt,\n              onClick: function onClick() {\n                return p.onSubmitSlashRep(s.salt, s.report, s.reporter, s.isIndeterminate, s.isUnethical);\n              }\n            },\n            'Snitch'\n          )\n        )\n      );\n    }\n  }]);\n\n  return SnitchForm;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nSnitchForm.propTypes = {};\nvar _default = SnitchForm;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(SnitchForm, 'SnitchForm', '/home/jack/src/augur/src/modules/reports/components/snitch-form.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/reports/components/snitch-form.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9yZXBvcnRzL2NvbXBvbmVudHMvc25pdGNoLWZvcm0uanN4PzllMDIiXSwibmFtZXMiOlsiU25pdGNoRm9ybSIsInByb3BzIiwic3RhdGUiLCJyZXBvcnRlciIsInJlcG9ydCIsInNhbHQiLCJpc0luZGV0ZXJtaW5hdGUiLCJpc1VuZXRoaWNhbCIsImlzUmVwb3J0ZWQiLCJwIiwicyIsImJyYW5jaCIsInBoYXNlVGltZVJlbWFpbmluZyIsInNldFN0YXRlIiwidGFyZ2V0IiwidmFsdWUiLCJ0eXBlIiwicmVwb3J0YWJsZU91dGNvbWVzIiwib25TdWJtaXRTbGFzaFJlcCIsInByb3BUeXBlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBOztJQUVxQkEsVTs7O0FBSW5CLHNCQUFZQyxLQUFaLEVBQW1CO0FBQUE7O0FBQUEsd0hBQ1hBLEtBRFc7O0FBRWpCLFVBQUtDLEtBQUwsR0FBYTtBQUNYQyxnQkFBVSxFQURDO0FBRVhDLGNBQVEsRUFGRztBQUdYQyxZQUFNLEVBSEs7QUFJWEMsdUJBQWlCLEtBSk47QUFLWEMsbUJBQWEsS0FMRjtBQU1YQyxrQkFBWTtBQU5ELEtBQWI7QUFGaUI7QUFVbEI7QUFiRDs7Ozs7NkJBZVM7QUFBQTs7QUFDUCxVQUFNQyxJQUFJLEtBQUtSLEtBQWY7QUFDQSxVQUFNUyxJQUFJLEtBQUtSLEtBQWY7QUFDQSxhQUNFO0FBQUE7QUFBQSxVQUFTLFdBQVUsYUFBbkI7QUFDRTtBQUFBO0FBQUEsWUFBRyxXQUFVLGdCQUFiO0FBQUE7QUFDNkU7QUFBQTtBQUFBO0FBQUE7QUFBQSxXQUQ3RTtBQUFBO0FBQ3lKTyxZQUFFRSxNQUFGLENBQVNDLGtCQURsSztBQUFBO0FBQUEsU0FERjtBQUlFO0FBQUE7QUFBQTtBQUNFO0FBQUE7QUFBQSxjQUFPLFNBQVEsaUJBQWY7QUFDRTtBQUFBO0FBQUE7QUFBQTtBQUFBLGFBREY7QUFFRTtBQUNFLG9CQUFLLE1BRFA7QUFFRSx5QkFBVSxjQUZaO0FBR0Usb0JBQUssaUJBSFA7QUFJRSxxQkFBT0YsRUFBRVAsUUFKWDtBQUtFLHdCQUFVO0FBQUEsdUJBQVksT0FBS1UsUUFBTCxDQUFjLEVBQUVWLFVBQVVBLFNBQVNXLE1BQVQsQ0FBZ0JDLEtBQTVCLEVBQWQsQ0FBWjtBQUFBO0FBTFo7QUFGRjtBQURGLFNBSkY7QUFnQkU7QUFBQTtBQUFBO0FBQ0U7QUFBQTtBQUFBLGNBQU8sU0FBUSxhQUFmO0FBQ0U7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQURGO0FBRUU7QUFDRSxvQkFBSyxNQURQO0FBRUUseUJBQVUsY0FGWjtBQUdFLG9CQUFLLGFBSFA7QUFJRSxxQkFBT0wsRUFBRUwsSUFKWDtBQUtFLHdCQUFVO0FBQUEsdUJBQVEsT0FBS1EsUUFBTCxDQUFjLEVBQUVSLE1BQU1BLEtBQUtTLE1BQUwsQ0FBWUMsS0FBcEIsRUFBZCxDQUFSO0FBQUE7QUFMWjtBQUZGO0FBREYsU0FoQkY7QUE0QkU7QUFBQTtBQUFBO0FBQ0U7QUFBQTtBQUFBLGNBQU8sU0FBUSxlQUFmO0FBQ0U7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQURGO0FBRUUsd0VBQUMsaUVBQUQ7QUFDRSxvQkFBTU4sRUFBRU8sSUFEVjtBQUVFLGtDQUFvQlAsRUFBRVEsa0JBRnhCO0FBR0UsaUNBQW1CUCxFQUFFTixNQUh2QjtBQUlFLDBCQUFZTSxFQUFFRixVQUpoQjtBQUtFLCtCQUFpQkUsRUFBRUosZUFMckI7QUFNRSwrQkFBaUI7QUFBQSx1QkFBVSxPQUFLTyxRQUFMLENBQWMsRUFBRVQsUUFBUUEsT0FBT1UsTUFBUCxDQUFjQyxLQUF4QixFQUFkLENBQVY7QUFBQTtBQU5uQixjQUZGO0FBVUUsd0VBQUMsNEVBQUQ7QUFDRSx5QkFBVSx3QkFEWjtBQUVFLG9CQUFLLGVBRlA7QUFHRSx5QkFBV0wsRUFBRUosZUFIZjtBQUlFLHVCQUFTO0FBQUEsdUJBQW1CLE9BQUtPLFFBQUwsQ0FBYyxFQUFFUCxpQkFBaUIsQ0FBQ0ksRUFBRUosZUFBdEIsRUFBZCxDQUFuQjtBQUFBO0FBSlgsY0FWRjtBQWdCRSx3RUFBQyw0RUFBRDtBQUNFLHlCQUFVLG9CQURaO0FBRUUsb0JBQUssV0FGUDtBQUdFLHlCQUFXSSxFQUFFSCxXQUhmO0FBSUUsdUJBQVM7QUFBQSx1QkFBZSxPQUFLTSxRQUFMLENBQWMsRUFBRU4sYUFBYSxDQUFDRyxFQUFFSCxXQUFsQixFQUFkLENBQWY7QUFBQTtBQUpYO0FBaEJGO0FBREYsU0E1QkY7QUFxREU7QUFBQTtBQUFBLFlBQUssV0FBVSxnQkFBZjtBQUNFO0FBQUE7QUFBQTtBQUNFLHlCQUFVLGVBRFo7QUFFRSx3QkFBVyxDQUFDRyxFQUFFUCxRQUFILElBQWUsQ0FBQ08sRUFBRU4sTUFBbEIsSUFBNEIsQ0FBQ00sRUFBRUwsSUFGNUM7QUFHRSx1QkFBUztBQUFBLHVCQUFNSSxFQUFFUyxnQkFBRixDQUFtQlIsRUFBRUwsSUFBckIsRUFBMkJLLEVBQUVOLE1BQTdCLEVBQXFDTSxFQUFFUCxRQUF2QyxFQUFpRE8sRUFBRUosZUFBbkQsRUFBb0VJLEVBQUVILFdBQXRFLENBQU47QUFBQTtBQUhYO0FBQUE7QUFBQTtBQURGO0FBckRGLE9BREY7QUFpRUQ7Ozs7RUFwRnFDLGdEOztBQUFuQlAsVSxDQUVabUIsUyxHQUFZLEU7ZUFGQW5CLFU7Ozs7Ozs7OztnQ0FBQUEsVSIsImZpbGUiOiIxMzIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDaGVja2JveCBmcm9tICdtb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL2NoZWNrYm94JztcbmltcG9ydCBPdXRjb21lT3B0aW9ucyBmcm9tICdtb2R1bGVzL3JlcG9ydHMvY29tcG9uZW50cy9vdXRjb21lLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTbml0Y2hGb3JtIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgLy8gVE9ETyAtLSBQcm9wIFZhbGlkYXRpb25zXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7fTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgcmVwb3J0ZXI6ICcnLFxuICAgICAgcmVwb3J0OiAnJyxcbiAgICAgIHNhbHQ6ICcnLFxuICAgICAgaXNJbmRldGVybWluYXRlOiBmYWxzZSxcbiAgICAgIGlzVW5ldGhpY2FsOiBmYWxzZSxcbiAgICAgIGlzUmVwb3J0ZWQ6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBwID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gKFxuICAgICAgPGFydGljbGUgY2xhc3NOYW1lPVwic25pdGNoLWZvcm1cIj5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwic25pdGNoLW1lc3NhZ2VcIj5cbiAgICAgICAgICBJdCBpcyBpbXBvcnRhbnQgZm9yIEF1Z3VyJiMzOTtzIHNlY3VyaXR5IHRoYXQgUmVwb3J0ZXJzIGtlZXAgdGhlaXIgcmVwb3J0cyA8Yj5zZWNyZXQ8L2I+IHVudGlsIHRoZSBmaXJzdCBoYWxmIG9mIHRoZSByZXBvcnRpbmcgY3ljbGUgaXMgY29tcGxldGUgKGluICR7cC5icmFuY2gucGhhc2VUaW1lUmVtYWluaW5nfSkuICBJZiBhbm90aGVyIFJlcG9ydGVyIGhhcyBkaXNjbG9zZWQgdGhlaXIgUmVwb3J0IChhbmQgaXRzIGFjY29tcGFueWluZyByYW5kb21seS1nZW5lcmF0ZWQgdW5pcXVlIGlkZW50aWZpZXIpIHRvIHlvdSwgeW91IGNhbiBlbnRlciB0aGUgb3RoZXIgUmVwb3J0ZXImIzM5O3MgcmVwb3J0ZWQgdmFsdWVzIGhlcmUgYW5kIHlvdSB3aWxsIHJlY2VpdmUgaGFsZiBvZiB0aGVpciBSZXB1dGF0aW9uIGJhbGFuY2UuICAoTm90ZTogdGhlcmUgaXMgbm8gcGVuYWx0eSB0byB5b3UgaWYgdGhpcyBmYWlscy4gIFRoZSBvdGhlciBSZXBvcnRlciB3aWxsIG9ubHkgYmUgbm90aWZpZWQgaWYgdGhlIGluZm9ybWF0aW9uIHlvdSBlbnRlciBtYXRjaGVzIHRoZWlyIHJlcG9ydC4pXG4gICAgICAgIDwvcD5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInNuaXRjaC1yZXBvcnRlclwiPlxuICAgICAgICAgICAgPGg0PkV0aGVyZXVtIGFkZHJlc3Mgb2YgY2hlYXRlcjwvaDQ+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzbml0Y2gtaW5wdXRcIlxuICAgICAgICAgICAgICBuYW1lPVwic25pdGNoLXJlcG9ydGVyXCJcbiAgICAgICAgICAgICAgdmFsdWU9e3MucmVwb3J0ZXJ9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtyZXBvcnRlciA9PiB0aGlzLnNldFN0YXRlKHsgcmVwb3J0ZXI6IHJlcG9ydGVyLnRhcmdldC52YWx1ZSB9KX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJzbml0Y2gtc2FsdFwiPlxuICAgICAgICAgICAgPGg0PlJlcG9ydCYjMzk7cyB1bmlxdWUgSUQgKHNhbHQpPC9oND5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNuaXRjaC1pbnB1dFwiXG4gICAgICAgICAgICAgIG5hbWU9XCJzbml0Y2gtc2FsdFwiXG4gICAgICAgICAgICAgIHZhbHVlPXtzLnNhbHR9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtzYWx0ID0+IHRoaXMuc2V0U3RhdGUoeyBzYWx0OiBzYWx0LnRhcmdldC52YWx1ZSB9KX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJzbml0Y2gtcmVwb3J0XCI+XG4gICAgICAgICAgICA8aDQ+T3V0Y29tZSByZXBvcnRlZCBieSBjaGVhdGVyPC9oND5cbiAgICAgICAgICAgIDxPdXRjb21lT3B0aW9uc1xuICAgICAgICAgICAgICB0eXBlPXtwLnR5cGV9XG4gICAgICAgICAgICAgIHJlcG9ydGFibGVPdXRjb21lcz17cC5yZXBvcnRhYmxlT3V0Y29tZXN9XG4gICAgICAgICAgICAgIHJlcG9ydGVkT3V0Y29tZUlEPXtzLnJlcG9ydH1cbiAgICAgICAgICAgICAgaXNSZXBvcnRlZD17cy5pc1JlcG9ydGVkfVxuICAgICAgICAgICAgICBpc0luZGV0ZXJtaW5hdGU9e3MuaXNJbmRldGVybWluYXRlfVxuICAgICAgICAgICAgICBvbk91dGNvbWVDaGFuZ2U9e3JlcG9ydCA9PiB0aGlzLnNldFN0YXRlKHsgcmVwb3J0OiByZXBvcnQudGFyZ2V0LnZhbHVlIH0pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxDaGVja2JveFxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJpbmRldGVybWluYXRlLWNoZWNrYm94XCJcbiAgICAgICAgICAgICAgdGV4dD1cIkluZGV0ZXJtaW5hdGVcIlxuICAgICAgICAgICAgICBpc0NoZWNrZWQ9e3MuaXNJbmRldGVybWluYXRlfVxuICAgICAgICAgICAgICBvbkNsaWNrPXtpc0luZGV0ZXJtaW5hdGUgPT4gdGhpcy5zZXRTdGF0ZSh7IGlzSW5kZXRlcm1pbmF0ZTogIXMuaXNJbmRldGVybWluYXRlIH0pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxDaGVja2JveFxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ1bmV0aGljYWwtY2hlY2tib3hcIlxuICAgICAgICAgICAgICB0ZXh0PVwiVW5ldGhpY2FsXCJcbiAgICAgICAgICAgICAgaXNDaGVja2VkPXtzLmlzVW5ldGhpY2FsfVxuICAgICAgICAgICAgICBvbkNsaWNrPXtpc1VuZXRoaWNhbCA9PiB0aGlzLnNldFN0YXRlKHsgaXNVbmV0aGljYWw6ICFzLmlzVW5ldGhpY2FsIH0pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzbml0Y2gtYWN0aW9uc1wiPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ1dHRvbiBzbml0Y2hcIlxuICAgICAgICAgICAgZGlzYWJsZWQ9eyghcy5yZXBvcnRlciAmJiAhcy5yZXBvcnQgJiYgIXMuc2FsdCl9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBwLm9uU3VibWl0U2xhc2hSZXAocy5zYWx0LCBzLnJlcG9ydCwgcy5yZXBvcnRlciwgcy5pc0luZGV0ZXJtaW5hdGUsIHMuaXNVbmV0aGljYWwpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIFNuaXRjaFxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvYXJ0aWNsZT5cbiAgICApO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9yZXBvcnRzL2NvbXBvbmVudHMvc25pdGNoLWZvcm0uanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }

});