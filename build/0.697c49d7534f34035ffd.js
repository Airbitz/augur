webpackJsonp([0,11],{

/***/ 1158:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__market_active__ = __webpack_require__(1281);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__market_reported__ = __webpack_require__(1290);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_components_null_state_message__ = __webpack_require__(605);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_get_value__ = __webpack_require__(282);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\n\n\n\n\nvar MarketView = function MarketView(p) {\n  var nullMessage = 'No Market Data';\n\n  var isAvailable = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_get_value__[\"a\" /* default */])(p, 'market.id');\n  var isOpen = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_get_value__[\"a\" /* default */])(p, 'market.isOpen');\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'section',\n    { id: 'market_view' },\n    !isAvailable && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_null_state_message__[\"a\" /* default */], { message: nullMessage }),\n    isAvailable && isOpen && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__market_active__[\"a\" /* default */], _extends({}, p, {\n      isReportTabVisible: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_get_value__[\"a\" /* default */])(p, 'market.isReportTabVisible'),\n      isPendingReport: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_get_value__[\"a\" /* default */])(p, 'market.isPendingReport')\n    })),\n    isAvailable && !isOpen && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__market_reported__[\"a\" /* default */], p)\n  );\n};\n\nvar _default = MarketView;\n/* harmony default export */ exports[\"default\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketView, 'MarketView', '/home/jack/src/augur/src/modules/market/components/market-view.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-view.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtdmlldy5qc3g/MTJmNSJdLCJuYW1lcyI6WyJNYXJrZXRWaWV3IiwicCIsIm51bGxNZXNzYWdlIiwiaXNBdmFpbGFibGUiLCJnZXRWYWx1ZSIsImlzT3BlbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsSUFBTUEsYUFBYSxTQUFiQSxVQUFhLENBQUNDLENBQUQsRUFBTztBQUN4QixNQUFNQyxjQUFjLGdCQUFwQjs7QUFFQSxNQUFNQyxjQUFjLHdGQUFBQyxDQUFTSCxDQUFULEVBQVksV0FBWixDQUFwQjtBQUNBLE1BQU1JLFNBQVMsd0ZBQUFELENBQVNILENBQVQsRUFBWSxlQUFaLENBQWY7O0FBRUEsU0FDRTtBQUFBO0FBQUEsTUFBUyxJQUFHLGFBQVo7QUFDRyxLQUFDRSxXQUFELElBQWdCLDREQUFDLHNGQUFELElBQWtCLFNBQVNELFdBQTNCLEdBRG5CO0FBRUdDLG1CQUFlRSxNQUFmLElBQ0MsNERBQUMsK0RBQUQsZUFDTUosQ0FETjtBQUVFLDBCQUFvQix3RkFBQUcsQ0FBU0gsQ0FBVCxFQUFZLDJCQUFaLENBRnRCO0FBR0UsdUJBQWlCLHdGQUFBRyxDQUFTSCxDQUFULEVBQVksd0JBQVo7QUFIbkIsT0FISjtBQVNHRSxtQkFBZSxDQUFDRSxNQUFoQixJQUEwQiw0REFBQyxpRUFBRCxFQUFvQkosQ0FBcEI7QUFUN0IsR0FERjtBQWFELENBbkJEOztlQXFCZUQsVTtBQUFmOzs7Ozs7OztnQ0FyQk1BLFUiLCJmaWxlIjoiMTE1OC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBNYXJrZXRBY3RpdmUgZnJvbSAnbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtYWN0aXZlJztcbmltcG9ydCBNYXJrZXRSZXBvcnRlZCBmcm9tICdtb2R1bGVzL21hcmtldC9jb21wb25lbnRzL21hcmtldC1yZXBvcnRlZCc7XG5pbXBvcnQgTnVsbFN0YXRlTWVzc2FnZSBmcm9tICdtb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL251bGwtc3RhdGUtbWVzc2FnZSc7XG5cbmltcG9ydCBnZXRWYWx1ZSBmcm9tICd1dGlscy9nZXQtdmFsdWUnO1xuXG5jb25zdCBNYXJrZXRWaWV3ID0gKHApID0+IHtcbiAgY29uc3QgbnVsbE1lc3NhZ2UgPSAnTm8gTWFya2V0IERhdGEnO1xuXG4gIGNvbnN0IGlzQXZhaWxhYmxlID0gZ2V0VmFsdWUocCwgJ21hcmtldC5pZCcpO1xuICBjb25zdCBpc09wZW4gPSBnZXRWYWx1ZShwLCAnbWFya2V0LmlzT3BlbicpO1xuXG4gIHJldHVybiAoXG4gICAgPHNlY3Rpb24gaWQ9XCJtYXJrZXRfdmlld1wiPlxuICAgICAgeyFpc0F2YWlsYWJsZSAmJiA8TnVsbFN0YXRlTWVzc2FnZSBtZXNzYWdlPXtudWxsTWVzc2FnZX0gLz59XG4gICAgICB7aXNBdmFpbGFibGUgJiYgaXNPcGVuICYmXG4gICAgICAgIDxNYXJrZXRBY3RpdmVcbiAgICAgICAgICB7Li4ucH1cbiAgICAgICAgICBpc1JlcG9ydFRhYlZpc2libGU9e2dldFZhbHVlKHAsICdtYXJrZXQuaXNSZXBvcnRUYWJWaXNpYmxlJyl9XG4gICAgICAgICAgaXNQZW5kaW5nUmVwb3J0PXtnZXRWYWx1ZShwLCAnbWFya2V0LmlzUGVuZGluZ1JlcG9ydCcpfVxuICAgICAgICAvPlxuICAgICAgfVxuICAgICAge2lzQXZhaWxhYmxlICYmICFpc09wZW4gJiYgPE1hcmtldFJlcG9ydGVkIHsuLi5wfSAvPn1cbiAgICA8L3NlY3Rpb24+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNYXJrZXRWaWV3O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LXZpZXcuanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1230:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(113);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_bignumber_js__ = __webpack_require__(68);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_bignumber_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_debounce__ = __webpack_require__(320);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\nvar Input = function (_Component) {\n  _inherits(Input, _Component);\n\n  function Input(props) {\n    _classCallCheck(this, Input);\n\n    var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));\n\n    _this.handleOnChange = function () {\n      return _this.__handleOnChange__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.handleOnBlur = function () {\n      return _this.__handleOnBlur__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.handleClear = function () {\n      return _this.__handleClear__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.handleToggleVisibility = function () {\n      return _this.__handleToggleVisibility__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.timeoutVisibleHiddenContent = function () {\n      return _this.__timeoutVisibleHiddenContent__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.finalDebounceMS = _this.props.debounceMS > 0 || _this.props.debounceMS === 0 ? _this.props.debounceMS : 500;\n    _this.state = {\n      value: _this.props.value || '',\n      timeoutID: '',\n      isHiddenContentVisible: false\n    };\n    _this.handleOnChange = _this.handleOnChange.bind(_this);\n    _this.handleOnBlur = _this.handleOnBlur.bind(_this);\n    _this.handleClear = _this.handleClear.bind(_this);\n    _this.handleToggleVisibility = _this.handleToggleVisibility.bind(_this);\n    _this.timeoutVisibleHiddenContent = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_debounce__[\"a\" /* default */])(_this.timeoutVisibleHiddenContent.bind(_this), 1200);\n    return _this;\n  }\n  // TODO -- Prop Validations\n\n\n  _createClass(Input, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.value !== nextProps.value) {\n        this.setState({ value: nextProps.value });\n      }\n    }\n  }, {\n    key: 'componentWillUpdate',\n    value: function componentWillUpdate(nextProps, nextState) {\n      if (nextProps.canToggleVisibility && !nextState.value && nextState.isHiddenContentVisible) {\n        this.setState({ isHiddenContentVisible: false });\n      }\n\n      if (this.state.isHiddenContentVisible !== nextState.isHiddenContentVisible && nextState.isHiddenContentVisible) {\n        this.timeoutVisibleHiddenContent();\n      }\n    }\n  }, {\n    key: '__handleOnChange__REACT_HOT_LOADER__',\n    value: function __handleOnChange__REACT_HOT_LOADER__(e) {\n      var _this2 = this;\n\n      var newValue = e.target.value;\n      if (this.finalDebounceMS) {\n        clearTimeout(this.state.timeoutID);\n        if (newValue !== this.props.value) {\n          this.setState({ timeoutID: setTimeout(function () {\n              return _this2.props.onChange(newValue);\n            }, this.finalDebounceMS) });\n        }\n      } else if (newValue !== this.props.value) {\n        this.props.onChange(newValue);\n      }\n      this.setState({ value: newValue });\n    }\n  }, {\n    key: '__handleOnBlur__REACT_HOT_LOADER__',\n    value: function __handleOnBlur__REACT_HOT_LOADER__() {\n      if (this.finalDebounceMS) {\n        clearTimeout(this.state.timeoutID);\n        if (this.state.value !== this.props.value) {\n          this.props.onChange(this.state.value);\n        }\n      }\n      this.props.onBlur && this.props.onBlur();\n    }\n  }, {\n    key: '__handleClear__REACT_HOT_LOADER__',\n    value: function __handleClear__REACT_HOT_LOADER__() {\n      this.setState({ value: '' });\n      this.props.onChange('');\n    }\n  }, {\n    key: '__handleToggleVisibility__REACT_HOT_LOADER__',\n    value: function __handleToggleVisibility__REACT_HOT_LOADER__() {\n      this.setState({ isHiddenContentVisible: !this.state.isHiddenContentVisible });\n    }\n  }, {\n    key: '__timeoutVisibleHiddenContent__REACT_HOT_LOADER__',\n    value: function __timeoutVisibleHiddenContent__REACT_HOT_LOADER__() {\n      this.setState({ isHiddenContentVisible: false });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          isClearable = _props.isClearable,\n          isIncrementable = _props.isIncrementable,\n          incrementAmount = _props.incrementAmount,\n          updateValue = _props.updateValue,\n          canToggleVisibility = _props.canToggleVisibility,\n          shouldMatchValue = _props.shouldMatchValue,\n          comparisonValue = _props.comparisonValue,\n          p = _objectWithoutProperties(_props, ['isClearable', 'isIncrementable', 'incrementAmount', 'updateValue', 'canToggleVisibility', 'shouldMatchValue', 'comparisonValue']);\n\n      var s = this.state;\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        { className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('input', p.className, { 'is-incrementable': isIncrementable, 'can-toggle-visibility': canToggleVisibility }) },\n        !p.isMultiline && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input', _extends({}, p, {\n          className: 'box',\n          type: p.type === 'password' && s.isHiddenContentVisible ? 'text' : p.type,\n          value: s.value,\n          onChange: this.handleOnChange,\n          onBlur: this.handleOnBlur\n        })),\n        p.isMultiline && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('textarea', _extends({}, p, {\n          className: 'box',\n          value: s.value,\n          onChange: this.handleOnChange,\n          onBlur: this.handleOnBlur\n        })),\n        isClearable && !p.isMultiline && !!s.value && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'button',\n          {\n            type: 'button',\n            className: 'button-text-only',\n            onClick: this.handleClear\n          },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-close' })\n        ),\n        canToggleVisibility && s.value && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'button',\n          {\n            type: 'button',\n            className: 'button-text-only',\n            onClick: this.handleToggleVisibility,\n            tabIndex: '-1'\n          },\n          s.isHiddenContentVisible ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-eye-slash' }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-eye' })\n        ),\n        shouldMatchValue && s.value && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'input-value-comparison' },\n          s.value === comparisonValue ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-check-circle input-does-match' }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-times-circle input-does-not-match' })\n        ),\n        isIncrementable && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'value-incrementers' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'increment-value unstyled',\n              onClick: function onClick() {\n                if (!isNaN(parseFloat(s.value)) && isFinite(s.value) || !s.value) {\n                  var newValue = new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(s.value || 0);\n\n                  if (newValue > p.max) {\n                    newValue = new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(p.max);\n                  } else if (newValue < p.min) {\n                    newValue = new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(p.min).plus(new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(incrementAmount)).toString();\n                  } else {\n                    newValue = newValue.plus(new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(incrementAmount)).toString();\n                    if (newValue > p.max) {\n                      newValue = new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(p.max);\n                    }\n                  }\n\n                  updateValue(newValue);\n                }\n              }\n            },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-angle-up' })\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'decrement-value unstyled',\n              onClick: function onClick() {\n                if (!isNaN(parseFloat(s.value)) && isFinite(s.value) || !s.value) {\n                  var newValue = new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(s.value || 0);\n\n                  if (newValue > p.max) {\n                    newValue = new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(p.max).minus(new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(incrementAmount));\n                  } else if (newValue < p.min) {\n                    newValue = new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(p.min);\n                  } else {\n                    newValue = newValue.minus(new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(incrementAmount));\n                    if (newValue < p.min) {\n                      newValue = new __WEBPACK_IMPORTED_MODULE_2_bignumber_js___default.a(p.min);\n                    }\n                  }\n\n                  updateValue(newValue);\n                }\n              }\n            },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-angle-down' })\n          )\n        )\n      );\n    }\n  }]);\n\n  return Input;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nInput.propTypes = {\n  // type: PropTypes.string,\n  // className: PropTypes.string,\n  value: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].any,\n  // isMultiline: PropTypes.bool,\n  isClearable: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].bool,\n  debounceMS: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].number,\n  onChange: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].func,\n  onBlur: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].func,\n  isIncrementable: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].bool,\n  incrementAmount: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].number,\n  updateValue: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].func,\n  canToggleVisibility: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].bool,\n  shouldMatchValue: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].bool,\n  comparisonValue: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string\n};\nvar _default = Input;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(Input, 'Input', '/home/jack/src/augur/src/modules/common/components/input.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/common/components/input.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1231:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__ = __webpack_require__(604);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__add_commas_to_number__ = __webpack_require__(608);\n\n\n\n// This helper method is very specific in scope\n// It takes in the formatted shares in string format and returns a string denominated as specified\n// The mutation of the shares is done this way so no actual re-calculation is done to the underlying\n// values, just string manipulation for presentation\nfunction setShareDenomination(value, denomination) {\n  if (value == null) {\n    return value;\n  }\n\n  switch (denomination) {\n    case __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"a\" /* MICRO_SHARE */]:\n      return formatValue(value, 4);\n    case __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"b\" /* MILLI_SHARE */]:\n      return formatValue(value, 1);\n    default:\n    case __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"c\" /* SHARE */]:\n      return value;\n  }\n}\n\n// The value is assumed to *always* be in 'SHARES' denomination\nfunction formatValue(value, amount) {\n  var valueArray = value.split('');\n\n  // remove dot + determine 0 pad amount\n  var dotIndex = valueArray.indexOf('.');\n  var zeroPadAmount = amount;\n  if (dotIndex !== -1) {\n    valueArray.splice(dotIndex, 1);\n  } else {\n    zeroPadAmount += 2;\n  }\n\n  // Strip leading 0's OR returns original value if no values are positive\n  var firstPositiveValue = -1;\n  valueArray.some(function (value, i) {\n    if (parseInt(value, 10)) {\n      firstPositiveValue = i;\n      return true;\n    }\n\n    return false;\n  });\n  if (firstPositiveValue !== -1) {\n    valueArray.splice(0, firstPositiveValue);\n  } else {\n    return value; // Returns original value\n  }\n\n  // Strip Commas (added back in at the end)\n  valueArray.forEach(function (value, i) {\n    if (value === ',') {\n      valueArray.splice(i, 1);\n    }\n  });\n\n  // Handle postFixed denominations (part of the format-number method)\n  valueArray = handlePostfixedUnit(valueArray, zeroPadAmount);\n\n  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__add_commas_to_number__[\"a\" /* default */])(valueArray.join('')); // return joined string w/ comma separating thousands\n}\n\nfunction handlePostfixedUnit(valueArray, zeroPadAmount) {\n  var step = zeroPadAmount < 4;\n  var gtTrillion = '> 1T'.split('');\n  var newValueArray = valueArray;\n\n  switch (valueArray[newValueArray.length - 1]) {\n    // Handle existing > 10000 values\n    case 'K':\n      {\n        newValueArray[newValueArray.length - 1] = step ? 'M' : 'B';\n        return newValueArray;\n      }\n    case 'M':\n      {\n        if (step) {\n          newValueArray[newValueArray.length - 1] = 'B';\n        } else {\n          newValueArray = gtTrillion;\n        }\n        return newValueArray;\n      }\n    case 'B':\n    case 'T':\n      {\n        newValueArray = gtTrillion;\n        return newValueArray;\n      }\n\n    // Handle values that become greater than 10000\n    default:\n      {\n        // Append 0's\n        for (var i = 0; i < zeroPadAmount; i++) {\n          newValueArray.push('0');\n        }\n\n        // Mirrors logic present in format-number\n        if (newValueArray.length >= 13) {\n          newValueArray = gtTrillion;\n        } else if (newValueArray.length >= 11) {\n          newValueArray.splice(newValueArray.length - 9);\n          newValueArray.push('B');\n        } else if (newValueArray.length >= 8) {\n          newValueArray.splice(newValueArray.length - 6);\n          newValueArray.push('M');\n        } else if (newValueArray.length >= 5) {\n          newValueArray.splice(newValueArray.length - 3);\n          newValueArray.push('K');\n        }\n\n        return newValueArray;\n      }\n  }\n}\n\nvar _default = setShareDenomination;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(setShareDenomination, 'setShareDenomination', '/home/jack/src/augur/src/utils/set-share-denomination.js');\n\n  __REACT_HOT_LOADER__.register(formatValue, 'formatValue', '/home/jack/src/augur/src/utils/set-share-denomination.js');\n\n  __REACT_HOT_LOADER__.register(handlePostfixedUnit, 'handlePostfixedUnit', '/home/jack/src/augur/src/utils/set-share-denomination.js');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/utils/set-share-denomination.js');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1232:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(113);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n\n\n\nvar ValueDate = function ValueDate(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'span',\n    { className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('value-date', p.className) },\n    p.formatted\n  );\n};\n\nValueDate.propTypes = {\n  className: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  value: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].object,\n  formatted: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string\n};\n\nvar _default = ValueDate;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(ValueDate, 'ValueDate', '/home/jack/src/augur/src/modules/common/components/value-date.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/common/components/value-date.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9jb21tb24vY29tcG9uZW50cy92YWx1ZS1kYXRlLmpzeD83Nzc2Il0sIm5hbWVzIjpbIlZhbHVlRGF0ZSIsImNsYXNzbmFtZXMiLCJwIiwiY2xhc3NOYW1lIiwiZm9ybWF0dGVkIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwidmFsdWUiLCJvYmplY3QiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBOztBQUVBLElBQU1BLFlBQVksU0FBWkEsU0FBWTtBQUFBLFNBQ2hCO0FBQUE7QUFBQSxNQUFNLFdBQVcsa0RBQUFDLENBQVcsWUFBWCxFQUF5QkMsRUFBRUMsU0FBM0IsQ0FBakI7QUFDR0QsTUFBRUU7QUFETCxHQURnQjtBQUFBLENBQWxCOztBQU1BSixVQUFVSyxTQUFWLEdBQXNCO0FBQ3BCRixhQUFXLGdEQUFBRyxDQUFVQyxNQUREO0FBRXBCQyxTQUFPLGdEQUFBRixDQUFVRyxNQUZHO0FBR3BCTCxhQUFXLGdEQUFBRSxDQUFVQztBQUhELENBQXRCOztlQU1lUCxTO0FBQWY7Ozs7Ozs7O2dDQVpNQSxTIiwiZmlsZSI6IjEyMzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmNvbnN0IFZhbHVlRGF0ZSA9IHAgPT4gKFxuICA8c3BhbiBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ3ZhbHVlLWRhdGUnLCBwLmNsYXNzTmFtZSl9PlxuICAgIHtwLmZvcm1hdHRlZH1cbiAgPC9zcGFuPlxuKTtcblxuVmFsdWVEYXRlLnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB2YWx1ZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgZm9ybWF0dGVkOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG5leHBvcnQgZGVmYXVsdCBWYWx1ZURhdGU7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9jb21tb24vY29tcG9uZW50cy92YWx1ZS1kYXRlLmpzeCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 1233:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_tooltip__ = __webpack_require__(319);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_tooltip___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_tooltip__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_value_date__ = __webpack_require__(1232);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__ = __webpack_require__(602);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_get_value__ = __webpack_require__(282);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_set_share_denomination__ = __webpack_require__(1231);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_share_denomination_label__ = __webpack_require__(1234);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\n\n\n\n\n\n\nvar MarketProperties = function MarketProperties(p) {\n  var shareVolumeRounded = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_set_share_denomination__[\"a\" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_get_value__[\"a\" /* default */])(p, 'volume.rounded'), p.selectedShareDenomination);\n  var shareVolumeFormatted = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_get_value__[\"a\" /* default */])(p, 'volume.formatted');\n  var shareDenomination = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils_share_denomination_label__[\"a\" /* default */])(p.selectedShareDenomination, p.shareDenominations);\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'ul',\n    { className: 'market-properties' },\n    p.endDate && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'li',\n      { className: 'property end-date' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'a',\n        {\n          'data-tip': true,\n          'data-for': p.id + '-end-date-tooltip',\n          'data-event': 'click focus'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          p.isOpen && !p.isPendingReport ? p.endDateLabel || 'End Date' : 'Ended',\n          ':'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_value_date__[\"a\" /* default */], _extends({ className: 'property-value' }, p.endDate))\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        __WEBPACK_IMPORTED_MODULE_1_react_tooltip___default.a,\n        {\n          id: p.id + '-end-date-tooltip',\n          type: 'light',\n          effect: 'solid',\n          place: 'top',\n          globalEventOff: 'click'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'tooltip-text' },\n          'The outcome of this event will be known on or before ',\n          p.endDate.full,\n          '.'\n        )\n      )\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'li',\n      { className: 'property fee' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'a',\n        {\n          'data-tip': true,\n          'data-for': p.id + '-maker-fee-tooltip',\n          'data-event': 'click focus'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'Maker Fee:'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], _extends({ className: 'property-value' }, p.makerFeePercent))\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        __WEBPACK_IMPORTED_MODULE_1_react_tooltip___default.a,\n        {\n          id: p.id + '-maker-fee-tooltip',\n          type: 'light',\n          effect: 'solid',\n          place: 'top',\n          globalEventOff: 'click'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'tooltip-text' },\n          p.makerFeePercent.full,\n          ' discounted fee for placing bids or asks on the books'\n        )\n      )\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'li',\n      { className: 'property fee' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'a',\n        {\n          'data-tip': true,\n          'data-for': p.id + '-taker-fee-tooltip',\n          'data-event': 'click focus'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'Taker Fee:'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], _extends({ className: 'property-value' }, p.takerFeePercent))\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        __WEBPACK_IMPORTED_MODULE_1_react_tooltip___default.a,\n        {\n          id: p.id + '-taker-fee-tooltip',\n          type: 'light',\n          effect: 'solid',\n          place: 'top',\n          globalEventOff: 'click'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'tooltip-text' },\n          p.takerFeePercent.full,\n          ' fee for taking bids or asks from the books'\n        )\n      )\n    ),\n    shareVolumeRounded && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'li',\n      { className: 'property volume' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'a',\n        {\n          'data-tip': true,\n          'data-for': p.id + '-volume-tooltip',\n          'data-event': 'click focus'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'Volume:'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { className: 'property-value', formatted: shareVolumeRounded, denomination: shareDenomination })\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        __WEBPACK_IMPORTED_MODULE_1_react_tooltip___default.a,\n        {\n          id: p.id + '-volume-tooltip',\n          type: 'light',\n          effect: 'solid',\n          place: 'top',\n          globalEventOff: 'click'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'tooltip-text' },\n          shareVolumeFormatted,\n          ' total ',\n          p.volume.denomination,\n          ' traded'\n        )\n      )\n    ),\n    p.numPendingReports && p.isPendingReport && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'li',\n      { className: 'property pending-reports' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'a',\n        {\n          'data-tip': true,\n          'data-for': p.id + '-pending-reports-tooltip',\n          'data-event': 'click focus'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'Pending Reports:'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          ' ',\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'strong',\n            null,\n            p.numPendingReports\n          )\n        )\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        __WEBPACK_IMPORTED_MODULE_1_react_tooltip___default.a,\n        {\n          id: p.id + '-pending-reports-tooltip',\n          type: 'light',\n          effect: 'solid',\n          place: 'top',\n          globalEventOff: 'click'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'tooltip-text' },\n          p.numPendingReports,\n          ' reports submitted on this market thus far'\n        )\n      )\n    )\n  );\n};\n\nvar _default = MarketProperties;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketProperties, 'MarketProperties', '/home/jack/src/augur/src/modules/market/components/market-properties.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-properties.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtcHJvcGVydGllcy5qc3g/OTA2NCJdLCJuYW1lcyI6WyJNYXJrZXRQcm9wZXJ0aWVzIiwicCIsInNoYXJlVm9sdW1lUm91bmRlZCIsInNldFNoYXJlRGVub21pbmF0aW9uIiwiZ2V0VmFsdWUiLCJzZWxlY3RlZFNoYXJlRGVub21pbmF0aW9uIiwic2hhcmVWb2x1bWVGb3JtYXR0ZWQiLCJzaGFyZURlbm9taW5hdGlvbiIsInNoYXJlRGVub21pbmF0aW9uTGFiZWwiLCJzaGFyZURlbm9taW5hdGlvbnMiLCJlbmREYXRlIiwiaWQiLCJpc09wZW4iLCJpc1BlbmRpbmdSZXBvcnQiLCJlbmREYXRlTGFiZWwiLCJmdWxsIiwibWFrZXJGZWVQZXJjZW50IiwidGFrZXJGZWVQZXJjZW50Iiwidm9sdW1lIiwiZGVub21pbmF0aW9uIiwibnVtUGVuZGluZ1JlcG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxJQUFNQSxtQkFBbUIsU0FBbkJBLGdCQUFtQixDQUFDQyxDQUFELEVBQU87QUFDOUIsTUFBTUMscUJBQXFCLHFHQUFBQyxDQUFxQix3RkFBQUMsQ0FBU0gsQ0FBVCxFQUFZLGdCQUFaLENBQXJCLEVBQW9EQSxFQUFFSSx5QkFBdEQsQ0FBM0I7QUFDQSxNQUFNQyx1QkFBdUIsd0ZBQUFGLENBQVNILENBQVQsRUFBWSxrQkFBWixDQUE3QjtBQUNBLE1BQU1NLG9CQUFvQix1R0FBQUMsQ0FBdUJQLEVBQUVJLHlCQUF6QixFQUFvREosRUFBRVEsa0JBQXRELENBQTFCOztBQUVBLFNBQ0U7QUFBQTtBQUFBLE1BQUksV0FBVSxtQkFBZDtBQUNHUixNQUFFUyxPQUFGLElBQ0M7QUFBQTtBQUFBLFFBQUksV0FBVSxtQkFBZDtBQUNFO0FBQUE7QUFBQTtBQUNFLDBCQURGO0FBRUUsc0JBQWFULEVBQUVV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QTtBQUNFLDBCQURGO0FBRUUsc0JBQWFaLEVBQUVVLEVBQWYsNkJBRkY7QUFHRSx3QkFBVztBQUhiO0FBS0U7QUFBQTtBQUFBLFlBQU0sV0FBVSxnQkFBaEI7QUFBQTtBQUFBLFNBTEY7QUFNRTtBQUFBO0FBQUE7QUFBQTtBQUFPO0FBQUE7QUFBQTtBQUFTVixjQUFFbUI7QUFBWDtBQUFQO0FBTkYsT0FERjtBQVNFO0FBQUMsNkRBQUQ7QUFBQTtBQUNFLGNBQU9uQixFQUFFVSxFQUFULDZCQURGO0FBRUUsZ0JBQUssT0FGUDtBQUdFLGtCQUFPLE9BSFQ7QUFJRSxpQkFBTSxLQUpSO0FBS0UsMEJBQWU7QUFMakI7QUFPRTtBQUFBO0FBQUEsWUFBTSxXQUFVLGNBQWhCO0FBQ0dWLFlBQUVtQixpQkFETDtBQUFBO0FBQUE7QUFQRjtBQVRGO0FBMUZKLEdBREY7QUFtSEQsQ0F4SEQ7O2VBMEhlcEIsZ0I7QUFBZjs7Ozs7Ozs7Z0NBMUhNQSxnQiIsImZpbGUiOiIxMjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdFRvb2x0aXAgZnJvbSAncmVhY3QtdG9vbHRpcCc7XG5cbmltcG9ydCBWYWx1ZURhdGUgZnJvbSAnbW9kdWxlcy9jb21tb24vY29tcG9uZW50cy92YWx1ZS1kYXRlJztcbmltcG9ydCBWYWx1ZURlbm9taW5hdGlvbiBmcm9tICdtb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL3ZhbHVlLWRlbm9taW5hdGlvbic7XG5cbmltcG9ydCBnZXRWYWx1ZSBmcm9tICd1dGlscy9nZXQtdmFsdWUnO1xuaW1wb3J0IHNldFNoYXJlRGVub21pbmF0aW9uIGZyb20gJ3V0aWxzL3NldC1zaGFyZS1kZW5vbWluYXRpb24nO1xuaW1wb3J0IHNoYXJlRGVub21pbmF0aW9uTGFiZWwgZnJvbSAndXRpbHMvc2hhcmUtZGVub21pbmF0aW9uLWxhYmVsJztcblxuY29uc3QgTWFya2V0UHJvcGVydGllcyA9IChwKSA9PiB7XG4gIGNvbnN0IHNoYXJlVm9sdW1lUm91bmRlZCA9IHNldFNoYXJlRGVub21pbmF0aW9uKGdldFZhbHVlKHAsICd2b2x1bWUucm91bmRlZCcpLCBwLnNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24pO1xuICBjb25zdCBzaGFyZVZvbHVtZUZvcm1hdHRlZCA9IGdldFZhbHVlKHAsICd2b2x1bWUuZm9ybWF0dGVkJyk7XG4gIGNvbnN0IHNoYXJlRGVub21pbmF0aW9uID0gc2hhcmVEZW5vbWluYXRpb25MYWJlbChwLnNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24sIHAuc2hhcmVEZW5vbWluYXRpb25zKTtcblxuICByZXR1cm4gKFxuICAgIDx1bCBjbGFzc05hbWU9XCJtYXJrZXQtcHJvcGVydGllc1wiPlxuICAgICAge3AuZW5kRGF0ZSAmJlxuICAgICAgICA8bGkgY2xhc3NOYW1lPVwicHJvcGVydHkgZW5kLWRhdGVcIj5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgZGF0YS10aXBcbiAgICAgICAgICAgIGRhdGEtZm9yPXtgJHtwLmlkfS1lbmQtZGF0ZS10b29sdGlwYH1cbiAgICAgICAgICAgIGRhdGEtZXZlbnQ9XCJjbGljayBmb2N1c1wiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicHJvcGVydHktbGFiZWxcIj57KHAuaXNPcGVuICYmICFwLmlzUGVuZGluZ1JlcG9ydCA/IChwLmVuZERhdGVMYWJlbCB8fCAnRW5kIERhdGUnKSA6ICdFbmRlZCcpfTo8L3NwYW4+XG4gICAgICAgICAgICA8VmFsdWVEYXRlIGNsYXNzTmFtZT1cInByb3BlcnR5LXZhbHVlXCIgey4uLnAuZW5kRGF0ZX0gLz5cbiAgICAgICAgICA8L2E+XG4gICAgICAgICAgPFJlYWN0VG9vbHRpcFxuICAgICAgICAgICAgaWQ9e2Ake3AuaWR9LWVuZC1kYXRlLXRvb2x0aXBgfVxuICAgICAgICAgICAgdHlwZT1cImxpZ2h0XCJcbiAgICAgICAgICAgIGVmZmVjdD1cInNvbGlkXCJcbiAgICAgICAgICAgIHBsYWNlPVwidG9wXCJcbiAgICAgICAgICAgIGdsb2JhbEV2ZW50T2ZmPVwiY2xpY2tcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRvb2x0aXAtdGV4dFwiPlxuICAgICAgICAgICAgICAgIFRoZSBvdXRjb21lIG9mIHRoaXMgZXZlbnQgd2lsbCBiZSBrbm93biBvbiBvciBiZWZvcmUge3AuZW5kRGF0ZS5mdWxsfS5cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvUmVhY3RUb29sdGlwPlxuICAgICAgICA8L2xpPlxuICAgICAgfVxuICAgICAgPGxpIGNsYXNzTmFtZT1cInByb3BlcnR5IGZlZVwiPlxuICAgICAgICA8YVxuICAgICAgICAgIGRhdGEtdGlwXG4gICAgICAgICAgZGF0YS1mb3I9e2Ake3AuaWR9LW1ha2VyLWZlZS10b29sdGlwYH1cbiAgICAgICAgICBkYXRhLWV2ZW50PVwiY2xpY2sgZm9jdXNcIlxuICAgICAgICA+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicHJvcGVydHktbGFiZWxcIj5NYWtlciBGZWU6PC9zcGFuPlxuICAgICAgICAgIDxWYWx1ZURlbm9taW5hdGlvbiBjbGFzc05hbWU9XCJwcm9wZXJ0eS12YWx1ZVwiIHsuLi5wLm1ha2VyRmVlUGVyY2VudH0gLz5cbiAgICAgICAgPC9hPlxuICAgICAgICA8UmVhY3RUb29sdGlwXG4gICAgICAgICAgaWQ9e2Ake3AuaWR9LW1ha2VyLWZlZS10b29sdGlwYH1cbiAgICAgICAgICB0eXBlPVwibGlnaHRcIlxuICAgICAgICAgIGVmZmVjdD1cInNvbGlkXCJcbiAgICAgICAgICBwbGFjZT1cInRvcFwiXG4gICAgICAgICAgZ2xvYmFsRXZlbnRPZmY9XCJjbGlja1wiXG4gICAgICAgID5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0b29sdGlwLXRleHRcIj5cbiAgICAgICAgICAgIHtwLm1ha2VyRmVlUGVyY2VudC5mdWxsfSBkaXNjb3VudGVkIGZlZSBmb3IgcGxhY2luZyBiaWRzIG9yIGFza3Mgb24gdGhlIGJvb2tzXG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L1JlYWN0VG9vbHRpcD5cbiAgICAgIDwvbGk+XG4gICAgICA8bGkgY2xhc3NOYW1lPVwicHJvcGVydHkgZmVlXCI+XG4gICAgICAgIDxhXG4gICAgICAgICAgZGF0YS10aXBcbiAgICAgICAgICBkYXRhLWZvcj17YCR7cC5pZH0tdGFrZXItZmVlLXRvb2x0aXBgfVxuICAgICAgICAgIGRhdGEtZXZlbnQ9XCJjbGljayBmb2N1c1wiXG4gICAgICAgID5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJwcm9wZXJ0eS1sYWJlbFwiPlRha2VyIEZlZTo8L3NwYW4+XG4gICAgICAgICAgPFZhbHVlRGVub21pbmF0aW9uIGNsYXNzTmFtZT1cInByb3BlcnR5LXZhbHVlXCIgey4uLnAudGFrZXJGZWVQZXJjZW50fSAvPlxuICAgICAgICA8L2E+XG4gICAgICAgIDxSZWFjdFRvb2x0aXBcbiAgICAgICAgICBpZD17YCR7cC5pZH0tdGFrZXItZmVlLXRvb2x0aXBgfVxuICAgICAgICAgIHR5cGU9XCJsaWdodFwiXG4gICAgICAgICAgZWZmZWN0PVwic29saWRcIlxuICAgICAgICAgIHBsYWNlPVwidG9wXCJcbiAgICAgICAgICBnbG9iYWxFdmVudE9mZj1cImNsaWNrXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRvb2x0aXAtdGV4dFwiPlxuICAgICAgICAgICAge3AudGFrZXJGZWVQZXJjZW50LmZ1bGx9IGZlZSBmb3IgdGFraW5nIGJpZHMgb3IgYXNrcyBmcm9tIHRoZSBib29rc1xuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9SZWFjdFRvb2x0aXA+XG4gICAgICA8L2xpPlxuICAgICAge3NoYXJlVm9sdW1lUm91bmRlZCAmJlxuICAgICAgICA8bGkgY2xhc3NOYW1lPVwicHJvcGVydHkgdm9sdW1lXCI+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIGRhdGEtdGlwXG4gICAgICAgICAgICBkYXRhLWZvcj17YCR7cC5pZH0tdm9sdW1lLXRvb2x0aXBgfVxuICAgICAgICAgICAgZGF0YS1ldmVudD1cImNsaWNrIGZvY3VzXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJwcm9wZXJ0eS1sYWJlbFwiPlZvbHVtZTo8L3NwYW4+XG4gICAgICAgICAgICA8VmFsdWVEZW5vbWluYXRpb24gY2xhc3NOYW1lPVwicHJvcGVydHktdmFsdWVcIiBmb3JtYXR0ZWQ9e3NoYXJlVm9sdW1lUm91bmRlZH0gZGVub21pbmF0aW9uPXtzaGFyZURlbm9taW5hdGlvbn0gLz5cbiAgICAgICAgICA8L2E+XG4gICAgICAgICAgPFJlYWN0VG9vbHRpcFxuICAgICAgICAgICAgaWQ9e2Ake3AuaWR9LXZvbHVtZS10b29sdGlwYH1cbiAgICAgICAgICAgIHR5cGU9XCJsaWdodFwiXG4gICAgICAgICAgICBlZmZlY3Q9XCJzb2xpZFwiXG4gICAgICAgICAgICBwbGFjZT1cInRvcFwiXG4gICAgICAgICAgICBnbG9iYWxFdmVudE9mZj1cImNsaWNrXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0b29sdGlwLXRleHRcIj5cbiAgICAgICAgICAgICAge3NoYXJlVm9sdW1lRm9ybWF0dGVkfSB0b3RhbCB7cC52b2x1bWUuZGVub21pbmF0aW9ufSB0cmFkZWRcbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L1JlYWN0VG9vbHRpcD5cbiAgICAgICAgPC9saT5cbiAgICAgIH1cbiAgICAgIHtwLm51bVBlbmRpbmdSZXBvcnRzICYmIHAuaXNQZW5kaW5nUmVwb3J0ICYmXG4gICAgICAgIDxsaSBjbGFzc05hbWU9XCJwcm9wZXJ0eSBwZW5kaW5nLXJlcG9ydHNcIj5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgZGF0YS10aXBcbiAgICAgICAgICAgIGRhdGEtZm9yPXtgJHtwLmlkfS1wZW5kaW5nLXJlcG9ydHMtdG9vbHRpcGB9XG4gICAgICAgICAgICBkYXRhLWV2ZW50PVwiY2xpY2sgZm9jdXNcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInByb3BlcnR5LWxhYmVsXCI+UGVuZGluZyBSZXBvcnRzOjwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuPiA8c3Ryb25nPntwLm51bVBlbmRpbmdSZXBvcnRzfTwvc3Ryb25nPjwvc3Bhbj5cbiAgICAgICAgICA8L2E+XG4gICAgICAgICAgPFJlYWN0VG9vbHRpcFxuICAgICAgICAgICAgaWQ9e2Ake3AuaWR9LXBlbmRpbmctcmVwb3J0cy10b29sdGlwYH1cbiAgICAgICAgICAgIHR5cGU9XCJsaWdodFwiXG4gICAgICAgICAgICBlZmZlY3Q9XCJzb2xpZFwiXG4gICAgICAgICAgICBwbGFjZT1cInRvcFwiXG4gICAgICAgICAgICBnbG9iYWxFdmVudE9mZj1cImNsaWNrXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0b29sdGlwLXRleHRcIj5cbiAgICAgICAgICAgICAge3AubnVtUGVuZGluZ1JlcG9ydHN9IHJlcG9ydHMgc3VibWl0dGVkIG9uIHRoaXMgbWFya2V0IHRodXMgZmFyXG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9SZWFjdFRvb2x0aXA+XG4gICAgICAgIDwvbGk+XG4gICAgICB9XG4gICAgPC91bD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1hcmtldFByb3BlcnRpZXM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtcHJvcGVydGllcy5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1234:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__ = __webpack_require__(604);\n\n\nvar _default = function _default(selectedDenomination, shareDenominations) {\n  switch (selectedDenomination) {\n    case __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"a\" /* MICRO_SHARE */]:\n      {\n        var value = shareDenominations && shareDenominations.find(function (denomination) {\n          return denomination.value === __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"a\" /* MICRO_SHARE */];\n        });\n        return value && value.label || 'μShares';\n      }\n    case __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"b\" /* MILLI_SHARE */]:\n      {\n        var _value = shareDenominations && shareDenominations.find(function (denomination) {\n          return denomination.value === __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"b\" /* MILLI_SHARE */];\n        });\n        return _value && _value.label || 'mShares';\n      }\n    default:\n    case __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"c\" /* SHARE */]:\n      {\n        var _value2 = shareDenominations && shareDenominations.find(function (denomination) {\n          return denomination.value === __WEBPACK_IMPORTED_MODULE_0__modules_market_constants_share_denominations__[\"c\" /* SHARE */];\n        });\n        return _value2 && _value2.label || 'Shares';\n      }\n  }\n};\n\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/utils/share-denomination-label.js');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvc2hhcmUtZGVub21pbmF0aW9uLWxhYmVsLmpzPzI0NGIiXSwibmFtZXMiOlsic2VsZWN0ZWREZW5vbWluYXRpb24iLCJzaGFyZURlbm9taW5hdGlvbnMiLCJ2YWx1ZSIsImZpbmQiLCJkZW5vbWluYXRpb24iLCJsYWJlbCJdLCJtYXBwaW5ncyI6IjtBQUFBOztlQUVlLGtCQUFVQSxvQkFBVixFQUFnQ0Msa0JBQWhDLEVBQW9EO0FBQ2pFLFVBQVFELG9CQUFSO0FBQ0UsU0FBTSxrR0FBTjtBQUFvQjtBQUNsQixZQUFNRSxRQUFRRCxzQkFBc0JBLG1CQUFtQkUsSUFBbkIsQ0FBd0I7QUFBQSxpQkFBZ0JDLGFBQWFGLEtBQWIsS0FBdUIsa0dBQXZDO0FBQUEsU0FBeEIsQ0FBcEM7QUFDQSxlQUFRQSxTQUFTQSxNQUFNRyxLQUFoQixJQUEwQixTQUFqQztBQUNEO0FBQ0QsU0FBTSxrR0FBTjtBQUFvQjtBQUNsQixZQUFNSCxTQUFRRCxzQkFBc0JBLG1CQUFtQkUsSUFBbkIsQ0FBd0I7QUFBQSxpQkFBZ0JDLGFBQWFGLEtBQWIsS0FBdUIsa0dBQXZDO0FBQUEsU0FBeEIsQ0FBcEM7QUFDQSxlQUFRQSxVQUFTQSxPQUFNRyxLQUFoQixJQUEwQixTQUFqQztBQUNEO0FBQ0Q7QUFDQSxTQUFNLDRGQUFOO0FBQWM7QUFDWixZQUFNSCxVQUFRRCxzQkFBc0JBLG1CQUFtQkUsSUFBbkIsQ0FBd0I7QUFBQSxpQkFBZ0JDLGFBQWFGLEtBQWIsS0FBdUIsNEZBQXZDO0FBQUEsU0FBeEIsQ0FBcEM7QUFDQSxlQUFRQSxXQUFTQSxRQUFNRyxLQUFoQixJQUEwQixRQUFqQztBQUNEO0FBYkg7QUFlRCxDOztBQWhCRCIsImZpbGUiOiIxMjM0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTUlDUk9fU0hBUkUsIE1JTExJX1NIQVJFLCBTSEFSRSB9IGZyb20gJ21vZHVsZXMvbWFya2V0L2NvbnN0YW50cy9zaGFyZS1kZW5vbWluYXRpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHNlbGVjdGVkRGVub21pbmF0aW9uLCBzaGFyZURlbm9taW5hdGlvbnMpIHtcbiAgc3dpdGNoIChzZWxlY3RlZERlbm9taW5hdGlvbikge1xuICAgIGNhc2UgKE1JQ1JPX1NIQVJFKToge1xuICAgICAgY29uc3QgdmFsdWUgPSBzaGFyZURlbm9taW5hdGlvbnMgJiYgc2hhcmVEZW5vbWluYXRpb25zLmZpbmQoZGVub21pbmF0aW9uID0+IGRlbm9taW5hdGlvbi52YWx1ZSA9PT0gTUlDUk9fU0hBUkUpO1xuICAgICAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZS5sYWJlbCkgfHwgJ868U2hhcmVzJztcbiAgICB9XG4gICAgY2FzZSAoTUlMTElfU0hBUkUpOiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHNoYXJlRGVub21pbmF0aW9ucyAmJiBzaGFyZURlbm9taW5hdGlvbnMuZmluZChkZW5vbWluYXRpb24gPT4gZGVub21pbmF0aW9uLnZhbHVlID09PSBNSUxMSV9TSEFSRSk7XG4gICAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlLmxhYmVsKSB8fCAnbVNoYXJlcyc7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgY2FzZSAoU0hBUkUpOiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHNoYXJlRGVub21pbmF0aW9ucyAmJiBzaGFyZURlbm9taW5hdGlvbnMuZmluZChkZW5vbWluYXRpb24gPT4gZGVub21pbmF0aW9uLnZhbHVlID09PSBTSEFSRSk7XG4gICAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlLmxhYmVsKSB8fCAnU2hhcmVzJztcbiAgICB9XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlscy9zaGFyZS1kZW5vbWluYXRpb24tbGFiZWwuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1236:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(113);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__link_components_link__ = __webpack_require__(603);\n\n\n\n\n\nvar ComponentNav = function ComponentNav(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'ul',\n    {\n      className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('component-nav', { 'full-width-nav': p.fullWidth })\n    },\n    Object.keys(p.navItems || {}).map(function (nav) {\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        __WEBPACK_IMPORTED_MODULE_2__link_components_link__[\"a\" /* default */],\n        {\n          key: nav,\n          className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()({ selected: p.selectedNav === nav, 'mobile-only': p.navItems[nav].isMobile }),\n          onClick: function onClick() {\n            p.updateSelectedNav(nav);\n          }\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'li',\n          { className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()({ selected: p.selectedNav === nav }) },\n          p.navItems[nav].label\n        )\n      );\n    })\n  );\n};\n\nvar _default = ComponentNav;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(ComponentNav, 'ComponentNav', '/home/jack/src/augur/src/modules/common/components/component-nav.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/common/components/component-nav.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9jb21tb24vY29tcG9uZW50cy9jb21wb25lbnQtbmF2LmpzeD80MTgwIl0sIm5hbWVzIjpbIkNvbXBvbmVudE5hdiIsImNsYXNzTmFtZXMiLCJwIiwiZnVsbFdpZHRoIiwiT2JqZWN0Iiwia2V5cyIsIm5hdkl0ZW1zIiwibWFwIiwibmF2Iiwic2VsZWN0ZWQiLCJzZWxlY3RlZE5hdiIsImlzTW9iaWxlIiwidXBkYXRlU2VsZWN0ZWROYXYiLCJsYWJlbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBOztBQUVBOztBQUVBLElBQU1BLGVBQWUsU0FBZkEsWUFBZTtBQUFBLFNBQ25CO0FBQUE7QUFBQTtBQUNFLGlCQUFXLGtEQUFBQyxDQUFXLGVBQVgsRUFBNEIsRUFBRSxrQkFBa0JDLEVBQUVDLFNBQXRCLEVBQTVCO0FBRGI7QUFHR0MsV0FBT0MsSUFBUCxDQUFZSCxFQUFFSSxRQUFGLElBQWMsRUFBMUIsRUFBOEJDLEdBQTlCLENBQWtDO0FBQUEsYUFDakM7QUFBQyw4RUFBRDtBQUFBO0FBQ0UsZUFBS0MsR0FEUDtBQUVFLHFCQUFXLGtEQUFBUCxDQUFXLEVBQUVRLFVBQVVQLEVBQUVRLFdBQUYsS0FBa0JGLEdBQTlCLEVBQW1DLGVBQWVOLEVBQUVJLFFBQUYsQ0FBV0UsR0FBWCxFQUFnQkcsUUFBbEUsRUFBWCxDQUZiO0FBR0UsbUJBQVMsbUJBQU07QUFBRVQsY0FBRVUsaUJBQUYsQ0FBb0JKLEdBQXBCO0FBQTJCO0FBSDlDO0FBS0U7QUFBQTtBQUFBLFlBQUksV0FBVyxrREFBQVAsQ0FBVyxFQUFFUSxVQUFVUCxFQUFFUSxXQUFGLEtBQWtCRixHQUE5QixFQUFYLENBQWY7QUFDR04sWUFBRUksUUFBRixDQUFXRSxHQUFYLEVBQWdCSztBQURuQjtBQUxGLE9BRGlDO0FBQUEsS0FBbEM7QUFISCxHQURtQjtBQUFBLENBQXJCOztlQWtCZWIsWTtBQUFmOzs7Ozs7OztnQ0FsQk1BLFkiLCJmaWxlIjoiMTIzNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IExpbmsgZnJvbSAnbW9kdWxlcy9saW5rL2NvbXBvbmVudHMvbGluayc7XG5cbmNvbnN0IENvbXBvbmVudE5hdiA9IHAgPT4gKFxuICA8dWxcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2NvbXBvbmVudC1uYXYnLCB7ICdmdWxsLXdpZHRoLW5hdic6IHAuZnVsbFdpZHRoIH0pfVxuICA+XG4gICAge09iamVjdC5rZXlzKHAubmF2SXRlbXMgfHwge30pLm1hcChuYXYgPT4gKFxuICAgICAgPExpbmtcbiAgICAgICAga2V5PXtuYXZ9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyh7IHNlbGVjdGVkOiBwLnNlbGVjdGVkTmF2ID09PSBuYXYsICdtb2JpbGUtb25seSc6IHAubmF2SXRlbXNbbmF2XS5pc01vYmlsZSB9KX1cbiAgICAgICAgb25DbGljaz17KCkgPT4geyBwLnVwZGF0ZVNlbGVjdGVkTmF2KG5hdik7IH19XG4gICAgICA+XG4gICAgICAgIDxsaSBjbGFzc05hbWU9e2NsYXNzTmFtZXMoeyBzZWxlY3RlZDogcC5zZWxlY3RlZE5hdiA9PT0gbmF2IH0pfSA+XG4gICAgICAgICAge3AubmF2SXRlbXNbbmF2XS5sYWJlbH1cbiAgICAgICAgPC9saT5cbiAgICAgIDwvTGluaz5cbiAgICApKX1cbiAgPC91bD5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudE5hdjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL2NvbXBvbmVudC1uYXYuanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1237:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(113);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__market_properties__ = __webpack_require__(1233);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__link_components_link__ = __webpack_require__(603);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\n\n\nvar MarketBasics = function MarketBasics(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'market-basics' },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'market-basics-header' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        { className: 'market-basics-header-group-1' },\n        !!p.tags && !!p.tags.length && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'ul',\n          { className: 'tags' },\n          p.tags.map(function (tag, i) {\n            return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'li',\n              { key: i, className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('tag', 'pointer', { link: !!tag.name }) },\n              __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n                'button',\n                {\n                  className: 'unstyled',\n                  onClick: tag.onClick && tag.onClick\n                },\n                tag.name ? tag.name : tag\n              )\n            );\n          })\n        )\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        { className: 'market-basics-header-group-2' },\n        p.loginAccount && p.loginAccount.address && p.onClickToggleFavorite && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'button',\n          {\n            className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('button unstyled favorite-button', { on: p.isFavorite }),\n            onClick: p.onClickToggleFavorite\n          },\n          p.isFavorite ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-star' }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('i', { className: 'fa fa-star-o' })\n        )\n      )\n    ),\n    p.marketLink ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      __WEBPACK_IMPORTED_MODULE_3__link_components_link__[\"a\" /* default */],\n      _extends({}, p.marketLink, {\n        onClick: p.marketLink.onClick,\n        className: 'market-description'\n      }),\n      p.description\n    ) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'span',\n      { className: 'market-description' },\n      p.description\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__market_properties__[\"a\" /* default */], p)\n  );\n};\n\n// TODO -- Prop Validations\n// MarketBasics.propTypes = {\n// \tdescription: PropTypes.string,\n// \tendDate: PropTypes.object,\n// \tmakerFeePercent: PropTypes.object,\n// \ttakerFeePercent: PropTypes.object,\n// \tvolume: PropTypes.object,\n// \ttags: PropTypes.array,\n// \tupdateData: PropTypes.func,\n// \tisMarketDataLoading: PropTypes.bool\n// };\n\nvar _default = MarketBasics;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketBasics, 'MarketBasics', '/home/jack/src/augur/src/modules/market/components/market-basics.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-basics.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtYmFzaWNzLmpzeD84YzIwIl0sIm5hbWVzIjpbIk1hcmtldEJhc2ljcyIsInAiLCJ0YWdzIiwibGVuZ3RoIiwibWFwIiwidGFnIiwiaSIsImNsYXNzbmFtZXMiLCJsaW5rIiwibmFtZSIsIm9uQ2xpY2siLCJsb2dpbkFjY291bnQiLCJhZGRyZXNzIiwib25DbGlja1RvZ2dsZUZhdm9yaXRlIiwib24iLCJpc0Zhdm9yaXRlIiwibWFya2V0TGluayIsImRlc2NyaXB0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxJQUFNQSxlQUFlLFNBQWZBLFlBQWU7QUFBQSxTQUNuQjtBQUFBO0FBQUEsTUFBUyxXQUFVLGVBQW5CO0FBQ0U7QUFBQTtBQUFBLFFBQUssV0FBVSxzQkFBZjtBQUNFO0FBQUE7QUFBQSxVQUFLLFdBQVUsOEJBQWY7QUFDRyxTQUFDLENBQUNDLEVBQUVDLElBQUosSUFBWSxDQUFDLENBQUNELEVBQUVDLElBQUYsQ0FBT0MsTUFBckIsSUFDRDtBQUFBO0FBQUEsWUFBSSxXQUFVLE1BQWQ7QUFDR0YsWUFBRUMsSUFBRixDQUFPRSxHQUFQLENBQVcsVUFBQ0MsR0FBRCxFQUFNQyxDQUFOO0FBQUEsbUJBQ1Y7QUFBQTtBQUFBLGdCQUFJLEtBQUtBLENBQVQsRUFBWSxXQUFXLGtEQUFBQyxDQUFXLEtBQVgsRUFBa0IsU0FBbEIsRUFBNkIsRUFBRUMsTUFBTSxDQUFDLENBQUNILElBQUlJLElBQWQsRUFBN0IsQ0FBdkI7QUFDRTtBQUFBO0FBQUE7QUFDRSw2QkFBVSxVQURaO0FBRUUsMkJBQVNKLElBQUlLLE9BQUosSUFBZUwsSUFBSUs7QUFGOUI7QUFJR0wsb0JBQUlJLElBQUosR0FBV0osSUFBSUksSUFBZixHQUFzQko7QUFKekI7QUFERixhQURVO0FBQUEsV0FBWDtBQURIO0FBRkYsT0FERjtBQWlCRTtBQUFBO0FBQUEsVUFBSyxXQUFVLDhCQUFmO0FBQ0dKLFVBQUVVLFlBQUYsSUFBa0JWLEVBQUVVLFlBQUYsQ0FBZUMsT0FBakMsSUFBNENYLEVBQUVZLHFCQUE5QyxJQUNDO0FBQUE7QUFBQTtBQUNFLHVCQUFXLGtEQUFBTixDQUFXLGlDQUFYLEVBQThDLEVBQUVPLElBQUliLEVBQUVjLFVBQVIsRUFBOUMsQ0FEYjtBQUVFLHFCQUFTZCxFQUFFWTtBQUZiO0FBSUdaLFlBQUVjLFVBQUYsR0FBZSxtRUFBRyxXQUFVLFlBQWIsR0FBZixHQUE4QyxtRUFBRyxXQUFVLGNBQWI7QUFKakQ7QUFGSjtBQWpCRixLQURGO0FBOEJHZCxNQUFFZSxVQUFGLEdBQ0M7QUFBQyw0RUFBRDtBQUFBLG1CQUNNZixFQUFFZSxVQURSO0FBRUUsaUJBQVNmLEVBQUVlLFVBQUYsQ0FBYU4sT0FGeEI7QUFHRSxtQkFBVTtBQUhaO0FBS0dULFFBQUVnQjtBQUxMLEtBREQsR0FRQztBQUFBO0FBQUEsUUFBTSxXQUFVLG9CQUFoQjtBQUFzQ2hCLFFBQUVnQjtBQUF4QyxLQXRDSjtBQXlDRSxnRUFBQyxtRUFBRCxFQUFzQmhCLENBQXRCO0FBekNGLEdBRG1CO0FBQUEsQ0FBckI7O0FBOENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O2VBRWVELFk7QUFBZjs7Ozs7Ozs7Z0NBMURNQSxZIiwiZmlsZSI6IjEyMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmltcG9ydCBNYXJrZXRQcm9wZXJ0aWVzIGZyb20gJ21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LXByb3BlcnRpZXMnO1xuaW1wb3J0IExpbmsgZnJvbSAnbW9kdWxlcy9saW5rL2NvbXBvbmVudHMvbGluayc7XG5cbmNvbnN0IE1hcmtldEJhc2ljcyA9IHAgPT4gKFxuICA8YXJ0aWNsZSBjbGFzc05hbWU9XCJtYXJrZXQtYmFzaWNzXCI+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJtYXJrZXQtYmFzaWNzLWhlYWRlclwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYXJrZXQtYmFzaWNzLWhlYWRlci1ncm91cC0xXCI+XG4gICAgICAgIHshIXAudGFncyAmJiAhIXAudGFncy5sZW5ndGggJiZcbiAgICAgICAgPHVsIGNsYXNzTmFtZT1cInRhZ3NcIj5cbiAgICAgICAgICB7cC50YWdzLm1hcCgodGFnLCBpKSA9PiAoXG4gICAgICAgICAgICA8bGkga2V5PXtpfSBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ3RhZycsICdwb2ludGVyJywgeyBsaW5rOiAhIXRhZy5uYW1lIH0pfSA+XG4gICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ1bnN0eWxlZFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17dGFnLm9uQ2xpY2sgJiYgdGFnLm9uQ2xpY2t9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7dGFnLm5hbWUgPyB0YWcubmFtZSA6IHRhZ31cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L3VsPlxuICAgICAgICB9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFya2V0LWJhc2ljcy1oZWFkZXItZ3JvdXAtMlwiPlxuICAgICAgICB7cC5sb2dpbkFjY291bnQgJiYgcC5sb2dpbkFjY291bnQuYWRkcmVzcyAmJiBwLm9uQ2xpY2tUb2dnbGVGYXZvcml0ZSAmJlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcygnYnV0dG9uIHVuc3R5bGVkIGZhdm9yaXRlLWJ1dHRvbicsIHsgb246IHAuaXNGYXZvcml0ZSB9KX1cbiAgICAgICAgICAgIG9uQ2xpY2s9e3Aub25DbGlja1RvZ2dsZUZhdm9yaXRlfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwLmlzRmF2b3JpdGUgPyA8aSBjbGFzc05hbWU9XCJmYSBmYS1zdGFyXCIgLz4gOiA8aSBjbGFzc05hbWU9XCJmYSBmYS1zdGFyLW9cIiAvPn1cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICB7cC5tYXJrZXRMaW5rID9cbiAgICAgIDxMaW5rXG4gICAgICAgIHsuLi5wLm1hcmtldExpbmt9XG4gICAgICAgIG9uQ2xpY2s9e3AubWFya2V0TGluay5vbkNsaWNrfVxuICAgICAgICBjbGFzc05hbWU9XCJtYXJrZXQtZGVzY3JpcHRpb25cIlxuICAgICAgPlxuICAgICAgICB7cC5kZXNjcmlwdGlvbn1cbiAgICAgIDwvTGluaz4gOlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibWFya2V0LWRlc2NyaXB0aW9uXCI+e3AuZGVzY3JpcHRpb259PC9zcGFuPlxuICAgIH1cblxuICAgIDxNYXJrZXRQcm9wZXJ0aWVzIHsuLi5wfSAvPlxuICA8L2FydGljbGU+XG4pO1xuXG4vLyBUT0RPIC0tIFByb3AgVmFsaWRhdGlvbnNcbi8vIE1hcmtldEJhc2ljcy5wcm9wVHlwZXMgPSB7XG4vLyBcdGRlc2NyaXB0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuLy8gXHRlbmREYXRlOiBQcm9wVHlwZXMub2JqZWN0LFxuLy8gXHRtYWtlckZlZVBlcmNlbnQ6IFByb3BUeXBlcy5vYmplY3QsXG4vLyBcdHRha2VyRmVlUGVyY2VudDogUHJvcFR5cGVzLm9iamVjdCxcbi8vIFx0dm9sdW1lOiBQcm9wVHlwZXMub2JqZWN0LFxuLy8gXHR0YWdzOiBQcm9wVHlwZXMuYXJyYXksXG4vLyBcdHVwZGF0ZURhdGE6IFByb3BUeXBlcy5mdW5jLFxuLy8gXHRpc01hcmtldERhdGFMb2FkaW5nOiBQcm9wVHlwZXMuYm9vbFxuLy8gfTtcblxuZXhwb3J0IGRlZmF1bHQgTWFya2V0QmFzaWNzO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LWJhc2ljcy5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1245:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n\n\nvar Dropdown = function Dropdown(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    \"div\",\n    { className: \"dropdown\" },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      \"select\",\n      {\n        onChange: function onChange(event) {\n          p.onChange(event.target.value);\n        },\n        defaultValue: p.default\n      },\n      p.options.map(function (option) {\n        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          \"option\",\n          {\n            key: option.value,\n            value: option.value\n          },\n          option.label\n        );\n      })\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\"i\", { className: \"fa fa-angle-down\" })\n  );\n};\n\n// TODO -- Prop Validations\n// Dropdown.propTypes = {\n// \tdefault: PropTypes.string,\n// \toptions: PropTypes.array,\n// \tonChange: PropTypes.func\n// };\n\nvar _default = Dropdown;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(Dropdown, \"Dropdown\", \"/home/jack/src/augur/src/modules/common/components/dropdown.jsx\");\n\n  __REACT_HOT_LOADER__.register(_default, \"default\", \"/home/jack/src/augur/src/modules/common/components/dropdown.jsx\");\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9jb21tb24vY29tcG9uZW50cy9kcm9wZG93bi5qc3g/OWRkNiJdLCJuYW1lcyI6WyJEcm9wZG93biIsImV2ZW50IiwicCIsIm9uQ2hhbmdlIiwidGFyZ2V0IiwidmFsdWUiLCJkZWZhdWx0Iiwib3B0aW9ucyIsIm1hcCIsIm9wdGlvbiIsImxhYmVsIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLElBQU1BLFdBQVcsU0FBWEEsUUFBVztBQUFBLFNBQ2Y7QUFBQTtBQUFBLE1BQUssV0FBVSxVQUFmO0FBQ0U7QUFBQTtBQUFBO0FBQ0Usa0JBQVUsa0JBQUNDLEtBQUQsRUFBVztBQUFFQyxZQUFFQyxRQUFGLENBQVdGLE1BQU1HLE1BQU4sQ0FBYUMsS0FBeEI7QUFBaUMsU0FEMUQ7QUFFRSxzQkFBY0gsRUFBRUk7QUFGbEI7QUFJR0osUUFBRUssT0FBRixDQUFVQyxHQUFWLENBQWM7QUFBQSxlQUNiO0FBQUE7QUFBQTtBQUNFLGlCQUFLQyxPQUFPSixLQURkO0FBRUUsbUJBQU9JLE9BQU9KO0FBRmhCO0FBSUdJLGlCQUFPQztBQUpWLFNBRGE7QUFBQSxPQUFkO0FBSkgsS0FERjtBQWNFLHVFQUFHLFdBQVUsa0JBQWI7QUFkRixHQURlO0FBQUEsQ0FBakI7O0FBbUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7ZUFFZVYsUTtBQUFmOzs7Ozs7OztnQ0ExQk1BLFEiLCJmaWxlIjoiMTI0NS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IERyb3Bkb3duID0gcCA9PiAoXG4gIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd25cIj5cbiAgICA8c2VsZWN0XG4gICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PiB7IHAub25DaGFuZ2UoZXZlbnQudGFyZ2V0LnZhbHVlKTsgfX1cbiAgICAgIGRlZmF1bHRWYWx1ZT17cC5kZWZhdWx0fVxuICAgID5cbiAgICAgIHtwLm9wdGlvbnMubWFwKG9wdGlvbiA9PiAoXG4gICAgICAgIDxvcHRpb25cbiAgICAgICAgICBrZXk9e29wdGlvbi52YWx1ZX1cbiAgICAgICAgICB2YWx1ZT17b3B0aW9uLnZhbHVlfVxuICAgICAgICA+XG4gICAgICAgICAge29wdGlvbi5sYWJlbH1cbiAgICAgICAgPC9vcHRpb24+XG4gICAgICApKX1cbiAgICA8L3NlbGVjdD5cbiAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hbmdsZS1kb3duXCIgLz5cbiAgPC9kaXY+XG4pO1xuXG4vLyBUT0RPIC0tIFByb3AgVmFsaWRhdGlvbnNcbi8vIERyb3Bkb3duLnByb3BUeXBlcyA9IHtcbi8vIFx0ZGVmYXVsdDogUHJvcFR5cGVzLnN0cmluZyxcbi8vIFx0b3B0aW9uczogUHJvcFR5cGVzLmFycmF5LFxuLy8gXHRvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmNcbi8vIH07XG5cbmV4cG9ydCBkZWZhdWx0IERyb3Bkb3duO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvY29tbW9uL2NvbXBvbmVudHMvZHJvcGRvd24uanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1248:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(exports, \"a\", function() { return POSITION; });\n/* harmony export (binding) */ __webpack_require__.d(exports, \"b\", function() { return ORDER; });\nvar POSITION = 'POSITION';\nvar ORDER = 'ORDER';\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(POSITION, 'POSITION', '/home/jack/src/augur/src/modules/market/constants/trade-close-type.js');\n\n  __REACT_HOT_LOADER__.register(ORDER, 'ORDER', '/home/jack/src/augur/src/modules/market/constants/trade-close-type.js');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29uc3RhbnRzL3RyYWRlLWNsb3NlLXR5cGUuanM/YWRjMiJdLCJuYW1lcyI6WyJQT1NJVElPTiIsIk9SREVSIl0sIm1hcHBpbmdzIjoiOztBQUFPLElBQU1BLFdBQVcsVUFBakI7QUFDQSxJQUFNQyxRQUFRLE9BQWQ7Ozs7Ozs7O2dDQURNRCxROztnQ0FDQUMsSyIsImZpbGUiOiIxMjQ4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFBPU0lUSU9OID0gJ1BPU0lUSU9OJztcbmV4cG9ydCBjb25zdCBPUkRFUiA9ICdPUkRFUic7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29uc3RhbnRzL3RyYWRlLWNsb3NlLXR5cGUuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1250:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(exports, \"b\", function() { return PRICE; });\n/* harmony export (binding) */ __webpack_require__.d(exports, \"a\", function() { return SHARE; });\nvar PRICE = 'price';\nvar SHARE = 'share';\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(PRICE, 'PRICE', '/home/jack/src/augur/src/modules/order-book/constants/order-book-value-types.js');\n\n  __REACT_HOT_LOADER__.register(SHARE, 'SHARE', '/home/jack/src/augur/src/modules/order-book/constants/order-book-value-types.js');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vcmRlci1ib29rL2NvbnN0YW50cy9vcmRlci1ib29rLXZhbHVlLXR5cGVzLmpzP2Y4YjQiXSwibmFtZXMiOlsiUFJJQ0UiLCJTSEFSRSJdLCJtYXBwaW5ncyI6Ijs7QUFBTyxJQUFNQSxRQUFRLE9BQWQ7QUFDQSxJQUFNQyxRQUFRLE9BQWQ7Ozs7Ozs7O2dDQURNRCxLOztnQ0FDQUMsSyIsImZpbGUiOiIxMjUwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFBSSUNFID0gJ3ByaWNlJztcbmV4cG9ydCBjb25zdCBTSEFSRSA9ICdzaGFyZSc7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9vcmRlci1ib29rL2NvbnN0YW50cy9vcmRlci1ib29rLXZhbHVlLXR5cGVzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1251:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(exports, \"a\", function() { return BUY; });\n/* harmony export (binding) */ __webpack_require__.d(exports, \"b\", function() { return SELL; });\nvar BUY = 'buy';\nvar SELL = 'sell';\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(BUY, 'BUY', '/home/jack/src/augur/src/modules/outcomes/constants/trade-types.js');\n\n  __REACT_HOT_LOADER__.register(SELL, 'SELL', '/home/jack/src/augur/src/modules/outcomes/constants/trade-types.js');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vdXRjb21lcy9jb25zdGFudHMvdHJhZGUtdHlwZXMuanM/YTBlZCJdLCJuYW1lcyI6WyJCVVkiLCJTRUxMIl0sIm1hcHBpbmdzIjoiOztBQUFPLElBQU1BLE1BQU0sS0FBWjtBQUNBLElBQU1DLE9BQU8sTUFBYjs7Ozs7Ozs7Z0NBRE1ELEc7O2dDQUNBQyxJIiwiZmlsZSI6IjEyNTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgQlVZID0gJ2J1eSc7XG5leHBvcnQgY29uc3QgU0VMTCA9ICdzZWxsJztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL291dGNvbWVzL2NvbnN0YW50cy90cmFkZS10eXBlcy5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 1252:
/***/ function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n Highcharts JS v5.0.6 (2016-12-07)\n\n (c) 2009-2016 Torstein Honsi\n\n License: www.highcharts.com/license\n*/\n(function (L, a) {\n  \"object\" === ( false ? \"undefined\" : _typeof(module)) && module.exports ? module.exports = L.document ? a(L) : a : L.Highcharts = a(L);\n})(\"undefined\" !== typeof window ? window : this, function (L) {\n  L = function () {\n    var a = window,\n        D = a.document,\n        C = a.navigator && a.navigator.userAgent || \"\",\n        G = D && D.createElementNS && !!D.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGRect,\n        I = /(edge|msie|trident)/i.test(C) && !window.opera,\n        h = !G,\n        f = /Firefox/.test(C),\n        p = f && 4 > parseInt(C.split(\"Firefox/\")[1], 10);return a.Highcharts ? a.Highcharts.error(16, !0) : { product: \"Highcharts\",\n      version: \"5.0.6\", deg2rad: 2 * Math.PI / 360, doc: D, hasBidiBug: p, hasTouch: D && void 0 !== D.documentElement.ontouchstart, isMS: I, isWebKit: /AppleWebKit/.test(C), isFirefox: f, isTouchDevice: /(Mobile|Android|Windows Phone)/.test(C), SVG_NS: \"http://www.w3.org/2000/svg\", chartCount: 0, seriesTypes: {}, symbolSizes: {}, svg: G, vml: h, win: a, charts: [], marginNames: [\"plotTop\", \"marginRight\", \"marginBottom\", \"plotLeft\"], noop: function noop() {} };\n  }();(function (a) {\n    var D = [],\n        C = a.charts,\n        G = a.doc,\n        I = a.win;a.error = function (h, f) {\n      h = a.isNumber(h) ? \"Highcharts error #\" + h + \": www.highcharts.com/errors/\" + h : h;if (f) throw Error(h);I.console && console.log(h);\n    };a.Fx = function (a, f, p) {\n      this.options = f;this.elem = a;this.prop = p;\n    };a.Fx.prototype = { dSetter: function dSetter() {\n        var a = this.paths[0],\n            f = this.paths[1],\n            p = [],\n            v = this.now,\n            l = a.length,\n            u;if (1 === v) p = this.toD;else if (l === f.length && 1 > v) for (; l--;) {\n          u = parseFloat(a[l]), p[l] = isNaN(u) ? a[l] : v * parseFloat(f[l] - u) + u;\n        } else p = f;this.elem.attr(\"d\", p, null, !0);\n      }, update: function update() {\n        var a = this.elem,\n            f = this.prop,\n            p = this.now,\n            v = this.options.step;if (this[f + \"Setter\"]) this[f + \"Setter\"]();else a.attr ? a.element && a.attr(f, p, null, !0) : a.style[f] = p + this.unit;v && v.call(a, p, this);\n      }, run: function run(a, f, p) {\n        var h = this,\n            l = function l(a) {\n          return l.stopped ? !1 : h.step(a);\n        },\n            u;this.startTime = +new Date();this.start = a;this.end = f;this.unit = p;this.now = this.start;this.pos = 0;l.elem = this.elem;l.prop = this.prop;l() && 1 === D.push(l) && (l.timerId = setInterval(function () {\n          for (u = 0; u < D.length; u++) {\n            D[u]() || D.splice(u--, 1);\n          }D.length || clearInterval(l.timerId);\n        }, 13));\n      }, step: function step(a) {\n        var f = +new Date(),\n            h,\n            v = this.options;h = this.elem;\n        var l = v.complete,\n            u = v.duration,\n            d = v.curAnim,\n            c;if (h.attr && !h.element) h = !1;else if (a || f >= u + this.startTime) {\n          this.now = this.end;this.pos = 1;this.update();a = d[this.prop] = !0;for (c in d) {\n            !0 !== d[c] && (a = !1);\n          }a && l && l.call(h);h = !1;\n        } else this.pos = v.easing((f - this.startTime) / u), this.now = this.start + (this.end - this.start) * this.pos, this.update(), h = !0;return h;\n      }, initPath: function initPath(h, f, p) {\n        function v(a) {\n          var e, b;for (q = a.length; q--;) {\n            e = \"M\" === a[q] || \"L\" === a[q], b = /[a-zA-Z]/.test(a[q + 3]), e && b && a.splice(q + 1, 0, a[q + 1], a[q + 2], a[q + 1], a[q + 2]);\n          }\n        }function l(a, e) {\n          for (; a.length < m;) {\n            a[0] = e[m - a.length];var b = a.slice(0, t);[].splice.apply(a, [0, 0].concat(b));z && (b = a.slice(a.length - t), [].splice.apply(a, [a.length, 0].concat(b)), q--);\n          }a[0] = \"M\";\n        }function u(a, e) {\n          for (var c = (m - a.length) / t; 0 < c && c--;) {\n            b = a.slice().splice(a.length / F - t, t * F), b[0] = e[m - t - c * t], y && (b[t - 6] = b[t - 2], b[t - 5] = b[t - 1]), [].splice.apply(a, [a.length / F, 0].concat(b)), z && c--;\n          }\n        }f = f || \"\";var d,\n            c = h.startX,\n            n = h.endX,\n            y = -1 < f.indexOf(\"C\"),\n            t = y ? 7 : 3,\n            m,\n            b,\n            q;f = f.split(\" \");p = p.slice();var z = h.isArea,\n            F = z ? 2 : 1,\n            e;\n        y && (v(f), v(p));if (c && n) {\n          for (q = 0; q < c.length; q++) {\n            if (c[q] === n[0]) {\n              d = q;break;\n            } else if (c[0] === n[n.length - c.length + q]) {\n              d = q;e = !0;break;\n            }\n          }void 0 === d && (f = []);\n        }f.length && a.isNumber(d) && (m = p.length + d * F * t, e ? (l(f, p), u(p, f)) : (l(p, f), u(f, p)));return [f, p];\n      } };a.extend = function (a, f) {\n      var h;a || (a = {});for (h in f) {\n        a[h] = f[h];\n      }return a;\n    };a.merge = function () {\n      var h,\n          f = arguments,\n          p,\n          v = {},\n          l = function l(h, d) {\n        var c, n;\"object\" !== (typeof h === \"undefined\" ? \"undefined\" : _typeof(h)) && (h = {});for (n in d) {\n          d.hasOwnProperty(n) && (c = d[n], a.isObject(c, !0) && \"renderTo\" !== n && \"number\" !== typeof c.nodeType ? h[n] = l(h[n] || {}, c) : h[n] = d[n]);\n        }return h;\n      };!0 === f[0] && (v = f[1], f = Array.prototype.slice.call(f, 2));p = f.length;for (h = 0; h < p; h++) {\n        v = l(v, f[h]);\n      }return v;\n    };a.pInt = function (a, f) {\n      return parseInt(a, f || 10);\n    };a.isString = function (a) {\n      return \"string\" === typeof a;\n    };a.isArray = function (a) {\n      a = Object.prototype.toString.call(a);return \"[object Array]\" === a || \"[object Array Iterator]\" === a;\n    };a.isObject = function (h, f) {\n      return h && \"object\" === (typeof h === \"undefined\" ? \"undefined\" : _typeof(h)) && (!f || !a.isArray(h));\n    };a.isNumber = function (a) {\n      return \"number\" === typeof a && !isNaN(a);\n    };a.erase = function (a, f) {\n      for (var h = a.length; h--;) {\n        if (a[h] === f) {\n          a.splice(h, 1);break;\n        }\n      }\n    };a.defined = function (a) {\n      return void 0 !== a && null !== a;\n    };a.attr = function (h, f, p) {\n      var v, l;if (a.isString(f)) a.defined(p) ? h.setAttribute(f, p) : h && h.getAttribute && (l = h.getAttribute(f));else if (a.defined(f) && a.isObject(f)) for (v in f) {\n        h.setAttribute(v, f[v]);\n      }return l;\n    };a.splat = function (h) {\n      return a.isArray(h) ? h : [h];\n    };a.syncTimeout = function (a, f, p) {\n      if (f) return setTimeout(a, f, p);a.call(0, p);\n    };a.pick = function () {\n      var a = arguments,\n          f,\n          p,\n          v = a.length;for (f = 0; f < v; f++) {\n        if (p = a[f], void 0 !== p && null !== p) return p;\n      }\n    };a.css = function (h, f) {\n      a.isMS && !a.svg && f && void 0 !== f.opacity && (f.filter = \"alpha(opacity\\x3d\" + 100 * f.opacity + \")\");a.extend(h.style, f);\n    };a.createElement = function (h, f, p, v, l) {\n      h = G.createElement(h);var u = a.css;f && a.extend(h, f);l && u(h, { padding: 0, border: \"none\", margin: 0 });p && u(h, p);v && v.appendChild(h);return h;\n    };a.extendClass = function (h, f) {\n      var p = function p() {};p.prototype = new h();a.extend(p.prototype, f);return p;\n    };a.pad = function (a, f, p) {\n      return Array((f || 2) + 1 - String(a).length).join(p || 0) + a;\n    };a.relativeLength = function (a, f) {\n      return (/%$/.test(a) ? f * parseFloat(a) / 100 : parseFloat(a)\n      );\n    };a.wrap = function (a, f, p) {\n      var h = a[f];a[f] = function () {\n        var a = Array.prototype.slice.call(arguments),\n            f = arguments,\n            d = this;d.proceed = function () {\n          h.apply(d, arguments.length ? arguments : f);\n        };a.unshift(h);a = p.apply(this, a);d.proceed = null;return a;\n      };\n    };a.getTZOffset = function (h) {\n      var f = a.Date;return 6E4 * (f.hcGetTimezoneOffset && f.hcGetTimezoneOffset(h) || f.hcTimezoneOffset || 0);\n    };a.dateFormat = function (h, f, p) {\n      if (!a.defined(f) || isNaN(f)) return a.defaultOptions.lang.invalidDate || \"\";h = a.pick(h, \"%Y-%m-%d %H:%M:%S\");var v = a.Date,\n          l = new v(f - a.getTZOffset(f)),\n          u,\n          d = l[v.hcGetHours](),\n          c = l[v.hcGetDay](),\n          n = l[v.hcGetDate](),\n          y = l[v.hcGetMonth](),\n          t = l[v.hcGetFullYear](),\n          m = a.defaultOptions.lang,\n          b = m.weekdays,\n          q = m.shortWeekdays,\n          z = a.pad,\n          v = a.extend({ a: q ? q[c] : b[c].substr(0, 3), A: b[c], d: z(n), e: z(n, 2, \" \"), w: c, b: m.shortMonths[y], B: m.months[y], m: z(y + 1), y: t.toString().substr(2, 2), Y: t, H: z(d), k: d, I: z(d % 12 || 12), l: d % 12 || 12, M: z(l[v.hcGetMinutes]()), p: 12 > d ? \"AM\" : \"PM\", P: 12 > d ? \"am\" : \"pm\", S: z(l.getSeconds()), L: z(Math.round(f % 1E3), 3) }, a.dateFormats);for (u in v) {\n        for (; -1 !== h.indexOf(\"%\" + u);) {\n          h = h.replace(\"%\" + u, \"function\" === typeof v[u] ? v[u](f) : v[u]);\n        }\n      }return p ? h.substr(0, 1).toUpperCase() + h.substr(1) : h;\n    };a.formatSingle = function (h, f) {\n      var p = /\\.([0-9])/,\n          v = a.defaultOptions.lang;/f$/.test(h) ? (p = (p = h.match(p)) ? p[1] : -1, null !== f && (f = a.numberFormat(f, p, v.decimalPoint, -1 < h.indexOf(\",\") ? v.thousandsSep : \"\"))) : f = a.dateFormat(h, f);return f;\n    };a.format = function (h, f) {\n      for (var p = \"{\", v = !1, l, u, d, c, n = [], y; h;) {\n        p = h.indexOf(p);if (-1 === p) break;l = h.slice(0, p);if (v) {\n          l = l.split(\":\");u = l.shift().split(\".\");c = u.length;y = f;for (d = 0; d < c; d++) {\n            y = y[u[d]];\n          }l.length && (y = a.formatSingle(l.join(\":\"), y));n.push(y);\n        } else n.push(l);h = h.slice(p + 1);p = (v = !v) ? \"}\" : \"{\";\n      }n.push(h);return n.join(\"\");\n    };a.getMagnitude = function (a) {\n      return Math.pow(10, Math.floor(Math.log(a) / Math.LN10));\n    };a.normalizeTickInterval = function (h, f, p, v, l) {\n      var u,\n          d = h;p = a.pick(p, 1);u = h / p;f || (f = l ? [1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10] : [1, 2, 2.5, 5, 10], !1 === v && (1 === p ? f = a.grep(f, function (a) {\n        return 0 === a % 1;\n      }) : .1 >= p && (f = [1 / p])));\n      for (v = 0; v < f.length && !(d = f[v], l && d * p >= h || !l && u <= (f[v] + (f[v + 1] || f[v])) / 2); v++) {}return d * p;\n    };a.stableSort = function (a, f) {\n      var p = a.length,\n          h,\n          l;for (l = 0; l < p; l++) {\n        a[l].safeI = l;\n      }a.sort(function (a, d) {\n        h = f(a, d);return 0 === h ? a.safeI - d.safeI : h;\n      });for (l = 0; l < p; l++) {\n        delete a[l].safeI;\n      }\n    };a.arrayMin = function (a) {\n      for (var f = a.length, p = a[0]; f--;) {\n        a[f] < p && (p = a[f]);\n      }return p;\n    };a.arrayMax = function (a) {\n      for (var f = a.length, p = a[0]; f--;) {\n        a[f] > p && (p = a[f]);\n      }return p;\n    };a.destroyObjectProperties = function (a, f) {\n      for (var p in a) {\n        a[p] && a[p] !== f && a[p].destroy && a[p].destroy(), delete a[p];\n      }\n    };a.discardElement = function (h) {\n      var f = a.garbageBin;f || (f = a.createElement(\"div\"));h && f.appendChild(h);f.innerHTML = \"\";\n    };a.correctFloat = function (a, f) {\n      return parseFloat(a.toPrecision(f || 14));\n    };a.setAnimation = function (h, f) {\n      f.renderer.globalAnimation = a.pick(h, f.options.chart.animation, !0);\n    };a.animObject = function (h) {\n      return a.isObject(h) ? a.merge(h) : { duration: h ? 500 : 0 };\n    };a.timeUnits = { millisecond: 1, second: 1E3, minute: 6E4, hour: 36E5, day: 864E5, week: 6048E5, month: 24192E5, year: 314496E5 };a.numberFormat = function (h, f, p, v) {\n      h = +h || 0;f = +f;var l = a.defaultOptions.lang,\n          u = (h.toString().split(\".\")[1] || \"\").length,\n          d,\n          c,\n          n = Math.abs(h);-1 === f ? f = Math.min(u, 20) : a.isNumber(f) || (f = 2);d = String(a.pInt(n.toFixed(f)));c = 3 < d.length ? d.length % 3 : 0;p = a.pick(p, l.decimalPoint);v = a.pick(v, l.thousandsSep);h = (0 > h ? \"-\" : \"\") + (c ? d.substr(0, c) + v : \"\");h += d.substr(c).replace(/(\\d{3})(?=\\d)/g, \"$1\" + v);f && (v = Math.abs(n - d + Math.pow(10, -Math.max(f, u) - 1)), h += p + v.toFixed(f).slice(2));return h;\n    };Math.easeInOutSine = function (a) {\n      return -.5 * (Math.cos(Math.PI * a) - 1);\n    };a.getStyle = function (h, f) {\n      return \"width\" === f ? Math.min(h.offsetWidth, h.scrollWidth) - a.getStyle(h, \"padding-left\") - a.getStyle(h, \"padding-right\") : \"height\" === f ? Math.min(h.offsetHeight, h.scrollHeight) - a.getStyle(h, \"padding-top\") - a.getStyle(h, \"padding-bottom\") : (h = I.getComputedStyle(h, void 0)) && a.pInt(h.getPropertyValue(f));\n    };a.inArray = function (a, f) {\n      return f.indexOf ? f.indexOf(a) : [].indexOf.call(f, a);\n    };a.grep = function (a, f) {\n      return [].filter.call(a, f);\n    };a.find = function (a, f) {\n      return [].find.call(a, f);\n    };a.map = function (a, f) {\n      for (var p = [], h = 0, l = a.length; h < l; h++) {\n        p[h] = f.call(a[h], a[h], h, a);\n      }return p;\n    };a.offset = function (a) {\n      var f = G.documentElement;a = a.getBoundingClientRect();return { top: a.top + (I.pageYOffset || f.scrollTop) - (f.clientTop || 0), left: a.left + (I.pageXOffset || f.scrollLeft) - (f.clientLeft || 0) };\n    };a.stop = function (a, f) {\n      for (var p = D.length; p--;) {\n        D[p].elem !== a || f && f !== D[p].prop || (D[p].stopped = !0);\n      }\n    };a.each = function (a, f, p) {\n      return Array.prototype.forEach.call(a, f, p);\n    };a.addEvent = function (h, f, p) {\n      function v(a) {\n        a.target = a.srcElement || I;p.call(h, a);\n      }var l = h.hcEvents = h.hcEvents || {};h.addEventListener ? h.addEventListener(f, p, !1) : h.attachEvent && (h.hcEventsIE || (h.hcEventsIE = {}), h.hcEventsIE[p.toString()] = v, h.attachEvent(\"on\" + f, v));l[f] || (l[f] = []);l[f].push(p);return function () {\n        a.removeEvent(h, f, p);\n      };\n    };a.removeEvent = function (h, f, p) {\n      function v(a, c) {\n        h.removeEventListener ? h.removeEventListener(a, c, !1) : h.attachEvent && (c = h.hcEventsIE[c.toString()], h.detachEvent(\"on\" + a, c));\n      }function l() {\n        var a, c;if (h.nodeName) for (c in f ? (a = {}, a[f] = !0) : a = d, a) {\n          if (d[c]) for (a = d[c].length; a--;) {\n            v(c, d[c][a]);\n          }\n        }\n      }var u,\n          d = h.hcEvents,\n          c;d && (f ? (u = d[f] || [], p ? (c = a.inArray(p, u), -1 < c && (u.splice(c, 1), d[f] = u), v(f, p)) : (l(), d[f] = [])) : (l(), h.hcEvents = {}));\n    };a.fireEvent = function (h, f, p, v) {\n      var l;l = h.hcEvents;var u, d;p = p || {};if (G.createEvent && (h.dispatchEvent || h.fireEvent)) l = G.createEvent(\"Events\"), l.initEvent(f, !0, !0), a.extend(l, p), h.dispatchEvent ? h.dispatchEvent(l) : h.fireEvent(f, l);else if (l) for (l = l[f] || [], u = l.length, p.target || a.extend(p, { preventDefault: function preventDefault() {\n          p.defaultPrevented = !0;\n        }, target: h,\n        type: f }), f = 0; f < u; f++) {\n        (d = l[f]) && !1 === d.call(h, p) && p.preventDefault();\n      }v && !p.defaultPrevented && v(p);\n    };a.animate = function (h, f, p) {\n      var v,\n          l = \"\",\n          u,\n          d,\n          c;a.isObject(p) || (v = arguments, p = { duration: v[2], easing: v[3], complete: v[4] });a.isNumber(p.duration) || (p.duration = 400);p.easing = \"function\" === typeof p.easing ? p.easing : Math[p.easing] || Math.easeInOutSine;p.curAnim = a.merge(f);for (c in f) {\n        a.stop(h, c), d = new a.Fx(h, p, c), u = null, \"d\" === c ? (d.paths = d.initPath(h, h.d, f.d), d.toD = f.d, v = 0, u = 1) : h.attr ? v = h.attr(c) : (v = parseFloat(a.getStyle(h, c)) || 0, \"opacity\" !== c && (l = \"px\")), u || (u = f[c]), u.match && u.match(\"px\") && (u = u.replace(/px/g, \"\")), d.run(v, u, l);\n      }\n    };a.seriesType = function (h, f, p, v, l) {\n      var u = a.getOptions(),\n          d = a.seriesTypes;u.plotOptions[h] = a.merge(u.plotOptions[f], p);d[h] = a.extendClass(d[f] || function () {}, v);d[h].prototype.type = h;l && (d[h].prototype.pointClass = a.extendClass(a.Point, l));return d[h];\n    };a.uniqueKey = function () {\n      var a = Math.random().toString(36).substring(2, 9),\n          f = 0;return function () {\n        return \"highcharts-\" + a + \"-\" + f++;\n      };\n    }();I.jQuery && (I.jQuery.fn.highcharts = function () {\n      var h = [].slice.call(arguments);if (this[0]) return h[0] ? (new a[a.isString(h[0]) ? h.shift() : \"Chart\"](this[0], h[0], h[1]), this) : C[a.attr(this[0], \"data-highcharts-chart\")];\n    });G && !G.defaultView && (a.getStyle = function (h, f) {\n      var p = { width: \"clientWidth\", height: \"clientHeight\" }[f];if (h.style[f]) return a.pInt(h.style[f]);\"opacity\" === f && (f = \"filter\");if (p) return h.style.zoom = 1, Math.max(h[p] - 2 * a.getStyle(h, \"padding\"), 0);h = h.currentStyle[f.replace(/\\-(\\w)/g, function (a, l) {\n        return l.toUpperCase();\n      })];\"filter\" === f && (h = h.replace(/alpha\\(opacity=([0-9]+)\\)/, function (a, l) {\n        return l / 100;\n      }));return \"\" === h ? 1 : a.pInt(h);\n    });Array.prototype.forEach || (a.each = function (a, f, p) {\n      for (var h = 0, l = a.length; h < l; h++) {\n        if (!1 === f.call(p, a[h], h, a)) return h;\n      }\n    });Array.prototype.indexOf || (a.inArray = function (a, f) {\n      var p,\n          h = 0;if (f) for (p = f.length; h < p; h++) {\n        if (f[h] === a) return h;\n      }return -1;\n    });Array.prototype.filter || (a.grep = function (a, f) {\n      for (var p = [], h = 0, l = a.length; h < l; h++) {\n        f(a[h], h) && p.push(a[h]);\n      }return p;\n    });Array.prototype.find || (a.find = function (a, f) {\n      var p,\n          h = a.length;for (p = 0; p < h; p++) {\n        if (f(a[p], p)) return a[p];\n      }\n    });\n  })(L);(function (a) {\n    var D = a.each,\n        C = a.isNumber,\n        G = a.map,\n        I = a.merge,\n        h = a.pInt;a.Color = function (f) {\n      if (!(this instanceof a.Color)) return new a.Color(f);this.init(f);\n    };a.Color.prototype = { parsers: [{ regex: /rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]?(?:\\.[0-9]+)?)\\s*\\)/, parse: function parse(a) {\n          return [h(a[1]), h(a[2]), h(a[3]), parseFloat(a[4], 10)];\n        } }, { regex: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/, parse: function parse(a) {\n          return [h(a[1], 16), h(a[2], 16), h(a[3], 16), 1];\n        } }, { regex: /rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/, parse: function parse(a) {\n          return [h(a[1]), h(a[2]), h(a[3]), 1];\n        } }], names: { white: \"#ffffff\", black: \"#000000\" }, init: function init(f) {\n        var p, h, l, u;if ((this.input = f = this.names[f] || f) && f.stops) this.stops = G(f.stops, function (d) {\n          return new a.Color(d[1]);\n        });else for (l = this.parsers.length; l-- && !h;) {\n          u = this.parsers[l], (p = u.regex.exec(f)) && (h = u.parse(p));\n        }this.rgba = h || [];\n      }, get: function get(a) {\n        var f = this.input,\n            h = this.rgba,\n            l;this.stops ? (l = I(f), l.stops = [].concat(l.stops), D(this.stops, function (f, d) {\n          l.stops[d] = [l.stops[d][0], f.get(a)];\n        })) : l = h && C(h[0]) ? \"rgb\" === a || !a && 1 === h[3] ? \"rgb(\" + h[0] + \",\" + h[1] + \",\" + h[2] + \")\" : \"a\" === a ? h[3] : \"rgba(\" + h.join(\",\") + \")\" : f;return l;\n      }, brighten: function brighten(a) {\n        var f,\n            v = this.rgba;if (this.stops) D(this.stops, function (l) {\n          l.brighten(a);\n        });else if (C(a) && 0 !== a) for (f = 0; 3 > f; f++) {\n          v[f] += h(255 * a), 0 > v[f] && (v[f] = 0), 255 < v[f] && (v[f] = 255);\n        }return this;\n      }, setOpacity: function setOpacity(a) {\n        this.rgba[3] = a;return this;\n      } };a.color = function (f) {\n      return new a.Color(f);\n    };\n  })(L);\n  (function (a) {\n    var D,\n        C,\n        G = a.addEvent,\n        I = a.animate,\n        h = a.attr,\n        f = a.charts,\n        p = a.color,\n        v = a.css,\n        l = a.createElement,\n        u = a.defined,\n        d = a.deg2rad,\n        c = a.destroyObjectProperties,\n        n = a.doc,\n        y = a.each,\n        t = a.extend,\n        m = a.erase,\n        b = a.grep,\n        q = a.hasTouch,\n        z = a.isArray,\n        F = a.isFirefox,\n        e = a.isMS,\n        r = a.isObject,\n        x = a.isString,\n        A = a.isWebKit,\n        k = a.merge,\n        w = a.noop,\n        K = a.pick,\n        J = a.pInt,\n        N = a.removeEvent,\n        g = a.stop,\n        B = a.svg,\n        S = a.SVG_NS,\n        M = a.symbolSizes,\n        R = a.win;D = a.SVGElement = function () {\n      return this;\n    };D.prototype = { opacity: 1, SVG_NS: S, textProps: \"direction fontSize fontWeight fontFamily fontStyle color lineHeight width textDecoration textOverflow textOutline\".split(\" \"),\n      init: function init(a, H) {\n        this.element = \"span\" === H ? l(H) : n.createElementNS(this.SVG_NS, H);this.renderer = a;\n      }, animate: function animate(E, H, g) {\n        H = a.animObject(K(H, this.renderer.globalAnimation, !0));0 !== H.duration ? (g && (H.complete = g), I(this, E, H)) : this.attr(E, null, g);return this;\n      }, colorGradient: function colorGradient(E, H, g) {\n        var e = this.renderer,\n            c,\n            b,\n            B,\n            r,\n            m,\n            w,\n            q,\n            d,\n            x,\n            n,\n            P,\n            t = [],\n            A;E.linearGradient ? b = \"linearGradient\" : E.radialGradient && (b = \"radialGradient\");if (b) {\n          B = E[b];m = e.gradients;q = E.stops;n = g.radialReference;z(B) && (E[b] = B = { x1: B[0], y1: B[1], x2: B[2],\n            y2: B[3], gradientUnits: \"userSpaceOnUse\" });\"radialGradient\" === b && n && !u(B.gradientUnits) && (r = B, B = k(B, e.getRadialAttr(n, r), { gradientUnits: \"userSpaceOnUse\" }));for (P in B) {\n            \"id\" !== P && t.push(P, B[P]);\n          }for (P in q) {\n            t.push(q[P]);\n          }t = t.join(\",\");m[t] ? n = m[t].attr(\"id\") : (B.id = n = a.uniqueKey(), m[t] = w = e.createElement(b).attr(B).add(e.defs), w.radAttr = r, w.stops = [], y(q, function (E) {\n            0 === E[1].indexOf(\"rgba\") ? (c = a.color(E[1]), d = c.get(\"rgb\"), x = c.get(\"a\")) : (d = E[1], x = 1);E = e.createElement(\"stop\").attr({ offset: E[0], \"stop-color\": d,\n              \"stop-opacity\": x }).add(w);w.stops.push(E);\n          }));A = \"url(\" + e.url + \"#\" + n + \")\";g.setAttribute(H, A);g.gradient = t;E.toString = function () {\n            return A;\n          };\n        }\n      }, applyTextOutline: function applyTextOutline(a) {\n        var E = this.element,\n            g,\n            e,\n            k,\n            b;-1 !== a.indexOf(\"contrast\") && (a = a.replace(/contrast/g, this.renderer.getContrast(E.style.fill)));this.fakeTS = !0;this.ySetter = this.xSetter;g = [].slice.call(E.getElementsByTagName(\"tspan\"));a = a.split(\" \");e = a[a.length - 1];(k = a[0]) && \"none\" !== k && (k = k.replace(/(^[\\d\\.]+)(.*?)$/g, function (a, E, H) {\n          return 2 * E + H;\n        }), y(g, function (a) {\n          \"highcharts-text-outline\" === a.getAttribute(\"class\") && m(g, E.removeChild(a));\n        }), b = E.firstChild, y(g, function (a, H) {\n          0 === H && (a.setAttribute(\"x\", E.getAttribute(\"x\")), H = E.getAttribute(\"y\"), a.setAttribute(\"y\", H || 0), null === H && E.setAttribute(\"y\", 0));a = a.cloneNode(1);h(a, { \"class\": \"highcharts-text-outline\", fill: e, stroke: e, \"stroke-width\": k, \"stroke-linejoin\": \"round\" });E.insertBefore(a, b);\n        }));\n      }, attr: function attr(a, H, e, k) {\n        var E,\n            b = this.element,\n            c,\n            B = this,\n            r;\"string\" === typeof a && void 0 !== H && (E = a, a = {}, a[E] = H);if (\"string\" === typeof a) B = (this[a + \"Getter\"] || this._defaultGetter).call(this, a, b);else {\n          for (E in a) {\n            H = a[E], r = !1, k || g(this, E), this.symbolName && /^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(E) && (c || (this.symbolAttr(a), c = !0), r = !0), !this.rotation || \"x\" !== E && \"y\" !== E || (this.doTransform = !0), r || (r = this[E + \"Setter\"] || this._defaultSetter, r.call(this, H, E, b), this.shadows && /^(width|height|visibility|x|y|d|transform|cx|cy|r)$/.test(E) && this.updateShadows(E, H, r));\n          }this.doTransform && (this.updateTransform(), this.doTransform = !1);\n        }e && e();return B;\n      }, updateShadows: function updateShadows(a, H, g) {\n        for (var E = this.shadows, e = E.length; e--;) {\n          g.call(E[e], \"height\" === a ? Math.max(H - (E[e].cutHeight || 0), 0) : \"d\" === a ? this.d : H, a, E[e]);\n        }\n      }, addClass: function addClass(a, H) {\n        var E = this.attr(\"class\") || \"\";-1 === E.indexOf(a) && (H || (a = (E + (E ? \" \" : \"\") + a).replace(\"  \", \" \")), this.attr(\"class\", a));return this;\n      }, hasClass: function hasClass(a) {\n        return -1 !== h(this.element, \"class\").indexOf(a);\n      }, removeClass: function removeClass(a) {\n        h(this.element, \"class\", (h(this.element, \"class\") || \"\").replace(a, \"\"));return this;\n      }, symbolAttr: function symbolAttr(a) {\n        var E = this;y(\"x y r start end width height innerR anchorX anchorY\".split(\" \"), function (g) {\n          E[g] = K(a[g], E[g]);\n        });E.attr({ d: E.renderer.symbols[E.symbolName](E.x, E.y, E.width, E.height, E) });\n      }, clip: function clip(a) {\n        return this.attr(\"clip-path\", a ? \"url(\" + this.renderer.url + \"#\" + a.id + \")\" : \"none\");\n      }, crisp: function crisp(a, g) {\n        var E,\n            H = {},\n            e;g = g || a.strokeWidth || 0;e = Math.round(g) % 2 / 2;a.x = Math.floor(a.x || this.x || 0) + e;a.y = Math.floor(a.y || this.y || 0) + e;a.width = Math.floor((a.width || this.width || 0) - 2 * e);a.height = Math.floor((a.height || this.height || 0) - 2 * e);u(a.strokeWidth) && (a.strokeWidth = g);for (E in a) {\n          this[E] !== a[E] && (this[E] = H[E] = a[E]);\n        }return H;\n      }, css: function css(a) {\n        var g = this.styles,\n            E = {},\n            k = this.element,\n            b,\n            c,\n            r = \"\";b = !g;a && a.color && (a.fill = a.color);if (g) for (c in a) {\n          a[c] !== g[c] && (E[c] = a[c], b = !0);\n        }if (b) {\n          b = this.textWidth = a && a.width && \"text\" === k.nodeName.toLowerCase() && J(a.width) || this.textWidth;g && (a = t(g, E));this.styles = a;b && !B && this.renderer.forExport && delete a.width;if (e && !B) v(this.element, a);else {\n            g = function g(a, _g) {\n              return \"-\" + _g.toLowerCase();\n            };for (c in a) {\n              r += c.replace(/([A-Z])/g, g) + \":\" + a[c] + \";\";\n            }h(k, \"style\", r);\n          }this.added && (b && this.renderer.buildText(this), a && a.textOutline && this.applyTextOutline(a.textOutline));\n        }return this;\n      }, strokeWidth: function strokeWidth() {\n        return this[\"stroke-width\"] || 0;\n      }, on: function on(a, g) {\n        var E = this,\n            e = E.element;q && \"click\" === a ? (e.ontouchstart = function (a) {\n          E.touchEventFired = Date.now();a.preventDefault();g.call(e, a);\n        }, e.onclick = function (a) {\n          (-1 === R.navigator.userAgent.indexOf(\"Android\") || 1100 < Date.now() - (E.touchEventFired || 0)) && g.call(e, a);\n        }) : e[\"on\" + a] = g;return this;\n      }, setRadialReference: function setRadialReference(a) {\n        var g = this.renderer.gradients[this.element.gradient];\n        this.element.radialReference = a;g && g.radAttr && g.animate(this.renderer.getRadialAttr(a, g.radAttr));return this;\n      }, translate: function translate(a, g) {\n        return this.attr({ translateX: a, translateY: g });\n      }, invert: function invert(a) {\n        this.inverted = a;this.updateTransform();return this;\n      }, updateTransform: function updateTransform() {\n        var a = this.translateX || 0,\n            g = this.translateY || 0,\n            e = this.scaleX,\n            k = this.scaleY,\n            b = this.inverted,\n            c = this.rotation,\n            B = this.element;b && (a += this.attr(\"width\"), g += this.attr(\"height\"));a = [\"translate(\" + a + \",\" + g + \")\"];b ? a.push(\"rotate(90) scale(-1,1)\") : c && a.push(\"rotate(\" + c + \" \" + (B.getAttribute(\"x\") || 0) + \" \" + (B.getAttribute(\"y\") || 0) + \")\");(u(e) || u(k)) && a.push(\"scale(\" + K(e, 1) + \" \" + K(k, 1) + \")\");a.length && B.setAttribute(\"transform\", a.join(\" \"));\n      }, toFront: function toFront() {\n        var a = this.element;a.parentNode.appendChild(a);return this;\n      }, align: function align(a, g, e) {\n        var E,\n            H,\n            k,\n            b,\n            c = {};H = this.renderer;k = H.alignedObjects;var B, r;if (a) {\n          if (this.alignOptions = a, this.alignByTranslate = g, !e || x(e)) this.alignTo = E = e || \"renderer\", m(k, this), k.push(this), e = null;\n        } else a = this.alignOptions, g = this.alignByTranslate, E = this.alignTo;e = K(e, H[E], H);E = a.align;H = a.verticalAlign;k = (e.x || 0) + (a.x || 0);b = (e.y || 0) + (a.y || 0);\"right\" === E ? B = 1 : \"center\" === E && (B = 2);B && (k += (e.width - (a.width || 0)) / B);c[g ? \"translateX\" : \"x\"] = Math.round(k);\"bottom\" === H ? r = 1 : \"middle\" === H && (r = 2);r && (b += (e.height - (a.height || 0)) / r);c[g ? \"translateY\" : \"y\"] = Math.round(b);this[this.placed ? \"animate\" : \"attr\"](c);this.placed = !0;this.alignAttr = c;return this;\n      }, getBBox: function getBBox(a, g) {\n        var E,\n            H = this.renderer,\n            k,\n            b = this.element,\n            c = this.styles,\n            B,\n            r = this.textStr,\n            m,\n            w = H.cache,\n            q = H.cacheKeys,\n            x;g = K(g, this.rotation);k = g * d;B = c && c.fontSize;void 0 !== r && (x = r.toString(), -1 === x.indexOf(\"\\x3c\") && (x = x.replace(/[0-9]/g, \"0\")), x += [\"\", g || 0, B, b.style.width, b.style[\"text-overflow\"]].join());x && !a && (E = w[x]);if (!E) {\n          if (b.namespaceURI === this.SVG_NS || H.forExport) {\n            try {\n              (m = this.fakeTS && function (a) {\n                y(b.querySelectorAll(\".highcharts-text-outline\"), function (g) {\n                  g.style.display = a;\n                });\n              }) && m(\"none\"), E = b.getBBox ? t({}, b.getBBox()) : { width: b.offsetWidth, height: b.offsetHeight }, m && m(\"\");\n            } catch (T) {}if (!E || 0 > E.width) E = { width: 0,\n              height: 0 };\n          } else E = this.htmlGetBBox();H.isSVG && (a = E.width, H = E.height, e && c && \"11px\" === c.fontSize && \"16.9\" === H.toPrecision(3) && (E.height = H = 14), g && (E.width = Math.abs(H * Math.sin(k)) + Math.abs(a * Math.cos(k)), E.height = Math.abs(H * Math.cos(k)) + Math.abs(a * Math.sin(k))));if (x && 0 < E.height) {\n            for (; 250 < q.length;) {\n              delete w[q.shift()];\n            }w[x] || q.push(x);w[x] = E;\n          }\n        }return E;\n      }, show: function show(a) {\n        return this.attr({ visibility: a ? \"inherit\" : \"visible\" });\n      }, hide: function hide() {\n        return this.attr({ visibility: \"hidden\" });\n      }, fadeOut: function fadeOut(a) {\n        var g = this;g.animate({ opacity: 0 }, { duration: a || 150, complete: function complete() {\n            g.attr({ y: -9999 });\n          } });\n      }, add: function add(a) {\n        var g = this.renderer,\n            e = this.element,\n            E;a && (this.parentGroup = a);this.parentInverted = a && a.inverted;void 0 !== this.textStr && g.buildText(this);this.added = !0;if (!a || a.handleZ || this.zIndex) E = this.zIndexSetter();E || (a ? a.element : g.box).appendChild(e);if (this.onAdd) this.onAdd();return this;\n      }, safeRemoveChild: function safeRemoveChild(a) {\n        var g = a.parentNode;g && g.removeChild(a);\n      }, destroy: function destroy() {\n        var a = this.element || {},\n            e = this.renderer.isSVG && \"SPAN\" === a.nodeName && this.parentGroup,\n            k,\n            b;a.onclick = a.onmouseout = a.onmouseover = a.onmousemove = a.point = null;g(this);this.clipPath && (this.clipPath = this.clipPath.destroy());if (this.stops) {\n          for (b = 0; b < this.stops.length; b++) {\n            this.stops[b] = this.stops[b].destroy();\n          }this.stops = null;\n        }this.safeRemoveChild(a);for (this.destroyShadows(); e && e.div && 0 === e.div.childNodes.length;) {\n          a = e.parentGroup, this.safeRemoveChild(e.div), delete e.div, e = a;\n        }this.alignTo && m(this.renderer.alignedObjects, this);for (k in this) {\n          delete this[k];\n        }return null;\n      },\n      shadow: function shadow(a, g, e) {\n        var E = [],\n            b,\n            k,\n            H = this.element,\n            c,\n            B,\n            r,\n            m;if (!a) this.destroyShadows();else if (!this.shadows) {\n          B = K(a.width, 3);r = (a.opacity || .15) / B;m = this.parentInverted ? \"(-1,-1)\" : \"(\" + K(a.offsetX, 1) + \", \" + K(a.offsetY, 1) + \")\";for (b = 1; b <= B; b++) {\n            k = H.cloneNode(0), c = 2 * B + 1 - 2 * b, h(k, { isShadow: \"true\", stroke: a.color || \"#000000\", \"stroke-opacity\": r * b, \"stroke-width\": c, transform: \"translate\" + m, fill: \"none\" }), e && (h(k, \"height\", Math.max(h(k, \"height\") - c, 0)), k.cutHeight = c), g ? g.element.appendChild(k) : H.parentNode.insertBefore(k, H), E.push(k);\n          }this.shadows = E;\n        }return this;\n      }, destroyShadows: function destroyShadows() {\n        y(this.shadows || [], function (a) {\n          this.safeRemoveChild(a);\n        }, this);this.shadows = void 0;\n      }, xGetter: function xGetter(a) {\n        \"circle\" === this.element.nodeName && (\"x\" === a ? a = \"cx\" : \"y\" === a && (a = \"cy\"));return this._defaultGetter(a);\n      }, _defaultGetter: function _defaultGetter(a) {\n        a = K(this[a], this.element ? this.element.getAttribute(a) : null, 0);/^[\\-0-9\\.]+$/.test(a) && (a = parseFloat(a));return a;\n      }, dSetter: function dSetter(a, g, e) {\n        a && a.join && (a = a.join(\" \"));/(NaN| {2}|^$)/.test(a) && (a = \"M 0 0\");e.setAttribute(g, a);this[g] = a;\n      }, dashstyleSetter: function dashstyleSetter(a) {\n        var g,\n            e = this[\"stroke-width\"];\"inherit\" === e && (e = 1);if (a = a && a.toLowerCase()) {\n          a = a.replace(\"shortdashdotdot\", \"3,1,1,1,1,1,\").replace(\"shortdashdot\", \"3,1,1,1\").replace(\"shortdot\", \"1,1,\").replace(\"shortdash\", \"3,1,\").replace(\"longdash\", \"8,3,\").replace(/dot/g, \"1,3,\").replace(\"dash\", \"4,3,\").replace(/,$/, \"\").split(\",\");for (g = a.length; g--;) {\n            a[g] = J(a[g]) * e;\n          }a = a.join(\",\").replace(/NaN/g, \"none\");this.element.setAttribute(\"stroke-dasharray\", a);\n        }\n      }, alignSetter: function alignSetter(a) {\n        this.element.setAttribute(\"text-anchor\", { left: \"start\", center: \"middle\", right: \"end\" }[a]);\n      }, opacitySetter: function opacitySetter(a, g, e) {\n        this[g] = a;e.setAttribute(g, a);\n      }, titleSetter: function titleSetter(a) {\n        var g = this.element.getElementsByTagName(\"title\")[0];g || (g = n.createElementNS(this.SVG_NS, \"title\"), this.element.appendChild(g));g.firstChild && g.removeChild(g.firstChild);g.appendChild(n.createTextNode(String(K(a), \"\").replace(/<[^>]*>/g, \"\")));\n      }, textSetter: function textSetter(a) {\n        a !== this.textStr && (delete this.bBox, this.textStr = a, this.added && this.renderer.buildText(this));\n      }, fillSetter: function fillSetter(a, g, e) {\n        \"string\" === typeof a ? e.setAttribute(g, a) : a && this.colorGradient(a, g, e);\n      }, visibilitySetter: function visibilitySetter(a, g, e) {\n        \"inherit\" === a ? e.removeAttribute(g) : e.setAttribute(g, a);\n      }, zIndexSetter: function zIndexSetter(a, g) {\n        var e = this.renderer,\n            k = this.parentGroup,\n            b = (k || e).element || e.box,\n            c,\n            B = this.element,\n            H;c = this.added;var r;u(a) && (B.zIndex = a, a = +a, this[g] === a && (c = !1), this[g] = a);if (c) {\n          (a = this.zIndex) && k && (k.handleZ = !0);g = b.childNodes;for (r = 0; r < g.length && !H; r++) {\n            k = g[r], c = k.zIndex, k !== B && (J(c) > a || !u(a) && u(c) || 0 > a && !u(c) && b !== e.box) && (b.insertBefore(B, k), H = !0);\n          }H || b.appendChild(B);\n        }return H;\n      }, _defaultSetter: function _defaultSetter(a, g, e) {\n        e.setAttribute(g, a);\n      } };D.prototype.yGetter = D.prototype.xGetter;D.prototype.translateXSetter = D.prototype.translateYSetter = D.prototype.rotationSetter = D.prototype.verticalAlignSetter = D.prototype.scaleXSetter = D.prototype.scaleYSetter = function (a, g) {\n      this[g] = a;this.doTransform = !0;\n    };D.prototype[\"stroke-widthSetter\"] = D.prototype.strokeSetter = function (a, g, e) {\n      this[g] = a;this.stroke && this[\"stroke-width\"] ? (D.prototype.fillSetter.call(this, this.stroke, \"stroke\", e), e.setAttribute(\"stroke-width\", this[\"stroke-width\"]), this.hasStroke = !0) : \"stroke-width\" === g && 0 === a && this.hasStroke && (e.removeAttribute(\"stroke\"), this.hasStroke = !1);\n    };C = a.SVGRenderer = function () {\n      this.init.apply(this, arguments);\n    };C.prototype = { Element: D, SVG_NS: S, init: function init(a, g, e, k, b, c) {\n        var B;k = this.createElement(\"svg\").attr({ version: \"1.1\", \"class\": \"highcharts-root\" }).css(this.getStyle(k));B = k.element;a.appendChild(B);-1 === a.innerHTML.indexOf(\"xmlns\") && h(B, \"xmlns\", this.SVG_NS);this.isSVG = !0;\n        this.box = B;this.boxWrapper = k;this.alignedObjects = [];this.url = (F || A) && n.getElementsByTagName(\"base\").length ? R.location.href.replace(/#.*?$/, \"\").replace(/([\\('\\)])/g, \"\\\\$1\").replace(/ /g, \"%20\") : \"\";this.createElement(\"desc\").add().element.appendChild(n.createTextNode(\"Created with Highcharts 5.0.6\"));this.defs = this.createElement(\"defs\").add();this.allowHTML = c;this.forExport = b;this.gradients = {};this.cache = {};this.cacheKeys = [];this.imgCount = 0;this.setSize(g, e, !1);var H;F && a.getBoundingClientRect && (g = function g() {\n          v(a, { left: 0, top: 0 });H = a.getBoundingClientRect();v(a, { left: Math.ceil(H.left) - H.left + \"px\", top: Math.ceil(H.top) - H.top + \"px\" });\n        }, g(), this.unSubPixelFix = G(R, \"resize\", g));\n      }, getStyle: function getStyle(a) {\n        return this.style = t({ fontFamily: '\"Lucida Grande\", \"Lucida Sans Unicode\", Arial, Helvetica, sans-serif', fontSize: \"12px\" }, a);\n      }, setStyle: function setStyle(a) {\n        this.boxWrapper.css(this.getStyle(a));\n      }, isHidden: function isHidden() {\n        return !this.boxWrapper.getBBox().width;\n      }, destroy: function destroy() {\n        var a = this.defs;this.box = null;this.boxWrapper = this.boxWrapper.destroy();\n        c(this.gradients || {});this.gradients = null;a && (this.defs = a.destroy());this.unSubPixelFix && this.unSubPixelFix();return this.alignedObjects = null;\n      }, createElement: function createElement(a) {\n        var g = new this.Element();g.init(this, a);return g;\n      }, draw: w, getRadialAttr: function getRadialAttr(a, g) {\n        return { cx: a[0] - a[2] / 2 + g.cx * a[2], cy: a[1] - a[2] / 2 + g.cy * a[2], r: g.r * a[2] };\n      }, buildText: function buildText(a) {\n        for (var g = a.element, e = this, k = e.forExport, c = K(a.textStr, \"\").toString(), r = -1 !== c.indexOf(\"\\x3c\"), m = g.childNodes, w, E, q, x, d = h(g, \"x\"), t = a.styles, A = a.textWidth, z = t && t.lineHeight, l = t && t.textOutline, F = t && \"ellipsis\" === t.textOverflow, f = m.length, u = A && !a.added && this.box, p = function p(a) {\n          var k;k = /(px|em)$/.test(a && a.style.fontSize) ? a.style.fontSize : t && t.fontSize || e.style.fontSize || 12;return z ? J(z) : e.fontMetrics(k, a.getAttribute(\"style\") ? a : g).h;\n        }; f--;) {\n          g.removeChild(m[f]);\n        }r || l || F || A || -1 !== c.indexOf(\" \") ? (w = /<.*class=\"([^\"]+)\".*>/, E = /<.*style=\"([^\"]+)\".*>/, q = /<.*href=\"(http[^\"]+)\".*>/, u && u.appendChild(g), c = r ? c.replace(/<(b|strong)>/g, '\\x3cspan style\\x3d\"font-weight:bold\"\\x3e').replace(/<(i|em)>/g, '\\x3cspan style\\x3d\"font-style:italic\"\\x3e').replace(/<a/g, \"\\x3cspan\").replace(/<\\/(b|strong|i|em|a)>/g, \"\\x3c/span\\x3e\").split(/<br.*?>/g) : [c], c = b(c, function (a) {\n          return \"\" !== a;\n        }), y(c, function (b, c) {\n          var r,\n              H = 0;b = b.replace(/^\\s+|\\s+$/g, \"\").replace(/<span/g, \"|||\\x3cspan\").replace(/<\\/span>/g, \"\\x3c/span\\x3e|||\");r = b.split(\"|||\");y(r, function (b) {\n            if (\"\" !== b || 1 === r.length) {\n              var m = {},\n                  l = n.createElementNS(e.SVG_NS, \"tspan\"),\n                  z,\n                  f;w.test(b) && (z = b.match(w)[1], h(l, \"class\", z));E.test(b) && (f = b.match(E)[1].replace(/(;| |^)color([ :])/, \"$1fill$2\"), h(l, \"style\", f));q.test(b) && !k && (h(l, \"onclick\", 'location.href\\x3d\"' + b.match(q)[1] + '\"'), v(l, { cursor: \"pointer\" }));b = (b.replace(/<(.|\\n)*?>/g, \"\") || \" \").replace(/&lt;/g, \"\\x3c\").replace(/&gt;/g, \"\\x3e\");if (\" \" !== b) {\n                l.appendChild(n.createTextNode(b));H ? m.dx = 0 : c && null !== d && (m.x = d);h(l, m);g.appendChild(l);!H && c && (!B && k && v(l, { display: \"block\" }), h(l, \"dy\", p(l)));if (A) {\n                  m = b.replace(/([^\\^])-/g, \"$1- \").split(\" \");z = \"nowrap\" === t.whiteSpace;for (var K = 1 < r.length || c || 1 < m.length && !z, u, y, J = [], M = p(l), P = a.rotation, O = b, N = O.length; (K || F) && (m.length || J.length);) {\n                    a.rotation = 0, u = a.getBBox(!0), y = u.width, !B && e.forExport && (y = e.measureSpanWidth(l.firstChild.data, a.styles)), u = y > A, void 0 === x && (x = u), F && x ? (N /= 2, \"\" === O || !u && .5 > N ? m = [] : (O = b.substring(0, O.length + (u ? -1 : 1) * Math.ceil(N)), m = [O + (3 < A ? \"\\u2026\" : \"\")], l.removeChild(l.firstChild))) : u && 1 !== m.length ? (l.removeChild(l.firstChild), J.unshift(m.pop())) : (m = J, J = [], m.length && !z && (l = n.createElementNS(S, \"tspan\"), h(l, { dy: M, x: d }), f && h(l, \"style\", f), g.appendChild(l)), y > A && (A = y)), m.length && l.appendChild(n.createTextNode(m.join(\" \").replace(/- /g, \"-\")));\n                  }a.rotation = P;\n                }H++;\n              }\n            }\n          });\n        }), x && a.attr(\"title\", a.textStr), u && u.removeChild(g), l && a.applyTextOutline && a.applyTextOutline(l)) : g.appendChild(n.createTextNode(c.replace(/&lt;/g, \"\\x3c\").replace(/&gt;/g, \"\\x3e\")));\n      }, getContrast: function getContrast(a) {\n        a = p(a).rgba;return 510 < a[0] + a[1] + a[2] ? \"#000000\" : \"#FFFFFF\";\n      }, button: function button(a, g, b, c, B, r, m, w, q) {\n        var H = this.label(a, g, b, q, null, null, null, null, \"button\"),\n            E = 0;H.attr(k({ padding: 8, r: 2 }, B));var x, d, n, l;B = k({ fill: \"#f7f7f7\",\n          stroke: \"#cccccc\", \"stroke-width\": 1, style: { color: \"#333333\", cursor: \"pointer\", fontWeight: \"normal\" } }, B);x = B.style;delete B.style;r = k(B, { fill: \"#e6e6e6\" }, r);d = r.style;delete r.style;m = k(B, { fill: \"#e6ebf5\", style: { color: \"#000000\", fontWeight: \"bold\" } }, m);n = m.style;delete m.style;w = k(B, { style: { color: \"#cccccc\" } }, w);l = w.style;delete w.style;G(H.element, e ? \"mouseover\" : \"mouseenter\", function () {\n          3 !== E && H.setState(1);\n        });G(H.element, e ? \"mouseout\" : \"mouseleave\", function () {\n          3 !== E && H.setState(E);\n        });H.setState = function (a) {\n          1 !== a && (H.state = E = a);H.removeClass(/highcharts-button-(normal|hover|pressed|disabled)/).addClass(\"highcharts-button-\" + [\"normal\", \"hover\", \"pressed\", \"disabled\"][a || 0]);H.attr([B, r, m, w][a || 0]).css([x, d, n, l][a || 0]);\n        };H.attr(B).css(t({ cursor: \"default\" }, x));return H.on(\"click\", function (a) {\n          3 !== E && c.call(H, a);\n        });\n      }, crispLine: function crispLine(a, g) {\n        a[1] === a[4] && (a[1] = a[4] = Math.round(a[1]) - g % 2 / 2);a[2] === a[5] && (a[2] = a[5] = Math.round(a[2]) + g % 2 / 2);return a;\n      }, path: function path(a) {\n        var g = { fill: \"none\" };z(a) ? g.d = a : r(a) && t(g, a);return this.createElement(\"path\").attr(g);\n      },\n      circle: function circle(a, g, e) {\n        a = r(a) ? a : { x: a, y: g, r: e };g = this.createElement(\"circle\");g.xSetter = g.ySetter = function (a, g, e) {\n          e.setAttribute(\"c\" + g, a);\n        };return g.attr(a);\n      }, arc: function arc(a, g, e, b, k, c) {\n        r(a) && (g = a.y, e = a.r, b = a.innerR, k = a.start, c = a.end, a = a.x);a = this.symbol(\"arc\", a || 0, g || 0, e || 0, e || 0, { innerR: b || 0, start: k || 0, end: c || 0 });a.r = e;return a;\n      }, rect: function rect(a, g, e, b, k, c) {\n        k = r(a) ? a.r : k;var B = this.createElement(\"rect\");a = r(a) ? a : void 0 === a ? {} : { x: a, y: g, width: Math.max(e, 0), height: Math.max(b, 0) };void 0 !== c && (a.strokeWidth = c, a = B.crisp(a));a.fill = \"none\";k && (a.r = k);B.rSetter = function (a, g, e) {\n          h(e, { rx: a, ry: a });\n        };return B.attr(a);\n      }, setSize: function setSize(a, g, e) {\n        var b = this.alignedObjects,\n            k = b.length;this.width = a;this.height = g;for (this.boxWrapper.animate({ width: a, height: g }, { step: function step() {\n            this.attr({ viewBox: \"0 0 \" + this.attr(\"width\") + \" \" + this.attr(\"height\") });\n          }, duration: K(e, !0) ? void 0 : 0 }); k--;) {\n          b[k].align();\n        }\n      }, g: function g(a) {\n        var g = this.createElement(\"g\");return a ? g.attr({ \"class\": \"highcharts-\" + a }) : g;\n      }, image: function image(a, g, e, b, k) {\n        var c = { preserveAspectRatio: \"none\" };\n        1 < arguments.length && t(c, { x: g, y: e, width: b, height: k });c = this.createElement(\"image\").attr(c);c.element.setAttributeNS ? c.element.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", a) : c.element.setAttribute(\"hc-svg-href\", a);return c;\n      }, symbol: function symbol(a, g, e, b, k, c) {\n        var B = this,\n            r,\n            H = this.symbols[a],\n            m = u(g) && H && H(Math.round(g), Math.round(e), b, k, c),\n            w = /^url\\((.*?)\\)$/,\n            q,\n            x;H ? (r = this.path(m), r.attr(\"fill\", \"none\"), t(r, { symbolName: a, x: g, y: e, width: b, height: k }), c && t(r, c)) : w.test(a) && (q = a.match(w)[1], r = this.image(q), r.imgwidth = K(M[q] && M[q].width, c && c.width), r.imgheight = K(M[q] && M[q].height, c && c.height), x = function x() {\n          r.attr({ width: r.width, height: r.height });\n        }, y([\"width\", \"height\"], function (a) {\n          r[a + \"Setter\"] = function (a, g) {\n            var e = {},\n                b = this[\"img\" + g],\n                k = \"width\" === g ? \"translateX\" : \"translateY\";this[g] = a;u(b) && (this.element && this.element.setAttribute(g, b), this.alignByTranslate || (e[k] = ((this[g] || 0) - b) / 2, this.attr(e)));\n          };\n        }), u(g) && r.attr({ x: g, y: e }), r.isImg = !0, u(r.imgwidth) && u(r.imgheight) ? x() : (r.attr({ width: 0, height: 0 }), l(\"img\", { onload: function onload() {\n            var a = f[B.chartIndex];0 === this.width && (v(this, { position: \"absolute\", top: \"-999em\" }), n.body.appendChild(this));M[q] = { width: this.width, height: this.height };r.imgwidth = this.width;r.imgheight = this.height;r.element && x();this.parentNode && this.parentNode.removeChild(this);B.imgCount--;if (!B.imgCount && a && a.onload) a.onload();\n          }, src: q }), this.imgCount++));return r;\n      }, symbols: { circle: function circle(a, g, e, b) {\n          var k = .166 * e;return [\"M\", a + e / 2, g, \"C\", a + e + k, g, a + e + k, g + b, a + e / 2, g + b, \"C\", a - k, g + b, a - k, g, a + e / 2, g, \"Z\"];\n        }, square: function square(a, g, e, b) {\n          return [\"M\", a, g, \"L\", a + e, g, a + e, g + b, a, g + b, \"Z\"];\n        }, triangle: function triangle(a, g, e, b) {\n          return [\"M\", a + e / 2, g, \"L\", a + e, g + b, a, g + b, \"Z\"];\n        }, \"triangle-down\": function triangleDown(a, g, e, b) {\n          return [\"M\", a, g, \"L\", a + e, g, a + e / 2, g + b, \"Z\"];\n        }, diamond: function diamond(a, g, e, b) {\n          return [\"M\", a + e / 2, g, \"L\", a + e, g + b / 2, a + e / 2, g + b, a, g + b / 2, \"Z\"];\n        }, arc: function arc(a, g, e, b, k) {\n          var c = k.start;e = k.r || e || b;var B = k.end - .001;b = k.innerR;var r = k.open,\n              m = Math.cos(c),\n              H = Math.sin(c),\n              w = Math.cos(B),\n              B = Math.sin(B);k = k.end - c < Math.PI ? 0 : 1;return [\"M\", a + e * m, g + e * H, \"A\", e, e, 0, k, 1, a + e * w, g + e * B, r ? \"M\" : \"L\", a + b * w, g + b * B, \"A\", b, b, 0, k, 0, a + b * m, g + b * H, r ? \"\" : \"Z\"];\n        }, callout: function callout(a, g, e, b, k) {\n          var c = Math.min(k && k.r || 0, e, b),\n              B = c + 6,\n              r = k && k.anchorX;k = k && k.anchorY;var m;m = [\"M\", a + c, g, \"L\", a + e - c, g, \"C\", a + e, g, a + e, g, a + e, g + c, \"L\", a + e, g + b - c, \"C\", a + e, g + b, a + e, g + b, a + e - c, g + b, \"L\", a + c, g + b, \"C\", a, g + b, a, g + b, a, g + b - c, \"L\", a, g + c, \"C\", a, g, a, g, a + c, g];r && r > e ? k > g + B && k < g + b - B ? m.splice(13, 3, \"L\", a + e, k - 6, a + e + 6, k, a + e, k + 6, a + e, g + b - c) : m.splice(13, 3, \"L\", a + e, b / 2, r, k, a + e, b / 2, a + e, g + b - c) : r && 0 > r ? k > g + B && k < g + b - B ? m.splice(33, 3, \"L\", a, k + 6, a - 6, k, a, k - 6, a, g + c) : m.splice(33, 3, \"L\", a, b / 2, r, k, a, b / 2, a, g + c) : k && k > b && r > a + B && r < a + e - B ? m.splice(23, 3, \"L\", r + 6, g + b, r, g + b + 6, r - 6, g + b, a + c, g + b) : k && 0 > k && r > a + B && r < a + e - B && m.splice(3, 3, \"L\", r - 6, g, r, g - 6, r + 6, g, e - c, g);return m;\n        } }, clipRect: function clipRect(g, e, b, k) {\n        var c = a.uniqueKey(),\n            B = this.createElement(\"clipPath\").attr({ id: c }).add(this.defs);g = this.rect(g, e, b, k, 0).add(B);g.id = c;g.clipPath = B;g.count = 0;return g;\n      }, text: function text(a, g, e, b) {\n        var k = !B && this.forExport,\n            c = {};if (b && (this.allowHTML || !this.forExport)) return this.html(a, g, e);c.x = Math.round(g || 0);e && (c.y = Math.round(e));\n        if (a || 0 === a) c.text = a;a = this.createElement(\"text\").attr(c);k && a.css({ position: \"absolute\" });b || (a.xSetter = function (a, g, e) {\n          var b = e.getElementsByTagName(\"tspan\"),\n              k,\n              c = e.getAttribute(g),\n              B;for (B = 0; B < b.length; B++) {\n            k = b[B], k.getAttribute(g) === c && k.setAttribute(g, a);\n          }e.setAttribute(g, a);\n        });return a;\n      }, fontMetrics: function fontMetrics(a, g) {\n        a = a || g && g.style && g.style.fontSize || this.style && this.style.fontSize;a = /px/.test(a) ? J(a) : /em/.test(a) ? parseFloat(a) * (g ? this.fontMetrics(null, g.parentNode).f : 16) : 12;g = 24 > a ? a + 3 : Math.round(1.2 * a);return { h: g, b: Math.round(.8 * g), f: a };\n      }, rotCorr: function rotCorr(a, g, e) {\n        var b = a;g && e && (b = Math.max(b * Math.cos(g * d), 4));return { x: -a / 3 * Math.sin(g * d), y: b };\n      }, label: function label(a, g, e, b, c, B, r, m, w) {\n        var q = this,\n            x = q.g(\"button\" !== w && \"label\"),\n            d = x.text = q.text(\"\", 0, 0, r).attr({ zIndex: 1 }),\n            H,\n            n,\n            l = 0,\n            A = 3,\n            z = 0,\n            F,\n            f,\n            K,\n            p,\n            J,\n            h = {},\n            M,\n            S,\n            E = /^url\\((.*?)\\)$/.test(b),\n            v = E,\n            P,\n            R,\n            O,\n            Q;w && x.addClass(\"highcharts-\" + w);v = E;P = function P() {\n          return (M || 0) % 2 / 2;\n        };R = function R() {\n          var a = d.element.style,\n              g = {};n = (void 0 === F || void 0 === f || J) && u(d.textStr) && d.getBBox();x.width = (F || n.width || 0) + 2 * A + z;x.height = (f || n.height || 0) + 2 * A;S = A + q.fontMetrics(a && a.fontSize, d).b;v && (H || (x.box = H = q.symbols[b] || E ? q.symbol(b) : q.rect(), H.addClass((\"button\" === w ? \"\" : \"highcharts-label-box\") + (w ? \" highcharts-\" + w + \"-box\" : \"\")), H.add(x), a = P(), g.x = a, g.y = (m ? -S : 0) + a), g.width = Math.round(x.width), g.height = Math.round(x.height), H.attr(t(g, h)), h = {});\n        };O = function O() {\n          var a = z + A,\n              g;g = m ? 0 : S;u(F) && n && (\"center\" === J || \"right\" === J) && (a += { center: .5, right: 1 }[J] * (F - n.width));if (a !== d.x || g !== d.y) d.attr(\"x\", a), void 0 !== g && d.attr(\"y\", g);d.x = a;d.y = g;\n        };Q = function Q(a, g) {\n          H ? H.attr(a, g) : h[a] = g;\n        };x.onAdd = function () {\n          d.add(x);x.attr({ text: a || 0 === a ? a : \"\", x: g, y: e });H && u(c) && x.attr({ anchorX: c, anchorY: B });\n        };x.widthSetter = function (a) {\n          F = a;\n        };x.heightSetter = function (a) {\n          f = a;\n        };x[\"text-alignSetter\"] = function (a) {\n          J = a;\n        };x.paddingSetter = function (a) {\n          u(a) && a !== A && (A = x.padding = a, O());\n        };x.paddingLeftSetter = function (a) {\n          u(a) && a !== z && (z = a, O());\n        };x.alignSetter = function (a) {\n          a = { left: 0, center: .5, right: 1 }[a];a !== l && (l = a, n && x.attr({ x: K }));\n        };x.textSetter = function (a) {\n          void 0 !== a && d.textSetter(a);R();O();\n        };x[\"stroke-widthSetter\"] = function (a, g) {\n          a && (v = !0);M = this[\"stroke-width\"] = a;Q(g, a);\n        };x.strokeSetter = x.fillSetter = x.rSetter = function (a, g) {\n          \"fill\" === g && a && (v = !0);Q(g, a);\n        };x.anchorXSetter = function (a, g) {\n          c = a;Q(g, Math.round(a) - P() - K);\n        };x.anchorYSetter = function (a, g) {\n          B = a;Q(g, a - p);\n        };x.xSetter = function (a) {\n          x.x = a;l && (a -= l * ((F || n.width) + 2 * A));K = Math.round(a);x.attr(\"translateX\", K);\n        };x.ySetter = function (a) {\n          p = x.y = Math.round(a);x.attr(\"translateY\", p);\n        };var V = x.css;return t(x, { css: function css(a) {\n            if (a) {\n              var g = {};a = k(a);y(x.textProps, function (e) {\n                void 0 !== a[e] && (g[e] = a[e], delete a[e]);\n              });d.css(g);\n            }return V.call(x, a);\n          }, getBBox: function getBBox() {\n            return { width: n.width + 2 * A, height: n.height + 2 * A, x: n.x - A, y: n.y - A };\n          }, shadow: function shadow(a) {\n            a && (R(), H && H.shadow(a));return x;\n          }, destroy: function destroy() {\n            N(x.element, \"mouseenter\");N(x.element, \"mouseleave\");d && (d = d.destroy());H && (H = H.destroy());D.prototype.destroy.call(x);x = q = R = O = Q = null;\n          } });\n      } };a.Renderer = C;\n  })(L);(function (a) {\n    var D = a.attr,\n        C = a.createElement,\n        G = a.css,\n        I = a.defined,\n        h = a.each,\n        f = a.extend,\n        p = a.isFirefox,\n        v = a.isMS,\n        l = a.isWebKit,\n        u = a.pInt,\n        d = a.SVGRenderer,\n        c = a.win,\n        n = a.wrap;f(a.SVGElement.prototype, { htmlCss: function htmlCss(a) {\n        var c = this.element;if (c = a && \"SPAN\" === c.tagName && a.width) delete a.width, this.textWidth = c, this.updateTransform();a && \"ellipsis\" === a.textOverflow && (a.whiteSpace = \"nowrap\", a.overflow = \"hidden\");this.styles = f(this.styles, a);G(this.element, a);return this;\n      }, htmlGetBBox: function htmlGetBBox() {\n        var a = this.element;\"text\" === a.nodeName && (a.style.position = \"absolute\");return { x: a.offsetLeft, y: a.offsetTop, width: a.offsetWidth,\n          height: a.offsetHeight };\n      }, htmlUpdateTransform: function htmlUpdateTransform() {\n        if (this.added) {\n          var a = this.renderer,\n              c = this.element,\n              m = this.translateX || 0,\n              b = this.translateY || 0,\n              q = this.x || 0,\n              d = this.y || 0,\n              n = this.textAlign || \"left\",\n              e = { left: 0, center: .5, right: 1 }[n],\n              r = this.styles;G(c, { marginLeft: m, marginTop: b });this.shadows && h(this.shadows, function (a) {\n            G(a, { marginLeft: m + 1, marginTop: b + 1 });\n          });this.inverted && h(c.childNodes, function (e) {\n            a.invertChild(e, c);\n          });if (\"SPAN\" === c.tagName) {\n            var x = this.rotation,\n                A = u(this.textWidth),\n                k = r && r.whiteSpace,\n                w = [x, n, c.innerHTML, this.textWidth, this.textAlign].join();w !== this.cTT && (r = a.fontMetrics(c.style.fontSize).b, I(x) && this.setSpanRotation(x, e, r), G(c, { width: \"\", whiteSpace: k || \"nowrap\" }), c.offsetWidth > A && /[ \\-]/.test(c.textContent || c.innerText) && G(c, { width: A + \"px\", display: \"block\", whiteSpace: k || \"normal\" }), this.getSpanCorrection(c.offsetWidth, r, e, x, n));G(c, { left: q + (this.xCorr || 0) + \"px\", top: d + (this.yCorr || 0) + \"px\" });l && (r = c.offsetHeight);this.cTT = w;\n          }\n        } else this.alignOnAdd = !0;\n      }, setSpanRotation: function setSpanRotation(a, d, m) {\n        var b = {},\n            q = v ? \"-ms-transform\" : l ? \"-webkit-transform\" : p ? \"MozTransform\" : c.opera ? \"-o-transform\" : \"\";b[q] = b.transform = \"rotate(\" + a + \"deg)\";b[q + (p ? \"Origin\" : \"-origin\")] = b.transformOrigin = 100 * d + \"% \" + m + \"px\";G(this.element, b);\n      }, getSpanCorrection: function getSpanCorrection(a, c, m) {\n        this.xCorr = -a * m;this.yCorr = -c;\n      } });f(d.prototype, { html: function html(a, c, m) {\n        var b = this.createElement(\"span\"),\n            q = b.element,\n            d = b.renderer,\n            l = d.isSVG,\n            e = function e(a, _e) {\n          h([\"opacity\", \"visibility\"], function (b) {\n            n(a, b + \"Setter\", function (a, b, c, r) {\n              a.call(this, b, c, r);_e[c] = b;\n            });\n          });\n        };b.textSetter = function (a) {\n          a !== q.innerHTML && delete this.bBox;q.innerHTML = this.textStr = a;b.htmlUpdateTransform();\n        };l && e(b, b.element.style);b.xSetter = b.ySetter = b.alignSetter = b.rotationSetter = function (a, e) {\n          \"align\" === e && (e = \"textAlign\");b[e] = a;b.htmlUpdateTransform();\n        };b.attr({ text: a, x: Math.round(c), y: Math.round(m) }).css({ fontFamily: this.style.fontFamily, fontSize: this.style.fontSize, position: \"absolute\" });q.style.whiteSpace = \"nowrap\";b.css = b.htmlCss;l && (b.add = function (a) {\n          var c,\n              r = d.box.parentNode,\n              k = [];if (this.parentGroup = a) {\n            if (c = a.div, !c) {\n              for (; a;) {\n                k.push(a), a = a.parentGroup;\n              }h(k.reverse(), function (a) {\n                var m,\n                    x = D(a.element, \"class\");x && (x = { className: x });c = a.div = a.div || C(\"div\", x, { position: \"absolute\", left: (a.translateX || 0) + \"px\", top: (a.translateY || 0) + \"px\", display: a.display, opacity: a.opacity, pointerEvents: a.styles && a.styles.pointerEvents }, c || r);m = c.style;f(a, { on: function on() {\n                    b.on.apply({ element: k[0].div }, arguments);return a;\n                  }, translateXSetter: function translateXSetter(e, g) {\n                    m.left = e + \"px\";a[g] = e;a.doTransform = !0;\n                  }, translateYSetter: function translateYSetter(e, g) {\n                    m.top = e + \"px\";a[g] = e;a.doTransform = !0;\n                  } });e(a, m);\n              });\n            }\n          } else c = r;c.appendChild(q);b.added = !0;b.alignOnAdd && b.htmlUpdateTransform();return b;\n        });return b;\n      } });\n  })(L);(function (a) {\n    var D,\n        C,\n        G = a.createElement,\n        I = a.css,\n        h = a.defined,\n        f = a.deg2rad,\n        p = a.discardElement,\n        v = a.doc,\n        l = a.each,\n        u = a.erase,\n        d = a.extend;D = a.extendClass;var c = a.isArray,\n        n = a.isNumber,\n        y = a.isObject,\n        t = a.merge;C = a.noop;var m = a.pick,\n        b = a.pInt,\n        q = a.SVGElement,\n        z = a.SVGRenderer,\n        F = a.win;a.svg || (C = { docMode8: v && 8 === v.documentMode, init: function init(a, b) {\n        var e = [\"\\x3c\", b, ' filled\\x3d\"f\" stroked\\x3d\"f\"'],\n            c = [\"position: \", \"absolute\", \";\"],\n            k = \"div\" === b;(\"shape\" === b || k) && c.push(\"left:0;top:0;width:1px;height:1px;\");c.push(\"visibility: \", k ? \"hidden\" : \"visible\");e.push(' style\\x3d\"', c.join(\"\"), '\"/\\x3e');b && (e = k || \"span\" === b || \"img\" === b ? e.join(\"\") : a.prepVML(e), this.element = G(e));this.renderer = a;\n      }, add: function add(a) {\n        var e = this.renderer,\n            b = this.element,\n            c = e.box,\n            k = a && a.inverted,\n            c = a ? a.element || a : c;a && (this.parentGroup = a);k && e.invertChild(b, c);c.appendChild(b);this.added = !0;this.alignOnAdd && !this.deferUpdateTransform && this.updateTransform();\n        if (this.onAdd) this.onAdd();this.className && this.attr(\"class\", this.className);return this;\n      }, updateTransform: q.prototype.htmlUpdateTransform, setSpanRotation: function setSpanRotation() {\n        var a = this.rotation,\n            b = Math.cos(a * f),\n            c = Math.sin(a * f);I(this.element, { filter: a ? [\"progid:DXImageTransform.Microsoft.Matrix(M11\\x3d\", b, \", M12\\x3d\", -c, \", M21\\x3d\", c, \", M22\\x3d\", b, \", sizingMethod\\x3d'auto expand')\"].join(\"\") : \"none\" });\n      }, getSpanCorrection: function getSpanCorrection(a, b, c, q, k) {\n        var e = q ? Math.cos(q * f) : 1,\n            r = q ? Math.sin(q * f) : 0,\n            x = m(this.elemHeight, this.element.offsetHeight),\n            d;this.xCorr = 0 > e && -a;this.yCorr = 0 > r && -x;d = 0 > e * r;this.xCorr += r * b * (d ? 1 - c : c);this.yCorr -= e * b * (q ? d ? c : 1 - c : 1);k && \"left\" !== k && (this.xCorr -= a * c * (0 > e ? -1 : 1), q && (this.yCorr -= x * c * (0 > r ? -1 : 1)), I(this.element, { textAlign: k }));\n      }, pathToVML: function pathToVML(a) {\n        for (var e = a.length, b = []; e--;) {\n          n(a[e]) ? b[e] = Math.round(10 * a[e]) - 5 : \"Z\" === a[e] ? b[e] = \"x\" : (b[e] = a[e], !a.isArc || \"wa\" !== a[e] && \"at\" !== a[e] || (b[e + 5] === b[e + 7] && (b[e + 7] += a[e + 7] > a[e + 5] ? 1 : -1), b[e + 6] === b[e + 8] && (b[e + 8] += a[e + 8] > a[e + 6] ? 1 : -1)));\n        }return b.join(\" \") || \"x\";\n      }, clip: function clip(a) {\n        var e = this,\n            b;a ? (b = a.members, u(b, e), b.push(e), e.destroyClip = function () {\n          u(b, e);\n        }, a = a.getCSS(e)) : (e.destroyClip && e.destroyClip(), a = { clip: e.docMode8 ? \"inherit\" : \"rect(auto)\" });return e.css(a);\n      }, css: q.prototype.htmlCss, safeRemoveChild: function safeRemoveChild(a) {\n        a.parentNode && p(a);\n      }, destroy: function destroy() {\n        this.destroyClip && this.destroyClip();return q.prototype.destroy.apply(this);\n      }, on: function on(a, b) {\n        this.element[\"on\" + a] = function () {\n          var a = F.event;a.target = a.srcElement;b(a);\n        };return this;\n      }, cutOffPath: function cutOffPath(a, c) {\n        var e;a = a.split(/[ ,]/);\n        e = a.length;if (9 === e || 11 === e) a[e - 4] = a[e - 2] = b(a[e - 2]) - 10 * c;return a.join(\" \");\n      }, shadow: function shadow(a, c, q) {\n        var e = [],\n            k,\n            r = this.element,\n            d = this.renderer,\n            x,\n            n = r.style,\n            g,\n            B = r.path,\n            l,\n            t,\n            z,\n            f;B && \"string\" !== typeof B.value && (B = \"x\");t = B;if (a) {\n          z = m(a.width, 3);f = (a.opacity || .15) / z;for (k = 1; 3 >= k; k++) {\n            l = 2 * z + 1 - 2 * k, q && (t = this.cutOffPath(B.value, l + .5)), g = ['\\x3cshape isShadow\\x3d\"true\" strokeweight\\x3d\"', l, '\" filled\\x3d\"false\" path\\x3d\"', t, '\" coordsize\\x3d\"10 10\" style\\x3d\"', r.style.cssText, '\" /\\x3e'], x = G(d.prepVML(g), null, { left: b(n.left) + m(a.offsetX, 1), top: b(n.top) + m(a.offsetY, 1) }), q && (x.cutOff = l + 1), g = ['\\x3cstroke color\\x3d\"', a.color || \"#000000\", '\" opacity\\x3d\"', f * k, '\"/\\x3e'], G(d.prepVML(g), null, null, x), c ? c.element.appendChild(x) : r.parentNode.insertBefore(x, r), e.push(x);\n          }this.shadows = e;\n        }return this;\n      }, updateShadows: C, setAttr: function setAttr(a, b) {\n        this.docMode8 ? this.element[a] = b : this.element.setAttribute(a, b);\n      }, classSetter: function classSetter(a) {\n        (this.added ? this.element : this).className = a;\n      }, dashstyleSetter: function dashstyleSetter(a, b, c) {\n        (c.getElementsByTagName(\"stroke\")[0] || G(this.renderer.prepVML([\"\\x3cstroke/\\x3e\"]), null, null, c))[b] = a || \"solid\";this[b] = a;\n      }, dSetter: function dSetter(a, b, c) {\n        var e = this.shadows;a = a || [];this.d = a.join && a.join(\" \");c.path = a = this.pathToVML(a);if (e) for (c = e.length; c--;) {\n          e[c].path = e[c].cutOff ? this.cutOffPath(a, e[c].cutOff) : a;\n        }this.setAttr(b, a);\n      }, fillSetter: function fillSetter(a, b, c) {\n        var e = c.nodeName;\"SPAN\" === e ? c.style.color = a : \"IMG\" !== e && (c.filled = \"none\" !== a, this.setAttr(\"fillcolor\", this.renderer.color(a, c, b, this)));\n      }, \"fill-opacitySetter\": function fillOpacitySetter(a, b, c) {\n        G(this.renderer.prepVML([\"\\x3c\", b.split(\"-\")[0], ' opacity\\x3d\"', a, '\"/\\x3e']), null, null, c);\n      }, opacitySetter: C, rotationSetter: function rotationSetter(a, b, c) {\n        c = c.style;this[b] = c[b] = a;c.left = -Math.round(Math.sin(a * f) + 1) + \"px\";c.top = Math.round(Math.cos(a * f)) + \"px\";\n      }, strokeSetter: function strokeSetter(a, b, c) {\n        this.setAttr(\"strokecolor\", this.renderer.color(a, c, b, this));\n      }, \"stroke-widthSetter\": function strokeWidthSetter(a, b, c) {\n        c.stroked = !!a;this[b] = a;n(a) && (a += \"px\");this.setAttr(\"strokeweight\", a);\n      }, titleSetter: function titleSetter(a, b) {\n        this.setAttr(b, a);\n      }, visibilitySetter: function visibilitySetter(a, b, c) {\n        \"inherit\" === a && (a = \"visible\");this.shadows && l(this.shadows, function (c) {\n          c.style[b] = a;\n        });\"DIV\" === c.nodeName && (a = \"hidden\" === a ? \"-999em\" : 0, this.docMode8 || (c.style[b] = a ? \"visible\" : \"hidden\"), b = \"top\");c.style[b] = a;\n      }, xSetter: function xSetter(a, b, c) {\n        this[b] = a;\"x\" === b ? b = \"left\" : \"y\" === b && (b = \"top\");this.updateClipping ? (this[b] = a, this.updateClipping()) : c.style[b] = a;\n      }, zIndexSetter: function zIndexSetter(a, b, c) {\n        c.style[b] = a;\n      } }, C[\"stroke-opacitySetter\"] = C[\"fill-opacitySetter\"], a.VMLElement = C = D(q, C), C.prototype.ySetter = C.prototype.widthSetter = C.prototype.heightSetter = C.prototype.xSetter, C = { Element: C, isIE8: -1 < F.navigator.userAgent.indexOf(\"MSIE 8.0\"), init: function init(a, b, c) {\n        var e, k;this.alignedObjects = [];e = this.createElement(\"div\").css({ position: \"relative\" });k = e.element;a.appendChild(e.element);this.isVML = !0;this.box = k;this.boxWrapper = e;this.gradients = {};this.cache = {};this.cacheKeys = [];this.imgCount = 0;this.setSize(b, c, !1);if (!v.namespaces.hcv) {\n          v.namespaces.add(\"hcv\", \"urn:schemas-microsoft-com:vml\");try {\n            v.createStyleSheet().cssText = \"hcv\\\\:fill, hcv\\\\:path, hcv\\\\:shape, hcv\\\\:stroke{ behavior:url(#default#VML); display: inline-block; } \";\n          } catch (w) {\n            v.styleSheets[0].cssText += \"hcv\\\\:fill, hcv\\\\:path, hcv\\\\:shape, hcv\\\\:stroke{ behavior:url(#default#VML); display: inline-block; } \";\n          }\n        }\n      }, isHidden: function isHidden() {\n        return !this.box.offsetWidth;\n      }, clipRect: function clipRect(a, b, c, m) {\n        var e = this.createElement(),\n            r = y(a);return d(e, { members: [], count: 0, left: (r ? a.x : a) + 1, top: (r ? a.y : b) + 1, width: (r ? a.width : c) - 1, height: (r ? a.height : m) - 1, getCSS: function getCSS(a) {\n            var b = a.element,\n                c = b.nodeName,\n                g = a.inverted,\n                e = this.top - (\"shape\" === c ? b.offsetTop : 0),\n                k = this.left,\n                b = k + this.width,\n                m = e + this.height,\n                e = { clip: \"rect(\" + Math.round(g ? k : e) + \"px,\" + Math.round(g ? m : b) + \"px,\" + Math.round(g ? b : m) + \"px,\" + Math.round(g ? e : k) + \"px)\" };!g && a.docMode8 && \"DIV\" === c && d(e, { width: b + \"px\", height: m + \"px\" });return e;\n          }, updateClipping: function updateClipping() {\n            l(e.members, function (a) {\n              a.element && a.css(e.getCSS(a));\n            });\n          } });\n      }, color: function color(b, c, m, q) {\n        var e = this,\n            r,\n            d = /^rgba/,\n            n,\n            x,\n            g = \"none\";b && b.linearGradient ? x = \"gradient\" : b && b.radialGradient && (x = \"pattern\");if (x) {\n          var B,\n              t,\n              z = b.linearGradient || b.radialGradient,\n              f,\n              F,\n              H,\n              A,\n              u,\n              p = \"\";b = b.stops;var h,\n              y = [],\n              v = function v() {\n            n = ['\\x3cfill colors\\x3d\"' + y.join(\",\") + '\" opacity\\x3d\"', H, '\" o:opacity2\\x3d\"', F, '\" type\\x3d\"', x, '\" ', p, 'focus\\x3d\"100%\" method\\x3d\"any\" /\\x3e'];G(e.prepVML(n), null, null, c);\n          };f = b[0];h = b[b.length - 1];0 < f[0] && b.unshift([0, f[1]]);1 > h[0] && b.push([1, h[1]]);l(b, function (g, b) {\n            d.test(g[1]) ? (r = a.color(g[1]), B = r.get(\"rgb\"), t = r.get(\"a\")) : (B = g[1], t = 1);y.push(100 * g[0] + \"% \" + B);b ? (H = t, A = B) : (F = t, u = B);\n          });if (\"fill\" === m) {\n            if (\"gradient\" === x) m = z.x1 || z[0] || 0, b = z.y1 || z[1] || 0, f = z.x2 || z[2] || 0, z = z.y2 || z[3] || 0, p = 'angle\\x3d\"' + (90 - 180 * Math.atan((z - b) / (f - m)) / Math.PI) + '\"', v();else {\n              var g = z.r,\n                  C = 2 * g,\n                  D = 2 * g,\n                  I = z.cx,\n                  U = z.cy,\n                  L = c.radialReference,\n                  T,\n                  g = function g() {\n                L && (T = q.getBBox(), I += (L[0] - T.x) / T.width - .5, U += (L[1] - T.y) / T.height - .5, C *= L[2] / T.width, D *= L[2] / T.height);p = 'src\\x3d\"' + a.getOptions().global.VMLRadialGradientURL + '\" size\\x3d\"' + C + \",\" + D + '\" origin\\x3d\"0.5,0.5\" position\\x3d\"' + I + \",\" + U + '\" color2\\x3d\"' + u + '\" ';v();\n              };q.added ? g() : q.onAdd = g;g = A;\n            }\n          } else g = B;\n        } else d.test(b) && \"IMG\" !== c.tagName ? (r = a.color(b), q[m + \"-opacitySetter\"](r.get(\"a\"), m, c), g = r.get(\"rgb\")) : (g = c.getElementsByTagName(m), g.length && (g[0].opacity = 1, g[0].type = \"solid\"), g = b);return g;\n      }, prepVML: function prepVML(a) {\n        var b = this.isIE8;a = a.join(\"\");b ? (a = a.replace(\"/\\x3e\", ' xmlns\\x3d\"urn:schemas-microsoft-com:vml\" /\\x3e'), a = -1 === a.indexOf('style\\x3d\"') ? a.replace(\"/\\x3e\", ' style\\x3d\"display:inline-block;behavior:url(#default#VML);\" /\\x3e') : a.replace('style\\x3d\"', 'style\\x3d\"display:inline-block;behavior:url(#default#VML);')) : a = a.replace(\"\\x3c\", \"\\x3chcv:\");return a;\n      }, text: z.prototype.html, path: function path(a) {\n        var b = { coordsize: \"10 10\" };c(a) ? b.d = a : y(a) && d(b, a);return this.createElement(\"shape\").attr(b);\n      }, circle: function circle(a, b, c) {\n        var e = this.symbol(\"circle\");y(a) && (c = a.r, b = a.y, a = a.x);e.isCircle = !0;e.r = c;return e.attr({ x: a, y: b });\n      }, g: function g(a) {\n        var b;a && (b = { className: \"highcharts-\" + a, \"class\": \"highcharts-\" + a });return this.createElement(\"div\").attr(b);\n      }, image: function image(a, b, c, m, k) {\n        var e = this.createElement(\"img\").attr({ src: a });1 < arguments.length && e.attr({ x: b, y: c, width: m, height: k });return e;\n      }, createElement: function createElement(a) {\n        return \"rect\" === a ? this.symbol(a) : z.prototype.createElement.call(this, a);\n      }, invertChild: function invertChild(a, c) {\n        var e = this;c = c.style;var m = \"IMG\" === a.tagName && a.style;I(a, { flip: \"x\", left: b(c.width) - (m ? b(m.top) : 1), top: b(c.height) - (m ? b(m.left) : 1), rotation: -90 });l(a.childNodes, function (b) {\n          e.invertChild(b, a);\n        });\n      }, symbols: { arc: function arc(a, b, c, m, k) {\n          var e = k.start,\n              q = k.end,\n              d = k.r || c || m;c = k.innerR;m = Math.cos(e);var r = Math.sin(e),\n              g = Math.cos(q),\n              B = Math.sin(q);if (0 === q - e) return [\"x\"];e = [\"wa\", a - d, b - d, a + d, b + d, a + d * m, b + d * r, a + d * g, b + d * B];k.open && !c && e.push(\"e\", \"M\", a, b);e.push(\"at\", a - c, b - c, a + c, b + c, a + c * g, b + c * B, a + c * m, b + c * r, \"x\", \"e\");e.isArc = !0;return e;\n        }, circle: function circle(a, b, c, m, k) {\n          k && h(k.r) && (c = m = 2 * k.r);k && k.isCircle && (a -= c / 2, b -= m / 2);return [\"wa\", a, b, a + c, b + m, a + c, b + m / 2, a + c, b + m / 2, \"e\"];\n        }, rect: function rect(a, b, c, m, k) {\n          return z.prototype.symbols[h(k) && k.r ? \"callout\" : \"square\"].call(0, a, b, c, m, k);\n        } } }, a.VMLRenderer = D = function D() {\n      this.init.apply(this, arguments);\n    }, D.prototype = t(z.prototype, C), a.Renderer = D);z.prototype.measureSpanWidth = function (a, b) {\n      var c = v.createElement(\"span\");a = v.createTextNode(a);c.appendChild(a);I(c, b);this.box.appendChild(c);b = c.offsetWidth;p(c);return b;\n    };\n  })(L);(function (a) {\n    function D() {\n      var h = a.defaultOptions.global,\n          l,\n          u = h.useUTC,\n          d = u ? \"getUTC\" : \"get\",\n          c = u ? \"setUTC\" : \"set\";a.Date = l = h.Date || p.Date;l.hcTimezoneOffset = u && h.timezoneOffset;l.hcGetTimezoneOffset = u && h.getTimezoneOffset;l.hcMakeTime = function (a, c, d, m, b, q) {\n        var n;u ? (n = l.UTC.apply(0, arguments), n += I(n)) : n = new l(a, c, f(d, 1), f(m, 0), f(b, 0), f(q, 0)).getTime();return n;\n      };G(\"Minutes Hours Day Date Month FullYear\".split(\" \"), function (a) {\n        l[\"hcGet\" + a] = d + a;\n      });G(\"Milliseconds Seconds Minutes Hours Date Month FullYear\".split(\" \"), function (a) {\n        l[\"hcSet\" + a] = c + a;\n      });\n    }var C = a.color,\n        G = a.each,\n        I = a.getTZOffset,\n        h = a.merge,\n        f = a.pick,\n        p = a.win;a.defaultOptions = { colors: \"#7cb5ec #434348 #90ed7d #f7a35c #8085e9 #f15c80 #e4d354 #2b908f #f45b5b #91e8e1\".split(\" \"), symbols: [\"circle\", \"diamond\", \"square\", \"triangle\", \"triangle-down\"], lang: { loading: \"Loading...\", months: \"January February March April May June July August September October November December\".split(\" \"), shortMonths: \"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \"),\n        weekdays: \"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"), decimalPoint: \".\", numericSymbols: \"kMGTPE\".split(\"\"), resetZoom: \"Reset zoom\", resetZoomTitle: \"Reset zoom level 1:1\", thousandsSep: \" \" }, global: { useUTC: !0, VMLRadialGradientURL: \"http://code.highcharts.com/5.0.6/gfx/vml-radial-gradient.png\" }, chart: { borderRadius: 0, defaultSeriesType: \"line\", ignoreHiddenSeries: !0, spacing: [10, 10, 15, 10], resetZoomButton: { theme: { zIndex: 20 }, position: { align: \"right\", x: -10, y: 10 } }, width: null, height: null, borderColor: \"#335cad\",\n        backgroundColor: \"#ffffff\", plotBorderColor: \"#cccccc\" }, title: { text: \"Chart title\", align: \"center\", margin: 15, widthAdjust: -44 }, subtitle: { text: \"\", align: \"center\", widthAdjust: -44 }, plotOptions: {}, labels: { style: { position: \"absolute\", color: \"#333333\" } }, legend: { enabled: !0, align: \"center\", layout: \"horizontal\", labelFormatter: function labelFormatter() {\n          return this.name;\n        }, borderColor: \"#999999\", borderRadius: 0, navigation: { activeColor: \"#003399\", inactiveColor: \"#cccccc\" }, itemStyle: { color: \"#333333\", fontSize: \"12px\", fontWeight: \"bold\" }, itemHoverStyle: { color: \"#000000\" },\n        itemHiddenStyle: { color: \"#cccccc\" }, shadow: !1, itemCheckboxStyle: { position: \"absolute\", width: \"13px\", height: \"13px\" }, squareSymbol: !0, symbolPadding: 5, verticalAlign: \"bottom\", x: 0, y: 0, title: { style: { fontWeight: \"bold\" } } }, loading: { labelStyle: { fontWeight: \"bold\", position: \"relative\", top: \"45%\" }, style: { position: \"absolute\", backgroundColor: \"#ffffff\", opacity: .5, textAlign: \"center\" } }, tooltip: { enabled: !0, animation: a.svg, borderRadius: 3, dateTimeLabelFormats: { millisecond: \"%A, %b %e, %H:%M:%S.%L\", second: \"%A, %b %e, %H:%M:%S\",\n          minute: \"%A, %b %e, %H:%M\", hour: \"%A, %b %e, %H:%M\", day: \"%A, %b %e, %Y\", week: \"Week from %A, %b %e, %Y\", month: \"%B %Y\", year: \"%Y\" }, footerFormat: \"\", padding: 8, snap: a.isTouchDevice ? 25 : 10, backgroundColor: C(\"#f7f7f7\").setOpacity(.85).get(), borderWidth: 1, headerFormat: '\\x3cspan style\\x3d\"font-size: 10px\"\\x3e{point.key}\\x3c/span\\x3e\\x3cbr/\\x3e', pointFormat: \"<span style=\\\"color:{point.color}\\\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>\", shadow: !0, style: { color: \"#333333\", cursor: \"default\",\n          fontSize: \"12px\", pointerEvents: \"none\", whiteSpace: \"nowrap\" } }, credits: { enabled: !0, href: \"http://www.highcharts.com\", position: { align: \"right\", x: -10, verticalAlign: \"bottom\", y: -5 }, style: { cursor: \"pointer\", color: \"#999999\", fontSize: \"9px\" }, text: \"Highcharts.com\" } };a.setOptions = function (f) {\n      a.defaultOptions = h(!0, a.defaultOptions, f);D();return a.defaultOptions;\n    };a.getOptions = function () {\n      return a.defaultOptions;\n    };a.defaultPlotOptions = a.defaultOptions.plotOptions;D();\n  })(L);(function (a) {\n    var D = a.arrayMax,\n        C = a.arrayMin,\n        G = a.defined,\n        I = a.destroyObjectProperties,\n        h = a.each,\n        f = a.erase,\n        p = a.merge,\n        v = a.pick;a.PlotLineOrBand = function (a, f) {\n      this.axis = a;f && (this.options = f, this.id = f.id);\n    };a.PlotLineOrBand.prototype = { render: function render() {\n        var a = this,\n            f = a.axis,\n            d = f.horiz,\n            c = a.options,\n            n = c.label,\n            h = a.label,\n            t = c.to,\n            m = c.from,\n            b = c.value,\n            q = G(m) && G(t),\n            z = G(b),\n            F = a.svgElem,\n            e = !F,\n            r = [],\n            x,\n            A = c.color,\n            k = v(c.zIndex, 0),\n            w = c.events,\n            r = { \"class\": \"highcharts-plot-\" + (q ? \"band \" : \"line \") + (c.className || \"\") },\n            K = {},\n            J = f.chart.renderer,\n            N = q ? \"bands\" : \"lines\",\n            g = f.log2lin;f.isLog && (m = g(m), t = g(t), b = g(b));z ? (r = { stroke: A, \"stroke-width\": c.width }, c.dashStyle && (r.dashstyle = c.dashStyle)) : q && (A && (r.fill = A), c.borderWidth && (r.stroke = c.borderColor, r[\"stroke-width\"] = c.borderWidth));K.zIndex = k;N += \"-\" + k;(A = f[N]) || (f[N] = A = J.g(\"plot-\" + N).attr(K).add());e && (a.svgElem = F = J.path().attr(r).add(A));if (z) r = f.getPlotLinePath(b, F.strokeWidth());else if (q) r = f.getPlotBandPath(m, t, c);else return;if (e && r && r.length) {\n          if (F.attr({ d: r }), w) for (x in c = function c(g) {\n            F.on(g, function (b) {\n              w[g].apply(a, [b]);\n            });\n          }, w) {\n            c(x);\n          }\n        } else F && (r ? (F.show(), F.animate({ d: r })) : (F.hide(), h && (a.label = h = h.destroy())));n && G(n.text) && r && r.length && 0 < f.width && 0 < f.height && !r.flat ? (n = p({ align: d && q && \"center\", x: d ? !q && 4 : 10, verticalAlign: !d && q && \"middle\", y: d ? q ? 16 : 10 : q ? 6 : -4, rotation: d && !q && 90 }, n), this.renderLabel(n, r, q, k)) : h && h.hide();return a;\n      }, renderLabel: function renderLabel(a, f, d, c) {\n        var n = this.label,\n            l = this.axis.chart.renderer;n || (n = { align: a.textAlign || a.align, rotation: a.rotation, \"class\": \"highcharts-plot-\" + (d ? \"band\" : \"line\") + \"-label \" + (a.className || \"\") }, n.zIndex = c, this.label = n = l.text(a.text, 0, 0, a.useHTML).attr(n).add(), n.css(a.style));c = [f[1], f[4], d ? f[6] : f[1]];f = [f[2], f[5], d ? f[7] : f[2]];d = C(c);l = C(f);n.align(a, !1, { x: d, y: l, width: D(c) - d, height: D(f) - l });n.show();\n      }, destroy: function destroy() {\n        f(this.axis.plotLinesAndBands, this);delete this.axis;I(this);\n      } };a.AxisPlotLineOrBandExtension = { getPlotBandPath: function getPlotBandPath(a, f) {\n        f = this.getPlotLinePath(f, null, null, !0);(a = this.getPlotLinePath(a, null, null, !0)) && f ? (a.flat = a.toString() === f.toString(), a.push(f[4], f[5], f[1], f[2], \"z\")) : a = null;\n        return a;\n      }, addPlotBand: function addPlotBand(a) {\n        return this.addPlotBandOrLine(a, \"plotBands\");\n      }, addPlotLine: function addPlotLine(a) {\n        return this.addPlotBandOrLine(a, \"plotLines\");\n      }, addPlotBandOrLine: function addPlotBandOrLine(f, h) {\n        var d = new a.PlotLineOrBand(this, f).render(),\n            c = this.userOptions;d && (h && (c[h] = c[h] || [], c[h].push(f)), this.plotLinesAndBands.push(d));return d;\n      }, removePlotBandOrLine: function removePlotBandOrLine(a) {\n        for (var l = this.plotLinesAndBands, d = this.options, c = this.userOptions, n = l.length; n--;) {\n          l[n].id === a && l[n].destroy();\n        }h([d.plotLines || [], c.plotLines || [], d.plotBands || [], c.plotBands || []], function (c) {\n          for (n = c.length; n--;) {\n            c[n].id === a && f(c, c[n]);\n          }\n        });\n      } };\n  })(L);(function (a) {\n    var D = a.correctFloat,\n        C = a.defined,\n        G = a.destroyObjectProperties,\n        I = a.isNumber,\n        h = a.merge,\n        f = a.pick,\n        p = a.deg2rad;a.Tick = function (a, f, h, d) {\n      this.axis = a;this.pos = f;this.type = h || \"\";this.isNew = !0;h || d || this.addLabel();\n    };a.Tick.prototype = { addLabel: function addLabel() {\n        var a = this.axis,\n            l = a.options,\n            p = a.chart,\n            d = a.categories,\n            c = a.names,\n            n = this.pos,\n            y = l.labels,\n            t = a.tickPositions,\n            m = n === t[0],\n            b = n === t[t.length - 1],\n            c = d ? f(d[n], c[n], n) : n,\n            d = this.label,\n            t = t.info,\n            q;a.isDatetimeAxis && t && (q = l.dateTimeLabelFormats[t.higherRanks[n] || t.unitName]);this.isFirst = m;this.isLast = b;l = a.labelFormatter.call({ axis: a, chart: p, isFirst: m, isLast: b, dateTimeLabelFormat: q, value: a.isLog ? D(a.lin2log(c)) : c });C(d) ? d && d.attr({ text: l }) : (this.labelLength = (this.label = d = C(l) && y.enabled ? p.renderer.text(l, 0, 0, y.useHTML).css(h(y.style)).add(a.labelGroup) : null) && d.getBBox().width, this.rotation = 0);\n      }, getLabelSize: function getLabelSize() {\n        return this.label ? this.label.getBBox()[this.axis.horiz ? \"height\" : \"width\"] : 0;\n      }, handleOverflow: function handleOverflow(a) {\n        var l = this.axis,\n            h = a.x,\n            d = l.chart.chartWidth,\n            c = l.chart.spacing,\n            n = f(l.labelLeft, Math.min(l.pos, c[3])),\n            c = f(l.labelRight, Math.max(l.pos + l.len, d - c[1])),\n            y = this.label,\n            t = this.rotation,\n            m = { left: 0, center: .5, right: 1 }[l.labelAlign],\n            b = y.getBBox().width,\n            q = l.getSlotWidth(),\n            z = q,\n            F = 1,\n            e,\n            r = {};if (t) 0 > t && h - m * b < n ? e = Math.round(h / Math.cos(t * p) - n) : 0 < t && h + m * b > c && (e = Math.round((d - h) / Math.cos(t * p)));else if (d = h + (1 - m) * b, h - m * b < n ? z = a.x + z * (1 - m) - n : d > c && (z = c - a.x + z * m, F = -1), z = Math.min(q, z), z < q && \"center\" === l.labelAlign && (a.x += F * (q - z - m * (q - Math.min(b, z)))), b > z || l.autoRotation && (y.styles || {}).width) e = z;e && (r.width = e, (l.options.labels.style || {}).textOverflow || (r.textOverflow = \"ellipsis\"), y.css(r));\n      }, getPosition: function getPosition(a, f, h, d) {\n        var c = this.axis,\n            n = c.chart,\n            l = d && n.oldChartHeight || n.chartHeight;return { x: a ? c.translate(f + h, null, null, d) + c.transB : c.left + c.offset + (c.opposite ? (d && n.oldChartWidth || n.chartWidth) - c.right - c.left : 0), y: a ? l - c.bottom + c.offset - (c.opposite ? c.height : 0) : l - c.translate(f + h, null, null, d) - c.transB };\n      }, getLabelPosition: function getLabelPosition(a, f, h, d, c, n, y, t) {\n        var m = this.axis,\n            b = m.transA,\n            q = m.reversed,\n            z = m.staggerLines,\n            l = m.tickRotCorr || { x: 0, y: 0 },\n            e = c.y;C(e) || (e = 0 === m.side ? h.rotation ? -8 : -h.getBBox().height : 2 === m.side ? l.y + 8 : Math.cos(h.rotation * p) * (l.y - h.getBBox(!1, 0).height / 2));a = a + c.x + l.x - (n && d ? n * b * (q ? -1 : 1) : 0);f = f + e - (n && !d ? n * b * (q ? 1 : -1) : 0);z && (h = y / (t || 1) % z, m.opposite && (h = z - h - 1), f += m.labelOffset / z * h);return { x: a, y: Math.round(f) };\n      }, getMarkPath: function getMarkPath(a, f, h, d, c, n) {\n        return n.crispLine([\"M\", a, f, \"L\", a + (c ? 0 : -h), f + (c ? h : 0)], d);\n      }, render: function render(a, l, h) {\n        var d = this.axis,\n            c = d.options,\n            n = d.chart.renderer,\n            p = d.horiz,\n            t = this.type,\n            m = this.label,\n            b = this.pos,\n            q = c.labels,\n            z = this.gridLine,\n            F = t ? t + \"Tick\" : \"tick\",\n            e = d.tickSize(F),\n            r = this.mark,\n            x = !r,\n            A = q.step,\n            k = {},\n            w = !0,\n            K = d.tickmarkOffset,\n            J = this.getPosition(p, b, K, l),\n            u = J.x,\n            J = J.y,\n            g = p && u === d.pos + d.len || !p && J === d.pos ? -1 : 1,\n            B = t ? t + \"Grid\" : \"grid\",\n            S = c[B + \"LineWidth\"],\n            M = c[B + \"LineColor\"],\n            v = c[B + \"LineDashStyle\"],\n            B = f(c[F + \"Width\"], !t && d.isXAxis ? 1 : 0),\n            F = c[F + \"Color\"];h = f(h, 1);this.isActive = !0;z || (k.stroke = M, k[\"stroke-width\"] = S, v && (k.dashstyle = v), t || (k.zIndex = 1), l && (k.opacity = 0), this.gridLine = z = n.path().attr(k).addClass(\"highcharts-\" + (t ? t + \"-\" : \"\") + \"grid-line\").add(d.gridGroup));if (!l && z && (b = d.getPlotLinePath(b + K, z.strokeWidth() * g, l, !0))) z[this.isNew ? \"attr\" : \"animate\"]({ d: b, opacity: h });e && (d.opposite && (e[0] = -e[0]), x && (this.mark = r = n.path().addClass(\"highcharts-\" + (t ? t + \"-\" : \"\") + \"tick\").add(d.axisGroup), r.attr({ stroke: F, \"stroke-width\": B })), r[x ? \"attr\" : \"animate\"]({ d: this.getMarkPath(u, J, e[0], r.strokeWidth() * g, p, n), opacity: h }));m && I(u) && (m.xy = J = this.getLabelPosition(u, J, m, p, q, K, a, A), this.isFirst && !this.isLast && !f(c.showFirstLabel, 1) || this.isLast && !this.isFirst && !f(c.showLastLabel, 1) ? w = !1 : !p || d.isRadial || q.step || q.rotation || l || 0 === h || this.handleOverflow(J), A && a % A && (w = !1), w && I(J.y) ? (J.opacity = h, m[this.isNew ? \"attr\" : \"animate\"](J)) : m.attr(\"y\", -9999), this.isNew = !1);\n      }, destroy: function destroy() {\n        G(this, this.axis);\n      } };\n  })(L);(function (a) {\n    var D = a.addEvent,\n        C = a.animObject,\n        G = a.arrayMax,\n        I = a.arrayMin,\n        h = a.AxisPlotLineOrBandExtension,\n        f = a.color,\n        p = a.correctFloat,\n        v = a.defaultOptions,\n        l = a.defined,\n        u = a.deg2rad,\n        d = a.destroyObjectProperties,\n        c = a.each,\n        n = a.extend,\n        y = a.fireEvent,\n        t = a.format,\n        m = a.getMagnitude,\n        b = a.grep,\n        q = a.inArray,\n        z = a.isArray,\n        F = a.isNumber,\n        e = a.isString,\n        r = a.merge,\n        x = a.normalizeTickInterval,\n        A = a.pick,\n        k = a.PlotLineOrBand,\n        w = a.removeEvent,\n        K = a.splat,\n        J = a.syncTimeout,\n        N = a.Tick;a.Axis = function () {\n      this.init.apply(this, arguments);\n    };a.Axis.prototype = { defaultOptions: { dateTimeLabelFormats: { millisecond: \"%H:%M:%S.%L\", second: \"%H:%M:%S\", minute: \"%H:%M\", hour: \"%H:%M\",\n          day: \"%e. %b\", week: \"%e. %b\", month: \"%b '%y\", year: \"%Y\" }, endOnTick: !1, labels: { enabled: !0, style: { color: \"#666666\", cursor: \"default\", fontSize: \"11px\" }, x: 0 }, minPadding: .01, maxPadding: .01, minorTickLength: 2, minorTickPosition: \"outside\", startOfWeek: 1, startOnTick: !1, tickLength: 10, tickmarkPlacement: \"between\", tickPixelInterval: 100, tickPosition: \"outside\", title: { align: \"middle\", style: { color: \"#666666\" } }, type: \"linear\", minorGridLineColor: \"#f2f2f2\", minorGridLineWidth: 1, minorTickColor: \"#999999\", lineColor: \"#ccd6eb\", lineWidth: 1,\n        gridLineColor: \"#e6e6e6\", tickColor: \"#ccd6eb\" }, defaultYAxisOptions: { endOnTick: !0, tickPixelInterval: 72, showLastLabel: !0, labels: { x: -8 }, maxPadding: .05, minPadding: .05, startOnTick: !0, title: { rotation: 270, text: \"Values\" }, stackLabels: { enabled: !1, formatter: function formatter() {\n            return a.numberFormat(this.total, -1);\n          }, style: { fontSize: \"11px\", fontWeight: \"bold\", color: \"#000000\", textOutline: \"1px contrast\" } }, gridLineWidth: 1, lineWidth: 0 }, defaultLeftAxisOptions: { labels: { x: -15 }, title: { rotation: 270 } }, defaultRightAxisOptions: { labels: { x: 15 },\n        title: { rotation: 90 } }, defaultBottomAxisOptions: { labels: { autoRotation: [-45], x: 0 }, title: { rotation: 0 } }, defaultTopAxisOptions: { labels: { autoRotation: [-45], x: 0 }, title: { rotation: 0 } }, init: function init(a, b) {\n        var g = b.isX;this.chart = a;this.horiz = a.inverted ? !g : g;this.isXAxis = g;this.coll = this.coll || (g ? \"xAxis\" : \"yAxis\");this.opposite = b.opposite;this.side = b.side || (this.horiz ? this.opposite ? 0 : 2 : this.opposite ? 1 : 3);this.setOptions(b);var c = this.options,\n            e = c.type;this.labelFormatter = c.labels.formatter || this.defaultLabelFormatter;\n        this.userOptions = b;this.minPixelPadding = 0;this.reversed = c.reversed;this.visible = !1 !== c.visible;this.zoomEnabled = !1 !== c.zoomEnabled;this.hasNames = \"category\" === e || !0 === c.categories;this.categories = c.categories || this.hasNames;this.names = this.names || [];this.isLog = \"logarithmic\" === e;this.isDatetimeAxis = \"datetime\" === e;this.isLinked = l(c.linkedTo);this.ticks = {};this.labelEdge = [];this.minorTicks = {};this.plotLinesAndBands = [];this.alternateBands = {};this.len = 0;this.minRange = this.userMinRange = c.minRange || c.maxZoom;\n        this.range = c.range;this.offset = c.offset || 0;this.stacks = {};this.oldStacks = {};this.stacksTouched = 0;this.min = this.max = null;this.crosshair = A(c.crosshair, K(a.options.tooltip.crosshairs)[g ? 0 : 1], !1);var k;b = this.options.events;-1 === q(this, a.axes) && (g ? a.axes.splice(a.xAxis.length, 0, this) : a.axes.push(this), a[this.coll].push(this));this.series = this.series || [];a.inverted && g && void 0 === this.reversed && (this.reversed = !0);this.removePlotLine = this.removePlotBand = this.removePlotBandOrLine;for (k in b) {\n          D(this, k, b[k]);\n        }this.isLog && (this.val2lin = this.log2lin, this.lin2val = this.lin2log);\n      }, setOptions: function setOptions(a) {\n        this.options = r(this.defaultOptions, \"yAxis\" === this.coll && this.defaultYAxisOptions, [this.defaultTopAxisOptions, this.defaultRightAxisOptions, this.defaultBottomAxisOptions, this.defaultLeftAxisOptions][this.side], r(v[this.coll], a));\n      }, defaultLabelFormatter: function defaultLabelFormatter() {\n        var g = this.axis,\n            b = this.value,\n            c = g.categories,\n            e = this.dateTimeLabelFormat,\n            k = v.lang,\n            m = k.numericSymbols,\n            k = k.numericSymbolMagnitude || 1E3,\n            q = m && m.length,\n            d,\n            r = g.options.labels.format,\n            g = g.isLog ? b : g.tickInterval;if (r) d = t(r, this);else if (c) d = b;else if (e) d = a.dateFormat(e, b);else if (q && 1E3 <= g) for (; q-- && void 0 === d;) {\n          c = Math.pow(k, q + 1), g >= c && 0 === 10 * b % c && null !== m[q] && 0 !== b && (d = a.numberFormat(b / c, -1) + m[q]);\n        }void 0 === d && (d = 1E4 <= Math.abs(b) ? a.numberFormat(b, -1) : a.numberFormat(b, -1, void 0, \"\"));return d;\n      }, getSeriesExtremes: function getSeriesExtremes() {\n        var a = this,\n            e = a.chart;a.hasVisibleSeries = !1;a.dataMin = a.dataMax = a.threshold = null;a.softThreshold = !a.isXAxis;a.buildStacks && a.buildStacks();c(a.series, function (g) {\n          if (g.visible || !e.options.chart.ignoreHiddenSeries) {\n            var c = g.options,\n                k = c.threshold,\n                B;a.hasVisibleSeries = !0;a.isLog && 0 >= k && (k = null);if (a.isXAxis) c = g.xData, c.length && (g = I(c), F(g) || g instanceof Date || (c = b(c, function (a) {\n              return F(a);\n            }), g = I(c)), a.dataMin = Math.min(A(a.dataMin, c[0]), g), a.dataMax = Math.max(A(a.dataMax, c[0]), G(c)));else if (g.getExtremes(), B = g.dataMax, g = g.dataMin, l(g) && l(B) && (a.dataMin = Math.min(A(a.dataMin, g), g), a.dataMax = Math.max(A(a.dataMax, B), B)), l(k) && (a.threshold = k), !c.softThreshold || a.isLog) a.softThreshold = !1;\n          }\n        });\n      }, translate: function translate(a, b, c, e, k, m) {\n        var g = this.linkedParent || this,\n            B = 1,\n            q = 0,\n            d = e ? g.oldTransA : g.transA;e = e ? g.oldMin : g.min;var r = g.minPixelPadding;k = (g.isOrdinal || g.isBroken || g.isLog && k) && g.lin2val;d || (d = g.transA);c && (B *= -1, q = g.len);g.reversed && (B *= -1, q -= B * (g.sector || g.len));b ? (a = (a * B + q - r) / d + e, k && (a = g.lin2val(a))) : (k && (a = g.val2lin(a)), a = B * (a - e) * d + q + B * r + (F(m) ? d * m : 0));return a;\n      }, toPixels: function toPixels(a, b) {\n        return this.translate(a, !1, !this.horiz, null, !0) + (b ? 0 : this.pos);\n      }, toValue: function toValue(a, b) {\n        return this.translate(a - (b ? 0 : this.pos), !0, !this.horiz, null, !0);\n      }, getPlotLinePath: function getPlotLinePath(a, b, c, e, k) {\n        var g = this.chart,\n            B = this.left,\n            m = this.top,\n            q,\n            d,\n            r = c && g.oldChartHeight || g.chartHeight,\n            n = c && g.oldChartWidth || g.chartWidth,\n            f;q = this.transB;var w = function w(a, g, b) {\n          if (a < g || a > b) e ? a = Math.min(Math.max(g, a), b) : f = !0;return a;\n        };k = A(k, this.translate(a, null, null, c));a = c = Math.round(k + q);q = d = Math.round(r - k - q);F(k) ? this.horiz ? (q = m, d = r - this.bottom, a = c = w(a, B, B + this.width)) : (a = B, c = n - this.right, q = d = w(q, m, m + this.height)) : f = !0;return f && !e ? null : g.renderer.crispLine([\"M\", a, q, \"L\", c, d], b || 1);\n      }, getLinearTickPositions: function getLinearTickPositions(a, b, c) {\n        var g,\n            k = p(Math.floor(b / a) * a),\n            e = p(Math.ceil(c / a) * a),\n            B = [];if (b === c && F(b)) return [b];for (b = k; b <= e;) {\n          B.push(b);b = p(b + a);if (b === g) break;g = b;\n        }return B;\n      }, getMinorTickPositions: function getMinorTickPositions() {\n        var a = this.options,\n            b = this.tickPositions,\n            c = this.minorTickInterval,\n            k = [],\n            e,\n            m = this.pointRangePadding || 0;e = this.min - m;var m = this.max + m,\n            q = m - e;if (q && q / c < this.len / 3) if (this.isLog) for (m = b.length, e = 1; e < m; e++) {\n          k = k.concat(this.getLogTickPositions(c, b[e - 1], b[e], !0));\n        } else if (this.isDatetimeAxis && \"auto\" === a.minorTickInterval) k = k.concat(this.getTimeTicks(this.normalizeTimeTickInterval(c), e, m, a.startOfWeek));else for (b = e + (b[0] - e) % c; b <= m && b !== k[0]; b += c) {\n          k.push(b);\n        }0 !== k.length && this.trimTicks(k, a.startOnTick, a.endOnTick);return k;\n      }, adjustForMinRange: function adjustForMinRange() {\n        var a = this.options,\n            b = this.min,\n            k = this.max,\n            e,\n            m = this.dataMax - this.dataMin >= this.minRange,\n            q,\n            d,\n            r,\n            f,\n            n,\n            w;this.isXAxis && void 0 === this.minRange && !this.isLog && (l(a.min) || l(a.max) ? this.minRange = null : (c(this.series, function (a) {\n          f = a.xData;for (d = n = a.xIncrement ? 1 : f.length - 1; 0 < d; d--) {\n            if (r = f[d] - f[d - 1], void 0 === q || r < q) q = r;\n          }\n        }), this.minRange = Math.min(5 * q, this.dataMax - this.dataMin)));k - b < this.minRange && (w = this.minRange, e = (w - k + b) / 2, e = [b - e, A(a.min, b - e)], m && (e[2] = this.isLog ? this.log2lin(this.dataMin) : this.dataMin), b = G(e), k = [b + w, A(a.max, b + w)], m && (k[2] = this.isLog ? this.log2lin(this.dataMax) : this.dataMax), k = I(k), k - b < w && (e[0] = k - w, e[1] = A(a.min, k - w), b = G(e)));this.min = b;this.max = k;\n      }, getClosest: function getClosest() {\n        var a;this.categories ? a = 1 : c(this.series, function (b) {\n          var g = b.closestPointRange,\n              c = b.visible || !b.chart.options.chart.ignoreHiddenSeries;!b.noSharedTooltip && l(g) && c && (a = l(a) ? Math.min(a, g) : g);\n        });return a;\n      }, nameToX: function nameToX(a) {\n        var b = z(this.categories),\n            g = b ? this.categories : this.names,\n            c = a.options.x,\n            k;a.series.requireSorting = !1;l(c) || (c = !1 === this.options.uniqueNames ? a.series.autoIncrement() : q(a.name, g));-1 === c ? b || (k = g.length) : k = c;this.names[k] = a.name;return k;\n      }, updateNames: function updateNames() {\n        var a = this;0 < this.names.length && (this.names.length = 0, this.minRange = void 0, c(this.series || [], function (b) {\n          b.xIncrement = null;if (!b.points || b.isDirtyData) b.processData(), b.generatePoints();c(b.points, function (g, c) {\n            var k;g.options && void 0 === g.options.x && (k = a.nameToX(g), k !== g.x && (g.x = k, b.xData[c] = k));\n          });\n        }));\n      }, setAxisTranslation: function setAxisTranslation(a) {\n        var b = this,\n            g = b.max - b.min,\n            k = b.axisPointRange || 0,\n            m,\n            q = 0,\n            d = 0,\n            r = b.linkedParent,\n            f = !!b.categories,\n            n = b.transA,\n            w = b.isXAxis;if (w || f || k) m = b.getClosest(), r ? (q = r.minPointOffset, d = r.pointRangePadding) : c(b.series, function (a) {\n          var g = f ? 1 : w ? A(a.options.pointRange, m, 0) : b.axisPointRange || 0;a = a.options.pointPlacement;\n          k = Math.max(k, g);b.single || (q = Math.max(q, e(a) ? 0 : g / 2), d = Math.max(d, \"on\" === a ? 0 : g));\n        }), r = b.ordinalSlope && m ? b.ordinalSlope / m : 1, b.minPointOffset = q *= r, b.pointRangePadding = d *= r, b.pointRange = Math.min(k, g), w && (b.closestPointRange = m);a && (b.oldTransA = n);b.translationSlope = b.transA = n = b.len / (g + d || 1);b.transB = b.horiz ? b.left : b.bottom;b.minPixelPadding = n * q;\n      }, minFromRange: function minFromRange() {\n        return this.max - this.range;\n      }, setTickInterval: function setTickInterval(b) {\n        var g = this,\n            k = g.chart,\n            e = g.options,\n            q = g.isLog,\n            d = g.log2lin,\n            r = g.isDatetimeAxis,\n            f = g.isXAxis,\n            n = g.isLinked,\n            w = e.maxPadding,\n            t = e.minPadding,\n            z = e.tickInterval,\n            h = e.tickPixelInterval,\n            K = g.categories,\n            J = g.threshold,\n            u = g.softThreshold,\n            N,\n            v,\n            C,\n            D;r || K || n || this.getTickAmount();C = A(g.userMin, e.min);D = A(g.userMax, e.max);n ? (g.linkedParent = k[g.coll][e.linkedTo], k = g.linkedParent.getExtremes(), g.min = A(k.min, k.dataMin), g.max = A(k.max, k.dataMax), e.type !== g.linkedParent.options.type && a.error(11, 1)) : (!u && l(J) && (g.dataMin >= J ? (N = J, t = 0) : g.dataMax <= J && (v = J, w = 0)), g.min = A(C, N, g.dataMin), g.max = A(D, v, g.dataMax));q && (!b && 0 >= Math.min(g.min, A(g.dataMin, g.min)) && a.error(10, 1), g.min = p(d(g.min), 15), g.max = p(d(g.max), 15));g.range && l(g.max) && (g.userMin = g.min = C = Math.max(g.min, g.minFromRange()), g.userMax = D = g.max, g.range = null);y(g, \"foundExtremes\");g.beforePadding && g.beforePadding();g.adjustForMinRange();!(K || g.axisPointRange || g.usePercentage || n) && l(g.min) && l(g.max) && (d = g.max - g.min) && (!l(C) && t && (g.min -= d * t), !l(D) && w && (g.max += d * w));F(e.floor) ? g.min = Math.max(g.min, e.floor) : F(e.softMin) && (g.min = Math.min(g.min, e.softMin));F(e.ceiling) ? g.max = Math.min(g.max, e.ceiling) : F(e.softMax) && (g.max = Math.max(g.max, e.softMax));u && l(g.dataMin) && (J = J || 0, !l(C) && g.min < J && g.dataMin >= J ? g.min = J : !l(D) && g.max > J && g.dataMax <= J && (g.max = J));g.tickInterval = g.min === g.max || void 0 === g.min || void 0 === g.max ? 1 : n && !z && h === g.linkedParent.options.tickPixelInterval ? z = g.linkedParent.tickInterval : A(z, this.tickAmount ? (g.max - g.min) / Math.max(this.tickAmount - 1, 1) : void 0, K ? 1 : (g.max - g.min) * h / Math.max(g.len, h));f && !b && c(g.series, function (a) {\n          a.processData(g.min !== g.oldMin || g.max !== g.oldMax);\n        });g.setAxisTranslation(!0);g.beforeSetTickPositions && g.beforeSetTickPositions();g.postProcessTickInterval && (g.tickInterval = g.postProcessTickInterval(g.tickInterval));g.pointRange && !z && (g.tickInterval = Math.max(g.pointRange, g.tickInterval));b = A(e.minTickInterval, g.isDatetimeAxis && g.closestPointRange);!z && g.tickInterval < b && (g.tickInterval = b);r || q || z || (g.tickInterval = x(g.tickInterval, null, m(g.tickInterval), A(e.allowDecimals, !(.5 < g.tickInterval && 5 > g.tickInterval && 1E3 < g.max && 9999 > g.max)), !!this.tickAmount));\n        this.tickAmount || (g.tickInterval = g.unsquish());this.setTickPositions();\n      }, setTickPositions: function setTickPositions() {\n        var a = this.options,\n            b,\n            c = a.tickPositions,\n            k = a.tickPositioner,\n            e = a.startOnTick,\n            m = a.endOnTick,\n            q;this.tickmarkOffset = this.categories && \"between\" === a.tickmarkPlacement && 1 === this.tickInterval ? .5 : 0;this.minorTickInterval = \"auto\" === a.minorTickInterval && this.tickInterval ? this.tickInterval / 5 : a.minorTickInterval;this.tickPositions = b = c && c.slice();!b && (b = this.isDatetimeAxis ? this.getTimeTicks(this.normalizeTimeTickInterval(this.tickInterval, a.units), this.min, this.max, a.startOfWeek, this.ordinalPositions, this.closestPointRange, !0) : this.isLog ? this.getLogTickPositions(this.tickInterval, this.min, this.max) : this.getLinearTickPositions(this.tickInterval, this.min, this.max), b.length > this.len && (b = [b[0], b.pop()]), this.tickPositions = b, k && (k = k.apply(this, [this.min, this.max]))) && (this.tickPositions = b = k);this.isLinked || (this.trimTicks(b, e, m), this.min === this.max && l(this.min) && !this.tickAmount && (q = !0, this.min -= .5, this.max += .5), this.single = q, c || k || this.adjustTickAmount());\n      },\n      trimTicks: function trimTicks(a, b, c) {\n        var g = a[0],\n            k = a[a.length - 1],\n            e = this.minPointOffset || 0;if (b) this.min = g;else for (; this.min - e > a[0];) {\n          a.shift();\n        }if (c) this.max = k;else for (; this.max + e < a[a.length - 1];) {\n          a.pop();\n        }0 === a.length && l(g) && a.push((k + g) / 2);\n      }, alignToOthers: function alignToOthers() {\n        var a = {},\n            b,\n            k = this.options;!1 === this.chart.options.chart.alignTicks || !1 === k.alignTicks || this.isLog || c(this.chart[this.coll], function (g) {\n          var c = g.options,\n              c = [g.horiz ? c.left : c.top, c.width, c.height, c.pane].join();g.series.length && (a[c] ? b = !0 : a[c] = 1);\n        });return b;\n      },\n      getTickAmount: function getTickAmount() {\n        var a = this.options,\n            b = a.tickAmount,\n            c = a.tickPixelInterval;!l(a.tickInterval) && this.len < c && !this.isRadial && !this.isLog && a.startOnTick && a.endOnTick && (b = 2);!b && this.alignToOthers() && (b = Math.ceil(this.len / c) + 1);4 > b && (this.finalTickAmt = b, b = 5);this.tickAmount = b;\n      }, adjustTickAmount: function adjustTickAmount() {\n        var a = this.tickInterval,\n            b = this.tickPositions,\n            c = this.tickAmount,\n            k = this.finalTickAmt,\n            e = b && b.length;if (e < c) {\n          for (; b.length < c;) {\n            b.push(p(b[b.length - 1] + a));\n          }this.transA *= (e - 1) / (c - 1);this.max = b[b.length - 1];\n        } else e > c && (this.tickInterval *= 2, this.setTickPositions());if (l(k)) {\n          for (a = c = b.length; a--;) {\n            (3 === k && 1 === a % 2 || 2 >= k && 0 < a && a < c - 1) && b.splice(a, 1);\n          }this.finalTickAmt = void 0;\n        }\n      }, setScale: function setScale() {\n        var a, b;this.oldMin = this.min;this.oldMax = this.max;this.oldAxisLength = this.len;this.setAxisSize();b = this.len !== this.oldAxisLength;c(this.series, function (b) {\n          if (b.isDirtyData || b.isDirty || b.xAxis.isDirty) a = !0;\n        });b || a || this.isLinked || this.forceRedraw || this.userMin !== this.oldUserMin || this.userMax !== this.oldUserMax || this.alignToOthers() ? (this.resetStacks && this.resetStacks(), this.forceRedraw = !1, this.getSeriesExtremes(), this.setTickInterval(), this.oldUserMin = this.userMin, this.oldUserMax = this.userMax, this.isDirty || (this.isDirty = b || this.min !== this.oldMin || this.max !== this.oldMax)) : this.cleanStacks && this.cleanStacks();\n      }, setExtremes: function setExtremes(a, b, k, e, m) {\n        var g = this,\n            q = g.chart;k = A(k, !0);c(g.series, function (a) {\n          delete a.kdTree;\n        });m = n(m, { min: a, max: b });y(g, \"setExtremes\", m, function () {\n          g.userMin = a;g.userMax = b;g.eventArgs = m;k && q.redraw(e);\n        });\n      }, zoom: function zoom(a, b) {\n        var g = this.dataMin,\n            c = this.dataMax,\n            k = this.options,\n            e = Math.min(g, A(k.min, g)),\n            k = Math.max(c, A(k.max, c));if (a !== this.min || b !== this.max) this.allowZoomOutside || (l(g) && (a < e && (a = e), a > k && (a = k)), l(c) && (b < e && (b = e), b > k && (b = k))), this.displayBtn = void 0 !== a || void 0 !== b, this.setExtremes(a, b, !1, void 0, { trigger: \"zoom\" });return !0;\n      }, setAxisSize: function setAxisSize() {\n        var a = this.chart,\n            b = this.options,\n            c = b.offsetLeft || 0,\n            k = this.horiz,\n            e = A(b.width, a.plotWidth - c + (b.offsetRight || 0)),\n            m = A(b.height, a.plotHeight),\n            q = A(b.top, a.plotTop),\n            b = A(b.left, a.plotLeft + c),\n            c = /%$/;c.test(m) && (m = Math.round(parseFloat(m) / 100 * a.plotHeight));c.test(q) && (q = Math.round(parseFloat(q) / 100 * a.plotHeight + a.plotTop));this.left = b;this.top = q;this.width = e;this.height = m;this.bottom = a.chartHeight - m - q;this.right = a.chartWidth - e - b;this.len = Math.max(k ? e : m, 0);this.pos = k ? b : q;\n      }, getExtremes: function getExtremes() {\n        var a = this.isLog,\n            b = this.lin2log;return { min: a ? p(b(this.min)) : this.min, max: a ? p(b(this.max)) : this.max, dataMin: this.dataMin, dataMax: this.dataMax, userMin: this.userMin, userMax: this.userMax };\n      },\n      getThreshold: function getThreshold(a) {\n        var b = this.isLog,\n            g = this.lin2log,\n            c = b ? g(this.min) : this.min,\n            b = b ? g(this.max) : this.max;null === a ? a = c : c > a ? a = c : b < a && (a = b);return this.translate(a, 0, 1, 0, 1);\n      }, autoLabelAlign: function autoLabelAlign(a) {\n        a = (A(a, 0) - 90 * this.side + 720) % 360;return 15 < a && 165 > a ? \"right\" : 195 < a && 345 > a ? \"left\" : \"center\";\n      }, tickSize: function tickSize(a) {\n        var b = this.options,\n            g = b[a + \"Length\"],\n            c = A(b[a + \"Width\"], \"tick\" === a && this.isXAxis ? 1 : 0);if (c && g) return \"inside\" === b[a + \"Position\"] && (g = -g), [g, c];\n      }, labelMetrics: function labelMetrics() {\n        return this.chart.renderer.fontMetrics(this.options.labels.style && this.options.labels.style.fontSize, this.ticks[0] && this.ticks[0].label);\n      }, unsquish: function unsquish() {\n        var a = this.options.labels,\n            b = this.horiz,\n            k = this.tickInterval,\n            e = k,\n            m = this.len / (((this.categories ? 1 : 0) + this.max - this.min) / k),\n            q,\n            d = a.rotation,\n            r = this.labelMetrics(),\n            f,\n            n = Number.MAX_VALUE,\n            w,\n            t = function t(a) {\n          a /= m || 1;a = 1 < a ? Math.ceil(a) : 1;return a * k;\n        };b ? (w = !a.staggerLines && !a.step && (l(d) ? [d] : m < A(a.autoRotationLimit, 80) && a.autoRotation)) && c(w, function (a) {\n          var b;if (a === d || a && -90 <= a && 90 >= a) f = t(Math.abs(r.h / Math.sin(u * a))), b = f + Math.abs(a / 360), b < n && (n = b, q = a, e = f);\n        }) : a.step || (e = t(r.h));this.autoRotation = w;this.labelRotation = A(q, d);return e;\n      }, getSlotWidth: function getSlotWidth() {\n        var a = this.chart,\n            b = this.horiz,\n            c = this.options.labels,\n            k = Math.max(this.tickPositions.length - (this.categories ? 0 : 1), 1),\n            e = a.margin[3];return b && 2 > (c.step || 0) && !c.rotation && (this.staggerLines || 1) * a.plotWidth / k || !b && (e && e - a.spacing[3] || .33 * a.chartWidth);\n      }, renderUnsquish: function renderUnsquish() {\n        var a = this.chart,\n            b = a.renderer,\n            k = this.tickPositions,\n            m = this.ticks,\n            q = this.options.labels,\n            d = this.horiz,\n            f = this.getSlotWidth(),\n            n = Math.max(1, Math.round(f - 2 * (q.padding || 5))),\n            w = {},\n            t = this.labelMetrics(),\n            z = q.style && q.style.textOverflow,\n            h,\n            l = 0,\n            x,\n            F;e(q.rotation) || (w.rotation = q.rotation || 0);c(k, function (a) {\n          (a = m[a]) && a.labelLength > l && (l = a.labelLength);\n        });this.maxLabelLength = l;if (this.autoRotation) l > n && l > t.h ? w.rotation = this.labelRotation : this.labelRotation = 0;else if (f && (h = { width: n + \"px\" }, !z)) for (h.textOverflow = \"clip\", x = k.length; !d && x--;) {\n          if (F = k[x], n = m[F].label) n.styles && \"ellipsis\" === n.styles.textOverflow ? n.css({ textOverflow: \"clip\" }) : m[F].labelLength > f && n.css({ width: f + \"px\" }), n.getBBox().height > this.len / k.length - (t.h - t.f) && (n.specCss = { textOverflow: \"ellipsis\" });\n        }w.rotation && (h = { width: (l > .5 * a.chartHeight ? .33 * a.chartHeight : a.chartHeight) + \"px\" }, z || (h.textOverflow = \"ellipsis\"));if (this.labelAlign = q.align || this.autoLabelAlign(this.labelRotation)) w.align = this.labelAlign;c(k, function (a) {\n          var b = (a = m[a]) && a.label;b && (b.attr(w), h && b.css(r(h, b.specCss)), delete b.specCss, a.rotation = w.rotation);\n        });this.tickRotCorr = b.rotCorr(t.b, this.labelRotation || 0, 0 !== this.side);\n      }, hasData: function hasData() {\n        return this.hasVisibleSeries || l(this.min) && l(this.max) && !!this.tickPositions;\n      }, addTitle: function addTitle(a) {\n        var b = this.chart.renderer,\n            g = this.horiz,\n            c = this.opposite,\n            k = this.options.title,\n            e;this.axisTitle || ((e = k.textAlign) || (e = (g ? { low: \"left\", middle: \"center\", high: \"right\" } : { low: c ? \"right\" : \"left\", middle: \"center\", high: c ? \"left\" : \"right\" })[k.align]), this.axisTitle = b.text(k.text, 0, 0, k.useHTML).attr({ zIndex: 7, rotation: k.rotation || 0, align: e }).addClass(\"highcharts-axis-title\").css(k.style).add(this.axisGroup), this.axisTitle.isNew = !0);this.axisTitle[a ? \"show\" : \"hide\"](!0);\n      }, getOffset: function getOffset() {\n        var a = this,\n            b = a.chart,\n            k = b.renderer,\n            e = a.options,\n            m = a.tickPositions,\n            q = a.ticks,\n            d = a.horiz,\n            r = a.side,\n            n = b.inverted ? [1, 0, 3, 2][r] : r,\n            w,\n            f,\n            t = 0,\n            z,\n            h = 0,\n            x = e.title,\n            F = e.labels,\n            p = 0,\n            K = b.axisOffset,\n            b = b.clipOffset,\n            J = [-1, 1, 1, -1][r],\n            u,\n            y = e.className,\n            v = a.axisParent,\n            C = this.tickSize(\"tick\");w = a.hasData();a.showAxis = f = w || A(e.showEmpty, !0);a.staggerLines = a.horiz && F.staggerLines;a.axisGroup || (a.gridGroup = k.g(\"grid\").attr({ zIndex: e.gridZIndex || 1 }).addClass(\"highcharts-\" + this.coll.toLowerCase() + \"-grid \" + (y || \"\")).add(v), a.axisGroup = k.g(\"axis\").attr({ zIndex: e.zIndex || 2 }).addClass(\"highcharts-\" + this.coll.toLowerCase() + \" \" + (y || \"\")).add(v), a.labelGroup = k.g(\"axis-labels\").attr({ zIndex: F.zIndex || 7 }).addClass(\"highcharts-\" + a.coll.toLowerCase() + \"-labels \" + (y || \"\")).add(v));if (w || a.isLinked) c(m, function (b) {\n          q[b] ? q[b].addLabel() : q[b] = new N(a, b);\n        }), a.renderUnsquish(), !1 === F.reserveSpace || 0 !== r && 2 !== r && { 1: \"left\", 3: \"right\" }[r] !== a.labelAlign && \"center\" !== a.labelAlign || c(m, function (a) {\n          p = Math.max(q[a].getLabelSize(), p);\n        }), a.staggerLines && (p *= a.staggerLines, a.labelOffset = p * (a.opposite ? -1 : 1));else for (u in q) {\n          q[u].destroy(), delete q[u];\n        }x && x.text && !1 !== x.enabled && (a.addTitle(f), f && (t = a.axisTitle.getBBox()[d ? \"height\" : \"width\"], z = x.offset, h = l(z) ? 0 : A(x.margin, d ? 5 : 10)));a.renderLine();a.offset = J * A(e.offset, K[r]);a.tickRotCorr = a.tickRotCorr || { x: 0, y: 0 };k = 0 === r ? -a.labelMetrics().h : 2 === r ? a.tickRotCorr.y : 0;h = Math.abs(p) + h;p && (h = h - k + J * (d ? A(F.y, a.tickRotCorr.y + 8 * J) : F.x));a.axisTitleMargin = A(z, h);\n        K[r] = Math.max(K[r], a.axisTitleMargin + t + J * a.offset, h, w && m.length && C ? C[0] : 0);e = e.offset ? 0 : 2 * Math.floor(a.axisLine.strokeWidth() / 2);b[n] = Math.max(b[n], e);\n      }, getLinePath: function getLinePath(a) {\n        var b = this.chart,\n            c = this.opposite,\n            g = this.offset,\n            k = this.horiz,\n            e = this.left + (c ? this.width : 0) + g,\n            g = b.chartHeight - this.bottom - (c ? this.height : 0) + g;c && (a *= -1);return b.renderer.crispLine([\"M\", k ? this.left : e, k ? g : this.top, \"L\", k ? b.chartWidth - this.right : e, k ? g : b.chartHeight - this.bottom], a);\n      }, renderLine: function renderLine() {\n        this.axisLine || (this.axisLine = this.chart.renderer.path().addClass(\"highcharts-axis-line\").add(this.axisGroup), this.axisLine.attr({ stroke: this.options.lineColor, \"stroke-width\": this.options.lineWidth, zIndex: 7 }));\n      }, getTitlePosition: function getTitlePosition() {\n        var a = this.horiz,\n            b = this.left,\n            c = this.top,\n            k = this.len,\n            e = this.options.title,\n            m = a ? b : c,\n            q = this.opposite,\n            d = this.offset,\n            r = e.x || 0,\n            n = e.y || 0,\n            w = this.chart.renderer.fontMetrics(e.style && e.style.fontSize, this.axisTitle).f,\n            k = { low: m + (a ? 0 : k), middle: m + k / 2, high: m + (a ? k : 0) }[e.align],\n            b = (a ? c + this.height : b) + (a ? 1 : -1) * (q ? -1 : 1) * this.axisTitleMargin + (2 === this.side ? w : 0);return { x: a ? k + r : b + (q ? this.width : 0) + d + r, y: a ? b + n - (q ? this.height : 0) + d : k + n };\n      }, render: function render() {\n        var a = this,\n            b = a.chart,\n            e = b.renderer,\n            m = a.options,\n            q = a.isLog,\n            d = a.lin2log,\n            r = a.isLinked,\n            n = a.tickPositions,\n            w = a.axisTitle,\n            f = a.ticks,\n            t = a.minorTicks,\n            z = a.alternateBands,\n            h = m.stackLabels,\n            l = m.alternateGridColor,\n            x = a.tickmarkOffset,\n            p = a.axisLine,\n            A = b.hasRendered && F(a.oldMin),\n            K = a.showAxis,\n            u = C(e.globalAnimation),\n            y,\n            v;a.labelEdge.length = 0;a.overlap = !1;c([f, t, z], function (a) {\n          for (var b in a) {\n            a[b].isActive = !1;\n          }\n        });if (a.hasData() || r) a.minorTickInterval && !a.categories && c(a.getMinorTickPositions(), function (b) {\n          t[b] || (t[b] = new N(a, b, \"minor\"));A && t[b].isNew && t[b].render(null, !0);t[b].render(null, !1, 1);\n        }), n.length && (c(n, function (b, c) {\n          if (!r || b >= a.min && b <= a.max) f[b] || (f[b] = new N(a, b)), A && f[b].isNew && f[b].render(c, !0, .1), f[b].render(c);\n        }), x && (0 === a.min || a.single) && (f[-1] || (f[-1] = new N(a, -1, null, !0)), f[-1].render(-1))), l && c(n, function (c, g) {\n          v = void 0 !== n[g + 1] ? n[g + 1] + x : a.max - x;0 === g % 2 && c < a.max && v <= a.max + (b.polar ? -x : x) && (z[c] || (z[c] = new k(a)), y = c + x, z[c].options = { from: q ? d(y) : y, to: q ? d(v) : v, color: l }, z[c].render(), z[c].isActive = !0);\n        }), a._addedPlotLB || (c((m.plotLines || []).concat(m.plotBands || []), function (b) {\n          a.addPlotBandOrLine(b);\n        }), a._addedPlotLB = !0);c([f, t, z], function (a) {\n          var c,\n              g,\n              k = [],\n              e = u.duration;for (c in a) {\n            a[c].isActive || (a[c].render(c, !1, 0), a[c].isActive = !1, k.push(c));\n          }J(function () {\n            for (g = k.length; g--;) {\n              a[k[g]] && !a[k[g]].isActive && (a[k[g]].destroy(), delete a[k[g]]);\n            }\n          }, a !== z && b.hasRendered && e ? e : 0);\n        });p && (p[p.isPlaced ? \"animate\" : \"attr\"]({ d: this.getLinePath(p.strokeWidth()) }), p.isPlaced = !0, p[K ? \"show\" : \"hide\"](!0));w && K && (w[w.isNew ? \"attr\" : \"animate\"](a.getTitlePosition()), w.isNew = !1);h && h.enabled && a.renderStackTotals();a.isDirty = !1;\n      }, redraw: function redraw() {\n        this.visible && (this.render(), c(this.plotLinesAndBands, function (a) {\n          a.render();\n        }));c(this.series, function (a) {\n          a.isDirty = !0;\n        });\n      }, keepProps: \"extKey hcEvents names series userMax userMin\".split(\" \"), destroy: function destroy(a) {\n        var b = this,\n            g = b.stacks,\n            k,\n            e = b.plotLinesAndBands,\n            m;a || w(b);for (k in g) {\n          d(g[k]), g[k] = null;\n        }c([b.ticks, b.minorTicks, b.alternateBands], function (a) {\n          d(a);\n        });if (e) for (a = e.length; a--;) {\n          e[a].destroy();\n        }c(\"stackTotalGroup axisLine axisTitle axisGroup gridGroup labelGroup cross\".split(\" \"), function (a) {\n          b[a] && (b[a] = b[a].destroy());\n        });for (m in b) {\n          b.hasOwnProperty(m) && -1 === q(m, b.keepProps) && delete b[m];\n        }\n      }, drawCrosshair: function drawCrosshair(a, b) {\n        var c,\n            g = this.crosshair,\n            k = A(g.snap, !0),\n            e,\n            m = this.cross;a || (a = this.cross && this.cross.e);this.crosshair && !1 !== (l(b) || !k) ? (k ? l(b) && (e = this.isXAxis ? b.plotX : this.len - b.plotY) : e = a && (this.horiz ? a.chartX - this.pos : this.len - a.chartY + this.pos), l(e) && (c = this.getPlotLinePath(b && (this.isXAxis ? b.x : A(b.stackY, b.y)), null, null, null, e) || null), l(c) ? (b = this.categories && !this.isRadial, m || (this.cross = m = this.chart.renderer.path().addClass(\"highcharts-crosshair highcharts-crosshair-\" + (b ? \"category \" : \"thin \") + g.className).attr({ zIndex: A(g.zIndex, 2) }).add(), m.attr({ stroke: g.color || (b ? f(\"#ccd6eb\").setOpacity(.25).get() : \"#cccccc\"), \"stroke-width\": A(g.width, 1) }), g.dashStyle && m.attr({ dashstyle: g.dashStyle })), m.show().attr({ d: c }), b && !g.width && m.attr({ \"stroke-width\": this.transA }), this.cross.e = a) : this.hideCrosshair()) : this.hideCrosshair();\n      }, hideCrosshair: function hideCrosshair() {\n        this.cross && this.cross.hide();\n      } };n(a.Axis.prototype, h);\n  })(L);(function (a) {\n    var D = a.Axis,\n        C = a.Date,\n        G = a.dateFormat,\n        I = a.defaultOptions,\n        h = a.defined,\n        f = a.each,\n        p = a.extend,\n        v = a.getMagnitude,\n        l = a.getTZOffset,\n        u = a.normalizeTickInterval,\n        d = a.pick,\n        c = a.timeUnits;D.prototype.getTimeTicks = function (a, y, t, m) {\n      var b = [],\n          q = {},\n          n = I.global.useUTC,\n          F,\n          e = new C(y - l(y)),\n          r = C.hcMakeTime,\n          x = a.unitRange,\n          A = a.count,\n          k;if (h(y)) {\n        e[C.hcSetMilliseconds](x >= c.second ? 0 : A * Math.floor(e.getMilliseconds() / A));if (x >= c.second) e[C.hcSetSeconds](x >= c.minute ? 0 : A * Math.floor(e.getSeconds() / A));if (x >= c.minute) e[C.hcSetMinutes](x >= c.hour ? 0 : A * Math.floor(e[C.hcGetMinutes]() / A));if (x >= c.hour) e[C.hcSetHours](x >= c.day ? 0 : A * Math.floor(e[C.hcGetHours]() / A));if (x >= c.day) e[C.hcSetDate](x >= c.month ? 1 : A * Math.floor(e[C.hcGetDate]() / A));x >= c.month && (e[C.hcSetMonth](x >= c.year ? 0 : A * Math.floor(e[C.hcGetMonth]() / A)), F = e[C.hcGetFullYear]());\n        if (x >= c.year) e[C.hcSetFullYear](F - F % A);if (x === c.week) e[C.hcSetDate](e[C.hcGetDate]() - e[C.hcGetDay]() + d(m, 1));F = e[C.hcGetFullYear]();m = e[C.hcGetMonth]();var w = e[C.hcGetDate](),\n            K = e[C.hcGetHours]();if (C.hcTimezoneOffset || C.hcGetTimezoneOffset) k = (!n || !!C.hcGetTimezoneOffset) && (t - y > 4 * c.month || l(y) !== l(t)), e = e.getTime(), e = new C(e + l(e));n = e.getTime();for (y = 1; n < t;) {\n          b.push(n), n = x === c.year ? r(F + y * A, 0) : x === c.month ? r(F, m + y * A) : !k || x !== c.day && x !== c.week ? k && x === c.hour ? r(F, m, w, K + y * A) : n + x * A : r(F, m, w + y * A * (x === c.day ? 1 : 7)), y++;\n        }b.push(n);x <= c.hour && f(b, function (a) {\n          \"000000000\" === G(\"%H%M%S%L\", a) && (q[a] = \"day\");\n        });\n      }b.info = p(a, { higherRanks: q, totalRange: x * A });return b;\n    };D.prototype.normalizeTimeTickInterval = function (a, d) {\n      var f = d || [[\"millisecond\", [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]], [\"second\", [1, 2, 5, 10, 15, 30]], [\"minute\", [1, 2, 5, 10, 15, 30]], [\"hour\", [1, 2, 3, 4, 6, 8, 12]], [\"day\", [1, 2]], [\"week\", [1, 2]], [\"month\", [1, 2, 3, 4, 6]], [\"year\", null]];d = f[f.length - 1];var m = c[d[0]],\n          b = d[1],\n          q;for (q = 0; q < f.length && !(d = f[q], m = c[d[0]], b = d[1], f[q + 1] && a <= (m * b[b.length - 1] + c[f[q + 1][0]]) / 2); q++) {}m === c.year && a < 5 * m && (b = [1, 2, 5]);a = u(a / m, b, \"year\" === d[0] ? Math.max(v(a / m), 1) : 1);return { unitRange: m, count: a, unitName: d[0] };\n    };\n  })(L);(function (a) {\n    var D = a.Axis,\n        C = a.getMagnitude,\n        G = a.map,\n        I = a.normalizeTickInterval,\n        h = a.pick;D.prototype.getLogTickPositions = function (a, p, v, l) {\n      var f = this.options,\n          d = this.len,\n          c = this.lin2log,\n          n = this.log2lin,\n          y = [];l || (this._minorAutoInterval = null);if (.5 <= a) a = Math.round(a), y = this.getLinearTickPositions(a, p, v);else if (.08 <= a) for (var d = Math.floor(p), t, m, b, q, z, f = .3 < a ? [1, 2, 4] : .15 < a ? [1, 2, 4, 6, 8] : [1, 2, 3, 4, 5, 6, 7, 8, 9]; d < v + 1 && !z; d++) {\n        for (m = f.length, t = 0; t < m && !z; t++) {\n          b = n(c(d) * f[t]), b > p && (!l || q <= v) && void 0 !== q && y.push(q), q > v && (z = !0), q = b;\n        }\n      } else p = c(p), v = c(v), a = f[l ? \"minorTickInterval\" : \"tickInterval\"], a = h(\"auto\" === a ? null : a, this._minorAutoInterval, f.tickPixelInterval / (l ? 5 : 1) * (v - p) / ((l ? d / this.tickPositions.length : d) || 1)), a = I(a, null, C(a)), y = G(this.getLinearTickPositions(a, p, v), n), l || (this._minorAutoInterval = a / 5);l || (this.tickInterval = a);return y;\n    };D.prototype.log2lin = function (a) {\n      return Math.log(a) / Math.LN10;\n    };D.prototype.lin2log = function (a) {\n      return Math.pow(10, a);\n    };\n  })(L);(function (a) {\n    var D = a.dateFormat,\n        C = a.each,\n        G = a.extend,\n        I = a.format,\n        h = a.isNumber,\n        f = a.map,\n        p = a.merge,\n        v = a.pick,\n        l = a.splat,\n        u = a.syncTimeout,\n        d = a.timeUnits;a.Tooltip = function () {\n      this.init.apply(this, arguments);\n    };a.Tooltip.prototype = { init: function init(a, d) {\n        this.chart = a;this.options = d;this.crosshairs = [];this.now = { x: 0, y: 0 };this.isHidden = !0;this.split = d.split && !a.inverted;this.shared = d.shared || this.split;\n      }, cleanSplit: function cleanSplit(a) {\n        C(this.chart.series, function (c) {\n          var d = c && c.tt;d && (!d.isActive || a ? c.tt = d.destroy() : d.isActive = !1);\n        });\n      }, getLabel: function getLabel() {\n        var a = this.chart.renderer,\n            d = this.options;this.label || (this.split ? this.label = a.g(\"tooltip\") : (this.label = a.label(\"\", 0, 0, d.shape || \"callout\", null, null, d.useHTML, null, \"tooltip\").attr({ padding: d.padding, r: d.borderRadius }), this.label.attr({ fill: d.backgroundColor, \"stroke-width\": d.borderWidth }).css(d.style).shadow(d.shadow)), this.label.attr({ zIndex: 8 }).add());return this.label;\n      }, update: function update(a) {\n        this.destroy();\n        this.init(this.chart, p(!0, this.options, a));\n      }, destroy: function destroy() {\n        this.label && (this.label = this.label.destroy());this.split && this.tt && (this.cleanSplit(this.chart, !0), this.tt = this.tt.destroy());clearTimeout(this.hideTimer);clearTimeout(this.tooltipTimeout);\n      }, move: function move(a, d, f, t) {\n        var c = this,\n            b = c.now,\n            q = !1 !== c.options.animation && !c.isHidden && (1 < Math.abs(a - b.x) || 1 < Math.abs(d - b.y)),\n            n = c.followPointer || 1 < c.len;G(b, { x: q ? (2 * b.x + a) / 3 : a, y: q ? (b.y + d) / 2 : d, anchorX: n ? void 0 : q ? (2 * b.anchorX + f) / 3 : f, anchorY: n ? void 0 : q ? (b.anchorY + t) / 2 : t });c.getLabel().attr(b);q && (clearTimeout(this.tooltipTimeout), this.tooltipTimeout = setTimeout(function () {\n          c && c.move(a, d, f, t);\n        }, 32));\n      }, hide: function hide(a) {\n        var c = this;clearTimeout(this.hideTimer);a = v(a, this.options.hideDelay, 500);this.isHidden || (this.hideTimer = u(function () {\n          c.getLabel()[a ? \"fadeOut\" : \"hide\"]();c.isHidden = !0;\n        }, a));\n      }, getAnchor: function getAnchor(a, d) {\n        var c,\n            n = this.chart,\n            m = n.inverted,\n            b = n.plotTop,\n            q = n.plotLeft,\n            z = 0,\n            h = 0,\n            e,\n            r;a = l(a);c = a[0].tooltipPos;this.followPointer && d && (void 0 === d.chartX && (d = n.pointer.normalize(d)), c = [d.chartX - n.plotLeft, d.chartY - b]);c || (C(a, function (a) {\n          e = a.series.yAxis;r = a.series.xAxis;z += a.plotX + (!m && r ? r.left - q : 0);h += (a.plotLow ? (a.plotLow + a.plotHigh) / 2 : a.plotY) + (!m && e ? e.top - b : 0);\n        }), z /= a.length, h /= a.length, c = [m ? n.plotWidth - h : z, this.shared && !m && 1 < a.length && d ? d.chartY - b : m ? n.plotHeight - z : h]);return f(c, Math.round);\n      }, getPosition: function getPosition(a, d, f) {\n        var c = this.chart,\n            m = this.distance,\n            b = {},\n            q = f.h || 0,\n            n,\n            h = [\"y\", c.chartHeight, d, f.plotY + c.plotTop, c.plotTop, c.plotTop + c.plotHeight],\n            e = [\"x\", c.chartWidth, a, f.plotX + c.plotLeft, c.plotLeft, c.plotLeft + c.plotWidth],\n            r = !this.followPointer && v(f.ttBelow, !c.inverted === !!f.negative),\n            l = function l(a, c, k, g, e, d) {\n          var f = k < g - m,\n              w = g + m + k < c,\n              n = g - m - k;g += m;if (r && w) b[a] = g;else if (!r && f) b[a] = n;else if (f) b[a] = Math.min(d - k, 0 > n - q ? n : n - q);else if (w) b[a] = Math.max(e, g + q + k > c ? g : g + q);else return !1;\n        },\n            p = function p(a, c, k, g) {\n          var e;g < m || g > c - m ? e = !1 : b[a] = g < k / 2 ? 1 : g > c - k / 2 ? c - k - 2 : g - k / 2;return e;\n        },\n            k = function k(a) {\n          var b = h;h = e;e = b;n = a;\n        },\n            w = function w() {\n          !1 !== l.apply(0, h) ? !1 !== p.apply(0, e) || n || (k(!0), w()) : n ? b.x = b.y = 0 : (k(!0), w());\n        };(c.inverted || 1 < this.len) && k();w();return b;\n      }, defaultFormatter: function defaultFormatter(a) {\n        var c = this.points || l(this),\n            d;d = [a.tooltipFooterHeaderFormatter(c[0])];d = d.concat(a.bodyFormatter(c));d.push(a.tooltipFooterHeaderFormatter(c[0], !0));return d;\n      }, refresh: function refresh(a, d) {\n        var c = this.chart,\n            f,\n            m = this.options,\n            b,\n            q,\n            n = {},\n            h = [];f = m.formatter || this.defaultFormatter;var n = c.hoverPoints,\n            e = this.shared;clearTimeout(this.hideTimer);this.followPointer = l(a)[0].series.tooltipOptions.followPointer;q = this.getAnchor(a, d);d = q[0];b = q[1];!e || a.series && a.series.noSharedTooltip ? n = a.getLabelConfig() : (c.hoverPoints = a, n && C(n, function (a) {\n          a.setState();\n        }), C(a, function (a) {\n          a.setState(\"hover\");h.push(a.getLabelConfig());\n        }), n = { x: a[0].category, y: a[0].y }, n.points = h, this.len = h.length, a = a[0]);n = f.call(n, this);e = a.series;this.distance = v(e.tooltipOptions.distance, 16);!1 === n ? this.hide() : (f = this.getLabel(), this.isHidden && f.attr({ opacity: 1 }).show(), this.split ? this.renderSplit(n, c.hoverPoints) : (f.attr({ text: n && n.join ? n.join(\"\") : n }), f.removeClass(/highcharts-color-[\\d]+/g).addClass(\"highcharts-color-\" + v(a.colorIndex, e.colorIndex)), f.attr({ stroke: m.borderColor || a.color || e.color || \"#666666\" }), this.updatePosition({ plotX: d, plotY: b, negative: a.negative, ttBelow: a.ttBelow, h: q[2] || 0 })), this.isHidden = !1);\n      }, renderSplit: function renderSplit(c, d) {\n        var f = this,\n            n = [],\n            m = this.chart,\n            b = m.renderer,\n            q = !0,\n            h = this.options,\n            l,\n            e = this.getLabel();C(c.slice(0, c.length - 1), function (a, c) {\n          c = d[c - 1] || { isHeader: !0, plotX: d[0].plotX };var r = c.series || f,\n              k = r.tt,\n              w = c.series || {},\n              t = \"highcharts-color-\" + v(c.colorIndex, w.colorIndex, \"none\");k || (r.tt = k = b.label(null, null, null, \"callout\").addClass(\"highcharts-tooltip-box \" + t).attr({ padding: h.padding, r: h.borderRadius, fill: h.backgroundColor, stroke: c.color || w.color || \"#333333\", \"stroke-width\": h.borderWidth }).add(e));k.isActive = !0;k.attr({ text: a });k.css(h.style);a = k.getBBox();w = a.width + k.strokeWidth();c.isHeader ? (l = a.height, w = Math.max(0, Math.min(c.plotX + m.plotLeft - w / 2, m.chartWidth - w))) : w = c.plotX + m.plotLeft - v(h.distance, 16) - w;0 > w && (q = !1);a = (c.series && c.series.yAxis && c.series.yAxis.pos) + (c.plotY || 0);a -= m.plotTop;n.push({ target: c.isHeader ? m.plotHeight + l : a, rank: c.isHeader ? 1 : 0, size: r.tt.getBBox().height + 1, point: c, x: w, tt: k });\n        });this.cleanSplit();a.distribute(n, m.plotHeight + l);C(n, function (a) {\n          var b = a.point,\n              c = b.series;a.tt.attr({ visibility: void 0 === a.pos ? \"hidden\" : \"inherit\", x: q || b.isHeader ? a.x : b.plotX + m.plotLeft + v(h.distance, 16), y: a.pos + m.plotTop, anchorX: b.isHeader ? b.plotX + m.plotLeft : b.plotX + c.xAxis.pos, anchorY: b.isHeader ? a.pos + m.plotTop - 15 : b.plotY + c.yAxis.pos });\n        });\n      }, updatePosition: function updatePosition(a) {\n        var c = this.chart,\n            d = this.getLabel(),\n            d = (this.options.positioner || this.getPosition).call(this, d.width, d.height, a);this.move(Math.round(d.x), Math.round(d.y || 0), a.plotX + c.plotLeft, a.plotY + c.plotTop);\n      }, getXDateFormat: function getXDateFormat(a, f, h) {\n        var c;f = f.dateTimeLabelFormats;var m = h && h.closestPointRange,\n            b,\n            q = { millisecond: 15, second: 12, minute: 9, hour: 6, day: 3 },\n            n,\n            l = \"millisecond\";if (m) {\n          n = D(\"%m-%d %H:%M:%S.%L\", a.x);for (b in d) {\n            if (m === d.week && +D(\"%w\", a.x) === h.options.startOfWeek && \"00:00:00.000\" === n.substr(6)) {\n              b = \"week\";break;\n            }if (d[b] > m) {\n              b = l;break;\n            }if (q[b] && n.substr(q[b]) !== \"01-01 00:00:00.000\".substr(q[b])) break;\n            \"week\" !== b && (l = b);\n          }b && (c = f[b]);\n        } else c = f.day;return c || f.year;\n      }, tooltipFooterHeaderFormatter: function tooltipFooterHeaderFormatter(a, d) {\n        var c = d ? \"footer\" : \"header\";d = a.series;var f = d.tooltipOptions,\n            m = f.xDateFormat,\n            b = d.xAxis,\n            q = b && \"datetime\" === b.options.type && h(a.key),\n            c = f[c + \"Format\"];q && !m && (m = this.getXDateFormat(a, f, b));q && m && (c = c.replace(\"{point.key}\", \"{point.key:\" + m + \"}\"));return I(c, { point: a, series: d });\n      }, bodyFormatter: function bodyFormatter(a) {\n        return f(a, function (a) {\n          var c = a.series.tooltipOptions;return (c.pointFormatter || a.point.tooltipFormatter).call(a.point, c.pointFormat);\n        });\n      } };\n  })(L);(function (a) {\n    var D = a.addEvent,\n        C = a.attr,\n        G = a.charts,\n        I = a.color,\n        h = a.css,\n        f = a.defined,\n        p = a.doc,\n        v = a.each,\n        l = a.extend,\n        u = a.fireEvent,\n        d = a.offset,\n        c = a.pick,\n        n = a.removeEvent,\n        y = a.splat,\n        t = a.Tooltip,\n        m = a.win;a.Pointer = function (a, c) {\n      this.init(a, c);\n    };a.Pointer.prototype = { init: function init(a, m) {\n        this.options = m;this.chart = a;this.runChartClick = m.chart.events && !!m.chart.events.click;this.pinchDown = [];this.lastValidTouch = {};t && m.tooltip.enabled && (a.tooltip = new t(a, m.tooltip), this.followTouchMove = c(m.tooltip.followTouchMove, !0));this.setDOMEvents();\n      }, zoomOption: function zoomOption(a) {\n        var b = this.chart,\n            m = b.options.chart,\n            d = m.zoomType || \"\",\n            b = b.inverted;/touch/.test(a.type) && (d = c(m.pinchType, d));this.zoomX = a = /x/.test(d);this.zoomY = d = /y/.test(d);this.zoomHor = a && !b || d && b;this.zoomVert = d && !b || a && b;this.hasZoom = a || d;\n      }, normalize: function normalize(a, c) {\n        var b, q;a = a || m.event;a.target || (a.target = a.srcElement);q = a.touches ? a.touches.length ? a.touches.item(0) : a.changedTouches[0] : a;c || (this.chartPosition = c = d(this.chart.container));void 0 === q.pageX ? (b = Math.max(a.x, a.clientX - c.left), c = a.y) : (b = q.pageX - c.left, c = q.pageY - c.top);return l(a, { chartX: Math.round(b), chartY: Math.round(c) });\n      }, getCoordinates: function getCoordinates(a) {\n        var b = { xAxis: [], yAxis: [] };v(this.chart.axes, function (c) {\n          b[c.isXAxis ? \"xAxis\" : \"yAxis\"].push({ axis: c, value: c.toValue(a[c.horiz ? \"chartX\" : \"chartY\"]) });\n        });return b;\n      }, runPointActions: function runPointActions(b) {\n        var m = this.chart,\n            d = m.series,\n            f = m.tooltip,\n            e = f ? f.shared : !1,\n            r = !0,\n            n = m.hoverPoint,\n            h = m.hoverSeries,\n            k,\n            w,\n            l,\n            t = [],\n            u;if (!e && !h) for (k = 0; k < d.length; k++) {\n          if (d[k].directTouch || !d[k].options.stickyTracking) d = [];\n        }h && (e ? h.noSharedTooltip : h.directTouch) && n ? t = [n] : (e || !h || h.options.stickyTracking || (d = [h]), v(d, function (a) {\n          w = a.noSharedTooltip && e;l = !e && a.directTouch;a.visible && !w && !l && c(a.options.enableMouseTracking, !0) && (u = a.searchPoint(b, !w && 1 === a.kdDimensions)) && u.series && t.push(u);\n        }), t.sort(function (a, b) {\n          var c = a.distX - b.distX,\n              g = a.dist - b.dist,\n              k = b.series.group.zIndex - a.series.group.zIndex;return 0 !== c && e ? c : 0 !== g ? g : 0 !== k ? k : a.series.index > b.series.index ? -1 : 1;\n        }));if (e) for (k = t.length; k--;) {\n          (t[k].x !== t[0].x || t[k].series.noSharedTooltip) && t.splice(k, 1);\n        }if (t[0] && (t[0] !== this.prevKDPoint || f && f.isHidden)) {\n          if (e && !t[0].series.noSharedTooltip) {\n            for (k = 0; k < t.length; k++) {\n              t[k].onMouseOver(b, t[k] !== (h && h.directTouch && n || t[0]));\n            }t.length && f && f.refresh(t.sort(function (a, b) {\n              return a.series.index - b.series.index;\n            }), b);\n          } else if (f && f.refresh(t[0], b), !h || !h.directTouch) t[0].onMouseOver(b);this.prevKDPoint = t[0];r = !1;\n        }r && (d = h && h.tooltipOptions.followPointer, f && d && !f.isHidden && (d = f.getAnchor([{}], b), f.updatePosition({ plotX: d[0], plotY: d[1] })));this.unDocMouseMove || (this.unDocMouseMove = D(p, \"mousemove\", function (b) {\n          if (G[a.hoverChartIndex]) G[a.hoverChartIndex].pointer.onDocumentMouseMove(b);\n        }));v(e ? t : [c(n, t[0])], function (a) {\n          v(m.axes, function (c) {\n            (!a || a.series && a.series[c.coll] === c) && c.drawCrosshair(b, a);\n          });\n        });\n      }, reset: function reset(a, c) {\n        var b = this.chart,\n            m = b.hoverSeries,\n            e = b.hoverPoint,\n            d = b.hoverPoints,\n            q = b.tooltip,\n            f = q && q.shared ? d : e;a && f && v(y(f), function (b) {\n          b.series.isCartesian && void 0 === b.plotX && (a = !1);\n        });if (a) q && f && (q.refresh(f), e && (e.setState(e.state, !0), v(b.axes, function (a) {\n          a.crosshair && a.drawCrosshair(null, e);\n        })));else {\n          if (e) e.onMouseOut();d && v(d, function (a) {\n            a.setState();\n          });if (m) m.onMouseOut();q && q.hide(c);this.unDocMouseMove && (this.unDocMouseMove = this.unDocMouseMove());v(b.axes, function (a) {\n            a.hideCrosshair();\n          });this.hoverX = this.prevKDPoint = b.hoverPoints = b.hoverPoint = null;\n        }\n      }, scaleGroups: function scaleGroups(a, c) {\n        var b = this.chart,\n            m;v(b.series, function (e) {\n          m = a || e.getPlotBox();e.xAxis && e.xAxis.zoomEnabled && e.group && (e.group.attr(m), e.markerGroup && (e.markerGroup.attr(m), e.markerGroup.clip(c ? b.clipRect : null)), e.dataLabelsGroup && e.dataLabelsGroup.attr(m));\n        });b.clipRect.attr(c || b.clipBox);\n      }, dragStart: function dragStart(a) {\n        var b = this.chart;b.mouseIsDown = a.type;b.cancelClick = !1;b.mouseDownX = this.mouseDownX = a.chartX;b.mouseDownY = this.mouseDownY = a.chartY;\n      }, drag: function drag(a) {\n        var b = this.chart,\n            c = b.options.chart,\n            m = a.chartX,\n            e = a.chartY,\n            d = this.zoomHor,\n            f = this.zoomVert,\n            n = b.plotLeft,\n            k = b.plotTop,\n            w = b.plotWidth,\n            h = b.plotHeight,\n            l,\n            t = this.selectionMarker,\n            g = this.mouseDownX,\n            p = this.mouseDownY,\n            u = c.panKey && a[c.panKey + \"Key\"];t && t.touch || (m < n ? m = n : m > n + w && (m = n + w), e < k ? e = k : e > k + h && (e = k + h), this.hasDragged = Math.sqrt(Math.pow(g - m, 2) + Math.pow(p - e, 2)), 10 < this.hasDragged && (l = b.isInsidePlot(g - n, p - k), b.hasCartesianSeries && (this.zoomX || this.zoomY) && l && !u && !t && (this.selectionMarker = t = b.renderer.rect(n, k, d ? 1 : w, f ? 1 : h, 0).attr({ fill: c.selectionMarkerFill || I(\"#335cad\").setOpacity(.25).get(), \"class\": \"highcharts-selection-marker\", zIndex: 7 }).add()), t && d && (m -= g, t.attr({ width: Math.abs(m), x: (0 < m ? 0 : m) + g })), t && f && (m = e - p, t.attr({ height: Math.abs(m), y: (0 < m ? 0 : m) + p })), l && !t && c.panning && b.pan(a, c.panning)));\n      }, drop: function drop(a) {\n        var b = this,\n            c = this.chart,\n            m = this.hasPinched;if (this.selectionMarker) {\n          var e = { originalEvent: a, xAxis: [], yAxis: [] },\n              d = this.selectionMarker,\n              n = d.attr ? d.attr(\"x\") : d.x,\n              t = d.attr ? d.attr(\"y\") : d.y,\n              k = d.attr ? d.attr(\"width\") : d.width,\n              w = d.attr ? d.attr(\"height\") : d.height,\n              p;if (this.hasDragged || m) v(c.axes, function (c) {\n            if (c.zoomEnabled && f(c.min) && (m || b[{ xAxis: \"zoomX\", yAxis: \"zoomY\" }[c.coll]])) {\n              var d = c.horiz,\n                  g = \"touchend\" === a.type ? c.minPixelPadding : 0,\n                  q = c.toValue((d ? n : t) + g),\n                  d = c.toValue((d ? n + k : t + w) - g);e[c.coll].push({ axis: c, min: Math.min(q, d), max: Math.max(q, d) });p = !0;\n            }\n          }), p && u(c, \"selection\", e, function (a) {\n            c.zoom(l(a, m ? { animation: !1 } : null));\n          });this.selectionMarker = this.selectionMarker.destroy();m && this.scaleGroups();\n        }c && (h(c.container, { cursor: c._cursor }), c.cancelClick = 10 < this.hasDragged, c.mouseIsDown = this.hasDragged = this.hasPinched = !1, this.pinchDown = []);\n      }, onContainerMouseDown: function onContainerMouseDown(a) {\n        a = this.normalize(a);this.zoomOption(a);a.preventDefault && a.preventDefault();this.dragStart(a);\n      },\n      onDocumentMouseUp: function onDocumentMouseUp(b) {\n        G[a.hoverChartIndex] && G[a.hoverChartIndex].pointer.drop(b);\n      }, onDocumentMouseMove: function onDocumentMouseMove(a) {\n        var b = this.chart,\n            c = this.chartPosition;a = this.normalize(a, c);!c || this.inClass(a.target, \"highcharts-tracker\") || b.isInsidePlot(a.chartX - b.plotLeft, a.chartY - b.plotTop) || this.reset();\n      }, onContainerMouseLeave: function onContainerMouseLeave(b) {\n        var c = G[a.hoverChartIndex];c && (b.relatedTarget || b.toElement) && (c.pointer.reset(), c.pointer.chartPosition = null);\n      }, onContainerMouseMove: function onContainerMouseMove(b) {\n        var c = this.chart;f(a.hoverChartIndex) && G[a.hoverChartIndex] && G[a.hoverChartIndex].mouseIsDown || (a.hoverChartIndex = c.index);b = this.normalize(b);b.returnValue = !1;\"mousedown\" === c.mouseIsDown && this.drag(b);!this.inClass(b.target, \"highcharts-tracker\") && !c.isInsidePlot(b.chartX - c.plotLeft, b.chartY - c.plotTop) || c.openMenu || this.runPointActions(b);\n      }, inClass: function inClass(a, c) {\n        for (var b; a;) {\n          if (b = C(a, \"class\")) {\n            if (-1 !== b.indexOf(c)) return !0;if (-1 !== b.indexOf(\"highcharts-container\")) return !1;\n          }a = a.parentNode;\n        }\n      }, onTrackerMouseOut: function onTrackerMouseOut(a) {\n        var b = this.chart.hoverSeries;\n        a = a.relatedTarget || a.toElement;if (!(!b || !a || b.options.stickyTracking || this.inClass(a, \"highcharts-tooltip\") || this.inClass(a, \"highcharts-series-\" + b.index) && this.inClass(a, \"highcharts-tracker\"))) b.onMouseOut();\n      }, onContainerClick: function onContainerClick(a) {\n        var b = this.chart,\n            c = b.hoverPoint,\n            m = b.plotLeft,\n            e = b.plotTop;a = this.normalize(a);b.cancelClick || (c && this.inClass(a.target, \"highcharts-tracker\") ? (u(c.series, \"click\", l(a, { point: c })), b.hoverPoint && c.firePointEvent(\"click\", a)) : (l(a, this.getCoordinates(a)), b.isInsidePlot(a.chartX - m, a.chartY - e) && u(b, \"click\", a)));\n      }, setDOMEvents: function setDOMEvents() {\n        var b = this,\n            c = b.chart.container;c.onmousedown = function (a) {\n          b.onContainerMouseDown(a);\n        };c.onmousemove = function (a) {\n          b.onContainerMouseMove(a);\n        };c.onclick = function (a) {\n          b.onContainerClick(a);\n        };D(c, \"mouseleave\", b.onContainerMouseLeave);1 === a.chartCount && D(p, \"mouseup\", b.onDocumentMouseUp);a.hasTouch && (c.ontouchstart = function (a) {\n          b.onContainerTouchStart(a);\n        }, c.ontouchmove = function (a) {\n          b.onContainerTouchMove(a);\n        }, 1 === a.chartCount && D(p, \"touchend\", b.onDocumentTouchEnd));\n      },\n      destroy: function destroy() {\n        var b;n(this.chart.container, \"mouseleave\", this.onContainerMouseLeave);a.chartCount || (n(p, \"mouseup\", this.onDocumentMouseUp), n(p, \"touchend\", this.onDocumentTouchEnd));clearInterval(this.tooltipTimeout);for (b in this) {\n          this[b] = null;\n        }\n      } };\n  })(L);(function (a) {\n    var D = a.charts,\n        C = a.each,\n        G = a.extend,\n        I = a.map,\n        h = a.noop,\n        f = a.pick;G(a.Pointer.prototype, { pinchTranslate: function pinchTranslate(a, f, h, u, d, c) {\n        this.zoomHor && this.pinchTranslateDirection(!0, a, f, h, u, d, c);this.zoomVert && this.pinchTranslateDirection(!1, a, f, h, u, d, c);\n      }, pinchTranslateDirection: function pinchTranslateDirection(a, f, h, u, d, c, n, y) {\n        var t = this.chart,\n            m = a ? \"x\" : \"y\",\n            b = a ? \"X\" : \"Y\",\n            q = \"chart\" + b,\n            l = a ? \"width\" : \"height\",\n            p = t[\"plot\" + (a ? \"Left\" : \"Top\")],\n            e,\n            r,\n            x = y || 1,\n            A = t.inverted,\n            k = t.bounds[a ? \"h\" : \"v\"],\n            w = 1 === f.length,\n            K = f[0][q],\n            J = h[0][q],\n            v = !w && f[1][q],\n            g = !w && h[1][q],\n            B;h = function h() {\n          !w && 20 < Math.abs(K - v) && (x = y || Math.abs(J - g) / Math.abs(K - v));r = (p - J) / x + K;e = t[\"plot\" + (a ? \"Width\" : \"Height\")] / x;\n        };h();f = r;f < k.min ? (f = k.min, B = !0) : f + e > k.max && (f = k.max - e, B = !0);B ? (J -= .8 * (J - n[m][0]), w || (g -= .8 * (g - n[m][1])), h()) : n[m] = [J, g];A || (c[m] = r - p, c[l] = e);c = A ? 1 / x : x;d[l] = e;d[m] = f;u[A ? a ? \"scaleY\" : \"scaleX\" : \"scale\" + b] = x;u[\"translate\" + b] = c * p + (J - c * K);\n      }, pinch: function pinch(a) {\n        var p = this,\n            l = p.chart,\n            u = p.pinchDown,\n            d = a.touches,\n            c = d.length,\n            n = p.lastValidTouch,\n            y = p.hasZoom,\n            t = p.selectionMarker,\n            m = {},\n            b = 1 === c && (p.inClass(a.target, \"highcharts-tracker\") && l.runTrackerClick || p.runChartClick),\n            q = {};1 < c && (p.initiated = !0);y && p.initiated && !b && a.preventDefault();I(d, function (a) {\n          return p.normalize(a);\n        });\"touchstart\" === a.type ? (C(d, function (a, b) {\n          u[b] = { chartX: a.chartX,\n            chartY: a.chartY };\n        }), n.x = [u[0].chartX, u[1] && u[1].chartX], n.y = [u[0].chartY, u[1] && u[1].chartY], C(l.axes, function (a) {\n          if (a.zoomEnabled) {\n            var b = l.bounds[a.horiz ? \"h\" : \"v\"],\n                c = a.minPixelPadding,\n                m = a.toPixels(f(a.options.min, a.dataMin)),\n                d = a.toPixels(f(a.options.max, a.dataMax)),\n                q = Math.max(m, d);b.min = Math.min(a.pos, Math.min(m, d) - c);b.max = Math.max(a.pos + a.len, q + c);\n          }\n        }), p.res = !0) : p.followTouchMove && 1 === c ? this.runPointActions(p.normalize(a)) : u.length && (t || (p.selectionMarker = t = G({ destroy: h, touch: !0 }, l.plotBox)), p.pinchTranslate(u, d, m, t, q, n), p.hasPinched = y, p.scaleGroups(m, q), p.res && (p.res = !1, this.reset(!1, 0)));\n      }, touch: function touch(h, v) {\n        var l = this.chart,\n            p,\n            d;if (l.index !== a.hoverChartIndex) this.onContainerMouseLeave({ relatedTarget: !0 });a.hoverChartIndex = l.index;1 === h.touches.length ? (h = this.normalize(h), (d = l.isInsidePlot(h.chartX - l.plotLeft, h.chartY - l.plotTop)) && !l.openMenu ? (v && this.runPointActions(h), \"touchmove\" === h.type && (v = this.pinchDown, p = v[0] ? 4 <= Math.sqrt(Math.pow(v[0].chartX - h.chartX, 2) + Math.pow(v[0].chartY - h.chartY, 2)) : !1), f(p, !0) && this.pinch(h)) : v && this.reset()) : 2 === h.touches.length && this.pinch(h);\n      }, onContainerTouchStart: function onContainerTouchStart(a) {\n        this.zoomOption(a);this.touch(a, !0);\n      }, onContainerTouchMove: function onContainerTouchMove(a) {\n        this.touch(a);\n      }, onDocumentTouchEnd: function onDocumentTouchEnd(f) {\n        D[a.hoverChartIndex] && D[a.hoverChartIndex].pointer.drop(f);\n      } });\n  })(L);(function (a) {\n    var D = a.addEvent,\n        C = a.charts,\n        G = a.css,\n        I = a.doc,\n        h = a.extend,\n        f = a.noop,\n        p = a.Pointer,\n        v = a.removeEvent,\n        l = a.win,\n        u = a.wrap;if (l.PointerEvent || l.MSPointerEvent) {\n      var d = {},\n          c = !!l.PointerEvent,\n          n = function n() {\n        var a,\n            c = [];\n        c.item = function (a) {\n          return this[a];\n        };for (a in d) {\n          d.hasOwnProperty(a) && c.push({ pageX: d[a].pageX, pageY: d[a].pageY, target: d[a].target });\n        }return c;\n      },\n          y = function y(c, m, b, d) {\n        \"touch\" !== c.pointerType && c.pointerType !== c.MSPOINTER_TYPE_TOUCH || !C[a.hoverChartIndex] || (d(c), d = C[a.hoverChartIndex].pointer, d[m]({ type: b, target: c.currentTarget, preventDefault: f, touches: n() }));\n      };h(p.prototype, { onContainerPointerDown: function onContainerPointerDown(a) {\n          y(a, \"onContainerTouchStart\", \"touchstart\", function (a) {\n            d[a.pointerId] = { pageX: a.pageX, pageY: a.pageY,\n              target: a.currentTarget };\n          });\n        }, onContainerPointerMove: function onContainerPointerMove(a) {\n          y(a, \"onContainerTouchMove\", \"touchmove\", function (a) {\n            d[a.pointerId] = { pageX: a.pageX, pageY: a.pageY };d[a.pointerId].target || (d[a.pointerId].target = a.currentTarget);\n          });\n        }, onDocumentPointerUp: function onDocumentPointerUp(a) {\n          y(a, \"onDocumentTouchEnd\", \"touchend\", function (a) {\n            delete d[a.pointerId];\n          });\n        }, batchMSEvents: function batchMSEvents(a) {\n          a(this.chart.container, c ? \"pointerdown\" : \"MSPointerDown\", this.onContainerPointerDown);a(this.chart.container, c ? \"pointermove\" : \"MSPointerMove\", this.onContainerPointerMove);\n          a(I, c ? \"pointerup\" : \"MSPointerUp\", this.onDocumentPointerUp);\n        } });u(p.prototype, \"init\", function (a, c, b) {\n        a.call(this, c, b);this.hasZoom && G(c.container, { \"-ms-touch-action\": \"none\", \"touch-action\": \"none\" });\n      });u(p.prototype, \"setDOMEvents\", function (a) {\n        a.apply(this);(this.hasZoom || this.followTouchMove) && this.batchMSEvents(D);\n      });u(p.prototype, \"destroy\", function (a) {\n        this.batchMSEvents(v);a.call(this);\n      });\n    }\n  })(L);(function (a) {\n    var D,\n        C = a.addEvent,\n        G = a.css,\n        I = a.discardElement,\n        h = a.defined,\n        f = a.each,\n        p = a.extend,\n        v = a.isFirefox,\n        l = a.marginNames,\n        u = a.merge,\n        d = a.pick,\n        c = a.setAnimation,\n        n = a.stableSort,\n        y = a.win,\n        t = a.wrap;D = a.Legend = function (a, b) {\n      this.init(a, b);\n    };D.prototype = { init: function init(a, b) {\n        this.chart = a;this.setOptions(b);b.enabled && (this.render(), C(this.chart, \"endResize\", function () {\n          this.legend.positionCheckboxes();\n        }));\n      }, setOptions: function setOptions(a) {\n        var b = d(a.padding, 8);this.options = a;this.itemStyle = a.itemStyle;this.itemHiddenStyle = u(this.itemStyle, a.itemHiddenStyle);this.itemMarginTop = a.itemMarginTop || 0;this.initialItemX = this.padding = b;this.initialItemY = b - 5;this.itemHeight = this.maxItemWidth = 0;this.symbolWidth = d(a.symbolWidth, 16);this.pages = [];\n      }, update: function update(a, b) {\n        var c = this.chart;this.setOptions(u(!0, this.options, a));this.destroy();c.isDirtyLegend = c.isDirtyBox = !0;d(b, !0) && c.redraw();\n      }, colorizeItem: function colorizeItem(a, b) {\n        a.legendGroup[b ? \"removeClass\" : \"addClass\"](\"highcharts-legend-item-hidden\");var c = this.options,\n            d = a.legendItem,\n            m = a.legendLine,\n            e = a.legendSymbol,\n            f = this.itemHiddenStyle.color,\n            c = b ? c.itemStyle.color : f,\n            h = b ? a.color || f : f,\n            n = a.options && a.options.marker,\n            k = { fill: h },\n            w;d && d.css({ fill: c, color: c });m && m.attr({ stroke: h });if (e) {\n          if (n && e.isMarker && (k = a.pointAttribs(), !b)) for (w in k) {\n            k[w] = f;\n          }e.attr(k);\n        }\n      }, positionItem: function positionItem(a) {\n        var b = this.options,\n            c = b.symbolPadding,\n            b = !b.rtl,\n            d = a._legendItemPos,\n            m = d[0],\n            d = d[1],\n            e = a.checkbox;(a = a.legendGroup) && a.element && a.translate(b ? m : this.legendWidth - m - 2 * c - 4, d);e && (e.x = m, e.y = d);\n      }, destroyItem: function destroyItem(a) {\n        var b = a.checkbox;f([\"legendItem\", \"legendLine\", \"legendSymbol\", \"legendGroup\"], function (b) {\n          a[b] && (a[b] = a[b].destroy());\n        });b && I(a.checkbox);\n      },\n      destroy: function destroy() {\n        function a(a) {\n          this[a] && (this[a] = this[a].destroy());\n        }f(this.getAllItems(), function (b) {\n          f([\"legendItem\", \"legendGroup\"], a, b);\n        });f([\"box\", \"title\", \"group\"], a, this);this.display = null;\n      }, positionCheckboxes: function positionCheckboxes(a) {\n        var b = this.group && this.group.alignAttr,\n            c,\n            d = this.clipHeight || this.legendHeight,\n            m = this.titleHeight;b && (c = b.translateY, f(this.allItems, function (e) {\n          var f = e.checkbox,\n              h;f && (h = c + m + f.y + (a || 0) + 3, G(f, { left: b.translateX + e.checkboxOffset + f.x - 20 + \"px\", top: h + \"px\", display: h > c - 6 && h < c + d - 6 ? \"\" : \"none\" }));\n        }));\n      },\n      renderTitle: function renderTitle() {\n        var a = this.padding,\n            b = this.options.title,\n            c = 0;b.text && (this.title || (this.title = this.chart.renderer.label(b.text, a - 3, a - 4, null, null, null, null, null, \"legend-title\").attr({ zIndex: 1 }).css(b.style).add(this.group)), a = this.title.getBBox(), c = a.height, this.offsetWidth = a.width, this.contentGroup.attr({ translateY: c }));this.titleHeight = c;\n      }, setText: function setText(c) {\n        var b = this.options;c.legendItem.attr({ text: b.labelFormat ? a.format(b.labelFormat, c) : b.labelFormatter.call(c) });\n      }, renderItem: function renderItem(a) {\n        var b = this.chart,\n            c = b.renderer,\n            m = this.options,\n            f = \"horizontal\" === m.layout,\n            e = this.symbolWidth,\n            h = m.symbolPadding,\n            n = this.itemStyle,\n            l = this.itemHiddenStyle,\n            k = this.padding,\n            w = f ? d(m.itemDistance, 20) : 0,\n            t = !m.rtl,\n            p = m.width,\n            y = m.itemMarginBottom || 0,\n            g = this.itemMarginTop,\n            B = this.initialItemX,\n            v = a.legendItem,\n            M = !a.series,\n            C = !M && a.series.drawLegendSymbol ? a.series : a,\n            E = C.options,\n            E = this.createCheckboxForItem && E && E.showCheckbox,\n            H = m.useHTML;v || (a.legendGroup = c.g(\"legend-item\").addClass(\"highcharts-\" + C.type + \"-series highcharts-color-\" + a.colorIndex + (a.options.className ? \" \" + a.options.className : \"\") + (M ? \" highcharts-series-\" + a.index : \"\")).attr({ zIndex: 1 }).add(this.scrollGroup), a.legendItem = v = c.text(\"\", t ? e + h : -h, this.baseline || 0, H).css(u(a.visible ? n : l)).attr({ align: t ? \"left\" : \"right\", zIndex: 2 }).add(a.legendGroup), this.baseline || (n = n.fontSize, this.fontMetrics = c.fontMetrics(n, v), this.baseline = this.fontMetrics.f + 3 + g, v.attr(\"y\", this.baseline)), C.drawLegendSymbol(this, a), this.setItemEvents && this.setItemEvents(a, v, H), E && this.createCheckboxForItem(a));\n        this.colorizeItem(a, a.visible);this.setText(a);c = v.getBBox();e = a.checkboxOffset = m.itemWidth || a.legendItemWidth || e + h + c.width + w + (E ? 20 : 0);this.itemHeight = h = Math.round(a.legendItemHeight || c.height);f && this.itemX - B + e > (p || b.chartWidth - 2 * k - B - m.x) && (this.itemX = B, this.itemY += g + this.lastLineHeight + y, this.lastLineHeight = 0);this.maxItemWidth = Math.max(this.maxItemWidth, e);this.lastItemY = g + this.itemY + y;this.lastLineHeight = Math.max(h, this.lastLineHeight);a._legendItemPos = [this.itemX, this.itemY];f ? this.itemX += e : (this.itemY += g + h + y, this.lastLineHeight = h);this.offsetWidth = p || Math.max((f ? this.itemX - B - w : e) + k, this.offsetWidth);\n      }, getAllItems: function getAllItems() {\n        var a = [];f(this.chart.series, function (b) {\n          var c = b && b.options;b && d(c.showInLegend, h(c.linkedTo) ? !1 : void 0, !0) && (a = a.concat(b.legendItems || (\"point\" === c.legendType ? b.data : b)));\n        });return a;\n      }, adjustMargins: function adjustMargins(a, b) {\n        var c = this.chart,\n            m = this.options,\n            n = m.align.charAt(0) + m.verticalAlign.charAt(0) + m.layout.charAt(0);m.floating || f([/(lth|ct|rth)/, /(rtv|rm|rbv)/, /(rbh|cb|lbh)/, /(lbv|lm|ltv)/], function (e, f) {\n          e.test(n) && !h(a[f]) && (c[l[f]] = Math.max(c[l[f]], c.legend[(f + 1) % 2 ? \"legendHeight\" : \"legendWidth\"] + [1, -1, -1, 1][f] * m[f % 2 ? \"x\" : \"y\"] + d(m.margin, 12) + b[f]));\n        });\n      }, render: function render() {\n        var a = this,\n            b = a.chart,\n            c = b.renderer,\n            d = a.group,\n            h,\n            e,\n            r,\n            l,\n            t = a.box,\n            k = a.options,\n            w = a.padding;a.itemX = a.initialItemX;a.itemY = a.initialItemY;a.offsetWidth = 0;a.lastItemY = 0;d || (a.group = d = c.g(\"legend\").attr({ zIndex: 7 }).add(), a.contentGroup = c.g().attr({ zIndex: 1 }).add(d), a.scrollGroup = c.g().add(a.contentGroup));a.renderTitle();\n        h = a.getAllItems();n(h, function (a, b) {\n          return (a.options && a.options.legendIndex || 0) - (b.options && b.options.legendIndex || 0);\n        });k.reversed && h.reverse();a.allItems = h;a.display = e = !!h.length;a.lastLineHeight = 0;f(h, function (b) {\n          a.renderItem(b);\n        });r = (k.width || a.offsetWidth) + w;l = a.lastItemY + a.lastLineHeight + a.titleHeight;l = a.handleOverflow(l);l += w;t || (a.box = t = c.rect().addClass(\"highcharts-legend-box\").attr({ r: k.borderRadius }).add(d), t.isNew = !0);t.attr({ stroke: k.borderColor, \"stroke-width\": k.borderWidth || 0, fill: k.backgroundColor || \"none\" }).shadow(k.shadow);0 < r && 0 < l && (t[t.isNew ? \"attr\" : \"animate\"](t.crisp({ x: 0, y: 0, width: r, height: l }, t.strokeWidth())), t.isNew = !1);t[e ? \"show\" : \"hide\"]();a.legendWidth = r;a.legendHeight = l;f(h, function (b) {\n          a.positionItem(b);\n        });e && d.align(p({ width: r, height: l }, k), !0, \"spacingBox\");b.isResizing || this.positionCheckboxes();\n      }, handleOverflow: function handleOverflow(a) {\n        var b = this,\n            c = this.chart,\n            m = c.renderer,\n            h = this.options,\n            e = h.y,\n            c = c.spacingBox.height + (\"top\" === h.verticalAlign ? -e : e) - this.padding,\n            e = h.maxHeight,\n            n,\n            l = this.clipRect,\n            t = h.navigation,\n            k = d(t.animation, !0),\n            w = t.arrowSize || 12,\n            p = this.nav,\n            u = this.pages,\n            y = this.padding,\n            g,\n            B = this.allItems,\n            v = function v(a) {\n          a ? l.attr({ height: a }) : l && (b.clipRect = l.destroy(), b.contentGroup.clip());b.contentGroup.div && (b.contentGroup.div.style.clip = a ? \"rect(\" + y + \"px,9999px,\" + (y + a) + \"px,0)\" : \"auto\");\n        };\"horizontal\" !== h.layout || \"middle\" === h.verticalAlign || h.floating || (c /= 2);e && (c = Math.min(c, e));u.length = 0;a > c && !1 !== t.enabled ? (this.clipHeight = n = Math.max(c - 20 - this.titleHeight - y, 0), this.currentPage = d(this.currentPage, 1), this.fullHeight = a, f(B, function (a, b) {\n          var c = a._legendItemPos[1];a = Math.round(a.legendItem.getBBox().height);var k = u.length;if (!k || c - u[k - 1] > n && (g || c) !== u[k - 1]) u.push(g || c), k++;b === B.length - 1 && c + a - u[k - 1] > n && u.push(c);c !== g && (g = c);\n        }), l || (l = b.clipRect = m.clipRect(0, y, 9999, 0), b.contentGroup.clip(l)), v(n), p || (this.nav = p = m.g().attr({ zIndex: 1 }).add(this.group), this.up = m.symbol(\"triangle\", 0, 0, w, w).on(\"click\", function () {\n          b.scroll(-1, k);\n        }).add(p), this.pager = m.text(\"\", 15, 10).addClass(\"highcharts-legend-navigation\").css(t.style).add(p), this.down = m.symbol(\"triangle-down\", 0, 0, w, w).on(\"click\", function () {\n          b.scroll(1, k);\n        }).add(p)), b.scroll(0), a = c) : p && (v(), p.hide(), this.scrollGroup.attr({ translateY: 1 }), this.clipHeight = 0);return a;\n      }, scroll: function scroll(a, b) {\n        var d = this.pages,\n            f = d.length;a = this.currentPage + a;var m = this.clipHeight,\n            e = this.options.navigation,\n            h = this.pager,\n            n = this.padding;a > f && (a = f);0 < a && (void 0 !== b && c(b, this.chart), this.nav.attr({ translateX: n, translateY: m + this.padding + 7 + this.titleHeight, visibility: \"visible\" }), this.up.attr({ \"class\": 1 === a ? \"highcharts-legend-nav-inactive\" : \"highcharts-legend-nav-active\" }), h.attr({ text: a + \"/\" + f }), this.down.attr({ x: 18 + this.pager.getBBox().width, \"class\": a === f ? \"highcharts-legend-nav-inactive\" : \"highcharts-legend-nav-active\" }), this.up.attr({ fill: 1 === a ? e.inactiveColor : e.activeColor }).css({ cursor: 1 === a ? \"default\" : \"pointer\" }), this.down.attr({ fill: a === f ? e.inactiveColor : e.activeColor }).css({ cursor: a === f ? \"default\" : \"pointer\" }), b = -d[a - 1] + this.initialItemY, this.scrollGroup.animate({ translateY: b }), this.currentPage = a, this.positionCheckboxes(b));\n      } };a.LegendSymbolMixin = { drawRectangle: function drawRectangle(a, b) {\n        var c = a.options,\n            f = c.symbolHeight || a.fontMetrics.f,\n            c = c.squareSymbol;b.legendSymbol = this.chart.renderer.rect(c ? (a.symbolWidth - f) / 2 : 0, a.baseline - f + 1, c ? f : a.symbolWidth, f, d(a.options.symbolRadius, f / 2)).addClass(\"highcharts-point\").attr({ zIndex: 3 }).add(b.legendGroup);\n      }, drawLineMarker: function drawLineMarker(a) {\n        var b = this.options,\n            c = b.marker,\n            d = a.symbolWidth,\n            f = this.chart.renderer,\n            e = this.legendGroup;a = a.baseline - Math.round(.3 * a.fontMetrics.b);\n        var m;m = { \"stroke-width\": b.lineWidth || 0 };b.dashStyle && (m.dashstyle = b.dashStyle);this.legendLine = f.path([\"M\", 0, a, \"L\", d, a]).addClass(\"highcharts-graph\").attr(m).add(e);c && !1 !== c.enabled && (b = 0 === this.symbol.indexOf(\"url\") ? 0 : c.radius, this.legendSymbol = c = f.symbol(this.symbol, d / 2 - b, a - b, 2 * b, 2 * b, c).addClass(\"highcharts-point\").add(e), c.isMarker = !0);\n      } };(/Trident\\/7\\.0/.test(y.navigator.userAgent) || v) && t(D.prototype, \"positionItem\", function (a, b) {\n      var c = this,\n          d = function d() {\n        b._legendItemPos && a.call(c, b);\n      };d();setTimeout(d);\n    });\n  })(L);\n  (function (a) {\n    var D = a.addEvent,\n        C = a.animate,\n        G = a.animObject,\n        I = a.attr,\n        h = a.doc,\n        f = a.Axis,\n        p = a.createElement,\n        v = a.defaultOptions,\n        l = a.discardElement,\n        u = a.charts,\n        d = a.css,\n        c = a.defined,\n        n = a.each,\n        y = a.extend,\n        t = a.find,\n        m = a.fireEvent,\n        b = a.getStyle,\n        q = a.grep,\n        z = a.isNumber,\n        F = a.isObject,\n        e = a.isString,\n        r = a.Legend,\n        x = a.marginNames,\n        A = a.merge,\n        k = a.Pointer,\n        w = a.pick,\n        K = a.pInt,\n        J = a.removeEvent,\n        N = a.seriesTypes,\n        g = a.splat,\n        B = a.svg,\n        S = a.syncTimeout,\n        M = a.win,\n        R = a.Renderer,\n        E = a.Chart = function () {\n      this.getArgs.apply(this, arguments);\n    };a.chart = function (a, b, c) {\n      return new E(a, b, c);\n    };E.prototype = { callbacks: [], getArgs: function getArgs() {\n        var a = [].slice.call(arguments);if (e(a[0]) || a[0].nodeName) this.renderTo = a.shift();this.init(a[0], a[1]);\n      }, init: function init(b, c) {\n        var k,\n            g = b.series;b.series = null;k = A(v, b);k.series = b.series = g;this.userOptions = b;this.respRules = [];b = k.chart;g = b.events;this.margin = [];this.spacing = [];this.bounds = { h: {}, v: {} };this.callback = c;this.isResizing = 0;this.options = k;this.axes = [];this.series = [];this.hasCartesianSeries = b.showAxes;var e;this.index = u.length;\n        u.push(this);a.chartCount++;if (g) for (e in g) {\n          D(this, e, g[e]);\n        }this.xAxis = [];this.yAxis = [];this.pointCount = this.colorCounter = this.symbolCounter = 0;this.firstRender();\n      }, initSeries: function initSeries(b) {\n        var c = this.options.chart;(c = N[b.type || c.type || c.defaultSeriesType]) || a.error(17, !0);c = new c();c.init(this, b);return c;\n      }, isInsidePlot: function isInsidePlot(a, b, c) {\n        var k = c ? b : a;a = c ? a : b;return 0 <= k && k <= this.plotWidth && 0 <= a && a <= this.plotHeight;\n      }, redraw: function redraw(b) {\n        var c = this.axes,\n            k = this.series,\n            g = this.pointer,\n            e = this.legend,\n            d = this.isDirtyLegend,\n            f,\n            h,\n            w = this.hasCartesianSeries,\n            r = this.isDirtyBox,\n            l = k.length,\n            q = l,\n            t = this.renderer,\n            p = t.isHidden(),\n            H = [];a.setAnimation(b, this);p && this.cloneRenderTo();for (this.layOutTitles(); q--;) {\n          if (b = k[q], b.options.stacking && (f = !0, b.isDirty)) {\n            h = !0;break;\n          }\n        }if (h) for (q = l; q--;) {\n          b = k[q], b.options.stacking && (b.isDirty = !0);\n        }n(k, function (a) {\n          a.isDirty && \"point\" === a.options.legendType && (a.updateTotals && a.updateTotals(), d = !0);a.isDirtyData && m(a, \"updatedData\");\n        });d && e.options.enabled && (e.render(), this.isDirtyLegend = !1);f && this.getStacks();\n        w && n(c, function (a) {\n          a.updateNames();a.setScale();\n        });this.getMargins();w && (n(c, function (a) {\n          a.isDirty && (r = !0);\n        }), n(c, function (a) {\n          var b = a.min + \",\" + a.max;a.extKey !== b && (a.extKey = b, H.push(function () {\n            m(a, \"afterSetExtremes\", y(a.eventArgs, a.getExtremes()));delete a.eventArgs;\n          }));(r || f) && a.redraw();\n        }));r && this.drawChartBox();n(k, function (a) {\n          (r || a.isDirty) && a.visible && a.redraw();\n        });g && g.reset(!0);t.draw();m(this, \"redraw\");p && this.cloneRenderTo(!0);n(H, function (a) {\n          a.call();\n        });\n      }, get: function get(a) {\n        function b(b) {\n          return b.id === a || b.options.id === a;\n        }var c,\n            k = this.series,\n            g;c = t(this.axes, b) || t(this.series, b);for (g = 0; !c && g < k.length; g++) {\n          c = t(k[g].points || [], b);\n        }return c;\n      }, getAxes: function getAxes() {\n        var a = this,\n            b = this.options,\n            c = b.xAxis = g(b.xAxis || {}),\n            b = b.yAxis = g(b.yAxis || {});n(c, function (a, b) {\n          a.index = b;a.isX = !0;\n        });n(b, function (a, b) {\n          a.index = b;\n        });c = c.concat(b);n(c, function (b) {\n          new f(a, b);\n        });\n      }, getSelectedPoints: function getSelectedPoints() {\n        var a = [];n(this.series, function (b) {\n          a = a.concat(q(b.points || [], function (a) {\n            return a.selected;\n          }));\n        });return a;\n      }, getSelectedSeries: function getSelectedSeries() {\n        return q(this.series, function (a) {\n          return a.selected;\n        });\n      }, setTitle: function setTitle(a, b, c) {\n        var k = this,\n            g = k.options,\n            e;e = g.title = A({ style: { color: \"#333333\", fontSize: g.isStock ? \"16px\" : \"18px\" } }, g.title, a);g = g.subtitle = A({ style: { color: \"#666666\" } }, g.subtitle, b);n([[\"title\", a, e], [\"subtitle\", b, g]], function (a, b) {\n          var c = a[0],\n              g = k[c],\n              e = a[1];a = a[2];g && e && (k[c] = g = g.destroy());a && a.text && !g && (k[c] = k.renderer.text(a.text, 0, 0, a.useHTML).attr({ align: a.align, \"class\": \"highcharts-\" + c, zIndex: a.zIndex || 4 }).add(), k[c].update = function (a) {\n            k.setTitle(!b && a, b && a);\n          }, k[c].css(a.style));\n        });k.layOutTitles(c);\n      }, layOutTitles: function layOutTitles(a) {\n        var b = 0,\n            c,\n            k = this.renderer,\n            g = this.spacingBox;n([\"title\", \"subtitle\"], function (a) {\n          var c = this[a],\n              e = this.options[a],\n              d;c && (d = e.style.fontSize, d = k.fontMetrics(d, c).b, c.css({ width: (e.width || g.width + e.widthAdjust) + \"px\" }).align(y({ y: b + d + (\"title\" === a ? -3 : 2) }, e), !1, \"spacingBox\"), e.floating || e.verticalAlign || (b = Math.ceil(b + c.getBBox().height)));\n        }, this);c = this.titleOffset !== b;this.titleOffset = b;!this.isDirtyBox && c && (this.isDirtyBox = c, this.hasRendered && w(a, !0) && this.isDirtyBox && this.redraw());\n      }, getChartSize: function getChartSize() {\n        var a = this.options.chart,\n            k = a.width,\n            a = a.height,\n            g = this.renderToClone || this.renderTo;c(k) || (this.containerWidth = b(g, \"width\"));c(a) || (this.containerHeight = b(g, \"height\"));this.chartWidth = Math.max(0, k || this.containerWidth || 600);this.chartHeight = Math.max(0, w(a, 19 < this.containerHeight ? this.containerHeight : 400));\n      }, cloneRenderTo: function cloneRenderTo(a) {\n        var b = this.renderToClone,\n            c = this.container;if (a) {\n          if (b) {\n            for (; b.childNodes.length;) {\n              this.renderTo.appendChild(b.firstChild);\n            }l(b);delete this.renderToClone;\n          }\n        } else c && c.parentNode === this.renderTo && this.renderTo.removeChild(c), this.renderToClone = b = this.renderTo.cloneNode(0), d(b, { position: \"absolute\", top: \"-9999px\", display: \"block\" }), b.style.setProperty && b.style.setProperty(\"display\", \"block\", \"important\"), h.body.appendChild(b), c && b.appendChild(c);\n      }, setClassName: function setClassName(a) {\n        this.container.className = \"highcharts-container \" + (a || \"\");\n      }, getContainer: function getContainer() {\n        var b,\n            c = this.options,\n            k = c.chart,\n            g,\n            d;b = this.renderTo;var f = a.uniqueKey(),\n            m;b || (this.renderTo = b = k.renderTo);e(b) && (this.renderTo = b = h.getElementById(b));b || a.error(13, !0);g = K(I(b, \"data-highcharts-chart\"));z(g) && u[g] && u[g].hasRendered && u[g].destroy();I(b, \"data-highcharts-chart\", this.index);b.innerHTML = \"\";k.skipClone || b.offsetWidth || this.cloneRenderTo();this.getChartSize();g = this.chartWidth;d = this.chartHeight;m = y({ position: \"relative\", overflow: \"hidden\", width: g + \"px\", height: d + \"px\", textAlign: \"left\", lineHeight: \"normal\", zIndex: 0, \"-webkit-tap-highlight-color\": \"rgba(0,0,0,0)\" }, k.style);\n        this.container = b = p(\"div\", { id: f }, m, this.renderToClone || b);this._cursor = b.style.cursor;this.renderer = new (a[k.renderer] || R)(b, g, d, null, k.forExport, c.exporting && c.exporting.allowHTML);this.setClassName(k.className);this.renderer.setStyle(k.style);this.renderer.chartIndex = this.index;\n      }, getMargins: function getMargins(a) {\n        var b = this.spacing,\n            k = this.margin,\n            g = this.titleOffset;this.resetMargins();g && !c(k[0]) && (this.plotTop = Math.max(this.plotTop, g + this.options.title.margin + b[0]));this.legend.display && this.legend.adjustMargins(k, b);this.extraBottomMargin && (this.marginBottom += this.extraBottomMargin);this.extraTopMargin && (this.plotTop += this.extraTopMargin);a || this.getAxisMargins();\n      }, getAxisMargins: function getAxisMargins() {\n        var a = this,\n            b = a.axisOffset = [0, 0, 0, 0],\n            k = a.margin;a.hasCartesianSeries && n(a.axes, function (a) {\n          a.visible && a.getOffset();\n        });n(x, function (g, e) {\n          c(k[e]) || (a[g] += b[e]);\n        });a.setChartSize();\n      }, reflow: function reflow(a) {\n        var k = this,\n            g = k.options.chart,\n            e = k.renderTo,\n            d = c(g.width),\n            f = g.width || b(e, \"width\"),\n            g = g.height || b(e, \"height\"),\n            e = a ? a.target : M;if (!d && !k.isPrinting && f && g && (e === M || e === h)) {\n          if (f !== k.containerWidth || g !== k.containerHeight) clearTimeout(k.reflowTimeout), k.reflowTimeout = S(function () {\n            k.container && k.setSize(void 0, void 0, !1);\n          }, a ? 100 : 0);k.containerWidth = f;k.containerHeight = g;\n        }\n      }, initReflow: function initReflow() {\n        var a = this,\n            b;b = D(M, \"resize\", function (b) {\n          a.reflow(b);\n        });D(a, \"destroy\", b);\n      }, setSize: function setSize(b, c, k) {\n        var g = this,\n            e = g.renderer;g.isResizing += 1;a.setAnimation(k, g);g.oldChartHeight = g.chartHeight;g.oldChartWidth = g.chartWidth;void 0 !== b && (g.options.chart.width = b);void 0 !== c && (g.options.chart.height = c);g.getChartSize();b = e.globalAnimation;(b ? C : d)(g.container, { width: g.chartWidth + \"px\", height: g.chartHeight + \"px\" }, b);g.setChartSize(!0);e.setSize(g.chartWidth, g.chartHeight, k);n(g.axes, function (a) {\n          a.isDirty = !0;a.setScale();\n        });g.isDirtyLegend = !0;g.isDirtyBox = !0;g.layOutTitles();g.getMargins();g.setResponsive && g.setResponsive(!1);g.redraw(k);g.oldChartHeight = null;m(g, \"resize\");S(function () {\n          g && m(g, \"endResize\", null, function () {\n            --g.isResizing;\n          });\n        }, G(b).duration);\n      }, setChartSize: function setChartSize(a) {\n        var b = this.inverted,\n            c = this.renderer,\n            g = this.chartWidth,\n            k = this.chartHeight,\n            e = this.options.chart,\n            d = this.spacing,\n            f = this.clipOffset,\n            m,\n            h,\n            w,\n            r;this.plotLeft = m = Math.round(this.plotLeft);this.plotTop = h = Math.round(this.plotTop);this.plotWidth = w = Math.max(0, Math.round(g - m - this.marginRight));this.plotHeight = r = Math.max(0, Math.round(k - h - this.marginBottom));this.plotSizeX = b ? r : w;this.plotSizeY = b ? w : r;this.plotBorderWidth = e.plotBorderWidth || 0;this.spacingBox = c.spacingBox = { x: d[3], y: d[0], width: g - d[3] - d[1], height: k - d[0] - d[2] };\n        this.plotBox = c.plotBox = { x: m, y: h, width: w, height: r };g = 2 * Math.floor(this.plotBorderWidth / 2);b = Math.ceil(Math.max(g, f[3]) / 2);c = Math.ceil(Math.max(g, f[0]) / 2);this.clipBox = { x: b, y: c, width: Math.floor(this.plotSizeX - Math.max(g, f[1]) / 2 - b), height: Math.max(0, Math.floor(this.plotSizeY - Math.max(g, f[2]) / 2 - c)) };a || n(this.axes, function (a) {\n          a.setAxisSize();a.setAxisTranslation();\n        });\n      }, resetMargins: function resetMargins() {\n        var a = this,\n            b = a.options.chart;n([\"margin\", \"spacing\"], function (c) {\n          var g = b[c],\n              k = F(g) ? g : [g, g, g, g];n([\"Top\", \"Right\", \"Bottom\", \"Left\"], function (g, e) {\n            a[c][e] = w(b[c + g], k[e]);\n          });\n        });n(x, function (b, c) {\n          a[b] = w(a.margin[c], a.spacing[c]);\n        });a.axisOffset = [0, 0, 0, 0];a.clipOffset = [0, 0, 0, 0];\n      }, drawChartBox: function drawChartBox() {\n        var a = this.options.chart,\n            b = this.renderer,\n            c = this.chartWidth,\n            g = this.chartHeight,\n            k = this.chartBackground,\n            e = this.plotBackground,\n            d = this.plotBorder,\n            f,\n            m = this.plotBGImage,\n            h = a.backgroundColor,\n            w = a.plotBackgroundColor,\n            n = a.plotBackgroundImage,\n            r,\n            l = this.plotLeft,\n            q = this.plotTop,\n            t = this.plotWidth,\n            p = this.plotHeight,\n            x = this.plotBox,\n            K = this.clipRect,\n            u = this.clipBox,\n            A = \"animate\";k || (this.chartBackground = k = b.rect().addClass(\"highcharts-background\").add(), A = \"attr\");f = a.borderWidth || 0;r = f + (a.shadow ? 8 : 0);h = { fill: h || \"none\" };if (f || k[\"stroke-width\"]) h.stroke = a.borderColor, h[\"stroke-width\"] = f;k.attr(h).shadow(a.shadow);k[A]({ x: r / 2, y: r / 2, width: c - r - f % 2, height: g - r - f % 2, r: a.borderRadius });A = \"animate\";e || (A = \"attr\", this.plotBackground = e = b.rect().addClass(\"highcharts-plot-background\").add());e[A](x);e.attr({ fill: w || \"none\" }).shadow(a.plotShadow);n && (m ? m.animate(x) : this.plotBGImage = b.image(n, l, q, t, p).add());K ? K.animate({ width: u.width, height: u.height }) : this.clipRect = b.clipRect(u);A = \"animate\";d || (A = \"attr\", this.plotBorder = d = b.rect().addClass(\"highcharts-plot-border\").attr({ zIndex: 1 }).add());d.attr({ stroke: a.plotBorderColor, \"stroke-width\": a.plotBorderWidth || 0, fill: \"none\" });d[A](d.crisp({ x: l, y: q, width: t, height: p }, -d.strokeWidth()));this.isDirtyBox = !1;\n      }, propFromSeries: function propFromSeries() {\n        var a = this,\n            b = a.options.chart,\n            c,\n            g = a.options.series,\n            k,\n            e;n([\"inverted\", \"angular\", \"polar\"], function (d) {\n          c = N[b.type || b.defaultSeriesType];e = b[d] || c && c.prototype[d];for (k = g && g.length; !e && k--;) {\n            (c = N[g[k].type]) && c.prototype[d] && (e = !0);\n          }a[d] = e;\n        });\n      }, linkSeries: function linkSeries() {\n        var a = this,\n            b = a.series;n(b, function (a) {\n          a.linkedSeries.length = 0;\n        });n(b, function (b) {\n          var c = b.options.linkedTo;e(c) && (c = \":previous\" === c ? a.series[b.index - 1] : a.get(c)) && c.linkedParent !== b && (c.linkedSeries.push(b), b.linkedParent = c, b.visible = w(b.options.visible, c.options.visible, b.visible));\n        });\n      }, renderSeries: function renderSeries() {\n        n(this.series, function (a) {\n          a.translate();\n          a.render();\n        });\n      }, renderLabels: function renderLabels() {\n        var a = this,\n            b = a.options.labels;b.items && n(b.items, function (c) {\n          var g = y(b.style, c.style),\n              k = K(g.left) + a.plotLeft,\n              e = K(g.top) + a.plotTop + 12;delete g.left;delete g.top;a.renderer.text(c.html, k, e).attr({ zIndex: 2 }).css(g).add();\n        });\n      }, render: function render() {\n        var a = this.axes,\n            b = this.renderer,\n            c = this.options,\n            g,\n            k,\n            e;this.setTitle();this.legend = new r(this, c.legend);this.getStacks && this.getStacks();this.getMargins(!0);this.setChartSize();c = this.plotWidth;g = this.plotHeight -= 21;n(a, function (a) {\n          a.setScale();\n        });\n        this.getAxisMargins();k = 1.1 < c / this.plotWidth;e = 1.05 < g / this.plotHeight;if (k || e) n(a, function (a) {\n          (a.horiz && k || !a.horiz && e) && a.setTickInterval(!0);\n        }), this.getMargins();this.drawChartBox();this.hasCartesianSeries && n(a, function (a) {\n          a.visible && a.render();\n        });this.seriesGroup || (this.seriesGroup = b.g(\"series-group\").attr({ zIndex: 3 }).add());this.renderSeries();this.renderLabels();this.addCredits();this.setResponsive && this.setResponsive();this.hasRendered = !0;\n      }, addCredits: function addCredits(a) {\n        var b = this;a = A(!0, this.options.credits, a);a.enabled && !this.credits && (this.credits = this.renderer.text(a.text + (this.mapCredits || \"\"), 0, 0).addClass(\"highcharts-credits\").on(\"click\", function () {\n          a.href && (M.location.href = a.href);\n        }).attr({ align: a.position.align, zIndex: 8 }).css(a.style).add().align(a.position), this.credits.update = function (a) {\n          b.credits = b.credits.destroy();b.addCredits(a);\n        });\n      }, destroy: function destroy() {\n        var b = this,\n            c = b.axes,\n            g = b.series,\n            k = b.container,\n            e,\n            d = k && k.parentNode;m(b, \"destroy\");u[b.index] = void 0;a.chartCount--;b.renderTo.removeAttribute(\"data-highcharts-chart\");\n        J(b);for (e = c.length; e--;) {\n          c[e] = c[e].destroy();\n        }this.scroller && this.scroller.destroy && this.scroller.destroy();for (e = g.length; e--;) {\n          g[e] = g[e].destroy();\n        }n(\"title subtitle chartBackground plotBackground plotBGImage plotBorder seriesGroup clipRect credits pointer rangeSelector legend resetZoomButton tooltip renderer\".split(\" \"), function (a) {\n          var c = b[a];c && c.destroy && (b[a] = c.destroy());\n        });k && (k.innerHTML = \"\", J(k), d && l(k));for (e in b) {\n          delete b[e];\n        }\n      }, isReadyToRender: function isReadyToRender() {\n        var a = this;return B || M != M.top || \"complete\" === h.readyState ? !0 : (h.attachEvent(\"onreadystatechange\", function () {\n          h.detachEvent(\"onreadystatechange\", a.firstRender);\"complete\" === h.readyState && a.firstRender();\n        }), !1);\n      }, firstRender: function firstRender() {\n        var a = this,\n            b = a.options;if (a.isReadyToRender()) {\n          a.getContainer();m(a, \"init\");a.resetMargins();a.setChartSize();a.propFromSeries();a.getAxes();n(b.series || [], function (b) {\n            a.initSeries(b);\n          });a.linkSeries();m(a, \"beforeRender\");k && (a.pointer = new k(a, b));a.render();a.renderer.draw();if (!a.renderer.imgCount && a.onload) a.onload();\n          a.cloneRenderTo(!0);\n        }\n      }, onload: function onload() {\n        n([this.callback].concat(this.callbacks), function (a) {\n          a && void 0 !== this.index && a.apply(this, [this]);\n        }, this);m(this, \"load\");c(this.index) && !1 !== this.options.chart.reflow && this.initReflow();this.onload = null;\n      } };\n  })(L);(function (a) {\n    var D,\n        C = a.each,\n        G = a.extend,\n        I = a.erase,\n        h = a.fireEvent,\n        f = a.format,\n        p = a.isArray,\n        v = a.isNumber,\n        l = a.pick,\n        u = a.removeEvent;D = a.Point = function () {};D.prototype = { init: function init(a, c, f) {\n        this.series = a;this.color = a.color;this.applyOptions(c, f);a.options.colorByPoint ? (c = a.options.colors || a.chart.options.colors, this.color = this.color || c[a.colorCounter], c = c.length, f = a.colorCounter, a.colorCounter++, a.colorCounter === c && (a.colorCounter = 0)) : f = a.colorIndex;this.colorIndex = l(this.colorIndex, f);a.chart.pointCount++;return this;\n      }, applyOptions: function applyOptions(a, c) {\n        var d = this.series,\n            f = d.options.pointValKey || d.pointValKey;a = D.prototype.optionsToObject.call(this, a);G(this, a);this.options = this.options ? G(this.options, a) : a;a.group && delete this.group;f && (this.y = this[f]);this.isNull = l(this.isValid && !this.isValid(), null === this.x || !v(this.y, !0));this.selected && (this.state = \"select\");\"name\" in this && void 0 === c && d.xAxis && d.xAxis.hasNames && (this.x = d.xAxis.nameToX(this));void 0 === this.x && d && (this.x = void 0 === c ? d.autoIncrement(this) : c);return this;\n      }, optionsToObject: function optionsToObject(a) {\n        var c = {},\n            d = this.series,\n            f = d.options.keys,\n            h = f || d.pointArrayMap || [\"y\"],\n            m = h.length,\n            b = 0,\n            l = 0;if (v(a) || null === a) c[h[0]] = a;else if (p(a)) for (!f && a.length > m && (d = _typeof(a[0]), \"string\" === d ? c.name = a[0] : \"number\" === d && (c.x = a[0]), b++); l < m;) {\n          f && void 0 === a[b] || (c[h[l]] = a[b]), b++, l++;\n        } else \"object\" === (typeof a === \"undefined\" ? \"undefined\" : _typeof(a)) && (c = a, a.dataLabels && (d._hasPointLabels = !0), a.marker && (d._hasPointMarkers = !0));return c;\n      }, getClassName: function getClassName() {\n        return \"highcharts-point\" + (this.selected ? \" highcharts-point-select\" : \"\") + (this.negative ? \" highcharts-negative\" : \"\") + (this.isNull ? \" highcharts-null-point\" : \"\") + (void 0 !== this.colorIndex ? \" highcharts-color-\" + this.colorIndex : \"\") + (this.options.className ? \" \" + this.options.className : \"\") + (this.zone && this.zone.className ? \" \" + this.zone.className : \"\");\n      },\n      getZone: function getZone() {\n        var a = this.series,\n            c = a.zones,\n            a = a.zoneAxis || \"y\",\n            f = 0,\n            h;for (h = c[f]; this[a] >= h.value;) {\n          h = c[++f];\n        }h && h.color && !this.options.color && (this.color = h.color);return h;\n      }, destroy: function destroy() {\n        var a = this.series.chart,\n            c = a.hoverPoints,\n            f;a.pointCount--;c && (this.setState(), I(c, this), c.length || (a.hoverPoints = null));if (this === a.hoverPoint) this.onMouseOut();if (this.graphic || this.dataLabel) u(this), this.destroyElements();this.legendItem && a.legend.destroyItem(this);for (f in this) {\n          this[f] = null;\n        }\n      }, destroyElements: function destroyElements() {\n        for (var a = [\"graphic\", \"dataLabel\", \"dataLabelUpper\", \"connector\", \"shadowGroup\"], c, f = 6; f--;) {\n          c = a[f], this[c] && (this[c] = this[c].destroy());\n        }\n      }, getLabelConfig: function getLabelConfig() {\n        return { x: this.category, y: this.y, color: this.color, key: this.name || this.category, series: this.series, point: this, percentage: this.percentage, total: this.total || this.stackTotal };\n      }, tooltipFormatter: function tooltipFormatter(a) {\n        var c = this.series,\n            d = c.tooltipOptions,\n            h = l(d.valueDecimals, \"\"),\n            t = d.valuePrefix || \"\",\n            m = d.valueSuffix || \"\";C(c.pointArrayMap || [\"y\"], function (b) {\n          b = \"{point.\" + b;\n          if (t || m) a = a.replace(b + \"}\", t + b + \"}\" + m);a = a.replace(b + \"}\", b + \":,.\" + h + \"f}\");\n        });return f(a, { point: this, series: this.series });\n      }, firePointEvent: function firePointEvent(a, c, f) {\n        var d = this,\n            n = this.series.options;(n.point.events[a] || d.options && d.options.events && d.options.events[a]) && this.importEvents();\"click\" === a && n.allowPointSelect && (f = function f(a) {\n          d.select && d.select(null, a.ctrlKey || a.metaKey || a.shiftKey);\n        });h(this, a, c, f);\n      }, visible: !0 };\n  })(L);(function (a) {\n    var D = a.addEvent,\n        C = a.animObject,\n        G = a.arrayMax,\n        I = a.arrayMin,\n        h = a.correctFloat,\n        f = a.Date,\n        p = a.defaultOptions,\n        v = a.defaultPlotOptions,\n        l = a.defined,\n        u = a.each,\n        d = a.erase,\n        c = a.extend,\n        n = a.fireEvent,\n        y = a.grep,\n        t = a.isArray,\n        m = a.isNumber,\n        b = a.isString,\n        q = a.merge,\n        z = a.pick,\n        F = a.removeEvent,\n        e = a.splat,\n        r = a.SVGElement,\n        x = a.syncTimeout,\n        A = a.win;a.Series = a.seriesType(\"line\", null, { lineWidth: 2, allowPointSelect: !1, showCheckbox: !1, animation: { duration: 1E3 }, events: {}, marker: { lineWidth: 0, lineColor: \"#ffffff\", radius: 4, states: { hover: { animation: { duration: 50 }, enabled: !0, radiusPlus: 2, lineWidthPlus: 1 }, select: { fillColor: \"#cccccc\",\n            lineColor: \"#000000\", lineWidth: 2 } } }, point: { events: {} }, dataLabels: { align: \"center\", formatter: function formatter() {\n          return null === this.y ? \"\" : a.numberFormat(this.y, -1);\n        }, style: { fontSize: \"11px\", fontWeight: \"bold\", color: \"contrast\", textOutline: \"1px contrast\" }, verticalAlign: \"bottom\", x: 0, y: 0, padding: 5 }, cropThreshold: 300, pointRange: 0, softThreshold: !0, states: { hover: { lineWidthPlus: 1, marker: {}, halo: { size: 10, opacity: .25 } }, select: { marker: {} } }, stickyTracking: !0, turboThreshold: 1E3 }, { isCartesian: !0, pointClass: a.Point, sorted: !0, requireSorting: !0,\n      directTouch: !1, axisTypes: [\"xAxis\", \"yAxis\"], colorCounter: 0, parallelArrays: [\"x\", \"y\"], coll: \"series\", init: function init(a, b) {\n        var k = this,\n            e,\n            d,\n            g = a.series,\n            f;k.chart = a;k.options = b = k.setOptions(b);k.linkedSeries = [];k.bindAxes();c(k, { name: b.name, state: \"\", visible: !1 !== b.visible, selected: !0 === b.selected });d = b.events;for (e in d) {\n          D(k, e, d[e]);\n        }if (d && d.click || b.point && b.point.events && b.point.events.click || b.allowPointSelect) a.runTrackerClick = !0;k.getColor();k.getSymbol();u(k.parallelArrays, function (a) {\n          k[a + \"Data\"] = [];\n        });k.setData(b.data, !1);k.isCartesian && (a.hasCartesianSeries = !0);g.length && (f = g[g.length - 1]);k._i = z(f && f._i, -1) + 1;for (a = this.insert(g); a < g.length; a++) {\n          g[a].index = a, g[a].name = g[a].name || \"Series \" + (g[a].index + 1);\n        }\n      }, insert: function insert(a) {\n        var b = this.options.index,\n            c;if (m(b)) {\n          for (c = a.length; c--;) {\n            if (b >= z(a[c].options.index, a[c]._i)) {\n              a.splice(c + 1, 0, this);break;\n            }\n          }-1 === c && a.unshift(this);c += 1;\n        } else a.push(this);return z(c, a.length - 1);\n      }, bindAxes: function bindAxes() {\n        var b = this,\n            c = b.options,\n            e = b.chart,\n            d;u(b.axisTypes || [], function (k) {\n          u(e[k], function (a) {\n            d = a.options;if (c[k] === d.index || void 0 !== c[k] && c[k] === d.id || void 0 === c[k] && 0 === d.index) b.insert(a.series), b[k] = a, a.isDirty = !0;\n          });b[k] || b.optionalAxis === k || a.error(18, !0);\n        });\n      }, updateParallelArrays: function updateParallelArrays(a, b) {\n        var c = a.series,\n            k = arguments,\n            e = m(b) ? function (g) {\n          var k = \"y\" === g && c.toYData ? c.toYData(a) : a[g];c[g + \"Data\"][b] = k;\n        } : function (a) {\n          Array.prototype[b].apply(c[a + \"Data\"], Array.prototype.slice.call(k, 2));\n        };u(c.parallelArrays, e);\n      }, autoIncrement: function autoIncrement() {\n        var a = this.options,\n            b = this.xIncrement,\n            c,\n            e = a.pointIntervalUnit,\n            b = z(b, a.pointStart, 0);this.pointInterval = c = z(this.pointInterval, a.pointInterval, 1);e && (a = new f(b), \"day\" === e ? a = +a[f.hcSetDate](a[f.hcGetDate]() + c) : \"month\" === e ? a = +a[f.hcSetMonth](a[f.hcGetMonth]() + c) : \"year\" === e && (a = +a[f.hcSetFullYear](a[f.hcGetFullYear]() + c)), c = a - b);this.xIncrement = b + c;return b;\n      }, setOptions: function setOptions(a) {\n        var b = this.chart,\n            c = b.options.plotOptions,\n            b = b.userOptions || {},\n            k = b.plotOptions || {},\n            e = c[this.type];this.userOptions = a;c = q(e, c.series, a);this.tooltipOptions = q(p.tooltip, p.plotOptions[this.type].tooltip, b.tooltip, k.series && k.series.tooltip, k[this.type] && k[this.type].tooltip, a.tooltip);null === e.marker && delete c.marker;this.zoneAxis = c.zoneAxis;a = this.zones = (c.zones || []).slice();!c.negativeColor && !c.negativeFillColor || c.zones || a.push({ value: c[this.zoneAxis + \"Threshold\"] || c.threshold || 0, className: \"highcharts-negative\", color: c.negativeColor, fillColor: c.negativeFillColor });a.length && l(a[a.length - 1].value) && a.push({ color: this.color, fillColor: this.fillColor });return c;\n      }, getCyclic: function getCyclic(a, b, c) {\n        var k,\n            e = this.userOptions,\n            g = a + \"Index\",\n            d = a + \"Counter\",\n            f = c ? c.length : z(this.chart.options.chart[a + \"Count\"], this.chart[a + \"Count\"]);b || (k = z(e[g], e[\"_\" + g]), l(k) || (e[\"_\" + g] = k = this.chart[d] % f, this.chart[d] += 1), c && (b = c[k]));void 0 !== k && (this[g] = k);this[a] = b;\n      }, getColor: function getColor() {\n        this.options.colorByPoint ? this.options.color = null : this.getCyclic(\"color\", this.options.color || v[this.type].color, this.chart.options.colors);\n      }, getSymbol: function getSymbol() {\n        this.getCyclic(\"symbol\", this.options.marker.symbol, this.chart.options.symbols);\n      }, drawLegendSymbol: a.LegendSymbolMixin.drawLineMarker,\n      setData: function setData(c, e, d, f) {\n        var k = this,\n            g = k.points,\n            h = g && g.length || 0,\n            n,\n            r = k.options,\n            w = k.chart,\n            l = null,\n            q = k.xAxis,\n            p = r.turboThreshold,\n            x = this.xData,\n            A = this.yData,\n            F = (n = k.pointArrayMap) && n.length;c = c || [];n = c.length;e = z(e, !0);if (!1 !== f && n && h === n && !k.cropped && !k.hasGroupedData && k.visible) u(c, function (a, b) {\n          g[b].update && a !== r.data[b] && g[b].update(a, !1, null, !1);\n        });else {\n          k.xIncrement = null;k.colorCounter = 0;u(this.parallelArrays, function (a) {\n            k[a + \"Data\"].length = 0;\n          });if (p && n > p) {\n            for (d = 0; null === l && d < n;) {\n              l = c[d], d++;\n            }if (m(l)) for (d = 0; d < n; d++) {\n              x[d] = this.autoIncrement(), A[d] = c[d];\n            } else if (t(l)) {\n              if (F) for (d = 0; d < n; d++) {\n                l = c[d], x[d] = l[0], A[d] = l.slice(1, F + 1);\n              } else for (d = 0; d < n; d++) {\n                l = c[d], x[d] = l[0], A[d] = l[1];\n              }\n            } else a.error(12);\n          } else for (d = 0; d < n; d++) {\n            void 0 !== c[d] && (l = { series: k }, k.pointClass.prototype.applyOptions.apply(l, [c[d]]), k.updateParallelArrays(l, d));\n          }b(A[0]) && a.error(14, !0);k.data = [];k.options.data = k.userOptions.data = c;for (d = h; d--;) {\n            g[d] && g[d].destroy && g[d].destroy();\n          }q && (q.minRange = q.userMinRange);k.isDirty = w.isDirtyBox = !0;k.isDirtyData = !!g;d = !1;\n        }\"point\" === r.legendType && (this.processData(), this.generatePoints());e && w.redraw(d);\n      }, processData: function processData(b) {\n        var c = this.xData,\n            k = this.yData,\n            e = c.length,\n            d;d = 0;var g,\n            f,\n            m = this.xAxis,\n            h,\n            n = this.options;h = n.cropThreshold;var l = this.getExtremesFromAll || n.getExtremesFromAll,\n            r = this.isCartesian,\n            n = m && m.val2lin,\n            q = m && m.isLog,\n            t,\n            p;if (r && !this.isDirty && !m.isDirty && !this.yAxis.isDirty && !b) return !1;m && (b = m.getExtremes(), t = b.min, p = b.max);if (r && this.sorted && !l && (!h || e > h || this.forceCrop)) if (c[e - 1] < t || c[0] > p) c = [], k = [];else if (c[0] < t || c[e - 1] > p) d = this.cropData(this.xData, this.yData, t, p), c = d.xData, k = d.yData, d = d.start, g = !0;for (h = c.length || 1; --h;) {\n          e = q ? n(c[h]) - n(c[h - 1]) : c[h] - c[h - 1], 0 < e && (void 0 === f || e < f) ? f = e : 0 > e && this.requireSorting && a.error(15);\n        }this.cropped = g;this.cropStart = d;this.processedXData = c;this.processedYData = k;this.closestPointRange = f;\n      }, cropData: function cropData(a, b, c, e) {\n        var k = a.length,\n            g = 0,\n            d = k,\n            f = z(this.cropShoulder, 1),\n            h;for (h = 0; h < k; h++) {\n          if (a[h] >= c) {\n            g = Math.max(0, h - f);break;\n          }\n        }for (c = h; c < k; c++) {\n          if (a[c] > e) {\n            d = c + f;break;\n          }\n        }return { xData: a.slice(g, d), yData: b.slice(g, d), start: g, end: d };\n      }, generatePoints: function generatePoints() {\n        var a = this.options.data,\n            b = this.data,\n            c,\n            d = this.processedXData,\n            f = this.processedYData,\n            g = this.pointClass,\n            h = d.length,\n            m = this.cropStart || 0,\n            n,\n            r = this.hasGroupedData,\n            l,\n            q = [],\n            t;b || r || (b = [], b.length = a.length, b = this.data = b);for (t = 0; t < h; t++) {\n          n = m + t, r ? (l = new g().init(this, [d[t]].concat(e(f[t]))), l.dataGroup = this.groupMap[t]) : (l = b[n]) || void 0 === a[n] || (b[n] = l = new g().init(this, a[n], d[t])), l.index = n, q[t] = l;\n        }if (b && (h !== (c = b.length) || r)) for (t = 0; t < c; t++) {\n          t !== m || r || (t += h), b[t] && (b[t].destroyElements(), b[t].plotX = void 0);\n        }this.data = b;this.points = q;\n      }, getExtremes: function getExtremes(a) {\n        var b = this.yAxis,\n            c = this.processedXData,\n            e,\n            k = [],\n            g = 0;e = this.xAxis.getExtremes();var d = e.min,\n            f = e.max,\n            h,\n            n,\n            l,\n            r;a = a || this.stackedYData || this.processedYData || [];e = a.length;for (r = 0; r < e; r++) {\n          if (n = c[r], l = a[r], h = (m(l, !0) || t(l)) && (!b.isLog || l.length || 0 < l), n = this.getExtremesFromAll || this.options.getExtremesFromAll || this.cropped || (c[r + 1] || n) >= d && (c[r - 1] || n) <= f, h && n) if (h = l.length) for (; h--;) {\n            null !== l[h] && (k[g++] = l[h]);\n          } else k[g++] = l;\n        }this.dataMin = I(k);this.dataMax = G(k);\n      }, translate: function translate() {\n        this.processedXData || this.processData();this.generatePoints();var a = this.options,\n            b = a.stacking,\n            c = this.xAxis,\n            e = c.categories,\n            d = this.yAxis,\n            g = this.points,\n            f = g.length,\n            n = !!this.modifyValue,\n            r = a.pointPlacement,\n            t = \"between\" === r || m(r),\n            q = a.threshold,\n            p = a.startFromThreshold ? q : 0,\n            x,\n            u,\n            A,\n            F,\n            v = Number.MAX_VALUE;\"between\" === r && (r = .5);m(r) && (r *= z(a.pointRange || c.pointRange));for (a = 0; a < f; a++) {\n          var y = g[a],\n              C = y.x,\n              D = y.y;u = y.low;var G = b && d.stacks[(this.negStacks && D < (p ? 0 : q) ? \"-\" : \"\") + this.stackKey],\n              I;d.isLog && null !== D && 0 >= D && (y.isNull = !0);y.plotX = x = h(Math.min(Math.max(-1E5, c.translate(C, 0, 0, 0, 1, r, \"flags\" === this.type)), 1E5));b && this.visible && !y.isNull && G && G[C] && (F = this.getStackIndicator(F, C, this.index), I = G[C], D = I.points[F.key], u = D[0], D = D[1], u === p && F.key === G[C].base && (u = z(q, d.min)), d.isLog && 0 >= u && (u = null), y.total = y.stackTotal = I.total, y.percentage = I.total && y.y / I.total * 100, y.stackY = D, I.setOffset(this.pointXOffset || 0, this.barW || 0));y.yBottom = l(u) ? d.translate(u, 0, 1, 0, 1) : null;n && (D = this.modifyValue(D, y));y.plotY = u = \"number\" === typeof D && Infinity !== D ? Math.min(Math.max(-1E5, d.translate(D, 0, 1, 0, 1)), 1E5) : void 0;y.isInside = void 0 !== u && 0 <= u && u <= d.len && 0 <= x && x <= c.len;y.clientX = t ? h(c.translate(C, 0, 0, 0, 1, r)) : x;y.negative = y.y < (q || 0);y.category = e && void 0 !== e[y.x] ? e[y.x] : y.x;y.isNull || (void 0 !== A && (v = Math.min(v, Math.abs(x - A))), A = x);y.zone = this.zones.length && y.getZone();\n        }this.closestPointRangePx = v;\n      }, getValidPoints: function getValidPoints(a, b) {\n        var c = this.chart;return y(a || this.points || [], function (a) {\n          return b && !c.isInsidePlot(a.plotX, a.plotY, c.inverted) ? !1 : !a.isNull;\n        });\n      }, setClip: function setClip(a) {\n        var b = this.chart,\n            c = this.options,\n            e = b.renderer,\n            k = b.inverted,\n            g = this.clipBox,\n            d = g || b.clipBox,\n            f = this.sharedClipKey || [\"_sharedClip\", a && a.duration, a && a.easing, d.height, c.xAxis, c.yAxis].join(),\n            h = b[f],\n            m = b[f + \"m\"];h || (a && (d.width = 0, b[f + \"m\"] = m = e.clipRect(-99, k ? -b.plotLeft : -b.plotTop, 99, k ? b.chartWidth : b.chartHeight)), b[f] = h = e.clipRect(d), h.count = { length: 0 });a && !h.count[this.index] && (h.count[this.index] = !0, h.count.length += 1);!1 !== c.clip && (this.group.clip(a || g ? h : b.clipRect), this.markerGroup.clip(m), this.sharedClipKey = f);a || (h.count[this.index] && (delete h.count[this.index], --h.count.length), 0 === h.count.length && f && b[f] && (g || (b[f] = b[f].destroy()), b[f + \"m\"] && (b[f + \"m\"] = b[f + \"m\"].destroy())));\n      }, animate: function animate(a) {\n        var b = this.chart,\n            c = C(this.options.animation),\n            e;a ? this.setClip(c) : (e = this.sharedClipKey, (a = b[e]) && a.animate({ width: b.plotSizeX }, c), b[e + \"m\"] && b[e + \"m\"].animate({ width: b.plotSizeX + 99 }, c), this.animate = null);\n      }, afterAnimate: function afterAnimate() {\n        this.setClip();\n        n(this, \"afterAnimate\");\n      }, drawPoints: function drawPoints() {\n        var a = this.points,\n            b = this.chart,\n            c,\n            e,\n            d,\n            g,\n            f = this.options.marker,\n            h,\n            n,\n            r,\n            l,\n            t = this.markerGroup,\n            q = z(f.enabled, this.xAxis.isRadial ? !0 : null, this.closestPointRangePx > 2 * f.radius);if (!1 !== f.enabled || this._hasPointMarkers) for (e = a.length; e--;) {\n          d = a[e], c = d.plotY, g = d.graphic, h = d.marker || {}, n = !!d.marker, r = q && void 0 === h.enabled || h.enabled, l = d.isInside, r && m(c) && null !== d.y ? (c = z(h.symbol, this.symbol), d.hasImage = 0 === c.indexOf(\"url\"), r = this.markerAttribs(d, d.selected && \"select\"), g ? g[l ? \"show\" : \"hide\"](!0).animate(r) : l && (0 < r.width || d.hasImage) && (d.graphic = g = b.renderer.symbol(c, r.x, r.y, r.width, r.height, n ? h : f).add(t)), g && g.attr(this.pointAttribs(d, d.selected && \"select\")), g && g.addClass(d.getClassName(), !0)) : g && (d.graphic = g.destroy());\n        }\n      }, markerAttribs: function markerAttribs(a, b) {\n        var c = this.options.marker,\n            e = a && a.options,\n            k = e && e.marker || {},\n            e = z(k.radius, c.radius);b && (c = c.states[b], b = k.states && k.states[b], e = z(b && b.radius, c && c.radius, e + (c && c.radiusPlus || 0)));a.hasImage && (e = 0);a = { x: Math.floor(a.plotX) - e, y: a.plotY - e };e && (a.width = a.height = 2 * e);return a;\n      }, pointAttribs: function pointAttribs(a, b) {\n        var c = this.options.marker,\n            e = a && a.options,\n            k = e && e.marker || {},\n            g = this.color,\n            d = e && e.color,\n            f = a && a.color,\n            e = z(k.lineWidth, c.lineWidth);a = a && a.zone && a.zone.color;g = d || a || f || g;a = k.fillColor || c.fillColor || g;g = k.lineColor || c.lineColor || g;b && (c = c.states[b], b = k.states && k.states[b] || {}, e = z(b.lineWidth, c.lineWidth, e + z(b.lineWidthPlus, c.lineWidthPlus, 0)), a = b.fillColor || c.fillColor || a, g = b.lineColor || c.lineColor || g);return { stroke: g, \"stroke-width\": e,\n          fill: a };\n      }, destroy: function destroy() {\n        var a = this,\n            b = a.chart,\n            c = /AppleWebKit\\/533/.test(A.navigator.userAgent),\n            e,\n            f = a.data || [],\n            g,\n            h,\n            m;n(a, \"destroy\");F(a);u(a.axisTypes || [], function (b) {\n          (m = a[b]) && m.series && (d(m.series, a), m.isDirty = m.forceRedraw = !0);\n        });a.legendItem && a.chart.legend.destroyItem(a);for (e = f.length; e--;) {\n          (g = f[e]) && g.destroy && g.destroy();\n        }a.points = null;clearTimeout(a.animationTimeout);for (h in a) {\n          a[h] instanceof r && !a[h].survive && (e = c && \"group\" === h ? \"hide\" : \"destroy\", a[h][e]());\n        }b.hoverSeries === a && (b.hoverSeries = null);d(b.series, a);for (h in a) {\n          delete a[h];\n        }\n      }, getGraphPath: function getGraphPath(a, b, c) {\n        var e = this,\n            k = e.options,\n            g = k.step,\n            d,\n            f = [],\n            h = [],\n            m;a = a || e.points;(d = a.reversed) && a.reverse();(g = { right: 1, center: 2 }[g] || g && 3) && d && (g = 4 - g);!k.connectNulls || b || c || (a = this.getValidPoints(a));u(a, function (d, n) {\n          var r = d.plotX,\n              t = d.plotY,\n              q = a[n - 1];(d.leftCliff || q && q.rightCliff) && !c && (m = !0);d.isNull && !l(b) && 0 < n ? m = !k.connectNulls : d.isNull && !b ? m = !0 : (0 === n || m ? n = [\"M\", d.plotX, d.plotY] : e.getPointSpline ? n = e.getPointSpline(a, d, n) : g ? (n = 1 === g ? [\"L\", q.plotX, t] : 2 === g ? [\"L\", (q.plotX + r) / 2, q.plotY, \"L\", (q.plotX + r) / 2, t] : [\"L\", r, q.plotY], n.push(\"L\", r, t)) : n = [\"L\", r, t], h.push(d.x), g && h.push(d.x), f.push.apply(f, n), m = !1);\n        });f.xMap = h;return e.graphPath = f;\n      }, drawGraph: function drawGraph() {\n        var a = this,\n            b = this.options,\n            c = (this.gappedPath || this.getGraphPath).call(this),\n            e = [[\"graph\", \"highcharts-graph\", b.lineColor || this.color, b.dashStyle]];u(this.zones, function (c, g) {\n          e.push([\"zone-graph-\" + g, \"highcharts-graph highcharts-zone-graph-\" + g + \" \" + (c.className || \"\"), c.color || a.color, c.dashStyle || b.dashStyle]);\n        });\n        u(e, function (e, g) {\n          var k = e[0],\n              d = a[k];d ? (d.endX = c.xMap, d.animate({ d: c })) : c.length && (a[k] = a.chart.renderer.path(c).addClass(e[1]).attr({ zIndex: 1 }).add(a.group), d = { stroke: e[2], \"stroke-width\": b.lineWidth, fill: a.fillGraph && a.color || \"none\" }, e[3] ? d.dashstyle = e[3] : \"square\" !== b.linecap && (d[\"stroke-linecap\"] = d[\"stroke-linejoin\"] = \"round\"), d = a[k].attr(d).shadow(2 > g && b.shadow));d && (d.startX = c.xMap, d.isArea = c.isArea);\n        });\n      }, applyZones: function applyZones() {\n        var a = this,\n            b = this.chart,\n            c = b.renderer,\n            e = this.zones,\n            d,\n            g,\n            f = this.clips || [],\n            h,\n            m = this.graph,\n            n = this.area,\n            r = Math.max(b.chartWidth, b.chartHeight),\n            l = this[(this.zoneAxis || \"y\") + \"Axis\"],\n            q,\n            t,\n            p = b.inverted,\n            x,\n            A,\n            F,\n            y,\n            v = !1;e.length && (m || n) && l && void 0 !== l.min && (t = l.reversed, x = l.horiz, m && m.hide(), n && n.hide(), q = l.getExtremes(), u(e, function (e, k) {\n          d = t ? x ? b.plotWidth : 0 : x ? 0 : l.toPixels(q.min);d = Math.min(Math.max(z(g, d), 0), r);g = Math.min(Math.max(Math.round(l.toPixels(z(e.value, q.max), !0)), 0), r);v && (d = g = l.toPixels(q.max));A = Math.abs(d - g);F = Math.min(d, g);y = Math.max(d, g);l.isXAxis ? (h = { x: p ? y : F, y: 0, width: A,\n            height: r }, x || (h.x = b.plotHeight - h.x)) : (h = { x: 0, y: p ? y : F, width: r, height: A }, x && (h.y = b.plotWidth - h.y));p && c.isVML && (h = l.isXAxis ? { x: 0, y: t ? F : y, height: h.width, width: b.chartWidth } : { x: h.y - b.plotLeft - b.spacingBox.x, y: 0, width: h.height, height: b.chartHeight });f[k] ? f[k].animate(h) : (f[k] = c.clipRect(h), m && a[\"zone-graph-\" + k].clip(f[k]), n && a[\"zone-area-\" + k].clip(f[k]));v = e.value > q.max;\n        }), this.clips = f);\n      }, invertGroups: function invertGroups(a) {\n        function b() {\n          var b = { width: c.yAxis.len, height: c.xAxis.len };u([\"group\", \"markerGroup\"], function (e) {\n            c[e] && c[e].attr(b).invert(a);\n          });\n        }var c = this,\n            e;c.xAxis && (e = D(c.chart, \"resize\", b), D(c, \"destroy\", e), b(a), c.invertGroups = b);\n      }, plotGroup: function plotGroup(a, b, c, e, d) {\n        var g = this[a],\n            k = !g;k && (this[a] = g = this.chart.renderer.g(b).attr({ zIndex: e || .1 }).add(d), g.addClass(\"highcharts-series-\" + this.index + \" highcharts-\" + this.type + \"-series highcharts-color-\" + this.colorIndex + \" \" + (this.options.className || \"\")));g.attr({ visibility: c })[k ? \"attr\" : \"animate\"](this.getPlotBox());return g;\n      }, getPlotBox: function getPlotBox() {\n        var a = this.chart,\n            b = this.xAxis,\n            c = this.yAxis;a.inverted && (b = c, c = this.xAxis);return { translateX: b ? b.left : a.plotLeft, translateY: c ? c.top : a.plotTop, scaleX: 1, scaleY: 1 };\n      }, render: function render() {\n        var a = this,\n            b = a.chart,\n            c,\n            e = a.options,\n            d = !!a.animate && b.renderer.isSVG && C(e.animation).duration,\n            g = a.visible ? \"inherit\" : \"hidden\",\n            f = e.zIndex,\n            h = a.hasRendered,\n            m = b.seriesGroup,\n            n = b.inverted;c = a.plotGroup(\"group\", \"series\", g, f, m);a.markerGroup = a.plotGroup(\"markerGroup\", \"markers\", g, f, m);d && a.animate(!0);c.inverted = a.isCartesian ? n : !1;a.drawGraph && (a.drawGraph(), a.applyZones());\n        a.drawDataLabels && a.drawDataLabels();a.visible && a.drawPoints();a.drawTracker && !1 !== a.options.enableMouseTracking && a.drawTracker();a.invertGroups(n);!1 === e.clip || a.sharedClipKey || h || c.clip(b.clipRect);d && a.animate();h || (a.animationTimeout = x(function () {\n          a.afterAnimate();\n        }, d));a.isDirty = a.isDirtyData = !1;a.hasRendered = !0;\n      }, redraw: function redraw() {\n        var a = this.chart,\n            b = this.isDirty || this.isDirtyData,\n            c = this.group,\n            e = this.xAxis,\n            d = this.yAxis;c && (a.inverted && c.attr({ width: a.plotWidth, height: a.plotHeight }), c.animate({ translateX: z(e && e.left, a.plotLeft), translateY: z(d && d.top, a.plotTop) }));this.translate();this.render();b && delete this.kdTree;\n      }, kdDimensions: 1, kdAxisArray: [\"clientX\", \"plotY\"], searchPoint: function searchPoint(a, b) {\n        var c = this.xAxis,\n            e = this.yAxis,\n            d = this.chart.inverted;return this.searchKDTree({ clientX: d ? c.len - a.chartY + c.pos : a.chartX - c.pos, plotY: d ? e.len - a.chartX + e.pos : a.chartY - e.pos }, b);\n      }, buildKDTree: function buildKDTree() {\n        function a(c, e, g) {\n          var d, k;if (k = c && c.length) return d = b.kdAxisArray[e % g], c.sort(function (a, b) {\n            return a[d] - b[d];\n          }), k = Math.floor(k / 2), { point: c[k], left: a(c.slice(0, k), e + 1, g), right: a(c.slice(k + 1), e + 1, g) };\n        }var b = this,\n            c = b.kdDimensions;delete b.kdTree;x(function () {\n          b.kdTree = a(b.getValidPoints(null, !b.directTouch), c, c);\n        }, b.options.kdNow ? 0 : 1);\n      }, searchKDTree: function searchKDTree(a, b) {\n        function c(a, b, f, h) {\n          var m = b.point,\n              n = e.kdAxisArray[f % h],\n              r,\n              q,\n              t = m;q = l(a[d]) && l(m[d]) ? Math.pow(a[d] - m[d], 2) : null;r = l(a[g]) && l(m[g]) ? Math.pow(a[g] - m[g], 2) : null;r = (q || 0) + (r || 0);m.dist = l(r) ? Math.sqrt(r) : Number.MAX_VALUE;m.distX = l(q) ? Math.sqrt(q) : Number.MAX_VALUE;n = a[n] - m[n];r = 0 > n ? \"left\" : \"right\";q = 0 > n ? \"right\" : \"left\";b[r] && (r = c(a, b[r], f + 1, h), t = r[k] < t[k] ? r : m);b[q] && Math.sqrt(n * n) < t[k] && (a = c(a, b[q], f + 1, h), t = a[k] < t[k] ? a : t);return t;\n        }var e = this,\n            d = this.kdAxisArray[0],\n            g = this.kdAxisArray[1],\n            k = b ? \"distX\" : \"dist\";this.kdTree || this.buildKDTree();if (this.kdTree) return c(a, this.kdTree, this.kdDimensions, this.kdDimensions);\n      } });\n  })(L);(function (a) {\n    function D(a, d, c, f, h) {\n      var n = a.chart.inverted;this.axis = a;this.isNegative = c;this.options = d;this.x = f;this.total = null;this.points = {};this.stack = h;this.rightCliff = this.leftCliff = 0;this.alignOptions = { align: d.align || (n ? c ? \"left\" : \"right\" : \"center\"), verticalAlign: d.verticalAlign || (n ? \"middle\" : c ? \"bottom\" : \"top\"), y: l(d.y, n ? 4 : c ? 14 : -6), x: l(d.x, n ? c ? -6 : 6 : 0) };this.textAlign = d.textAlign || (n ? c ? \"right\" : \"left\" : \"center\");\n    }var C = a.Axis,\n        G = a.Chart,\n        I = a.correctFloat,\n        h = a.defined,\n        f = a.destroyObjectProperties,\n        p = a.each,\n        v = a.format,\n        l = a.pick;a = a.Series;D.prototype = { destroy: function destroy() {\n        f(this, this.axis);\n      }, render: function render(a) {\n        var d = this.options,\n            c = d.format,\n            c = c ? v(c, this) : d.formatter.call(this);this.label ? this.label.attr({ text: c, visibility: \"hidden\" }) : this.label = this.axis.chart.renderer.text(c, null, null, d.useHTML).css(d.style).attr({ align: this.textAlign, rotation: d.rotation, visibility: \"hidden\" }).add(a);\n      }, setOffset: function setOffset(a, d) {\n        var c = this.axis,\n            f = c.chart,\n            h = f.inverted,\n            l = c.reversed,\n            l = this.isNegative && !l || !this.isNegative && l,\n            m = c.translate(c.usePercentage ? 100 : this.total, 0, 0, 0, 1),\n            c = c.translate(0),\n            c = Math.abs(m - c);a = f.xAxis[0].translate(this.x) + a;var b = f.plotHeight,\n            h = { x: h ? l ? m : m - c : a, y: h ? b - a - d : l ? b - m - c : b - m, width: h ? c : d, height: h ? d : c };if (d = this.label) d.align(this.alignOptions, null, h), h = d.alignAttr, d[!1 === this.options.crop || f.isInsidePlot(h.x, h.y) ? \"show\" : \"hide\"](!0);\n      } };G.prototype.getStacks = function () {\n      var a = this;p(a.yAxis, function (a) {\n        a.stacks && a.hasVisibleSeries && (a.oldStacks = a.stacks);\n      });p(a.series, function (d) {\n        !d.options.stacking || !0 !== d.visible && !1 !== a.options.chart.ignoreHiddenSeries || (d.stackKey = d.type + l(d.options.stack, \"\"));\n      });\n    };C.prototype.buildStacks = function () {\n      var a = this.series,\n          d,\n          c = l(this.options.reversedStacks, !0),\n          f = a.length,\n          h;if (!this.isXAxis) {\n        this.usePercentage = !1;for (h = f; h--;) {\n          a[c ? h : f - h - 1].setStackedPoints();\n        }for (h = f; h--;) {\n          d = a[c ? h : f - h - 1], d.setStackCliffs && d.setStackCliffs();\n        }if (this.usePercentage) for (h = 0; h < f; h++) {\n          a[h].setPercentStacks();\n        }\n      }\n    };C.prototype.renderStackTotals = function () {\n      var a = this.chart,\n          d = a.renderer,\n          c = this.stacks,\n          f,\n          h,\n          l = this.stackTotalGroup;l || (this.stackTotalGroup = l = d.g(\"stack-labels\").attr({ visibility: \"visible\", zIndex: 6 }).add());l.translate(a.plotLeft, a.plotTop);for (f in c) {\n        for (h in a = c[f], a) {\n          a[h].render(l);\n        }\n      }\n    };\n    C.prototype.resetStacks = function () {\n      var a = this.stacks,\n          d,\n          c;if (!this.isXAxis) for (d in a) {\n        for (c in a[d]) {\n          a[d][c].touched < this.stacksTouched ? (a[d][c].destroy(), delete a[d][c]) : (a[d][c].total = null, a[d][c].cum = null);\n        }\n      }\n    };C.prototype.cleanStacks = function () {\n      var a, d, c;if (!this.isXAxis) for (d in this.oldStacks && (a = this.stacks = this.oldStacks), a) {\n        for (c in a[d]) {\n          a[d][c].cum = a[d][c].total;\n        }\n      }\n    };a.prototype.setStackedPoints = function () {\n      if (this.options.stacking && (!0 === this.visible || !1 === this.chart.options.chart.ignoreHiddenSeries)) {\n        var a = this.processedXData,\n            d = this.processedYData,\n            c = [],\n            f = d.length,\n            p = this.options,\n            t = p.threshold,\n            m = p.startFromThreshold ? t : 0,\n            b = p.stack,\n            p = p.stacking,\n            q = this.stackKey,\n            v = \"-\" + q,\n            F = this.negStacks,\n            e = this.yAxis,\n            r = e.stacks,\n            x = e.oldStacks,\n            A,\n            k,\n            w,\n            C,\n            J,\n            G,\n            g;e.stacksTouched += 1;for (J = 0; J < f; J++) {\n          G = a[J], g = d[J], A = this.getStackIndicator(A, G, this.index), C = A.key, w = (k = F && g < (m ? 0 : t)) ? v : q, r[w] || (r[w] = {}), r[w][G] || (x[w] && x[w][G] ? (r[w][G] = x[w][G], r[w][G].total = null) : r[w][G] = new D(e, e.options.stackLabels, k, G, b)), w = r[w][G], null !== g && (w.points[C] = w.points[this.index] = [l(w.cum, m)], h(w.cum) || (w.base = C), w.touched = e.stacksTouched, 0 < A.index && !1 === this.singleStacks && (w.points[C][0] = w.points[this.index + \",\" + G + \",0\"][0])), \"percent\" === p ? (k = k ? q : v, F && r[k] && r[k][G] ? (k = r[k][G], w.total = k.total = Math.max(k.total, w.total) + Math.abs(g) || 0) : w.total = I(w.total + (Math.abs(g) || 0))) : w.total = I(w.total + (g || 0)), w.cum = l(w.cum, m) + (g || 0), null !== g && (w.points[C].push(w.cum), c[J] = w.cum);\n        }\"percent\" === p && (e.usePercentage = !0);this.stackedYData = c;e.oldStacks = {};\n      }\n    };a.prototype.setPercentStacks = function () {\n      var a = this,\n          d = a.stackKey,\n          c = a.yAxis.stacks,\n          f = a.processedXData,\n          h;p([d, \"-\" + d], function (d) {\n        for (var m = f.length, b, n; m--;) {\n          if (b = f[m], h = a.getStackIndicator(h, b, a.index, d), b = (n = c[d] && c[d][b]) && n.points[h.key]) n = n.total ? 100 / n.total : 0, b[0] = I(b[0] * n), b[1] = I(b[1] * n), a.stackedYData[m] = b[1];\n        }\n      });\n    };a.prototype.getStackIndicator = function (a, d, c, f) {\n      !h(a) || a.x !== d || f && a.key !== f ? a = { x: d, index: 0, key: f } : a.index++;a.key = [c, d, a.index].join();return a;\n    };\n  })(L);(function (a) {\n    var D = a.addEvent,\n        C = a.animate,\n        G = a.Axis,\n        I = a.createElement,\n        h = a.css,\n        f = a.defined,\n        p = a.each,\n        v = a.erase,\n        l = a.extend,\n        u = a.fireEvent,\n        d = a.inArray,\n        c = a.isNumber,\n        n = a.isObject,\n        y = a.merge,\n        t = a.pick,\n        m = a.Point,\n        b = a.Series,\n        q = a.seriesTypes,\n        z = a.setAnimation,\n        F = a.splat;l(a.Chart.prototype, { addSeries: function addSeries(a, b, c) {\n        var e,\n            d = this;a && (b = t(b, !0), u(d, \"addSeries\", { options: a }, function () {\n          e = d.initSeries(a);d.isDirtyLegend = !0;d.linkSeries();b && d.redraw(c);\n        }));return e;\n      }, addAxis: function addAxis(a, b, c, d) {\n        var e = b ? \"xAxis\" : \"yAxis\",\n            f = this.options;a = y(a, { index: this[e].length, isX: b });new G(this, a);f[e] = F(f[e] || {});f[e].push(a);t(c, !0) && this.redraw(d);\n      }, showLoading: function showLoading(a) {\n        var b = this,\n            c = b.options,\n            e = b.loadingDiv,\n            d = c.loading,\n            f = function f() {\n          e && h(e, { left: b.plotLeft + \"px\", top: b.plotTop + \"px\", width: b.plotWidth + \"px\", height: b.plotHeight + \"px\" });\n        };e || (b.loadingDiv = e = I(\"div\", { className: \"highcharts-loading highcharts-loading-hidden\" }, null, b.container), b.loadingSpan = I(\"span\", { className: \"highcharts-loading-inner\" }, null, e), D(b, \"redraw\", f));e.className = \"highcharts-loading\";b.loadingSpan.innerHTML = a || c.lang.loading;h(e, l(d.style, { zIndex: 10 }));h(b.loadingSpan, d.labelStyle);b.loadingShown || (h(e, { opacity: 0, display: \"\" }), C(e, { opacity: d.style.opacity || .5 }, { duration: d.showDuration || 0 }));b.loadingShown = !0;f();\n      }, hideLoading: function hideLoading() {\n        var a = this.options,\n            b = this.loadingDiv;b && (b.className = \"highcharts-loading highcharts-loading-hidden\", C(b, { opacity: 0 }, { duration: a.loading.hideDuration || 100, complete: function complete() {\n            h(b, { display: \"none\" });\n          } }));this.loadingShown = !1;\n      }, propsRequireDirtyBox: \"backgroundColor borderColor borderWidth margin marginTop marginRight marginBottom marginLeft spacing spacingTop spacingRight spacingBottom spacingLeft borderRadius plotBackgroundColor plotBackgroundImage plotBorderColor plotBorderWidth plotShadow shadow\".split(\" \"),\n      propsRequireUpdateSeries: \"chart.inverted chart.polar chart.ignoreHiddenSeries chart.type colors plotOptions\".split(\" \"), update: function update(a, b) {\n        var e,\n            h = { credits: \"addCredits\", title: \"setTitle\", subtitle: \"setSubtitle\" },\n            k = a.chart,\n            m,\n            n;if (k) {\n          y(!0, this.options.chart, k);\"className\" in k && this.setClassName(k.className);if (\"inverted\" in k || \"polar\" in k) this.propFromSeries(), m = !0;for (e in k) {\n            k.hasOwnProperty(e) && (-1 !== d(\"chart.\" + e, this.propsRequireUpdateSeries) && (n = !0), -1 !== d(e, this.propsRequireDirtyBox) && (this.isDirtyBox = !0));\n          }\"style\" in k && this.renderer.setStyle(k.style);\n        }for (e in a) {\n          if (this[e] && \"function\" === typeof this[e].update) this[e].update(a[e], !1);else if (\"function\" === typeof this[h[e]]) this[h[e]](a[e]);\"chart\" !== e && -1 !== d(e, this.propsRequireUpdateSeries) && (n = !0);\n        }a.colors && (this.options.colors = a.colors);a.plotOptions && y(!0, this.options.plotOptions, a.plotOptions);p([\"xAxis\", \"yAxis\", \"series\"], function (b) {\n          a[b] && p(F(a[b]), function (a) {\n            var c = f(a.id) && this.get(a.id) || this[b][0];c && c.coll === b && c.update(a, !1);\n          }, this);\n        }, this);\n        m && p(this.axes, function (a) {\n          a.update({}, !1);\n        });n && p(this.series, function (a) {\n          a.update({}, !1);\n        });a.loading && y(!0, this.options.loading, a.loading);e = k && k.width;k = k && k.height;c(e) && e !== this.chartWidth || c(k) && k !== this.chartHeight ? this.setSize(e, k) : t(b, !0) && this.redraw();\n      }, setSubtitle: function setSubtitle(a) {\n        this.setTitle(void 0, a);\n      } });l(m.prototype, { update: function update(a, b, c, d) {\n        function e() {\n          f.applyOptions(a);null === f.y && m && (f.graphic = m.destroy());n(a, !0) && (m && m.element && a && a.marker && a.marker.symbol && (f.graphic = m.destroy()), a && a.dataLabels && f.dataLabel && (f.dataLabel = f.dataLabel.destroy()));l = f.index;h.updateParallelArrays(f, l);r.data[l] = n(r.data[l], !0) ? f.options : a;h.isDirty = h.isDirtyData = !0;!h.fixedBox && h.hasCartesianSeries && (g.isDirtyBox = !0);\"point\" === r.legendType && (g.isDirtyLegend = !0);b && g.redraw(c);\n        }var f = this,\n            h = f.series,\n            m = f.graphic,\n            l,\n            g = h.chart,\n            r = h.options;b = t(b, !0);!1 === d ? e() : f.firePointEvent(\"update\", { options: a }, e);\n      }, remove: function remove(a, b) {\n        this.series.removePoint(d(this, this.series.data), a, b);\n      } });l(b.prototype, { addPoint: function addPoint(a, b, c, d) {\n        var e = this.options,\n            f = this.data,\n            h = this.chart,\n            m = this.xAxis && this.xAxis.names,\n            n = e.data,\n            g,\n            l,\n            r = this.xData,\n            q,\n            p;b = t(b, !0);g = { series: this };this.pointClass.prototype.applyOptions.apply(g, [a]);p = g.x;q = r.length;if (this.requireSorting && p < r[q - 1]) for (l = !0; q && r[q - 1] > p;) {\n          q--;\n        }this.updateParallelArrays(g, \"splice\", q, 0, 0);this.updateParallelArrays(g, q);m && g.name && (m[p] = g.name);n.splice(q, 0, a);l && (this.data.splice(q, 0, null), this.processData());\"point\" === e.legendType && this.generatePoints();c && (f[0] && f[0].remove ? f[0].remove(!1) : (f.shift(), this.updateParallelArrays(g, \"shift\"), n.shift()));this.isDirtyData = this.isDirty = !0;b && h.redraw(d);\n      }, removePoint: function removePoint(a, b, c) {\n        var e = this,\n            d = e.data,\n            f = d[a],\n            h = e.points,\n            m = e.chart,\n            n = function n() {\n          h && h.length === d.length && h.splice(a, 1);d.splice(a, 1);e.options.data.splice(a, 1);e.updateParallelArrays(f || { series: e }, \"splice\", a, 1);f && f.destroy();e.isDirty = !0;e.isDirtyData = !0;b && m.redraw();\n        };z(c, m);b = t(b, !0);f ? f.firePointEvent(\"remove\", null, n) : n();\n      }, remove: function remove(a, b, c) {\n        function e() {\n          d.destroy();\n          f.isDirtyLegend = f.isDirtyBox = !0;f.linkSeries();t(a, !0) && f.redraw(b);\n        }var d = this,\n            f = d.chart;!1 !== c ? u(d, \"remove\", null, e) : e();\n      }, update: function update(a, b) {\n        var c = this,\n            e = this.chart,\n            d = this.userOptions,\n            f = this.type,\n            h = a.type || d.type || e.options.chart.type,\n            m = q[f].prototype,\n            n = [\"group\", \"markerGroup\", \"dataLabelsGroup\"],\n            g;if (h && h !== f || void 0 !== a.zIndex) n.length = 0;p(n, function (a) {\n          n[a] = c[a];delete c[a];\n        });a = y(d, { animation: !1, index: this.index, pointStart: this.xData[0] }, { data: this.options.data }, a);this.remove(!1, null, !1);for (g in m) {\n          this[g] = void 0;\n        }l(this, q[h || f].prototype);p(n, function (a) {\n          c[a] = n[a];\n        });this.init(e, a);e.linkSeries();t(b, !0) && e.redraw(!1);\n      } });l(G.prototype, { update: function update(a, b) {\n        var c = this.chart;a = c.options[this.coll][this.options.index] = y(this.userOptions, a);this.destroy(!0);this.init(c, l(a, { events: void 0 }));c.isDirtyBox = !0;t(b, !0) && c.redraw();\n      }, remove: function remove(a) {\n        for (var b = this.chart, c = this.coll, e = this.series, d = e.length; d--;) {\n          e[d] && e[d].remove(!1);\n        }v(b.axes, this);v(b[c], this);b.options[c].splice(this.options.index, 1);p(b[c], function (a, b) {\n          a.options.index = b;\n        });this.destroy();b.isDirtyBox = !0;t(a, !0) && b.redraw();\n      }, setTitle: function setTitle(a, b) {\n        this.update({ title: a }, b);\n      }, setCategories: function setCategories(a, b) {\n        this.update({ categories: a }, b);\n      } });\n  })(L);(function (a) {\n    var D = a.color,\n        C = a.each,\n        G = a.map,\n        I = a.pick,\n        h = a.Series,\n        f = a.seriesType;f(\"area\", \"line\", { softThreshold: !1, threshold: 0 }, { singleStacks: !1, getStackPoints: function getStackPoints() {\n        var a = [],\n            f = [],\n            h = this.xAxis,\n            u = this.yAxis,\n            d = u.stacks[this.stackKey],\n            c = {},\n            n = this.points,\n            y = this.index,\n            t = u.series,\n            m = t.length,\n            b,\n            q = I(u.options.reversedStacks, !0) ? 1 : -1,\n            z,\n            F;if (this.options.stacking) {\n          for (z = 0; z < n.length; z++) {\n            c[n[z].x] = n[z];\n          }for (F in d) {\n            null !== d[F].total && f.push(F);\n          }f.sort(function (a, b) {\n            return a - b;\n          });b = G(t, function () {\n            return this.visible;\n          });C(f, function (e, n) {\n            var l = 0,\n                r,\n                k;if (c[e] && !c[e].isNull) a.push(c[e]), C([-1, 1], function (a) {\n              var h = 1 === a ? \"rightNull\" : \"leftNull\",\n                  l = 0,\n                  t = d[f[n + a]];if (t) for (z = y; 0 <= z && z < m;) {\n                r = t.points[z], r || (z === y ? c[e][h] = !0 : b[z] && (k = d[e].points[z]) && (l -= k[1] - k[0])), z += q;\n              }c[e][1 === a ? \"rightCliff\" : \"leftCliff\"] = l;\n            });else {\n              for (z = y; 0 <= z && z < m;) {\n                if (r = d[e].points[z]) {\n                  l = r[1];break;\n                }z += q;\n              }l = u.toPixels(l, !0);a.push({ isNull: !0, plotX: h.toPixels(e, !0), plotY: l, yBottom: l });\n            }\n          });\n        }return a;\n      }, getGraphPath: function getGraphPath(a) {\n        var f = h.prototype.getGraphPath,\n            l = this.options,\n            p = l.stacking,\n            d = this.yAxis,\n            c,\n            n,\n            y = [],\n            t = [],\n            m = this.index,\n            b,\n            q = d.stacks[this.stackKey],\n            z = l.threshold,\n            F = d.getThreshold(l.threshold),\n            e,\n            l = l.connectNulls || \"percent\" === p,\n            r = function r(c, e, f) {\n          var k = a[c];c = p && q[k.x].points[m];var h = k[f + \"Null\"] || 0;f = k[f + \"Cliff\"] || 0;var n,\n              l,\n              k = !0;f || h ? (n = (h ? c[0] : c[1]) + f, l = c[0] + f, k = !!h) : !p && a[e] && a[e].isNull && (n = l = z);void 0 !== n && (t.push({ plotX: b, plotY: null === n ? F : d.getThreshold(n), isNull: k }), y.push({ plotX: b, plotY: null === l ? F : d.getThreshold(l), doCurve: !1 }));\n        };a = a || this.points;p && (a = this.getStackPoints());for (c = 0; c < a.length; c++) {\n          if (n = a[c].isNull, b = I(a[c].rectPlotX, a[c].plotX), e = I(a[c].yBottom, F), !n || l) l || r(c, c - 1, \"left\"), n && !p && l || (t.push(a[c]), y.push({ x: c, plotX: b, plotY: e })), l || r(c, c + 1, \"right\");\n        }c = f.call(this, t, !0, !0);y.reversed = !0;n = f.call(this, y, !0, !0);n.length && (n[0] = \"L\");n = c.concat(n);f = f.call(this, t, !1, l);n.xMap = c.xMap;this.areaPath = n;return f;\n      }, drawGraph: function drawGraph() {\n        this.areaPath = [];h.prototype.drawGraph.apply(this);var a = this,\n            f = this.areaPath,\n            l = this.options,\n            u = [[\"area\", \"highcharts-area\", this.color, l.fillColor]];C(this.zones, function (d, c) {\n          u.push([\"zone-area-\" + c, \"highcharts-area highcharts-zone-area-\" + c + \" \" + d.className, d.color || a.color, d.fillColor || l.fillColor]);\n        });C(u, function (d) {\n          var c = d[0],\n              h = a[c];h ? (h.endX = f.xMap, h.animate({ d: f })) : (h = a[c] = a.chart.renderer.path(f).addClass(d[1]).attr({ fill: I(d[3], D(d[2]).setOpacity(I(l.fillOpacity, .75)).get()), zIndex: 0 }).add(a.group), h.isArea = !0);h.startX = f.xMap;h.shiftUnit = l.step ? 2 : 1;\n        });\n      }, drawLegendSymbol: a.LegendSymbolMixin.drawRectangle });\n  })(L);(function (a) {\n    var D = a.pick;a = a.seriesType;a(\"spline\", \"line\", {}, { getPointSpline: function getPointSpline(a, G, I) {\n        var h = G.plotX,\n            f = G.plotY,\n            p = a[I - 1];I = a[I + 1];var v, l, u, d;if (p && !p.isNull && !1 !== p.doCurve && I && !I.isNull && !1 !== I.doCurve) {\n          a = p.plotY;u = I.plotX;I = I.plotY;var c = 0;v = (1.5 * h + p.plotX) / 2.5;l = (1.5 * f + a) / 2.5;u = (1.5 * h + u) / 2.5;d = (1.5 * f + I) / 2.5;\n          u !== v && (c = (d - l) * (u - h) / (u - v) + f - d);l += c;d += c;l > a && l > f ? (l = Math.max(a, f), d = 2 * f - l) : l < a && l < f && (l = Math.min(a, f), d = 2 * f - l);d > I && d > f ? (d = Math.max(I, f), l = 2 * f - d) : d < I && d < f && (d = Math.min(I, f), l = 2 * f - d);G.rightContX = u;G.rightContY = d;\n        }G = [\"C\", D(p.rightContX, p.plotX), D(p.rightContY, p.plotY), D(v, h), D(l, f), h, f];p.rightContX = p.rightContY = null;return G;\n      } });\n  })(L);(function (a) {\n    var D = a.seriesTypes.area.prototype,\n        C = a.seriesType;C(\"areaspline\", \"spline\", a.defaultPlotOptions.area, { getStackPoints: D.getStackPoints, getGraphPath: D.getGraphPath,\n      setStackCliffs: D.setStackCliffs, drawGraph: D.drawGraph, drawLegendSymbol: a.LegendSymbolMixin.drawRectangle });\n  })(L);(function (a) {\n    var D = a.animObject,\n        C = a.color,\n        G = a.each,\n        I = a.extend,\n        h = a.isNumber,\n        f = a.merge,\n        p = a.pick,\n        v = a.Series,\n        l = a.seriesType,\n        u = a.svg;l(\"column\", \"line\", { borderRadius: 0, groupPadding: .2, marker: null, pointPadding: .1, minPointLength: 0, cropThreshold: 50, pointRange: null, states: { hover: { halo: !1, brightness: .1, shadow: !1 }, select: { color: \"#cccccc\", borderColor: \"#000000\", shadow: !1 } }, dataLabels: { align: null, verticalAlign: null,\n        y: null }, softThreshold: !1, startFromThreshold: !0, stickyTracking: !1, tooltip: { distance: 6 }, threshold: 0, borderColor: \"#ffffff\" }, { cropShoulder: 0, directTouch: !0, trackerGroups: [\"group\", \"dataLabelsGroup\"], negStacks: !0, init: function init() {\n        v.prototype.init.apply(this, arguments);var a = this,\n            c = a.chart;c.hasRendered && G(c.series, function (c) {\n          c.type === a.type && (c.isDirty = !0);\n        });\n      }, getColumnMetrics: function getColumnMetrics() {\n        var a = this,\n            c = a.options,\n            f = a.xAxis,\n            h = a.yAxis,\n            l = f.reversed,\n            m,\n            b = {},\n            q = 0;!1 === c.grouping ? q = 1 : G(a.chart.series, function (c) {\n          var e = c.options,\n              d = c.yAxis,\n              f;c.type === a.type && c.visible && h.len === d.len && h.pos === d.pos && (e.stacking ? (m = c.stackKey, void 0 === b[m] && (b[m] = q++), f = b[m]) : !1 !== e.grouping && (f = q++), c.columnIndex = f);\n        });var u = Math.min(Math.abs(f.transA) * (f.ordinalSlope || c.pointRange || f.closestPointRange || f.tickInterval || 1), f.len),\n            F = u * c.groupPadding,\n            e = (u - 2 * F) / q,\n            c = Math.min(c.maxPointWidth || f.len, p(c.pointWidth, e * (1 - 2 * c.pointPadding)));a.columnMetrics = { width: c, offset: (e - c) / 2 + (F + ((a.columnIndex || 0) + (l ? 1 : 0)) * e - u / 2) * (l ? -1 : 1) };return a.columnMetrics;\n      },\n      crispCol: function crispCol(a, c, f, h) {\n        var d = this.chart,\n            m = this.borderWidth,\n            b = -(m % 2 ? .5 : 0),\n            m = m % 2 ? .5 : 1;d.inverted && d.renderer.isVML && (m += 1);f = Math.round(a + f) + b;a = Math.round(a) + b;h = Math.round(c + h) + m;b = .5 >= Math.abs(c) && .5 < h;c = Math.round(c) + m;h -= c;b && h && (--c, h += 1);return { x: a, y: c, width: f - a, height: h };\n      }, translate: function translate() {\n        var a = this,\n            c = a.chart,\n            f = a.options,\n            h = a.dense = 2 > a.closestPointRange * a.xAxis.transA,\n            h = a.borderWidth = p(f.borderWidth, h ? 0 : 1),\n            l = a.yAxis,\n            m = a.translatedThreshold = l.getThreshold(f.threshold),\n            b = p(f.minPointLength, 5),\n            q = a.getColumnMetrics(),\n            u = q.width,\n            F = a.barW = Math.max(u, 1 + 2 * h),\n            e = a.pointXOffset = q.offset;c.inverted && (m -= .5);f.pointPadding && (F = Math.ceil(F));v.prototype.translate.apply(a);G(a.points, function (d) {\n          var f = p(d.yBottom, m),\n              h = 999 + Math.abs(f),\n              h = Math.min(Math.max(-h, d.plotY), l.len + h),\n              k = d.plotX + e,\n              n = F,\n              q = Math.min(h, f),\n              r,\n              t = Math.max(h, f) - q;Math.abs(t) < b && b && (t = b, r = !l.reversed && !d.negative || l.reversed && d.negative, q = Math.abs(q - m) > b ? f - b : m - (r ? b : 0));d.barX = k;d.pointWidth = u;d.tooltipPos = c.inverted ? [l.len + l.pos - c.plotLeft - h, a.xAxis.len - k - n / 2, t] : [k + n / 2, h + l.pos - c.plotTop, t];d.shapeType = \"rect\";d.shapeArgs = a.crispCol.apply(a, d.isNull ? [d.plotX, l.len / 2, 0, 0] : [k, q, n, t]);\n        });\n      }, getSymbol: a.noop, drawLegendSymbol: a.LegendSymbolMixin.drawRectangle, drawGraph: function drawGraph() {\n        this.group[this.dense ? \"addClass\" : \"removeClass\"](\"highcharts-dense-data\");\n      }, pointAttribs: function pointAttribs(a, c) {\n        var d = this.options,\n            f,\n            h = this.pointAttrToOptions || {};f = h.stroke || \"borderColor\";var m = h[\"stroke-width\"] || \"borderWidth\",\n            b = a && a.color || this.color,\n            l = a[f] || d[f] || this.color || b,\n            p = a[m] || d[m] || this[m] || 0,\n            h = d.dashStyle;a && this.zones.length && (b = (b = a.getZone()) && b.color || a.options.color || this.color);c && (a = d.states[c], c = a.brightness, b = a.color || void 0 !== c && C(b).brighten(a.brightness).get() || b, l = a[f] || l, p = a[m] || p, h = a.dashStyle || h);f = { fill: b, stroke: l, \"stroke-width\": p };d.borderRadius && (f.r = d.borderRadius);h && (f.dashstyle = h);return f;\n      }, drawPoints: function drawPoints() {\n        var a = this,\n            c = this.chart,\n            l = a.options,\n            p = c.renderer,\n            t = l.animationLimit || 250,\n            m;G(a.points, function (b) {\n          var d = b.graphic;if (h(b.plotY) && null !== b.y) {\n            m = b.shapeArgs;if (d) d[c.pointCount < t ? \"animate\" : \"attr\"](f(m));else b.graphic = d = p[b.shapeType](m).attr({ \"class\": b.getClassName() }).add(b.group || a.group);d.attr(a.pointAttribs(b, b.selected && \"select\")).shadow(l.shadow, null, l.stacking && !l.borderRadius);\n          } else d && (b.graphic = d.destroy());\n        });\n      }, animate: function animate(a) {\n        var c = this,\n            d = this.yAxis,\n            f = c.options,\n            h = this.chart.inverted,\n            m = {};u && (a ? (m.scaleY = .001, a = Math.min(d.pos + d.len, Math.max(d.pos, d.toPixels(f.threshold))), h ? m.translateX = a - d.len : m.translateY = a, c.group.attr(m)) : (m[h ? \"translateX\" : \"translateY\"] = d.pos, c.group.animate(m, I(D(c.options.animation), { step: function step(a, d) {\n            c.group.attr({ scaleY: Math.max(.001, d.pos) });\n          } })), c.animate = null));\n      }, remove: function remove() {\n        var a = this,\n            c = a.chart;c.hasRendered && G(c.series, function (c) {\n          c.type === a.type && (c.isDirty = !0);\n        });v.prototype.remove.apply(a, arguments);\n      } });\n  })(L);(function (a) {\n    a = a.seriesType;a(\"bar\", \"column\", null, { inverted: !0 });\n  })(L);(function (a) {\n    var D = a.Series;a = a.seriesType;a(\"scatter\", \"line\", { lineWidth: 0, marker: { enabled: !0 }, tooltip: { headerFormat: \"<span style=\\\"color:{point.color}\\\">\\u25CF</span> <span style=\\\"font-size: 0.85em\\\"> {series.name}</span><br/>\",\n        pointFormat: \"x: \\x3cb\\x3e{point.x}\\x3c/b\\x3e\\x3cbr/\\x3ey: \\x3cb\\x3e{point.y}\\x3c/b\\x3e\\x3cbr/\\x3e\" } }, { sorted: !1, requireSorting: !1, noSharedTooltip: !0, trackerGroups: [\"group\", \"markerGroup\", \"dataLabelsGroup\"], takeOrdinalPosition: !1, kdDimensions: 2, drawGraph: function drawGraph() {\n        this.options.lineWidth && D.prototype.drawGraph.call(this);\n      } });\n  })(L);(function (a) {\n    var D = a.pick,\n        C = a.relativeLength;a.CenteredSeriesMixin = { getCenter: function getCenter() {\n        var a = this.options,\n            I = this.chart,\n            h = 2 * (a.slicedOffset || 0),\n            f = I.plotWidth - 2 * h,\n            I = I.plotHeight - 2 * h,\n            p = a.center,\n            p = [D(p[0], \"50%\"), D(p[1], \"50%\"), a.size || \"100%\", a.innerSize || 0],\n            v = Math.min(f, I),\n            l,\n            u;for (l = 0; 4 > l; ++l) {\n          u = p[l], a = 2 > l || 2 === l && /%$/.test(u), p[l] = C(u, [f, I, v, p[2]][l]) + (a ? h : 0);\n        }p[3] > p[2] && (p[3] = p[2]);return p;\n      } };\n  })(L);(function (a) {\n    var D = a.addEvent,\n        C = a.defined,\n        G = a.each,\n        I = a.extend,\n        h = a.inArray,\n        f = a.noop,\n        p = a.pick,\n        v = a.Point,\n        l = a.Series,\n        u = a.seriesType,\n        d = a.setAnimation;u(\"pie\", \"line\", { center: [null, null], clip: !1, colorByPoint: !0, dataLabels: { distance: 30, enabled: !0, formatter: function formatter() {\n          return null === this.y ? void 0 : this.point.name;\n        }, x: 0 }, ignoreHiddenPoint: !0, legendType: \"point\", marker: null, size: null, showInLegend: !1, slicedOffset: 10, stickyTracking: !1, tooltip: { followPointer: !0 }, borderColor: \"#ffffff\", borderWidth: 1, states: { hover: { brightness: .1, shadow: !1 } } }, { isCartesian: !1, requireSorting: !1, directTouch: !0, noSharedTooltip: !0, trackerGroups: [\"group\", \"dataLabelsGroup\"], axisTypes: [], pointAttribs: a.seriesTypes.column.prototype.pointAttribs, animate: function animate(a) {\n        var c = this,\n            d = c.points,\n            f = c.startAngleRad;a || (G(d, function (a) {\n          var b = a.graphic,\n              d = a.shapeArgs;b && (b.attr({ r: a.startR || c.center[3] / 2, start: f, end: f }), b.animate({ r: d.r, start: d.start, end: d.end }, c.options.animation));\n        }), c.animate = null);\n      }, updateTotals: function updateTotals() {\n        var a,\n            d = 0,\n            f = this.points,\n            h = f.length,\n            m,\n            b = this.options.ignoreHiddenPoint;for (a = 0; a < h; a++) {\n          m = f[a], 0 > m.y && (m.y = null), d += b && !m.visible ? 0 : m.y;\n        }this.total = d;for (a = 0; a < h; a++) {\n          m = f[a], m.percentage = 0 < d && (m.visible || !b) ? m.y / d * 100 : 0, m.total = d;\n        }\n      }, generatePoints: function generatePoints() {\n        l.prototype.generatePoints.call(this);this.updateTotals();\n      }, translate: function translate(a) {\n        this.generatePoints();\n        var c = 0,\n            d = this.options,\n            f = d.slicedOffset,\n            h = f + (d.borderWidth || 0),\n            b,\n            l,\n            u,\n            F = d.startAngle || 0,\n            e = this.startAngleRad = Math.PI / 180 * (F - 90),\n            F = (this.endAngleRad = Math.PI / 180 * (p(d.endAngle, F + 360) - 90)) - e,\n            r = this.points,\n            x = d.dataLabels.distance,\n            d = d.ignoreHiddenPoint,\n            A,\n            k = r.length,\n            w;a || (this.center = a = this.getCenter());this.getX = function (b, c) {\n          u = Math.asin(Math.min((b - a[1]) / (a[2] / 2 + x), 1));return a[0] + (c ? -1 : 1) * Math.cos(u) * (a[2] / 2 + x);\n        };for (A = 0; A < k; A++) {\n          w = r[A];b = e + c * F;if (!d || w.visible) c += w.percentage / 100;l = e + c * F;w.shapeType = \"arc\";w.shapeArgs = { x: a[0], y: a[1], r: a[2] / 2, innerR: a[3] / 2, start: Math.round(1E3 * b) / 1E3, end: Math.round(1E3 * l) / 1E3 };u = (l + b) / 2;u > 1.5 * Math.PI ? u -= 2 * Math.PI : u < -Math.PI / 2 && (u += 2 * Math.PI);w.slicedTranslation = { translateX: Math.round(Math.cos(u) * f), translateY: Math.round(Math.sin(u) * f) };b = Math.cos(u) * a[2] / 2;l = Math.sin(u) * a[2] / 2;w.tooltipPos = [a[0] + .7 * b, a[1] + .7 * l];w.half = u < -Math.PI / 2 || u > Math.PI / 2 ? 1 : 0;w.angle = u;h = Math.min(h, x / 5);w.labelPos = [a[0] + b + Math.cos(u) * x, a[1] + l + Math.sin(u) * x, a[0] + b + Math.cos(u) * h, a[1] + l + Math.sin(u) * h, a[0] + b, a[1] + l, 0 > x ? \"center\" : w.half ? \"right\" : \"left\", u];\n        }\n      }, drawGraph: null, drawPoints: function drawPoints() {\n        var a = this,\n            d = a.chart.renderer,\n            f,\n            h,\n            m,\n            b,\n            l = a.options.shadow;l && !a.shadowGroup && (a.shadowGroup = d.g(\"shadow\").add(a.group));G(a.points, function (c) {\n          if (null !== c.y) {\n            h = c.graphic;b = c.shapeArgs;f = c.sliced ? c.slicedTranslation : {};var n = c.shadowGroup;l && !n && (n = c.shadowGroup = d.g(\"shadow\").add(a.shadowGroup));n && n.attr(f);m = a.pointAttribs(c, c.selected && \"select\");h ? h.setRadialReference(a.center).attr(m).animate(I(b, f)) : (c.graphic = h = d[c.shapeType](b).addClass(c.getClassName()).setRadialReference(a.center).attr(f).add(a.group), c.visible || h.attr({ visibility: \"hidden\" }), h.attr(m).attr({ \"stroke-linejoin\": \"round\" }).shadow(l, n));\n          }\n        });\n      }, searchPoint: f, sortByAngle: function sortByAngle(a, d) {\n        a.sort(function (a, c) {\n          return void 0 !== a.angle && (c.angle - a.angle) * d;\n        });\n      }, drawLegendSymbol: a.LegendSymbolMixin.drawRectangle, getCenter: a.CenteredSeriesMixin.getCenter, getSymbol: f }, { init: function init() {\n        v.prototype.init.apply(this, arguments);var a = this,\n            d;a.name = p(a.name, \"Slice\");\n        d = function d(c) {\n          a.slice(\"select\" === c.type);\n        };D(a, \"select\", d);D(a, \"unselect\", d);return a;\n      }, setVisible: function setVisible(a, d) {\n        var c = this,\n            f = c.series,\n            m = f.chart,\n            b = f.options.ignoreHiddenPoint;d = p(d, b);a !== c.visible && (c.visible = c.options.visible = a = void 0 === a ? !c.visible : a, f.options.data[h(c, f.data)] = c.options, G([\"graphic\", \"dataLabel\", \"connector\", \"shadowGroup\"], function (b) {\n          if (c[b]) c[b][a ? \"show\" : \"hide\"](!0);\n        }), c.legendItem && m.legend.colorizeItem(c, a), a || \"hover\" !== c.state || c.setState(\"\"), b && (f.isDirty = !0), d && m.redraw());\n      },\n      slice: function slice(a, f, l) {\n        var c = this.series;d(l, c.chart);p(f, !0);this.sliced = this.options.sliced = a = C(a) ? a : !this.sliced;c.options.data[h(this, c.data)] = this.options;a = a ? this.slicedTranslation : { translateX: 0, translateY: 0 };this.graphic.animate(a);this.shadowGroup && this.shadowGroup.animate(a);\n      }, haloPath: function haloPath(a) {\n        var c = this.shapeArgs;return this.sliced || !this.visible ? [] : this.series.chart.renderer.symbols.arc(c.x, c.y, c.r + a, c.r + a, { innerR: this.shapeArgs.r, start: c.start, end: c.end });\n      } });\n  })(L);(function (a) {\n    var D = a.addEvent,\n        C = a.arrayMax,\n        G = a.defined,\n        I = a.each,\n        h = a.extend,\n        f = a.format,\n        p = a.map,\n        v = a.merge,\n        l = a.noop,\n        u = a.pick,\n        d = a.relativeLength,\n        c = a.Series,\n        n = a.seriesTypes,\n        y = a.stableSort;a.distribute = function (a, c) {\n      function b(a, b) {\n        return a.target - b.target;\n      }var d,\n          f = !0,\n          h = a,\n          e = [],\n          m;m = 0;for (d = a.length; d--;) {\n        m += a[d].size;\n      }if (m > c) {\n        y(a, function (a, b) {\n          return (b.rank || 0) - (a.rank || 0);\n        });for (m = d = 0; m <= c;) {\n          m += a[d].size, d++;\n        }e = a.splice(d - 1, a.length);\n      }y(a, b);for (a = p(a, function (a) {\n        return { size: a.size, targets: [a.target] };\n      }); f;) {\n        for (d = a.length; d--;) {\n          f = a[d], m = (Math.min.apply(0, f.targets) + Math.max.apply(0, f.targets)) / 2, f.pos = Math.min(Math.max(0, m - f.size / 2), c - f.size);\n        }d = a.length;for (f = !1; d--;) {\n          0 < d && a[d - 1].pos + a[d - 1].size > a[d].pos && (a[d - 1].size += a[d].size, a[d - 1].targets = a[d - 1].targets.concat(a[d].targets), a[d - 1].pos + a[d - 1].size > c && (a[d - 1].pos = c - a[d - 1].size), a.splice(d, 1), f = !0);\n        }\n      }d = 0;I(a, function (a) {\n        var b = 0;I(a.targets, function () {\n          h[d].pos = a.pos + b;b += h[d].size;d++;\n        });\n      });h.push.apply(h, e);y(h, b);\n    };c.prototype.drawDataLabels = function () {\n      var a = this,\n          c = a.options,\n          b = c.dataLabels,\n          d = a.points,\n          l,\n          n,\n          e = a.hasRendered || 0,\n          r,\n          p,\n          A = u(b.defer, !0),\n          k = a.chart.renderer;if (b.enabled || a._hasPointLabels) a.dlProcessOptions && a.dlProcessOptions(b), p = a.plotGroup(\"dataLabelsGroup\", \"data-labels\", A && !e ? \"hidden\" : \"visible\", b.zIndex || 6), A && (p.attr({ opacity: +e }), e || D(a, \"afterAnimate\", function () {\n        a.visible && p.show(!0);p[c.animation ? \"animate\" : \"attr\"]({ opacity: 1 }, { duration: 200 });\n      })), n = b, I(d, function (e) {\n        var d,\n            m = e.dataLabel,\n            q,\n            g,\n            t = e.connector,\n            F = !0,\n            x,\n            A = {};l = e.dlOptions || e.options && e.options.dataLabels;\n        d = u(l && l.enabled, n.enabled) && null !== e.y;if (m && !d) e.dataLabel = m.destroy();else if (d) {\n          b = v(n, l);x = b.style;d = b.rotation;q = e.getLabelConfig();r = b.format ? f(b.format, q) : b.formatter.call(q, b);x.color = u(b.color, x.color, a.color, \"#000000\");if (m) G(r) ? (m.attr({ text: r }), F = !1) : (e.dataLabel = m = m.destroy(), t && (e.connector = t.destroy()));else if (G(r)) {\n            m = { fill: b.backgroundColor, stroke: b.borderColor, \"stroke-width\": b.borderWidth, r: b.borderRadius || 0, rotation: d, padding: b.padding, zIndex: 1 };\"contrast\" === x.color && (A.color = b.inside || 0 > b.distance || c.stacking ? k.getContrast(e.color || a.color) : \"#000000\");c.cursor && (A.cursor = c.cursor);for (g in m) {\n              void 0 === m[g] && delete m[g];\n            }m = e.dataLabel = k[d ? \"text\" : \"label\"](r, 0, -9999, b.shape, null, null, b.useHTML, null, \"data-label\").attr(m);m.addClass(\"highcharts-data-label-color-\" + e.colorIndex + \" \" + (b.className || \"\") + (b.useHTML ? \"highcharts-tracker\" : \"\"));m.css(h(x, A));m.add(p);m.shadow(b.shadow);\n          }m && a.alignDataLabel(e, m, b, null, F);\n        }\n      });\n    };c.prototype.alignDataLabel = function (a, c, b, d, f) {\n      var m = this.chart,\n          e = m.inverted,\n          l = u(a.plotX, -9999),\n          n = u(a.plotY, -9999),\n          p = c.getBBox(),\n          k,\n          q = b.rotation,\n          t = b.align,\n          v = this.visible && (a.series.forceDL || m.isInsidePlot(l, Math.round(n), e) || d && m.isInsidePlot(l, e ? d.x + 1 : d.y + d.height - 1, e)),\n          z = \"justify\" === u(b.overflow, \"justify\");v && (k = b.style.fontSize, k = m.renderer.fontMetrics(k, c).b, d = h({ x: e ? m.plotWidth - n : l, y: Math.round(e ? m.plotHeight - l : n), width: 0, height: 0 }, d), h(b, { width: p.width, height: p.height }), q ? (z = !1, e = m.renderer.rotCorr(k, q), e = { x: d.x + b.x + d.width / 2 + e.x, y: d.y + b.y + { top: 0, middle: .5, bottom: 1 }[b.verticalAlign] * d.height }, c[f ? \"attr\" : \"animate\"](e).attr({ align: t }), l = (q + 720) % 360, l = 180 < l && 360 > l, \"left\" === t ? e.y -= l ? p.height : 0 : \"center\" === t ? (e.x -= p.width / 2, e.y -= p.height / 2) : \"right\" === t && (e.x -= p.width, e.y -= l ? 0 : p.height)) : (c.align(b, null, d), e = c.alignAttr), z ? this.justifyDataLabel(c, b, e, p, d, f) : u(b.crop, !0) && (v = m.isInsidePlot(e.x, e.y) && m.isInsidePlot(e.x + p.width, e.y + p.height)), b.shape && !q && c.attr({ anchorX: a.plotX, anchorY: a.plotY }));v || (c.attr({ y: -9999 }), c.placed = !1);\n    };c.prototype.justifyDataLabel = function (a, c, b, d, f, h) {\n      var e = this.chart,\n          m = c.align,\n          l = c.verticalAlign,\n          n,\n          k,\n          p = a.box ? 0 : a.padding || 0;n = b.x + p;0 > n && (\"right\" === m ? c.align = \"left\" : c.x = -n, k = !0);n = b.x + d.width - p;n > e.plotWidth && (\"left\" === m ? c.align = \"right\" : c.x = e.plotWidth - n, k = !0);n = b.y + p;0 > n && (\"bottom\" === l ? c.verticalAlign = \"top\" : c.y = -n, k = !0);n = b.y + d.height - p;n > e.plotHeight && (\"top\" === l ? c.verticalAlign = \"bottom\" : c.y = e.plotHeight - n, k = !0);k && (a.placed = !h, a.align(c, null, f));\n    };n.pie && (n.pie.prototype.drawDataLabels = function () {\n      var d = this,\n          f = d.data,\n          b,\n          h = d.chart,\n          l = d.options.dataLabels,\n          n = u(l.connectorPadding, 10),\n          e = u(l.connectorWidth, 1),\n          r = h.plotWidth,\n          v = h.plotHeight,\n          A,\n          k = l.distance,\n          w = d.center,\n          y = w[2] / 2,\n          D = w[1],\n          G = 0 < k,\n          g,\n          B,\n          L,\n          M,\n          R = [[], []],\n          E,\n          H,\n          P,\n          Q,\n          O = [0, 0, 0, 0];d.visible && (l.enabled || d._hasPointLabels) && (c.prototype.drawDataLabels.apply(d), I(f, function (a) {\n        a.dataLabel && a.visible && (R[a.half].push(a), a.dataLabel._pos = null);\n      }), I(R, function (c, e) {\n        var f,\n            m,\n            q = c.length,\n            t,\n            u,\n            F;if (q) for (d.sortByAngle(c, e - .5), 0 < k && (f = Math.max(0, D - y - k), m = Math.min(D + y + k, h.plotHeight), t = p(c, function (a) {\n          if (a.dataLabel) return F = a.dataLabel.getBBox().height || 21, { target: a.labelPos[1] - f + F / 2, size: F, rank: a.y };\n        }), a.distribute(t, m + F - f)), Q = 0; Q < q; Q++) {\n          b = c[Q], L = b.labelPos, g = b.dataLabel, P = !1 === b.visible ? \"hidden\" : \"inherit\", u = L[1], t ? void 0 === t[Q].pos ? P = \"hidden\" : (M = t[Q].size, H = f + t[Q].pos) : H = u, E = l.justify ? w[0] + (e ? -1 : 1) * (y + k) : d.getX(H < f + 2 || H > m - 2 ? u : H, e), g._attr = { visibility: P, align: L[6] }, g._pos = { x: E + l.x + ({ left: n, right: -n }[L[6]] || 0), y: H + l.y - 10 }, L.x = E, L.y = H, null === d.options.size && (B = g.width, E - B < n ? O[3] = Math.max(Math.round(B - E + n), O[3]) : E + B > r - n && (O[1] = Math.max(Math.round(E + B - r + n), O[1])), 0 > H - M / 2 ? O[0] = Math.max(Math.round(-H + M / 2), O[0]) : H + M / 2 > v && (O[2] = Math.max(Math.round(H + M / 2 - v), O[2])));\n        }\n      }), 0 === C(O) || this.verifyDataLabelOverflow(O)) && (this.placeDataLabels(), G && e && I(this.points, function (a) {\n        var b;A = a.connector;if ((g = a.dataLabel) && g._pos && a.visible) {\n          P = g._attr.visibility;if (b = !A) a.connector = A = h.renderer.path().addClass(\"highcharts-data-label-connector highcharts-color-\" + a.colorIndex).add(d.dataLabelsGroup), A.attr({ \"stroke-width\": e, stroke: l.connectorColor || a.color || \"#666666\" });A[b ? \"attr\" : \"animate\"]({ d: d.connectorPath(a.labelPos) });A.attr(\"visibility\", P);\n        } else A && (a.connector = A.destroy());\n      }));\n    }, n.pie.prototype.connectorPath = function (a) {\n      var c = a.x,\n          b = a.y;return u(this.options.dataLabels.softConnector, !0) ? [\"M\", c + (\"left\" === a[6] ? 5 : -5), b, \"C\", c, b, 2 * a[2] - a[4], 2 * a[3] - a[5], a[2], a[3], \"L\", a[4], a[5]] : [\"M\", c + (\"left\" === a[6] ? 5 : -5), b, \"L\", a[2], a[3], \"L\", a[4], a[5]];\n    }, n.pie.prototype.placeDataLabels = function () {\n      I(this.points, function (a) {\n        var c = a.dataLabel;c && a.visible && ((a = c._pos) ? (c.attr(c._attr), c[c.moved ? \"animate\" : \"attr\"](a), c.moved = !0) : c && c.attr({ y: -9999 }));\n      });\n    }, n.pie.prototype.alignDataLabel = l, n.pie.prototype.verifyDataLabelOverflow = function (a) {\n      var c = this.center,\n          b = this.options,\n          f = b.center,\n          h = b.minSize || 80,\n          l,\n          e;null !== f[0] ? l = Math.max(c[2] - Math.max(a[1], a[3]), h) : (l = Math.max(c[2] - a[1] - a[3], h), c[0] += (a[3] - a[1]) / 2);null !== f[1] ? l = Math.max(Math.min(l, c[2] - Math.max(a[0], a[2])), h) : (l = Math.max(Math.min(l, c[2] - a[0] - a[2]), h), c[1] += (a[0] - a[2]) / 2);l < c[2] ? (c[2] = l, c[3] = Math.min(d(b.innerSize || 0, l), l), this.translate(c), this.drawDataLabels && this.drawDataLabels()) : e = !0;return e;\n    });n.column && (n.column.prototype.alignDataLabel = function (a, d, b, f, h) {\n      var l = this.chart.inverted,\n          e = a.series,\n          m = a.dlBox || a.shapeArgs,\n          n = u(a.below, a.plotY > u(this.translatedThreshold, e.yAxis.len)),\n          p = u(b.inside, !!this.options.stacking);m && (f = v(m), 0 > f.y && (f.height += f.y, f.y = 0), m = f.y + f.height - e.yAxis.len, 0 < m && (f.height -= m), l && (f = { x: e.yAxis.len - f.y - f.height, y: e.xAxis.len - f.x - f.width, width: f.height, height: f.width }), p || (l ? (f.x += n ? 0 : f.width, f.width = 0) : (f.y += n ? f.height : 0, f.height = 0)));b.align = u(b.align, !l || p ? \"center\" : n ? \"right\" : \"left\");b.verticalAlign = u(b.verticalAlign, l || p ? \"middle\" : n ? \"top\" : \"bottom\");c.prototype.alignDataLabel.call(this, a, d, b, f, h);\n    });\n  })(L);(function (a) {\n    var D = a.Chart,\n        C = a.each,\n        G = a.pick,\n        I = a.addEvent;D.prototype.callbacks.push(function (a) {\n      function f() {\n        var f = [];C(a.series, function (a) {\n          var h = a.options.dataLabels,\n              p = a.dataLabelCollections || [\"dataLabel\"];(h.enabled || a._hasPointLabels) && !h.allowOverlap && a.visible && C(p, function (d) {\n            C(a.points, function (a) {\n              a[d] && (a[d].labelrank = G(a.labelrank, a.shapeArgs && a.shapeArgs.height), f.push(a[d]));\n            });\n          });\n        });a.hideOverlappingLabels(f);\n      }f();I(a, \"redraw\", f);\n    });D.prototype.hideOverlappingLabels = function (a) {\n      var f = a.length,\n          h,\n          v,\n          l,\n          u,\n          d,\n          c,\n          n,\n          y,\n          t,\n          m = function m(a, c, d, f, e, h, l, _m) {\n        return !(e > a + d || e + l < a || h > c + f || h + _m < c);\n      };for (v = 0; v < f; v++) {\n        if (h = a[v]) h.oldOpacity = h.opacity, h.newOpacity = 1;\n      }a.sort(function (a, c) {\n        return (c.labelrank || 0) - (a.labelrank || 0);\n      });for (v = 0; v < f; v++) {\n        for (l = a[v], h = v + 1; h < f; ++h) {\n          if (u = a[h], l && u && l.placed && u.placed && 0 !== l.newOpacity && 0 !== u.newOpacity && (d = l.alignAttr, c = u.alignAttr, n = l.parentGroup, y = u.parentGroup, t = 2 * (l.box ? 0 : l.padding), d = m(d.x + n.translateX, d.y + n.translateY, l.width - t, l.height - t, c.x + y.translateX, c.y + y.translateY, u.width - t, u.height - t))) (l.labelrank < u.labelrank ? l : u).newOpacity = 0;\n        }\n      }C(a, function (a) {\n        var b, c;a && (c = a.newOpacity, a.oldOpacity !== c && a.placed && (c ? a.show(!0) : b = function b() {\n          a.hide();\n        }, a.alignAttr.opacity = c, a[a.isOld ? \"animate\" : \"attr\"](a.alignAttr, null, b)), a.isOld = !0);\n      });\n    };\n  })(L);(function (a) {\n    var D = a.addEvent,\n        C = a.Chart,\n        G = a.createElement,\n        I = a.css,\n        h = a.defaultOptions,\n        f = a.defaultPlotOptions,\n        p = a.each,\n        v = a.extend,\n        l = a.fireEvent,\n        u = a.hasTouch,\n        d = a.inArray,\n        c = a.isObject,\n        n = a.Legend,\n        y = a.merge,\n        t = a.pick,\n        m = a.Point,\n        b = a.Series,\n        q = a.seriesTypes,\n        z = a.svg;a = a.TrackerMixin = { drawTrackerPoint: function drawTrackerPoint() {\n        var a = this,\n            b = a.chart,\n            c = b.pointer,\n            d = function d(a) {\n          for (var c = a.target, e; c && !e;) {\n            e = c.point, c = c.parentNode;\n          }if (void 0 !== e && e !== b.hoverPoint) e.onMouseOver(a);\n        };p(a.points, function (a) {\n          a.graphic && (a.graphic.element.point = a);a.dataLabel && (a.dataLabel.div ? a.dataLabel.div.point = a : a.dataLabel.element.point = a);\n        });a._hasTracking || (p(a.trackerGroups, function (b) {\n          if (a[b]) {\n            a[b].addClass(\"highcharts-tracker\").on(\"mouseover\", d).on(\"mouseout\", function (a) {\n              c.onTrackerMouseOut(a);\n            });if (u) a[b].on(\"touchstart\", d);a.options.cursor && a[b].css(I).css({ cursor: a.options.cursor });\n          }\n        }), a._hasTracking = !0);\n      }, drawTrackerGraph: function drawTrackerGraph() {\n        var a = this,\n            b = a.options,\n            c = b.trackByArea,\n            d = [].concat(c ? a.areaPath : a.graphPath),\n            f = d.length,\n            h = a.chart,\n            l = h.pointer,\n            m = h.renderer,\n            n = h.options.tooltip.snap,\n            q = a.tracker,\n            g,\n            t = function t() {\n          if (h.hoverSeries !== a) a.onMouseOver();\n        },\n            v = \"rgba(192,192,192,\" + (z ? .0001 : .002) + \")\";if (f && !c) for (g = f + 1; g--;) {\n          \"M\" === d[g] && d.splice(g + 1, 0, d[g + 1] - n, d[g + 2], \"L\"), (g && \"M\" === d[g] || g === f) && d.splice(g, 0, \"L\", d[g - 2] + n, d[g - 1]);\n        }q ? q.attr({ d: d }) : a.graph && (a.tracker = m.path(d).attr({ \"stroke-linejoin\": \"round\", visibility: a.visible ? \"visible\" : \"hidden\", stroke: v, fill: c ? v : \"none\", \"stroke-width\": a.graph.strokeWidth() + (c ? 0 : 2 * n), zIndex: 2 }).add(a.group), p([a.tracker, a.markerGroup], function (a) {\n          a.addClass(\"highcharts-tracker\").on(\"mouseover\", t).on(\"mouseout\", function (a) {\n            l.onTrackerMouseOut(a);\n          });b.cursor && a.css({ cursor: b.cursor });if (u) a.on(\"touchstart\", t);\n        }));\n      } };q.column && (q.column.prototype.drawTracker = a.drawTrackerPoint);q.pie && (q.pie.prototype.drawTracker = a.drawTrackerPoint);q.scatter && (q.scatter.prototype.drawTracker = a.drawTrackerPoint);v(n.prototype, { setItemEvents: function setItemEvents(a, b, c) {\n        var e = this,\n            d = e.chart,\n            f = \"highcharts-legend-\" + (a.series ? \"point\" : \"series\") + \"-active\";(c ? b : a.legendGroup).on(\"mouseover\", function () {\n          a.setState(\"hover\");d.seriesGroup.addClass(f);\n          b.css(e.options.itemHoverStyle);\n        }).on(\"mouseout\", function () {\n          b.css(a.visible ? e.itemStyle : e.itemHiddenStyle);d.seriesGroup.removeClass(f);a.setState();\n        }).on(\"click\", function (b) {\n          var c = function c() {\n            a.setVisible && a.setVisible();\n          };b = { browserEvent: b };a.firePointEvent ? a.firePointEvent(\"legendItemClick\", b, c) : l(a, \"legendItemClick\", b, c);\n        });\n      }, createCheckboxForItem: function createCheckboxForItem(a) {\n        a.checkbox = G(\"input\", { type: \"checkbox\", checked: a.selected, defaultChecked: a.selected }, this.options.itemCheckboxStyle, this.chart.container);D(a.checkbox, \"click\", function (b) {\n          l(a.series || a, \"checkboxClick\", { checked: b.target.checked, item: a }, function () {\n            a.select();\n          });\n        });\n      } });h.legend.itemStyle.cursor = \"pointer\";v(C.prototype, { showResetZoom: function showResetZoom() {\n        var a = this,\n            b = h.lang,\n            c = a.options.chart.resetZoomButton,\n            d = c.theme,\n            f = d.states,\n            k = \"chart\" === c.relativeTo ? null : \"plotBox\";this.resetZoomButton = a.renderer.button(b.resetZoom, null, null, function () {\n          a.zoomOut();\n        }, d, f && f.hover).attr({ align: c.position.align, title: b.resetZoomTitle }).addClass(\"highcharts-reset-zoom\").add().align(c.position, !1, k);\n      }, zoomOut: function zoomOut() {\n        var a = this;l(a, \"selection\", { resetSelection: !0 }, function () {\n          a.zoom();\n        });\n      }, zoom: function zoom(a) {\n        var b,\n            d = this.pointer,\n            f = !1,\n            h;!a || a.resetSelection ? p(this.axes, function (a) {\n          b = a.zoom();\n        }) : p(a.xAxis.concat(a.yAxis), function (a) {\n          var c = a.axis;d[c.isXAxis ? \"zoomX\" : \"zoomY\"] && (b = c.zoom(a.min, a.max), c.displayBtn && (f = !0));\n        });h = this.resetZoomButton;f && !h ? this.showResetZoom() : !f && c(h) && (this.resetZoomButton = h.destroy());b && this.redraw(t(this.options.chart.animation, a && a.animation, 100 > this.pointCount));\n      },\n      pan: function pan(a, b) {\n        var c = this,\n            e = c.hoverPoints,\n            d;e && p(e, function (a) {\n          a.setState();\n        });p(\"xy\" === b ? [1, 0] : [1], function (b) {\n          b = c[b ? \"xAxis\" : \"yAxis\"][0];var e = b.horiz,\n              f = a[e ? \"chartX\" : \"chartY\"],\n              e = e ? \"mouseDownX\" : \"mouseDownY\",\n              h = c[e],\n              k = (b.pointRange || 0) / 2,\n              g = b.getExtremes(),\n              l = b.toValue(h - f, !0) + k,\n              k = b.toValue(h + b.len - f, !0) - k,\n              m = k < l,\n              h = m ? k : l,\n              l = m ? l : k,\n              k = Math.min(g.dataMin, g.min) - h,\n              g = l - Math.max(g.dataMax, g.max);b.series.length && 0 > k && 0 > g && (b.setExtremes(h, l, !1, !1, { trigger: \"pan\" }), d = !0);c[e] = f;\n        });d && c.redraw(!1);I(c.container, { cursor: \"move\" });\n      } });v(m.prototype, { select: function select(a, b) {\n        var c = this,\n            e = c.series,\n            f = e.chart;a = t(a, !c.selected);c.firePointEvent(a ? \"select\" : \"unselect\", { accumulate: b }, function () {\n          c.selected = c.options.selected = a;e.options.data[d(c, e.data)] = c.options;c.setState(a && \"select\");b || p(f.getSelectedPoints(), function (a) {\n            a.selected && a !== c && (a.selected = a.options.selected = !1, e.options.data[d(a, e.data)] = a.options, a.setState(\"\"), a.firePointEvent(\"unselect\"));\n          });\n        });\n      }, onMouseOver: function onMouseOver(a, b) {\n        var c = this.series,\n            e = c.chart,\n            d = e.tooltip,\n            f = e.hoverPoint;if (this.series) {\n          if (!b) {\n            if (f && f !== this) f.onMouseOut();if (e.hoverSeries !== c) c.onMouseOver();e.hoverPoint = this;\n          }!d || d.shared && !c.noSharedTooltip ? d || this.setState(\"hover\") : (this.setState(\"hover\"), d.refresh(this, a));this.firePointEvent(\"mouseOver\");\n        }\n      }, onMouseOut: function onMouseOut() {\n        var a = this.series.chart,\n            b = a.hoverPoints;this.firePointEvent(\"mouseOut\");b && -1 !== d(this, b) || (this.setState(), a.hoverPoint = null);\n      }, importEvents: function importEvents() {\n        if (!this.hasImportedEvents) {\n          var a = y(this.series.options.point, this.options).events,\n              b;this.events = a;for (b in a) {\n            D(this, b, a[b]);\n          }this.hasImportedEvents = !0;\n        }\n      }, setState: function setState(a, b) {\n        var c = Math.floor(this.plotX),\n            d = this.plotY,\n            e = this.series,\n            h = e.options.states[a] || {},\n            l = f[e.type].marker && e.options.marker,\n            m = l && !1 === l.enabled,\n            n = l && l.states && l.states[a] || {},\n            p = !1 === n.enabled,\n            g = e.stateMarkerGraphic,\n            q = this.marker || {},\n            u = e.chart,\n            y = e.halo,\n            z,\n            F = l && e.markerAttribs;a = a || \"\";if (!(a === this.state && !b || this.selected && \"select\" !== a || !1 === h.enabled || a && (p || m && !1 === n.enabled) || a && q.states && q.states[a] && !1 === q.states[a].enabled)) {\n          F && (z = e.markerAttribs(this, a));if (this.graphic) this.state && this.graphic.removeClass(\"highcharts-point-\" + this.state), a && this.graphic.addClass(\"highcharts-point-\" + a), this.graphic.attr(e.pointAttribs(this, a)), z && this.graphic.animate(z, t(u.options.chart.animation, n.animation, l.animation)), g && g.hide();else {\n            if (a && n) {\n              l = q.symbol || e.symbol;g && g.currentSymbol !== l && (g = g.destroy());if (g) g[b ? \"animate\" : \"attr\"]({ x: z.x, y: z.y });else l && (e.stateMarkerGraphic = g = u.renderer.symbol(l, z.x, z.y, z.width, z.height).add(e.markerGroup), g.currentSymbol = l);g && g.attr(e.pointAttribs(this, a));\n            }g && (g[a && u.isInsidePlot(c, d, u.inverted) ? \"show\" : \"hide\"](), g.element.point = this);\n          }(c = h.halo) && c.size ? (y || (e.halo = y = u.renderer.path().add(F ? e.markerGroup : e.group)), y[b ? \"animate\" : \"attr\"]({ d: this.haloPath(c.size) }), y.attr({ \"class\": \"highcharts-halo highcharts-color-\" + t(this.colorIndex, e.colorIndex) }), y.point = this, y.attr(v({ fill: this.color || e.color, \"fill-opacity\": c.opacity, zIndex: -1 }, c.attributes))) : y && y.point && y.point.haloPath && y.animate({ d: y.point.haloPath(0) });this.state = a;\n        }\n      }, haloPath: function haloPath(a) {\n        return this.series.chart.renderer.symbols.circle(Math.floor(this.plotX) - a, this.plotY - a, 2 * a, 2 * a);\n      } });v(b.prototype, { onMouseOver: function onMouseOver() {\n        var a = this.chart,\n            b = a.hoverSeries;if (b && b !== this) b.onMouseOut();this.options.events.mouseOver && l(this, \"mouseOver\");this.setState(\"hover\");a.hoverSeries = this;\n      }, onMouseOut: function onMouseOut() {\n        var a = this.options,\n            b = this.chart,\n            c = b.tooltip,\n            d = b.hoverPoint;b.hoverSeries = null;if (d) d.onMouseOut();\n        this && a.events.mouseOut && l(this, \"mouseOut\");!c || a.stickyTracking || c.shared && !this.noSharedTooltip || c.hide();this.setState();\n      }, setState: function setState(a) {\n        var b = this,\n            c = b.options,\n            d = b.graph,\n            f = c.states,\n            h = c.lineWidth,\n            c = 0;a = a || \"\";if (b.state !== a && (p([b.group, b.markerGroup], function (c) {\n          c && (b.state && c.removeClass(\"highcharts-series-\" + b.state), a && c.addClass(\"highcharts-series-\" + a));\n        }), b.state = a, !f[a] || !1 !== f[a].enabled) && (a && (h = f[a].lineWidth || h + (f[a].lineWidthPlus || 0)), d && !d.dashstyle)) for (f = { \"stroke-width\": h }, d.attr(f); b[\"zone-graph-\" + c];) {\n          b[\"zone-graph-\" + c].attr(f), c += 1;\n        }\n      }, setVisible: function setVisible(a, b) {\n        var c = this,\n            d = c.chart,\n            e = c.legendItem,\n            f,\n            h = d.options.chart.ignoreHiddenSeries,\n            m = c.visible;f = (c.visible = a = c.options.visible = c.userOptions.visible = void 0 === a ? !m : a) ? \"show\" : \"hide\";p([\"group\", \"dataLabelsGroup\", \"markerGroup\", \"tracker\", \"tt\"], function (a) {\n          if (c[a]) c[a][f]();\n        });if (d.hoverSeries === c || (d.hoverPoint && d.hoverPoint.series) === c) c.onMouseOut();e && d.legend.colorizeItem(c, a);c.isDirty = !0;c.options.stacking && p(d.series, function (a) {\n          a.options.stacking && a.visible && (a.isDirty = !0);\n        });p(c.linkedSeries, function (b) {\n          b.setVisible(a, !1);\n        });h && (d.isDirtyBox = !0);!1 !== b && d.redraw();l(c, f);\n      }, show: function show() {\n        this.setVisible(!0);\n      }, hide: function hide() {\n        this.setVisible(!1);\n      }, select: function select(a) {\n        this.selected = a = void 0 === a ? !this.selected : a;this.checkbox && (this.checkbox.checked = a);l(this, a ? \"select\" : \"unselect\");\n      }, drawTracker: a.drawTrackerGraph });\n  })(L);(function (a) {\n    var D = a.Chart,\n        C = a.each,\n        G = a.inArray,\n        I = a.isObject,\n        h = a.pick,\n        f = a.splat;D.prototype.setResponsive = function (a) {\n      var f = this.options.responsive;\n      f && f.rules && C(f.rules, function (f) {\n        this.matchResponsiveRule(f, a);\n      }, this);\n    };D.prototype.matchResponsiveRule = function (f, v) {\n      var l = this.respRules,\n          p = f.condition,\n          d;d = p.callback || function () {\n        return this.chartWidth <= h(p.maxWidth, Number.MAX_VALUE) && this.chartHeight <= h(p.maxHeight, Number.MAX_VALUE) && this.chartWidth >= h(p.minWidth, 0) && this.chartHeight >= h(p.minHeight, 0);\n      };void 0 === f._id && (f._id = a.uniqueKey());d = d.call(this);!l[f._id] && d ? f.chartOptions && (l[f._id] = this.currentOptions(f.chartOptions), this.update(f.chartOptions, v)) : l[f._id] && !d && (this.update(l[f._id], v), delete l[f._id]);\n    };D.prototype.currentOptions = function (a) {\n      function h(a, d, c) {\n        var l, p;for (l in a) {\n          if (-1 < G(l, [\"series\", \"xAxis\", \"yAxis\"])) for (a[l] = f(a[l]), c[l] = [], p = 0; p < a[l].length; p++) {\n            c[l][p] = {}, h(a[l][p], d[l][p], c[l][p]);\n          } else I(a[l]) ? (c[l] = {}, h(a[l], d[l] || {}, c[l])) : c[l] = d[l] || null;\n        }\n      }var l = {};h(a, this.options, l);return l;\n    };\n  })(L);return L;\n});\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n}();\n\n;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40)(module)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2hpZ2hjaGFydHMvaGlnaGNoYXJ0cy5qcz9jODljIl0sIm5hbWVzIjpbIkwiLCJhIiwibW9kdWxlIiwiZXhwb3J0cyIsImRvY3VtZW50IiwiSGlnaGNoYXJ0cyIsIndpbmRvdyIsIkQiLCJDIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiRyIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVNWR1JlY3QiLCJJIiwidGVzdCIsIm9wZXJhIiwiaCIsImYiLCJwIiwicGFyc2VJbnQiLCJzcGxpdCIsImVycm9yIiwicHJvZHVjdCIsInZlcnNpb24iLCJkZWcycmFkIiwiTWF0aCIsIlBJIiwiZG9jIiwiaGFzQmlkaUJ1ZyIsImhhc1RvdWNoIiwiZG9jdW1lbnRFbGVtZW50Iiwib250b3VjaHN0YXJ0IiwiaXNNUyIsImlzV2ViS2l0IiwiaXNGaXJlZm94IiwiaXNUb3VjaERldmljZSIsIlNWR19OUyIsImNoYXJ0Q291bnQiLCJzZXJpZXNUeXBlcyIsInN5bWJvbFNpemVzIiwic3ZnIiwidm1sIiwid2luIiwiY2hhcnRzIiwibWFyZ2luTmFtZXMiLCJub29wIiwiaXNOdW1iZXIiLCJFcnJvciIsImNvbnNvbGUiLCJsb2ciLCJGeCIsIm9wdGlvbnMiLCJlbGVtIiwicHJvcCIsInByb3RvdHlwZSIsImRTZXR0ZXIiLCJwYXRocyIsInYiLCJub3ciLCJsIiwibGVuZ3RoIiwidSIsInRvRCIsInBhcnNlRmxvYXQiLCJpc05hTiIsImF0dHIiLCJ1cGRhdGUiLCJzdGVwIiwiZWxlbWVudCIsInN0eWxlIiwidW5pdCIsImNhbGwiLCJydW4iLCJzdG9wcGVkIiwic3RhcnRUaW1lIiwiRGF0ZSIsInN0YXJ0IiwiZW5kIiwicG9zIiwicHVzaCIsInRpbWVySWQiLCJzZXRJbnRlcnZhbCIsInNwbGljZSIsImNsZWFySW50ZXJ2YWwiLCJjb21wbGV0ZSIsImR1cmF0aW9uIiwiZCIsImN1ckFuaW0iLCJjIiwiZWFzaW5nIiwiaW5pdFBhdGgiLCJlIiwiYiIsInEiLCJtIiwic2xpY2UiLCJ0IiwiYXBwbHkiLCJjb25jYXQiLCJ6IiwiRiIsInkiLCJzdGFydFgiLCJuIiwiZW5kWCIsImluZGV4T2YiLCJpc0FyZWEiLCJleHRlbmQiLCJtZXJnZSIsImFyZ3VtZW50cyIsImhhc093blByb3BlcnR5IiwiaXNPYmplY3QiLCJub2RlVHlwZSIsIkFycmF5IiwicEludCIsImlzU3RyaW5nIiwiaXNBcnJheSIsIk9iamVjdCIsInRvU3RyaW5nIiwiZXJhc2UiLCJkZWZpbmVkIiwic2V0QXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwic3BsYXQiLCJzeW5jVGltZW91dCIsInNldFRpbWVvdXQiLCJwaWNrIiwiY3NzIiwib3BhY2l0eSIsImZpbHRlciIsImNyZWF0ZUVsZW1lbnQiLCJwYWRkaW5nIiwiYm9yZGVyIiwibWFyZ2luIiwiYXBwZW5kQ2hpbGQiLCJleHRlbmRDbGFzcyIsInBhZCIsIlN0cmluZyIsImpvaW4iLCJyZWxhdGl2ZUxlbmd0aCIsIndyYXAiLCJwcm9jZWVkIiwidW5zaGlmdCIsImdldFRaT2Zmc2V0IiwiaGNHZXRUaW1lem9uZU9mZnNldCIsImhjVGltZXpvbmVPZmZzZXQiLCJkYXRlRm9ybWF0IiwiZGVmYXVsdE9wdGlvbnMiLCJsYW5nIiwiaW52YWxpZERhdGUiLCJoY0dldEhvdXJzIiwiaGNHZXREYXkiLCJoY0dldERhdGUiLCJoY0dldE1vbnRoIiwiaGNHZXRGdWxsWWVhciIsIndlZWtkYXlzIiwic2hvcnRXZWVrZGF5cyIsInN1YnN0ciIsIkEiLCJ3Iiwic2hvcnRNb250aHMiLCJCIiwibW9udGhzIiwiWSIsIkgiLCJrIiwiTSIsImhjR2V0TWludXRlcyIsIlAiLCJTIiwiZ2V0U2Vjb25kcyIsInJvdW5kIiwiZGF0ZUZvcm1hdHMiLCJyZXBsYWNlIiwidG9VcHBlckNhc2UiLCJmb3JtYXRTaW5nbGUiLCJtYXRjaCIsIm51bWJlckZvcm1hdCIsImRlY2ltYWxQb2ludCIsInRob3VzYW5kc1NlcCIsImZvcm1hdCIsInNoaWZ0IiwiZ2V0TWFnbml0dWRlIiwicG93IiwiZmxvb3IiLCJMTjEwIiwibm9ybWFsaXplVGlja0ludGVydmFsIiwiZ3JlcCIsInN0YWJsZVNvcnQiLCJzYWZlSSIsInNvcnQiLCJhcnJheU1pbiIsImFycmF5TWF4IiwiZGVzdHJveU9iamVjdFByb3BlcnRpZXMiLCJkZXN0cm95IiwiZGlzY2FyZEVsZW1lbnQiLCJnYXJiYWdlQmluIiwiaW5uZXJIVE1MIiwiY29ycmVjdEZsb2F0IiwidG9QcmVjaXNpb24iLCJzZXRBbmltYXRpb24iLCJyZW5kZXJlciIsImdsb2JhbEFuaW1hdGlvbiIsImNoYXJ0IiwiYW5pbWF0aW9uIiwiYW5pbU9iamVjdCIsInRpbWVVbml0cyIsIm1pbGxpc2Vjb25kIiwic2Vjb25kIiwibWludXRlIiwiaG91ciIsImRheSIsIndlZWsiLCJtb250aCIsInllYXIiLCJhYnMiLCJtaW4iLCJ0b0ZpeGVkIiwibWF4IiwiZWFzZUluT3V0U2luZSIsImNvcyIsImdldFN0eWxlIiwib2Zmc2V0V2lkdGgiLCJzY3JvbGxXaWR0aCIsIm9mZnNldEhlaWdodCIsInNjcm9sbEhlaWdodCIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiaW5BcnJheSIsImZpbmQiLCJtYXAiLCJvZmZzZXQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsImNsaWVudFRvcCIsImxlZnQiLCJwYWdlWE9mZnNldCIsInNjcm9sbExlZnQiLCJjbGllbnRMZWZ0Iiwic3RvcCIsImVhY2giLCJmb3JFYWNoIiwiYWRkRXZlbnQiLCJ0YXJnZXQiLCJzcmNFbGVtZW50IiwiaGNFdmVudHMiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJoY0V2ZW50c0lFIiwicmVtb3ZlRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJub2RlTmFtZSIsImZpcmVFdmVudCIsImNyZWF0ZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImluaXRFdmVudCIsInByZXZlbnREZWZhdWx0IiwiZGVmYXVsdFByZXZlbnRlZCIsInR5cGUiLCJhbmltYXRlIiwic2VyaWVzVHlwZSIsImdldE9wdGlvbnMiLCJwbG90T3B0aW9ucyIsInBvaW50Q2xhc3MiLCJQb2ludCIsInVuaXF1ZUtleSIsInJhbmRvbSIsInN1YnN0cmluZyIsImpRdWVyeSIsImZuIiwiaGlnaGNoYXJ0cyIsImRlZmF1bHRWaWV3Iiwid2lkdGgiLCJoZWlnaHQiLCJ6b29tIiwiY3VycmVudFN0eWxlIiwiQ29sb3IiLCJpbml0IiwicGFyc2VycyIsInJlZ2V4IiwicGFyc2UiLCJuYW1lcyIsIndoaXRlIiwiYmxhY2siLCJpbnB1dCIsInN0b3BzIiwiZXhlYyIsInJnYmEiLCJnZXQiLCJicmlnaHRlbiIsInNldE9wYWNpdHkiLCJjb2xvciIsInIiLCJ4IiwiSyIsIkoiLCJOIiwiZyIsIlIiLCJTVkdFbGVtZW50IiwidGV4dFByb3BzIiwiRSIsImNvbG9yR3JhZGllbnQiLCJsaW5lYXJHcmFkaWVudCIsInJhZGlhbEdyYWRpZW50IiwiZ3JhZGllbnRzIiwicmFkaWFsUmVmZXJlbmNlIiwieDEiLCJ5MSIsIngyIiwieTIiLCJncmFkaWVudFVuaXRzIiwiZ2V0UmFkaWFsQXR0ciIsImlkIiwiYWRkIiwiZGVmcyIsInJhZEF0dHIiLCJ1cmwiLCJncmFkaWVudCIsImFwcGx5VGV4dE91dGxpbmUiLCJnZXRDb250cmFzdCIsImZpbGwiLCJmYWtlVFMiLCJ5U2V0dGVyIiwieFNldHRlciIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicmVtb3ZlQ2hpbGQiLCJmaXJzdENoaWxkIiwiY2xvbmVOb2RlIiwic3Ryb2tlIiwiaW5zZXJ0QmVmb3JlIiwiX2RlZmF1bHRHZXR0ZXIiLCJzeW1ib2xOYW1lIiwic3ltYm9sQXR0ciIsInJvdGF0aW9uIiwiZG9UcmFuc2Zvcm0iLCJfZGVmYXVsdFNldHRlciIsInNoYWRvd3MiLCJ1cGRhdGVTaGFkb3dzIiwidXBkYXRlVHJhbnNmb3JtIiwiY3V0SGVpZ2h0IiwiYWRkQ2xhc3MiLCJoYXNDbGFzcyIsInJlbW92ZUNsYXNzIiwic3ltYm9scyIsImNsaXAiLCJjcmlzcCIsInN0cm9rZVdpZHRoIiwic3R5bGVzIiwidGV4dFdpZHRoIiwidG9Mb3dlckNhc2UiLCJmb3JFeHBvcnQiLCJhZGRlZCIsImJ1aWxkVGV4dCIsInRleHRPdXRsaW5lIiwib24iLCJ0b3VjaEV2ZW50RmlyZWQiLCJvbmNsaWNrIiwic2V0UmFkaWFsUmVmZXJlbmNlIiwidHJhbnNsYXRlIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJpbnZlcnQiLCJpbnZlcnRlZCIsInNjYWxlWCIsInNjYWxlWSIsInRvRnJvbnQiLCJwYXJlbnROb2RlIiwiYWxpZ24iLCJhbGlnbmVkT2JqZWN0cyIsImFsaWduT3B0aW9ucyIsImFsaWduQnlUcmFuc2xhdGUiLCJhbGlnblRvIiwidmVydGljYWxBbGlnbiIsInBsYWNlZCIsImFsaWduQXR0ciIsImdldEJCb3giLCJ0ZXh0U3RyIiwiY2FjaGUiLCJjYWNoZUtleXMiLCJmb250U2l6ZSIsIm5hbWVzcGFjZVVSSSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJkaXNwbGF5IiwiVCIsImh0bWxHZXRCQm94IiwiaXNTVkciLCJzaW4iLCJzaG93IiwidmlzaWJpbGl0eSIsImhpZGUiLCJmYWRlT3V0IiwicGFyZW50R3JvdXAiLCJwYXJlbnRJbnZlcnRlZCIsImhhbmRsZVoiLCJ6SW5kZXgiLCJ6SW5kZXhTZXR0ZXIiLCJib3giLCJvbkFkZCIsInNhZmVSZW1vdmVDaGlsZCIsIm9ubW91c2VvdXQiLCJvbm1vdXNlb3ZlciIsIm9ubW91c2Vtb3ZlIiwicG9pbnQiLCJjbGlwUGF0aCIsImRlc3Ryb3lTaGFkb3dzIiwiZGl2IiwiY2hpbGROb2RlcyIsInNoYWRvdyIsIm9mZnNldFgiLCJvZmZzZXRZIiwiaXNTaGFkb3ciLCJ0cmFuc2Zvcm0iLCJ4R2V0dGVyIiwiZGFzaHN0eWxlU2V0dGVyIiwiYWxpZ25TZXR0ZXIiLCJjZW50ZXIiLCJyaWdodCIsIm9wYWNpdHlTZXR0ZXIiLCJ0aXRsZVNldHRlciIsImNyZWF0ZVRleHROb2RlIiwidGV4dFNldHRlciIsImJCb3giLCJmaWxsU2V0dGVyIiwidmlzaWJpbGl0eVNldHRlciIsInJlbW92ZUF0dHJpYnV0ZSIsInlHZXR0ZXIiLCJ0cmFuc2xhdGVYU2V0dGVyIiwidHJhbnNsYXRlWVNldHRlciIsInJvdGF0aW9uU2V0dGVyIiwidmVydGljYWxBbGlnblNldHRlciIsInNjYWxlWFNldHRlciIsInNjYWxlWVNldHRlciIsInN0cm9rZVNldHRlciIsImhhc1N0cm9rZSIsIlNWR1JlbmRlcmVyIiwiRWxlbWVudCIsImJveFdyYXBwZXIiLCJsb2NhdGlvbiIsImhyZWYiLCJhbGxvd0hUTUwiLCJpbWdDb3VudCIsInNldFNpemUiLCJjZWlsIiwidW5TdWJQaXhlbEZpeCIsImZvbnRGYW1pbHkiLCJzZXRTdHlsZSIsImlzSGlkZGVuIiwiZHJhdyIsImN4IiwiY3kiLCJsaW5lSGVpZ2h0IiwidGV4dE92ZXJmbG93IiwiZm9udE1ldHJpY3MiLCJjdXJzb3IiLCJkeCIsIndoaXRlU3BhY2UiLCJPIiwibWVhc3VyZVNwYW5XaWR0aCIsImRhdGEiLCJwb3AiLCJkeSIsImJ1dHRvbiIsImxhYmVsIiwiZm9udFdlaWdodCIsInNldFN0YXRlIiwic3RhdGUiLCJjcmlzcExpbmUiLCJwYXRoIiwiY2lyY2xlIiwiYXJjIiwiaW5uZXJSIiwic3ltYm9sIiwicmVjdCIsInJTZXR0ZXIiLCJyeCIsInJ5Iiwidmlld0JveCIsImltYWdlIiwicHJlc2VydmVBc3BlY3RSYXRpbyIsInNldEF0dHJpYnV0ZU5TIiwiaW1nd2lkdGgiLCJpbWdoZWlnaHQiLCJpc0ltZyIsIm9ubG9hZCIsImNoYXJ0SW5kZXgiLCJwb3NpdGlvbiIsImJvZHkiLCJzcmMiLCJzcXVhcmUiLCJ0cmlhbmdsZSIsImRpYW1vbmQiLCJvcGVuIiwiY2FsbG91dCIsImFuY2hvclgiLCJhbmNob3JZIiwiY2xpcFJlY3QiLCJjb3VudCIsInRleHQiLCJodG1sIiwicm90Q29yciIsIlEiLCJ3aWR0aFNldHRlciIsImhlaWdodFNldHRlciIsInBhZGRpbmdTZXR0ZXIiLCJwYWRkaW5nTGVmdFNldHRlciIsImFuY2hvclhTZXR0ZXIiLCJhbmNob3JZU2V0dGVyIiwiViIsIlJlbmRlcmVyIiwiaHRtbENzcyIsInRhZ05hbWUiLCJvdmVyZmxvdyIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJodG1sVXBkYXRlVHJhbnNmb3JtIiwidGV4dEFsaWduIiwibWFyZ2luTGVmdCIsIm1hcmdpblRvcCIsImludmVydENoaWxkIiwiY1RUIiwic2V0U3BhblJvdGF0aW9uIiwidGV4dENvbnRlbnQiLCJpbm5lclRleHQiLCJnZXRTcGFuQ29ycmVjdGlvbiIsInhDb3JyIiwieUNvcnIiLCJhbGlnbk9uQWRkIiwidHJhbnNmb3JtT3JpZ2luIiwicmV2ZXJzZSIsImNsYXNzTmFtZSIsInBvaW50ZXJFdmVudHMiLCJkb2NNb2RlOCIsImRvY3VtZW50TW9kZSIsInByZXBWTUwiLCJkZWZlclVwZGF0ZVRyYW5zZm9ybSIsImVsZW1IZWlnaHQiLCJwYXRoVG9WTUwiLCJpc0FyYyIsIm1lbWJlcnMiLCJkZXN0cm95Q2xpcCIsImdldENTUyIsImV2ZW50IiwiY3V0T2ZmUGF0aCIsInZhbHVlIiwiY3NzVGV4dCIsImN1dE9mZiIsInNldEF0dHIiLCJjbGFzc1NldHRlciIsImZpbGxlZCIsInN0cm9rZWQiLCJ1cGRhdGVDbGlwcGluZyIsIlZNTEVsZW1lbnQiLCJpc0lFOCIsImlzVk1MIiwibmFtZXNwYWNlcyIsImhjdiIsImNyZWF0ZVN0eWxlU2hlZXQiLCJzdHlsZVNoZWV0cyIsImF0YW4iLCJVIiwiZ2xvYmFsIiwiVk1MUmFkaWFsR3JhZGllbnRVUkwiLCJjb29yZHNpemUiLCJpc0NpcmNsZSIsImZsaXAiLCJWTUxSZW5kZXJlciIsInVzZVVUQyIsInRpbWV6b25lT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJoY01ha2VUaW1lIiwiVVRDIiwiZ2V0VGltZSIsImNvbG9ycyIsImxvYWRpbmciLCJudW1lcmljU3ltYm9scyIsInJlc2V0Wm9vbSIsInJlc2V0Wm9vbVRpdGxlIiwiYm9yZGVyUmFkaXVzIiwiZGVmYXVsdFNlcmllc1R5cGUiLCJpZ25vcmVIaWRkZW5TZXJpZXMiLCJzcGFjaW5nIiwicmVzZXRab29tQnV0dG9uIiwidGhlbWUiLCJib3JkZXJDb2xvciIsImJhY2tncm91bmRDb2xvciIsInBsb3RCb3JkZXJDb2xvciIsInRpdGxlIiwid2lkdGhBZGp1c3QiLCJzdWJ0aXRsZSIsImxhYmVscyIsImxlZ2VuZCIsImVuYWJsZWQiLCJsYXlvdXQiLCJsYWJlbEZvcm1hdHRlciIsIm5hbWUiLCJuYXZpZ2F0aW9uIiwiYWN0aXZlQ29sb3IiLCJpbmFjdGl2ZUNvbG9yIiwiaXRlbVN0eWxlIiwiaXRlbUhvdmVyU3R5bGUiLCJpdGVtSGlkZGVuU3R5bGUiLCJpdGVtQ2hlY2tib3hTdHlsZSIsInNxdWFyZVN5bWJvbCIsInN5bWJvbFBhZGRpbmciLCJsYWJlbFN0eWxlIiwidG9vbHRpcCIsImRhdGVUaW1lTGFiZWxGb3JtYXRzIiwiZm9vdGVyRm9ybWF0Iiwic25hcCIsImJvcmRlcldpZHRoIiwiaGVhZGVyRm9ybWF0IiwicG9pbnRGb3JtYXQiLCJjcmVkaXRzIiwic2V0T3B0aW9ucyIsImRlZmF1bHRQbG90T3B0aW9ucyIsIlBsb3RMaW5lT3JCYW5kIiwiYXhpcyIsInJlbmRlciIsImhvcml6IiwidG8iLCJmcm9tIiwic3ZnRWxlbSIsImV2ZW50cyIsImxvZzJsaW4iLCJpc0xvZyIsImRhc2hTdHlsZSIsImRhc2hzdHlsZSIsImdldFBsb3RMaW5lUGF0aCIsImdldFBsb3RCYW5kUGF0aCIsImZsYXQiLCJyZW5kZXJMYWJlbCIsInVzZUhUTUwiLCJwbG90TGluZXNBbmRCYW5kcyIsIkF4aXNQbG90TGluZU9yQmFuZEV4dGVuc2lvbiIsImFkZFBsb3RCYW5kIiwiYWRkUGxvdEJhbmRPckxpbmUiLCJhZGRQbG90TGluZSIsInVzZXJPcHRpb25zIiwicmVtb3ZlUGxvdEJhbmRPckxpbmUiLCJwbG90TGluZXMiLCJwbG90QmFuZHMiLCJUaWNrIiwiaXNOZXciLCJhZGRMYWJlbCIsImNhdGVnb3JpZXMiLCJ0aWNrUG9zaXRpb25zIiwiaW5mbyIsImlzRGF0ZXRpbWVBeGlzIiwiaGlnaGVyUmFua3MiLCJ1bml0TmFtZSIsImlzRmlyc3QiLCJpc0xhc3QiLCJkYXRlVGltZUxhYmVsRm9ybWF0IiwibGluMmxvZyIsImxhYmVsTGVuZ3RoIiwibGFiZWxHcm91cCIsImdldExhYmVsU2l6ZSIsImhhbmRsZU92ZXJmbG93IiwiY2hhcnRXaWR0aCIsImxhYmVsTGVmdCIsImxhYmVsUmlnaHQiLCJsZW4iLCJsYWJlbEFsaWduIiwiZ2V0U2xvdFdpZHRoIiwiYXV0b1JvdGF0aW9uIiwiZ2V0UG9zaXRpb24iLCJvbGRDaGFydEhlaWdodCIsImNoYXJ0SGVpZ2h0IiwidHJhbnNCIiwib3Bwb3NpdGUiLCJvbGRDaGFydFdpZHRoIiwiYm90dG9tIiwiZ2V0TGFiZWxQb3NpdGlvbiIsInRyYW5zQSIsInJldmVyc2VkIiwic3RhZ2dlckxpbmVzIiwidGlja1JvdENvcnIiLCJzaWRlIiwibGFiZWxPZmZzZXQiLCJnZXRNYXJrUGF0aCIsImdyaWRMaW5lIiwidGlja1NpemUiLCJtYXJrIiwidGlja21hcmtPZmZzZXQiLCJpc1hBeGlzIiwiaXNBY3RpdmUiLCJncmlkR3JvdXAiLCJheGlzR3JvdXAiLCJ4eSIsInNob3dGaXJzdExhYmVsIiwic2hvd0xhc3RMYWJlbCIsImlzUmFkaWFsIiwiQXhpcyIsImVuZE9uVGljayIsIm1pblBhZGRpbmciLCJtYXhQYWRkaW5nIiwibWlub3JUaWNrTGVuZ3RoIiwibWlub3JUaWNrUG9zaXRpb24iLCJzdGFydE9mV2VlayIsInN0YXJ0T25UaWNrIiwidGlja0xlbmd0aCIsInRpY2ttYXJrUGxhY2VtZW50IiwidGlja1BpeGVsSW50ZXJ2YWwiLCJ0aWNrUG9zaXRpb24iLCJtaW5vckdyaWRMaW5lQ29sb3IiLCJtaW5vckdyaWRMaW5lV2lkdGgiLCJtaW5vclRpY2tDb2xvciIsImxpbmVDb2xvciIsImxpbmVXaWR0aCIsImdyaWRMaW5lQ29sb3IiLCJ0aWNrQ29sb3IiLCJkZWZhdWx0WUF4aXNPcHRpb25zIiwic3RhY2tMYWJlbHMiLCJmb3JtYXR0ZXIiLCJ0b3RhbCIsImdyaWRMaW5lV2lkdGgiLCJkZWZhdWx0TGVmdEF4aXNPcHRpb25zIiwiZGVmYXVsdFJpZ2h0QXhpc09wdGlvbnMiLCJkZWZhdWx0Qm90dG9tQXhpc09wdGlvbnMiLCJkZWZhdWx0VG9wQXhpc09wdGlvbnMiLCJpc1giLCJjb2xsIiwiZGVmYXVsdExhYmVsRm9ybWF0dGVyIiwibWluUGl4ZWxQYWRkaW5nIiwidmlzaWJsZSIsInpvb21FbmFibGVkIiwiaGFzTmFtZXMiLCJpc0xpbmtlZCIsImxpbmtlZFRvIiwidGlja3MiLCJsYWJlbEVkZ2UiLCJtaW5vclRpY2tzIiwiYWx0ZXJuYXRlQmFuZHMiLCJtaW5SYW5nZSIsInVzZXJNaW5SYW5nZSIsIm1heFpvb20iLCJyYW5nZSIsInN0YWNrcyIsIm9sZFN0YWNrcyIsInN0YWNrc1RvdWNoZWQiLCJjcm9zc2hhaXIiLCJjcm9zc2hhaXJzIiwiYXhlcyIsInhBeGlzIiwic2VyaWVzIiwicmVtb3ZlUGxvdExpbmUiLCJyZW1vdmVQbG90QmFuZCIsInZhbDJsaW4iLCJsaW4ydmFsIiwibnVtZXJpY1N5bWJvbE1hZ25pdHVkZSIsInRpY2tJbnRlcnZhbCIsImdldFNlcmllc0V4dHJlbWVzIiwiaGFzVmlzaWJsZVNlcmllcyIsImRhdGFNaW4iLCJkYXRhTWF4IiwidGhyZXNob2xkIiwic29mdFRocmVzaG9sZCIsImJ1aWxkU3RhY2tzIiwieERhdGEiLCJnZXRFeHRyZW1lcyIsImxpbmtlZFBhcmVudCIsIm9sZFRyYW5zQSIsIm9sZE1pbiIsImlzT3JkaW5hbCIsImlzQnJva2VuIiwic2VjdG9yIiwidG9QaXhlbHMiLCJ0b1ZhbHVlIiwiZ2V0TGluZWFyVGlja1Bvc2l0aW9ucyIsImdldE1pbm9yVGlja1Bvc2l0aW9ucyIsIm1pbm9yVGlja0ludGVydmFsIiwicG9pbnRSYW5nZVBhZGRpbmciLCJnZXRMb2dUaWNrUG9zaXRpb25zIiwiZ2V0VGltZVRpY2tzIiwibm9ybWFsaXplVGltZVRpY2tJbnRlcnZhbCIsInRyaW1UaWNrcyIsImFkanVzdEZvck1pblJhbmdlIiwieEluY3JlbWVudCIsImdldENsb3Nlc3QiLCJjbG9zZXN0UG9pbnRSYW5nZSIsIm5vU2hhcmVkVG9vbHRpcCIsIm5hbWVUb1giLCJyZXF1aXJlU29ydGluZyIsInVuaXF1ZU5hbWVzIiwiYXV0b0luY3JlbWVudCIsInVwZGF0ZU5hbWVzIiwicG9pbnRzIiwiaXNEaXJ0eURhdGEiLCJwcm9jZXNzRGF0YSIsImdlbmVyYXRlUG9pbnRzIiwic2V0QXhpc1RyYW5zbGF0aW9uIiwiYXhpc1BvaW50UmFuZ2UiLCJtaW5Qb2ludE9mZnNldCIsInBvaW50UmFuZ2UiLCJwb2ludFBsYWNlbWVudCIsInNpbmdsZSIsIm9yZGluYWxTbG9wZSIsInRyYW5zbGF0aW9uU2xvcGUiLCJtaW5Gcm9tUmFuZ2UiLCJzZXRUaWNrSW50ZXJ2YWwiLCJnZXRUaWNrQW1vdW50IiwidXNlck1pbiIsInVzZXJNYXgiLCJiZWZvcmVQYWRkaW5nIiwidXNlUGVyY2VudGFnZSIsInNvZnRNaW4iLCJjZWlsaW5nIiwic29mdE1heCIsInRpY2tBbW91bnQiLCJvbGRNYXgiLCJiZWZvcmVTZXRUaWNrUG9zaXRpb25zIiwicG9zdFByb2Nlc3NUaWNrSW50ZXJ2YWwiLCJtaW5UaWNrSW50ZXJ2YWwiLCJhbGxvd0RlY2ltYWxzIiwidW5zcXVpc2giLCJzZXRUaWNrUG9zaXRpb25zIiwidGlja1Bvc2l0aW9uZXIiLCJ1bml0cyIsIm9yZGluYWxQb3NpdGlvbnMiLCJhZGp1c3RUaWNrQW1vdW50IiwiYWxpZ25Ub090aGVycyIsImFsaWduVGlja3MiLCJwYW5lIiwiZmluYWxUaWNrQW10Iiwic2V0U2NhbGUiLCJvbGRBeGlzTGVuZ3RoIiwic2V0QXhpc1NpemUiLCJpc0RpcnR5IiwiZm9yY2VSZWRyYXciLCJvbGRVc2VyTWluIiwib2xkVXNlck1heCIsInJlc2V0U3RhY2tzIiwiY2xlYW5TdGFja3MiLCJzZXRFeHRyZW1lcyIsImtkVHJlZSIsImV2ZW50QXJncyIsInJlZHJhdyIsImFsbG93Wm9vbU91dHNpZGUiLCJkaXNwbGF5QnRuIiwidHJpZ2dlciIsInBsb3RXaWR0aCIsIm9mZnNldFJpZ2h0IiwicGxvdEhlaWdodCIsInBsb3RUb3AiLCJwbG90TGVmdCIsImdldFRocmVzaG9sZCIsImF1dG9MYWJlbEFsaWduIiwibGFiZWxNZXRyaWNzIiwiTnVtYmVyIiwiTUFYX1ZBTFVFIiwiYXV0b1JvdGF0aW9uTGltaXQiLCJsYWJlbFJvdGF0aW9uIiwicmVuZGVyVW5zcXVpc2giLCJtYXhMYWJlbExlbmd0aCIsInNwZWNDc3MiLCJoYXNEYXRhIiwiYWRkVGl0bGUiLCJheGlzVGl0bGUiLCJsb3ciLCJtaWRkbGUiLCJoaWdoIiwiZ2V0T2Zmc2V0IiwiYXhpc09mZnNldCIsImNsaXBPZmZzZXQiLCJheGlzUGFyZW50Iiwic2hvd0F4aXMiLCJzaG93RW1wdHkiLCJncmlkWkluZGV4IiwicmVzZXJ2ZVNwYWNlIiwicmVuZGVyTGluZSIsImF4aXNUaXRsZU1hcmdpbiIsImF4aXNMaW5lIiwiZ2V0TGluZVBhdGgiLCJnZXRUaXRsZVBvc2l0aW9uIiwiYWx0ZXJuYXRlR3JpZENvbG9yIiwiaGFzUmVuZGVyZWQiLCJvdmVybGFwIiwicG9sYXIiLCJfYWRkZWRQbG90TEIiLCJpc1BsYWNlZCIsInJlbmRlclN0YWNrVG90YWxzIiwia2VlcFByb3BzIiwiZHJhd0Nyb3NzaGFpciIsImNyb3NzIiwicGxvdFgiLCJwbG90WSIsImNoYXJ0WCIsImNoYXJ0WSIsInN0YWNrWSIsImhpZGVDcm9zc2hhaXIiLCJ1bml0UmFuZ2UiLCJoY1NldE1pbGxpc2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsImhjU2V0U2Vjb25kcyIsImhjU2V0TWludXRlcyIsImhjU2V0SG91cnMiLCJoY1NldERhdGUiLCJoY1NldE1vbnRoIiwiaGNTZXRGdWxsWWVhciIsInRvdGFsUmFuZ2UiLCJfbWlub3JBdXRvSW50ZXJ2YWwiLCJUb29sdGlwIiwic2hhcmVkIiwiY2xlYW5TcGxpdCIsInR0IiwiZ2V0TGFiZWwiLCJzaGFwZSIsImNsZWFyVGltZW91dCIsImhpZGVUaW1lciIsInRvb2x0aXBUaW1lb3V0IiwibW92ZSIsImZvbGxvd1BvaW50ZXIiLCJoaWRlRGVsYXkiLCJnZXRBbmNob3IiLCJ0b29sdGlwUG9zIiwicG9pbnRlciIsIm5vcm1hbGl6ZSIsInlBeGlzIiwicGxvdExvdyIsInBsb3RIaWdoIiwiZGlzdGFuY2UiLCJ0dEJlbG93IiwibmVnYXRpdmUiLCJkZWZhdWx0Rm9ybWF0dGVyIiwidG9vbHRpcEZvb3RlckhlYWRlckZvcm1hdHRlciIsImJvZHlGb3JtYXR0ZXIiLCJyZWZyZXNoIiwiaG92ZXJQb2ludHMiLCJ0b29sdGlwT3B0aW9ucyIsImdldExhYmVsQ29uZmlnIiwiY2F0ZWdvcnkiLCJyZW5kZXJTcGxpdCIsImNvbG9ySW5kZXgiLCJ1cGRhdGVQb3NpdGlvbiIsImlzSGVhZGVyIiwicmFuayIsInNpemUiLCJkaXN0cmlidXRlIiwicG9zaXRpb25lciIsImdldFhEYXRlRm9ybWF0IiwieERhdGVGb3JtYXQiLCJrZXkiLCJwb2ludEZvcm1hdHRlciIsInRvb2x0aXBGb3JtYXR0ZXIiLCJQb2ludGVyIiwicnVuQ2hhcnRDbGljayIsImNsaWNrIiwicGluY2hEb3duIiwibGFzdFZhbGlkVG91Y2giLCJmb2xsb3dUb3VjaE1vdmUiLCJzZXRET01FdmVudHMiLCJ6b29tT3B0aW9uIiwiem9vbVR5cGUiLCJwaW5jaFR5cGUiLCJ6b29tWCIsInpvb21ZIiwiem9vbUhvciIsInpvb21WZXJ0IiwiaGFzWm9vbSIsInRvdWNoZXMiLCJpdGVtIiwiY2hhbmdlZFRvdWNoZXMiLCJjaGFydFBvc2l0aW9uIiwiY29udGFpbmVyIiwicGFnZVgiLCJjbGllbnRYIiwicGFnZVkiLCJnZXRDb29yZGluYXRlcyIsInJ1blBvaW50QWN0aW9ucyIsImhvdmVyUG9pbnQiLCJob3ZlclNlcmllcyIsImRpcmVjdFRvdWNoIiwic3RpY2t5VHJhY2tpbmciLCJlbmFibGVNb3VzZVRyYWNraW5nIiwic2VhcmNoUG9pbnQiLCJrZERpbWVuc2lvbnMiLCJkaXN0WCIsImRpc3QiLCJncm91cCIsImluZGV4IiwicHJldktEUG9pbnQiLCJvbk1vdXNlT3ZlciIsInVuRG9jTW91c2VNb3ZlIiwiaG92ZXJDaGFydEluZGV4Iiwib25Eb2N1bWVudE1vdXNlTW92ZSIsInJlc2V0IiwiaXNDYXJ0ZXNpYW4iLCJvbk1vdXNlT3V0IiwiaG92ZXJYIiwic2NhbGVHcm91cHMiLCJnZXRQbG90Qm94IiwibWFya2VyR3JvdXAiLCJkYXRhTGFiZWxzR3JvdXAiLCJjbGlwQm94IiwiZHJhZ1N0YXJ0IiwibW91c2VJc0Rvd24iLCJjYW5jZWxDbGljayIsIm1vdXNlRG93blgiLCJtb3VzZURvd25ZIiwiZHJhZyIsInNlbGVjdGlvbk1hcmtlciIsInBhbktleSIsInRvdWNoIiwiaGFzRHJhZ2dlZCIsInNxcnQiLCJpc0luc2lkZVBsb3QiLCJoYXNDYXJ0ZXNpYW5TZXJpZXMiLCJzZWxlY3Rpb25NYXJrZXJGaWxsIiwicGFubmluZyIsInBhbiIsImRyb3AiLCJoYXNQaW5jaGVkIiwib3JpZ2luYWxFdmVudCIsIl9jdXJzb3IiLCJvbkNvbnRhaW5lck1vdXNlRG93biIsIm9uRG9jdW1lbnRNb3VzZVVwIiwiaW5DbGFzcyIsIm9uQ29udGFpbmVyTW91c2VMZWF2ZSIsInJlbGF0ZWRUYXJnZXQiLCJ0b0VsZW1lbnQiLCJvbkNvbnRhaW5lck1vdXNlTW92ZSIsInJldHVyblZhbHVlIiwib3Blbk1lbnUiLCJvblRyYWNrZXJNb3VzZU91dCIsIm9uQ29udGFpbmVyQ2xpY2siLCJmaXJlUG9pbnRFdmVudCIsIm9ubW91c2Vkb3duIiwib25Db250YWluZXJUb3VjaFN0YXJ0Iiwib250b3VjaG1vdmUiLCJvbkNvbnRhaW5lclRvdWNoTW92ZSIsIm9uRG9jdW1lbnRUb3VjaEVuZCIsInBpbmNoVHJhbnNsYXRlIiwicGluY2hUcmFuc2xhdGVEaXJlY3Rpb24iLCJib3VuZHMiLCJwaW5jaCIsInJ1blRyYWNrZXJDbGljayIsImluaXRpYXRlZCIsInJlcyIsInBsb3RCb3giLCJQb2ludGVyRXZlbnQiLCJNU1BvaW50ZXJFdmVudCIsInBvaW50ZXJUeXBlIiwiTVNQT0lOVEVSX1RZUEVfVE9VQ0giLCJjdXJyZW50VGFyZ2V0Iiwib25Db250YWluZXJQb2ludGVyRG93biIsInBvaW50ZXJJZCIsIm9uQ29udGFpbmVyUG9pbnRlck1vdmUiLCJvbkRvY3VtZW50UG9pbnRlclVwIiwiYmF0Y2hNU0V2ZW50cyIsIkxlZ2VuZCIsInBvc2l0aW9uQ2hlY2tib3hlcyIsIml0ZW1NYXJnaW5Ub3AiLCJpbml0aWFsSXRlbVgiLCJpbml0aWFsSXRlbVkiLCJpdGVtSGVpZ2h0IiwibWF4SXRlbVdpZHRoIiwic3ltYm9sV2lkdGgiLCJwYWdlcyIsImlzRGlydHlMZWdlbmQiLCJpc0RpcnR5Qm94IiwiY29sb3JpemVJdGVtIiwibGVnZW5kR3JvdXAiLCJsZWdlbmRJdGVtIiwibGVnZW5kTGluZSIsImxlZ2VuZFN5bWJvbCIsIm1hcmtlciIsImlzTWFya2VyIiwicG9pbnRBdHRyaWJzIiwicG9zaXRpb25JdGVtIiwicnRsIiwiX2xlZ2VuZEl0ZW1Qb3MiLCJjaGVja2JveCIsImxlZ2VuZFdpZHRoIiwiZGVzdHJveUl0ZW0iLCJnZXRBbGxJdGVtcyIsImNsaXBIZWlnaHQiLCJsZWdlbmRIZWlnaHQiLCJ0aXRsZUhlaWdodCIsImFsbEl0ZW1zIiwiY2hlY2tib3hPZmZzZXQiLCJyZW5kZXJUaXRsZSIsImNvbnRlbnRHcm91cCIsInNldFRleHQiLCJsYWJlbEZvcm1hdCIsInJlbmRlckl0ZW0iLCJpdGVtRGlzdGFuY2UiLCJpdGVtTWFyZ2luQm90dG9tIiwiZHJhd0xlZ2VuZFN5bWJvbCIsImNyZWF0ZUNoZWNrYm94Rm9ySXRlbSIsInNob3dDaGVja2JveCIsInNjcm9sbEdyb3VwIiwiYmFzZWxpbmUiLCJzZXRJdGVtRXZlbnRzIiwiaXRlbVdpZHRoIiwibGVnZW5kSXRlbVdpZHRoIiwibGVnZW5kSXRlbUhlaWdodCIsIml0ZW1YIiwiaXRlbVkiLCJsYXN0TGluZUhlaWdodCIsImxhc3RJdGVtWSIsInNob3dJbkxlZ2VuZCIsImxlZ2VuZEl0ZW1zIiwibGVnZW5kVHlwZSIsImFkanVzdE1hcmdpbnMiLCJjaGFyQXQiLCJmbG9hdGluZyIsImxlZ2VuZEluZGV4IiwiaXNSZXNpemluZyIsInNwYWNpbmdCb3giLCJtYXhIZWlnaHQiLCJhcnJvd1NpemUiLCJuYXYiLCJjdXJyZW50UGFnZSIsImZ1bGxIZWlnaHQiLCJ1cCIsInNjcm9sbCIsInBhZ2VyIiwiZG93biIsIkxlZ2VuZFN5bWJvbE1peGluIiwiZHJhd1JlY3RhbmdsZSIsInN5bWJvbEhlaWdodCIsInN5bWJvbFJhZGl1cyIsImRyYXdMaW5lTWFya2VyIiwicmFkaXVzIiwiQ2hhcnQiLCJnZXRBcmdzIiwiY2FsbGJhY2tzIiwicmVuZGVyVG8iLCJyZXNwUnVsZXMiLCJjYWxsYmFjayIsInNob3dBeGVzIiwicG9pbnRDb3VudCIsImNvbG9yQ291bnRlciIsInN5bWJvbENvdW50ZXIiLCJmaXJzdFJlbmRlciIsImluaXRTZXJpZXMiLCJjbG9uZVJlbmRlclRvIiwibGF5T3V0VGl0bGVzIiwic3RhY2tpbmciLCJ1cGRhdGVUb3RhbHMiLCJnZXRTdGFja3MiLCJnZXRNYXJnaW5zIiwiZXh0S2V5IiwiZHJhd0NoYXJ0Qm94IiwiZ2V0QXhlcyIsImdldFNlbGVjdGVkUG9pbnRzIiwic2VsZWN0ZWQiLCJnZXRTZWxlY3RlZFNlcmllcyIsInNldFRpdGxlIiwiaXNTdG9jayIsInRpdGxlT2Zmc2V0IiwiZ2V0Q2hhcnRTaXplIiwicmVuZGVyVG9DbG9uZSIsImNvbnRhaW5lcldpZHRoIiwiY29udGFpbmVySGVpZ2h0Iiwic2V0UHJvcGVydHkiLCJzZXRDbGFzc05hbWUiLCJnZXRDb250YWluZXIiLCJnZXRFbGVtZW50QnlJZCIsInNraXBDbG9uZSIsImV4cG9ydGluZyIsInJlc2V0TWFyZ2lucyIsImV4dHJhQm90dG9tTWFyZ2luIiwibWFyZ2luQm90dG9tIiwiZXh0cmFUb3BNYXJnaW4iLCJnZXRBeGlzTWFyZ2lucyIsInNldENoYXJ0U2l6ZSIsInJlZmxvdyIsImlzUHJpbnRpbmciLCJyZWZsb3dUaW1lb3V0IiwiaW5pdFJlZmxvdyIsInNldFJlc3BvbnNpdmUiLCJtYXJnaW5SaWdodCIsInBsb3RTaXplWCIsInBsb3RTaXplWSIsInBsb3RCb3JkZXJXaWR0aCIsImNoYXJ0QmFja2dyb3VuZCIsInBsb3RCYWNrZ3JvdW5kIiwicGxvdEJvcmRlciIsInBsb3RCR0ltYWdlIiwicGxvdEJhY2tncm91bmRDb2xvciIsInBsb3RCYWNrZ3JvdW5kSW1hZ2UiLCJwbG90U2hhZG93IiwicHJvcEZyb21TZXJpZXMiLCJsaW5rU2VyaWVzIiwibGlua2VkU2VyaWVzIiwicmVuZGVyU2VyaWVzIiwicmVuZGVyTGFiZWxzIiwiaXRlbXMiLCJzZXJpZXNHcm91cCIsImFkZENyZWRpdHMiLCJtYXBDcmVkaXRzIiwic2Nyb2xsZXIiLCJpc1JlYWR5VG9SZW5kZXIiLCJyZWFkeVN0YXRlIiwiYXBwbHlPcHRpb25zIiwiY29sb3JCeVBvaW50IiwicG9pbnRWYWxLZXkiLCJvcHRpb25zVG9PYmplY3QiLCJpc051bGwiLCJpc1ZhbGlkIiwia2V5cyIsInBvaW50QXJyYXlNYXAiLCJkYXRhTGFiZWxzIiwiX2hhc1BvaW50TGFiZWxzIiwiX2hhc1BvaW50TWFya2VycyIsImdldENsYXNzTmFtZSIsInpvbmUiLCJnZXRab25lIiwiem9uZXMiLCJ6b25lQXhpcyIsImdyYXBoaWMiLCJkYXRhTGFiZWwiLCJkZXN0cm95RWxlbWVudHMiLCJwZXJjZW50YWdlIiwic3RhY2tUb3RhbCIsInZhbHVlRGVjaW1hbHMiLCJ2YWx1ZVByZWZpeCIsInZhbHVlU3VmZml4IiwiaW1wb3J0RXZlbnRzIiwiYWxsb3dQb2ludFNlbGVjdCIsInNlbGVjdCIsImN0cmxLZXkiLCJtZXRhS2V5Iiwic2hpZnRLZXkiLCJTZXJpZXMiLCJzdGF0ZXMiLCJob3ZlciIsInJhZGl1c1BsdXMiLCJsaW5lV2lkdGhQbHVzIiwiZmlsbENvbG9yIiwiY3JvcFRocmVzaG9sZCIsImhhbG8iLCJ0dXJib1RocmVzaG9sZCIsInNvcnRlZCIsImF4aXNUeXBlcyIsInBhcmFsbGVsQXJyYXlzIiwiYmluZEF4ZXMiLCJnZXRDb2xvciIsImdldFN5bWJvbCIsInNldERhdGEiLCJfaSIsImluc2VydCIsIm9wdGlvbmFsQXhpcyIsInVwZGF0ZVBhcmFsbGVsQXJyYXlzIiwidG9ZRGF0YSIsInBvaW50SW50ZXJ2YWxVbml0IiwicG9pbnRTdGFydCIsInBvaW50SW50ZXJ2YWwiLCJuZWdhdGl2ZUNvbG9yIiwibmVnYXRpdmVGaWxsQ29sb3IiLCJnZXRDeWNsaWMiLCJ5RGF0YSIsImNyb3BwZWQiLCJoYXNHcm91cGVkRGF0YSIsImdldEV4dHJlbWVzRnJvbUFsbCIsImZvcmNlQ3JvcCIsImNyb3BEYXRhIiwiY3JvcFN0YXJ0IiwicHJvY2Vzc2VkWERhdGEiLCJwcm9jZXNzZWRZRGF0YSIsImNyb3BTaG91bGRlciIsImRhdGFHcm91cCIsImdyb3VwTWFwIiwic3RhY2tlZFlEYXRhIiwibW9kaWZ5VmFsdWUiLCJzdGFydEZyb21UaHJlc2hvbGQiLCJuZWdTdGFja3MiLCJzdGFja0tleSIsImdldFN0YWNrSW5kaWNhdG9yIiwiYmFzZSIsInNldE9mZnNldCIsInBvaW50WE9mZnNldCIsImJhclciLCJ5Qm90dG9tIiwiSW5maW5pdHkiLCJpc0luc2lkZSIsImNsb3Nlc3RQb2ludFJhbmdlUHgiLCJnZXRWYWxpZFBvaW50cyIsInNldENsaXAiLCJzaGFyZWRDbGlwS2V5IiwiYWZ0ZXJBbmltYXRlIiwiZHJhd1BvaW50cyIsImhhc0ltYWdlIiwibWFya2VyQXR0cmlicyIsImFuaW1hdGlvblRpbWVvdXQiLCJzdXJ2aXZlIiwiZ2V0R3JhcGhQYXRoIiwiY29ubmVjdE51bGxzIiwibGVmdENsaWZmIiwicmlnaHRDbGlmZiIsImdldFBvaW50U3BsaW5lIiwieE1hcCIsImdyYXBoUGF0aCIsImRyYXdHcmFwaCIsImdhcHBlZFBhdGgiLCJmaWxsR3JhcGgiLCJsaW5lY2FwIiwiYXBwbHlab25lcyIsImNsaXBzIiwiZ3JhcGgiLCJhcmVhIiwiaW52ZXJ0R3JvdXBzIiwicGxvdEdyb3VwIiwiZHJhd0RhdGFMYWJlbHMiLCJkcmF3VHJhY2tlciIsImtkQXhpc0FycmF5Iiwic2VhcmNoS0RUcmVlIiwiYnVpbGRLRFRyZWUiLCJrZE5vdyIsImlzTmVnYXRpdmUiLCJzdGFjayIsImNyb3AiLCJyZXZlcnNlZFN0YWNrcyIsInNldFN0YWNrZWRQb2ludHMiLCJzZXRTdGFja0NsaWZmcyIsInNldFBlcmNlbnRTdGFja3MiLCJzdGFja1RvdGFsR3JvdXAiLCJ0b3VjaGVkIiwiY3VtIiwic2luZ2xlU3RhY2tzIiwiYWRkU2VyaWVzIiwiYWRkQXhpcyIsInNob3dMb2FkaW5nIiwibG9hZGluZ0RpdiIsImxvYWRpbmdTcGFuIiwibG9hZGluZ1Nob3duIiwic2hvd0R1cmF0aW9uIiwiaGlkZUxvYWRpbmciLCJoaWRlRHVyYXRpb24iLCJwcm9wc1JlcXVpcmVEaXJ0eUJveCIsInByb3BzUmVxdWlyZVVwZGF0ZVNlcmllcyIsInNldFN1YnRpdGxlIiwiZml4ZWRCb3giLCJyZW1vdmUiLCJyZW1vdmVQb2ludCIsImFkZFBvaW50Iiwic2V0Q2F0ZWdvcmllcyIsImdldFN0YWNrUG9pbnRzIiwiZG9DdXJ2ZSIsInJlY3RQbG90WCIsImFyZWFQYXRoIiwiZmlsbE9wYWNpdHkiLCJzaGlmdFVuaXQiLCJyaWdodENvbnRYIiwicmlnaHRDb250WSIsImdyb3VwUGFkZGluZyIsInBvaW50UGFkZGluZyIsIm1pblBvaW50TGVuZ3RoIiwiYnJpZ2h0bmVzcyIsInRyYWNrZXJHcm91cHMiLCJnZXRDb2x1bW5NZXRyaWNzIiwiZ3JvdXBpbmciLCJjb2x1bW5JbmRleCIsIm1heFBvaW50V2lkdGgiLCJwb2ludFdpZHRoIiwiY29sdW1uTWV0cmljcyIsImNyaXNwQ29sIiwiZGVuc2UiLCJ0cmFuc2xhdGVkVGhyZXNob2xkIiwiYmFyWCIsInNoYXBlVHlwZSIsInNoYXBlQXJncyIsInBvaW50QXR0clRvT3B0aW9ucyIsImFuaW1hdGlvbkxpbWl0IiwidGFrZU9yZGluYWxQb3NpdGlvbiIsIkNlbnRlcmVkU2VyaWVzTWl4aW4iLCJnZXRDZW50ZXIiLCJzbGljZWRPZmZzZXQiLCJpbm5lclNpemUiLCJpZ25vcmVIaWRkZW5Qb2ludCIsImNvbHVtbiIsInN0YXJ0QW5nbGVSYWQiLCJzdGFydFIiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGVSYWQiLCJlbmRBbmdsZSIsImdldFgiLCJhc2luIiwic2xpY2VkVHJhbnNsYXRpb24iLCJoYWxmIiwiYW5nbGUiLCJsYWJlbFBvcyIsInNoYWRvd0dyb3VwIiwic2xpY2VkIiwic29ydEJ5QW5nbGUiLCJzZXRWaXNpYmxlIiwiaGFsb1BhdGgiLCJ0YXJnZXRzIiwiZGVmZXIiLCJkbFByb2Nlc3NPcHRpb25zIiwiY29ubmVjdG9yIiwiZGxPcHRpb25zIiwiaW5zaWRlIiwiYWxpZ25EYXRhTGFiZWwiLCJmb3JjZURMIiwianVzdGlmeURhdGFMYWJlbCIsInBpZSIsImNvbm5lY3RvclBhZGRpbmciLCJjb25uZWN0b3JXaWR0aCIsIl9wb3MiLCJqdXN0aWZ5IiwiX2F0dHIiLCJ2ZXJpZnlEYXRhTGFiZWxPdmVyZmxvdyIsInBsYWNlRGF0YUxhYmVscyIsImNvbm5lY3RvckNvbG9yIiwiY29ubmVjdG9yUGF0aCIsInNvZnRDb25uZWN0b3IiLCJtb3ZlZCIsIm1pblNpemUiLCJkbEJveCIsImJlbG93IiwiZGF0YUxhYmVsQ29sbGVjdGlvbnMiLCJhbGxvd092ZXJsYXAiLCJsYWJlbHJhbmsiLCJoaWRlT3ZlcmxhcHBpbmdMYWJlbHMiLCJvbGRPcGFjaXR5IiwibmV3T3BhY2l0eSIsImlzT2xkIiwiVHJhY2tlck1peGluIiwiZHJhd1RyYWNrZXJQb2ludCIsIl9oYXNUcmFja2luZyIsImRyYXdUcmFja2VyR3JhcGgiLCJ0cmFja0J5QXJlYSIsInRyYWNrZXIiLCJzY2F0dGVyIiwiYnJvd3NlckV2ZW50IiwiY2hlY2tlZCIsImRlZmF1bHRDaGVja2VkIiwic2hvd1Jlc2V0Wm9vbSIsInJlbGF0aXZlVG8iLCJ6b29tT3V0IiwicmVzZXRTZWxlY3Rpb24iLCJhY2N1bXVsYXRlIiwiaGFzSW1wb3J0ZWRFdmVudHMiLCJzdGF0ZU1hcmtlckdyYXBoaWMiLCJjdXJyZW50U3ltYm9sIiwiYXR0cmlidXRlcyIsIm1vdXNlT3ZlciIsIm1vdXNlT3V0IiwicmVzcG9uc2l2ZSIsInJ1bGVzIiwibWF0Y2hSZXNwb25zaXZlUnVsZSIsImNvbmRpdGlvbiIsIm1heFdpZHRoIiwibWluV2lkdGgiLCJtaW5IZWlnaHQiLCJfaWQiLCJjaGFydE9wdGlvbnMiLCJjdXJyZW50T3B0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQU9BLENBQUMsVUFBU0EsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQywrQ0FBa0JDLE1BQWxCLE1BQTBCQSxPQUFPQyxPQUFqQyxHQUF5Q0QsT0FBT0MsT0FBUCxHQUFlSCxFQUFFSSxRQUFGLEdBQVdILEVBQUVELENBQUYsQ0FBWCxHQUFnQkMsQ0FBeEUsR0FBMEVELEVBQUVLLFVBQUYsR0FBYUosRUFBRUQsQ0FBRixDQUF2RjtBQUE0RixDQUEzRyxFQUE2RyxnQkFBYyxPQUFPTSxNQUFyQixHQUE0QkEsTUFBNUIsR0FBbUMsSUFBaEosRUFBcUosVUFBU04sQ0FBVCxFQUFXO0FBQUNBLE1BQUUsWUFBVTtBQUFDLFFBQUlDLElBQUVLLE1BQU47QUFBQSxRQUFhQyxJQUFFTixFQUFFRyxRQUFqQjtBQUFBLFFBQTBCSSxJQUFFUCxFQUFFUSxTQUFGLElBQWFSLEVBQUVRLFNBQUYsQ0FBWUMsU0FBekIsSUFBb0MsRUFBaEU7QUFBQSxRQUFtRUMsSUFBRUosS0FBR0EsRUFBRUssZUFBTCxJQUFzQixDQUFDLENBQUNMLEVBQUVLLGVBQUYsQ0FBa0IsNEJBQWxCLEVBQStDLEtBQS9DLEVBQXNEQyxhQUFuSjtBQUFBLFFBQWlLQyxJQUFFLHVCQUF1QkMsSUFBdkIsQ0FBNEJQLENBQTVCLEtBQWdDLENBQUNGLE9BQU9VLEtBQTNNO0FBQUEsUUFBaU5DLElBQUUsQ0FBQ04sQ0FBcE47QUFBQSxRQUFzTk8sSUFBRSxVQUFVSCxJ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dGVudCI6WyIvKlxuIEhpZ2hjaGFydHMgSlMgdjUuMC42ICgyMDE2LTEyLTA3KVxuXG4gKGMpIDIwMDktMjAxNiBUb3JzdGVpbiBIb25zaVxuXG4gTGljZW5zZTogd3d3LmhpZ2hjaGFydHMuY29tL2xpY2Vuc2VcbiovXG4oZnVuY3Rpb24oTCxhKXtcIm9iamVjdFwiPT09dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9TC5kb2N1bWVudD9hKEwpOmE6TC5IaWdoY2hhcnRzPWEoTCl9KShcInVuZGVmaW5lZFwiIT09dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyxmdW5jdGlvbihMKXtMPWZ1bmN0aW9uKCl7dmFyIGE9d2luZG93LEQ9YS5kb2N1bWVudCxDPWEubmF2aWdhdG9yJiZhLm5hdmlnYXRvci51c2VyQWdlbnR8fFwiXCIsRz1EJiZELmNyZWF0ZUVsZW1lbnROUyYmISFELmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXCJzdmdcIikuY3JlYXRlU1ZHUmVjdCxJPS8oZWRnZXxtc2llfHRyaWRlbnQpL2kudGVzdChDKSYmIXdpbmRvdy5vcGVyYSxoPSFHLGY9L0ZpcmVmb3gvLnRlc3QoQykscD1mJiY0PnBhcnNlSW50KEMuc3BsaXQoXCJGaXJlZm94L1wiKVsxXSwxMCk7cmV0dXJuIGEuSGlnaGNoYXJ0cz9hLkhpZ2hjaGFydHMuZXJyb3IoMTYsITApOntwcm9kdWN0OlwiSGlnaGNoYXJ0c1wiLFxudmVyc2lvbjpcIjUuMC42XCIsZGVnMnJhZDoyKk1hdGguUEkvMzYwLGRvYzpELGhhc0JpZGlCdWc6cCxoYXNUb3VjaDpEJiZ2b2lkIDAhPT1ELmRvY3VtZW50RWxlbWVudC5vbnRvdWNoc3RhcnQsaXNNUzpJLGlzV2ViS2l0Oi9BcHBsZVdlYktpdC8udGVzdChDKSxpc0ZpcmVmb3g6Zixpc1RvdWNoRGV2aWNlOi8oTW9iaWxlfEFuZHJvaWR8V2luZG93cyBQaG9uZSkvLnRlc3QoQyksU1ZHX05TOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixjaGFydENvdW50OjAsc2VyaWVzVHlwZXM6e30sc3ltYm9sU2l6ZXM6e30sc3ZnOkcsdm1sOmgsd2luOmEsY2hhcnRzOltdLG1hcmdpbk5hbWVzOltcInBsb3RUb3BcIixcIm1hcmdpblJpZ2h0XCIsXCJtYXJnaW5Cb3R0b21cIixcInBsb3RMZWZ0XCJdLG5vb3A6ZnVuY3Rpb24oKXt9fX0oKTsoZnVuY3Rpb24oYSl7dmFyIEQ9W10sQz1hLmNoYXJ0cyxHPWEuZG9jLEk9YS53aW47YS5lcnJvcj1mdW5jdGlvbihoLGYpe2g9YS5pc051bWJlcihoKT9cIkhpZ2hjaGFydHMgZXJyb3IgI1wiK1xuaCtcIjogd3d3LmhpZ2hjaGFydHMuY29tL2Vycm9ycy9cIitoOmg7aWYoZil0aHJvdyBFcnJvcihoKTtJLmNvbnNvbGUmJmNvbnNvbGUubG9nKGgpfTthLkZ4PWZ1bmN0aW9uKGEsZixwKXt0aGlzLm9wdGlvbnM9Zjt0aGlzLmVsZW09YTt0aGlzLnByb3A9cH07YS5GeC5wcm90b3R5cGU9e2RTZXR0ZXI6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnBhdGhzWzBdLGY9dGhpcy5wYXRoc1sxXSxwPVtdLHY9dGhpcy5ub3csbD1hLmxlbmd0aCx1O2lmKDE9PT12KXA9dGhpcy50b0Q7ZWxzZSBpZihsPT09Zi5sZW5ndGgmJjE+dilmb3IoO2wtLTspdT1wYXJzZUZsb2F0KGFbbF0pLHBbbF09aXNOYU4odSk/YVtsXTp2KnBhcnNlRmxvYXQoZltsXS11KSt1O2Vsc2UgcD1mO3RoaXMuZWxlbS5hdHRyKFwiZFwiLHAsbnVsbCwhMCl9LHVwZGF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZWxlbSxmPXRoaXMucHJvcCxwPXRoaXMubm93LHY9dGhpcy5vcHRpb25zLnN0ZXA7aWYodGhpc1tmK1wiU2V0dGVyXCJdKXRoaXNbZitcblwiU2V0dGVyXCJdKCk7ZWxzZSBhLmF0dHI/YS5lbGVtZW50JiZhLmF0dHIoZixwLG51bGwsITApOmEuc3R5bGVbZl09cCt0aGlzLnVuaXQ7diYmdi5jYWxsKGEscCx0aGlzKX0scnVuOmZ1bmN0aW9uKGEsZixwKXt2YXIgaD10aGlzLGw9ZnVuY3Rpb24oYSl7cmV0dXJuIGwuc3RvcHBlZD8hMTpoLnN0ZXAoYSl9LHU7dGhpcy5zdGFydFRpbWU9K25ldyBEYXRlO3RoaXMuc3RhcnQ9YTt0aGlzLmVuZD1mO3RoaXMudW5pdD1wO3RoaXMubm93PXRoaXMuc3RhcnQ7dGhpcy5wb3M9MDtsLmVsZW09dGhpcy5lbGVtO2wucHJvcD10aGlzLnByb3A7bCgpJiYxPT09RC5wdXNoKGwpJiYobC50aW1lcklkPXNldEludGVydmFsKGZ1bmN0aW9uKCl7Zm9yKHU9MDt1PEQubGVuZ3RoO3UrKylEW3VdKCl8fEQuc3BsaWNlKHUtLSwxKTtELmxlbmd0aHx8Y2xlYXJJbnRlcnZhbChsLnRpbWVySWQpfSwxMykpfSxzdGVwOmZ1bmN0aW9uKGEpe3ZhciBmPStuZXcgRGF0ZSxoLHY9dGhpcy5vcHRpb25zO2g9dGhpcy5lbGVtO1xudmFyIGw9di5jb21wbGV0ZSx1PXYuZHVyYXRpb24sZD12LmN1ckFuaW0sYztpZihoLmF0dHImJiFoLmVsZW1lbnQpaD0hMTtlbHNlIGlmKGF8fGY+PXUrdGhpcy5zdGFydFRpbWUpe3RoaXMubm93PXRoaXMuZW5kO3RoaXMucG9zPTE7dGhpcy51cGRhdGUoKTthPWRbdGhpcy5wcm9wXT0hMDtmb3IoYyBpbiBkKSEwIT09ZFtjXSYmKGE9ITEpO2EmJmwmJmwuY2FsbChoKTtoPSExfWVsc2UgdGhpcy5wb3M9di5lYXNpbmcoKGYtdGhpcy5zdGFydFRpbWUpL3UpLHRoaXMubm93PXRoaXMuc3RhcnQrKHRoaXMuZW5kLXRoaXMuc3RhcnQpKnRoaXMucG9zLHRoaXMudXBkYXRlKCksaD0hMDtyZXR1cm4gaH0saW5pdFBhdGg6ZnVuY3Rpb24oaCxmLHApe2Z1bmN0aW9uIHYoYSl7dmFyIGUsYjtmb3IocT1hLmxlbmd0aDtxLS07KWU9XCJNXCI9PT1hW3FdfHxcIkxcIj09PWFbcV0sYj0vW2EtekEtWl0vLnRlc3QoYVtxKzNdKSxlJiZiJiZhLnNwbGljZShxKzEsMCxhW3ErMV0sYVtxKzJdLGFbcSsxXSxhW3ErXG4yXSl9ZnVuY3Rpb24gbChhLGUpe2Zvcig7YS5sZW5ndGg8bTspe2FbMF09ZVttLWEubGVuZ3RoXTt2YXIgYj1hLnNsaWNlKDAsdCk7W10uc3BsaWNlLmFwcGx5KGEsWzAsMF0uY29uY2F0KGIpKTt6JiYoYj1hLnNsaWNlKGEubGVuZ3RoLXQpLFtdLnNwbGljZS5hcHBseShhLFthLmxlbmd0aCwwXS5jb25jYXQoYikpLHEtLSl9YVswXT1cIk1cIn1mdW5jdGlvbiB1KGEsZSl7Zm9yKHZhciBjPShtLWEubGVuZ3RoKS90OzA8YyYmYy0tOyliPWEuc2xpY2UoKS5zcGxpY2UoYS5sZW5ndGgvRi10LHQqRiksYlswXT1lW20tdC1jKnRdLHkmJihiW3QtNl09Ylt0LTJdLGJbdC01XT1iW3QtMV0pLFtdLnNwbGljZS5hcHBseShhLFthLmxlbmd0aC9GLDBdLmNvbmNhdChiKSkseiYmYy0tfWY9Znx8XCJcIjt2YXIgZCxjPWguc3RhcnRYLG49aC5lbmRYLHk9LTE8Zi5pbmRleE9mKFwiQ1wiKSx0PXk/NzozLG0sYixxO2Y9Zi5zcGxpdChcIiBcIik7cD1wLnNsaWNlKCk7dmFyIHo9aC5pc0FyZWEsRj16PzI6MSxlO1xueSYmKHYoZiksdihwKSk7aWYoYyYmbil7Zm9yKHE9MDtxPGMubGVuZ3RoO3ErKylpZihjW3FdPT09blswXSl7ZD1xO2JyZWFrfWVsc2UgaWYoY1swXT09PW5bbi5sZW5ndGgtYy5sZW5ndGgrcV0pe2Q9cTtlPSEwO2JyZWFrfXZvaWQgMD09PWQmJihmPVtdKX1mLmxlbmd0aCYmYS5pc051bWJlcihkKSYmKG09cC5sZW5ndGgrZCpGKnQsZT8obChmLHApLHUocCxmKSk6KGwocCxmKSx1KGYscCkpKTtyZXR1cm5bZixwXX19O2EuZXh0ZW5kPWZ1bmN0aW9uKGEsZil7dmFyIGg7YXx8KGE9e30pO2ZvcihoIGluIGYpYVtoXT1mW2hdO3JldHVybiBhfTthLm1lcmdlPWZ1bmN0aW9uKCl7dmFyIGgsZj1hcmd1bWVudHMscCx2PXt9LGw9ZnVuY3Rpb24oaCxkKXt2YXIgYyxuO1wib2JqZWN0XCIhPT10eXBlb2YgaCYmKGg9e30pO2ZvcihuIGluIGQpZC5oYXNPd25Qcm9wZXJ0eShuKSYmKGM9ZFtuXSxhLmlzT2JqZWN0KGMsITApJiZcInJlbmRlclRvXCIhPT1uJiZcIm51bWJlclwiIT09dHlwZW9mIGMubm9kZVR5cGU/XG5oW25dPWwoaFtuXXx8e30sYyk6aFtuXT1kW25dKTtyZXR1cm4gaH07ITA9PT1mWzBdJiYodj1mWzFdLGY9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZiwyKSk7cD1mLmxlbmd0aDtmb3IoaD0wO2g8cDtoKyspdj1sKHYsZltoXSk7cmV0dXJuIHZ9O2EucEludD1mdW5jdGlvbihhLGYpe3JldHVybiBwYXJzZUludChhLGZ8fDEwKX07YS5pc1N0cmluZz1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF9O2EuaXNBcnJheT1mdW5jdGlvbihhKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKTtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1hfHxcIltvYmplY3QgQXJyYXkgSXRlcmF0b3JdXCI9PT1hfTthLmlzT2JqZWN0PWZ1bmN0aW9uKGgsZil7cmV0dXJuIGgmJlwib2JqZWN0XCI9PT10eXBlb2YgaCYmKCFmfHwhYS5pc0FycmF5KGgpKX07YS5pc051bWJlcj1mdW5jdGlvbihhKXtyZXR1cm5cIm51bWJlclwiPT09dHlwZW9mIGEmJiFpc05hTihhKX07YS5lcmFzZT1cbmZ1bmN0aW9uKGEsZil7Zm9yKHZhciBoPWEubGVuZ3RoO2gtLTspaWYoYVtoXT09PWYpe2Euc3BsaWNlKGgsMSk7YnJlYWt9fTthLmRlZmluZWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMCE9PWEmJm51bGwhPT1hfTthLmF0dHI9ZnVuY3Rpb24oaCxmLHApe3ZhciB2LGw7aWYoYS5pc1N0cmluZyhmKSlhLmRlZmluZWQocCk/aC5zZXRBdHRyaWJ1dGUoZixwKTpoJiZoLmdldEF0dHJpYnV0ZSYmKGw9aC5nZXRBdHRyaWJ1dGUoZikpO2Vsc2UgaWYoYS5kZWZpbmVkKGYpJiZhLmlzT2JqZWN0KGYpKWZvcih2IGluIGYpaC5zZXRBdHRyaWJ1dGUodixmW3ZdKTtyZXR1cm4gbH07YS5zcGxhdD1mdW5jdGlvbihoKXtyZXR1cm4gYS5pc0FycmF5KGgpP2g6W2hdfTthLnN5bmNUaW1lb3V0PWZ1bmN0aW9uKGEsZixwKXtpZihmKXJldHVybiBzZXRUaW1lb3V0KGEsZixwKTthLmNhbGwoMCxwKX07YS5waWNrPWZ1bmN0aW9uKCl7dmFyIGE9YXJndW1lbnRzLGYscCx2PWEubGVuZ3RoO2ZvcihmPVxuMDtmPHY7ZisrKWlmKHA9YVtmXSx2b2lkIDAhPT1wJiZudWxsIT09cClyZXR1cm4gcH07YS5jc3M9ZnVuY3Rpb24oaCxmKXthLmlzTVMmJiFhLnN2ZyYmZiYmdm9pZCAwIT09Zi5vcGFjaXR5JiYoZi5maWx0ZXI9XCJhbHBoYShvcGFjaXR5XFx4M2RcIisxMDAqZi5vcGFjaXR5K1wiKVwiKTthLmV4dGVuZChoLnN0eWxlLGYpfTthLmNyZWF0ZUVsZW1lbnQ9ZnVuY3Rpb24oaCxmLHAsdixsKXtoPUcuY3JlYXRlRWxlbWVudChoKTt2YXIgdT1hLmNzcztmJiZhLmV4dGVuZChoLGYpO2wmJnUoaCx7cGFkZGluZzowLGJvcmRlcjpcIm5vbmVcIixtYXJnaW46MH0pO3AmJnUoaCxwKTt2JiZ2LmFwcGVuZENoaWxkKGgpO3JldHVybiBofTthLmV4dGVuZENsYXNzPWZ1bmN0aW9uKGgsZil7dmFyIHA9ZnVuY3Rpb24oKXt9O3AucHJvdG90eXBlPW5ldyBoO2EuZXh0ZW5kKHAucHJvdG90eXBlLGYpO3JldHVybiBwfTthLnBhZD1mdW5jdGlvbihhLGYscCl7cmV0dXJuIEFycmF5KChmfHwyKSsxLVN0cmluZyhhKS5sZW5ndGgpLmpvaW4ocHx8XG4wKSthfTthLnJlbGF0aXZlTGVuZ3RoPWZ1bmN0aW9uKGEsZil7cmV0dXJuLyUkLy50ZXN0KGEpP2YqcGFyc2VGbG9hdChhKS8xMDA6cGFyc2VGbG9hdChhKX07YS53cmFwPWZ1bmN0aW9uKGEsZixwKXt2YXIgaD1hW2ZdO2FbZl09ZnVuY3Rpb24oKXt2YXIgYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLGY9YXJndW1lbnRzLGQ9dGhpcztkLnByb2NlZWQ9ZnVuY3Rpb24oKXtoLmFwcGx5KGQsYXJndW1lbnRzLmxlbmd0aD9hcmd1bWVudHM6Zil9O2EudW5zaGlmdChoKTthPXAuYXBwbHkodGhpcyxhKTtkLnByb2NlZWQ9bnVsbDtyZXR1cm4gYX19O2EuZ2V0VFpPZmZzZXQ9ZnVuY3Rpb24oaCl7dmFyIGY9YS5EYXRlO3JldHVybiA2RTQqKGYuaGNHZXRUaW1lem9uZU9mZnNldCYmZi5oY0dldFRpbWV6b25lT2Zmc2V0KGgpfHxmLmhjVGltZXpvbmVPZmZzZXR8fDApfTthLmRhdGVGb3JtYXQ9ZnVuY3Rpb24oaCxmLHApe2lmKCFhLmRlZmluZWQoZil8fGlzTmFOKGYpKXJldHVybiBhLmRlZmF1bHRPcHRpb25zLmxhbmcuaW52YWxpZERhdGV8fFxuXCJcIjtoPWEucGljayhoLFwiJVktJW0tJWQgJUg6JU06JVNcIik7dmFyIHY9YS5EYXRlLGw9bmV3IHYoZi1hLmdldFRaT2Zmc2V0KGYpKSx1LGQ9bFt2LmhjR2V0SG91cnNdKCksYz1sW3YuaGNHZXREYXldKCksbj1sW3YuaGNHZXREYXRlXSgpLHk9bFt2LmhjR2V0TW9udGhdKCksdD1sW3YuaGNHZXRGdWxsWWVhcl0oKSxtPWEuZGVmYXVsdE9wdGlvbnMubGFuZyxiPW0ud2Vla2RheXMscT1tLnNob3J0V2Vla2RheXMsej1hLnBhZCx2PWEuZXh0ZW5kKHthOnE/cVtjXTpiW2NdLnN1YnN0cigwLDMpLEE6YltjXSxkOnoobiksZTp6KG4sMixcIiBcIiksdzpjLGI6bS5zaG9ydE1vbnRoc1t5XSxCOm0ubW9udGhzW3ldLG06eih5KzEpLHk6dC50b1N0cmluZygpLnN1YnN0cigyLDIpLFk6dCxIOnooZCksazpkLEk6eihkJTEyfHwxMiksbDpkJTEyfHwxMixNOnoobFt2LmhjR2V0TWludXRlc10oKSkscDoxMj5kP1wiQU1cIjpcIlBNXCIsUDoxMj5kP1wiYW1cIjpcInBtXCIsUzp6KGwuZ2V0U2Vjb25kcygpKSxMOnooTWF0aC5yb3VuZChmJVxuMUUzKSwzKX0sYS5kYXRlRm9ybWF0cyk7Zm9yKHUgaW4gdilmb3IoOy0xIT09aC5pbmRleE9mKFwiJVwiK3UpOyloPWgucmVwbGFjZShcIiVcIit1LFwiZnVuY3Rpb25cIj09PXR5cGVvZiB2W3VdP3ZbdV0oZik6dlt1XSk7cmV0dXJuIHA/aC5zdWJzdHIoMCwxKS50b1VwcGVyQ2FzZSgpK2guc3Vic3RyKDEpOmh9O2EuZm9ybWF0U2luZ2xlPWZ1bmN0aW9uKGgsZil7dmFyIHA9L1xcLihbMC05XSkvLHY9YS5kZWZhdWx0T3B0aW9ucy5sYW5nOy9mJC8udGVzdChoKT8ocD0ocD1oLm1hdGNoKHApKT9wWzFdOi0xLG51bGwhPT1mJiYoZj1hLm51bWJlckZvcm1hdChmLHAsdi5kZWNpbWFsUG9pbnQsLTE8aC5pbmRleE9mKFwiLFwiKT92LnRob3VzYW5kc1NlcDpcIlwiKSkpOmY9YS5kYXRlRm9ybWF0KGgsZik7cmV0dXJuIGZ9O2EuZm9ybWF0PWZ1bmN0aW9uKGgsZil7Zm9yKHZhciBwPVwie1wiLHY9ITEsbCx1LGQsYyxuPVtdLHk7aDspe3A9aC5pbmRleE9mKHApO2lmKC0xPT09cClicmVhaztsPWguc2xpY2UoMCxcbnApO2lmKHYpe2w9bC5zcGxpdChcIjpcIik7dT1sLnNoaWZ0KCkuc3BsaXQoXCIuXCIpO2M9dS5sZW5ndGg7eT1mO2ZvcihkPTA7ZDxjO2QrKyl5PXlbdVtkXV07bC5sZW5ndGgmJih5PWEuZm9ybWF0U2luZ2xlKGwuam9pbihcIjpcIikseSkpO24ucHVzaCh5KX1lbHNlIG4ucHVzaChsKTtoPWguc2xpY2UocCsxKTtwPSh2PSF2KT9cIn1cIjpcIntcIn1uLnB1c2goaCk7cmV0dXJuIG4uam9pbihcIlwiKX07YS5nZXRNYWduaXR1ZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGgucG93KDEwLE1hdGguZmxvb3IoTWF0aC5sb2coYSkvTWF0aC5MTjEwKSl9O2Eubm9ybWFsaXplVGlja0ludGVydmFsPWZ1bmN0aW9uKGgsZixwLHYsbCl7dmFyIHUsZD1oO3A9YS5waWNrKHAsMSk7dT1oL3A7Znx8KGY9bD9bMSwxLjIsMS41LDIsMi41LDMsNCw1LDYsOCwxMF06WzEsMiwyLjUsNSwxMF0sITE9PT12JiYoMT09PXA/Zj1hLmdyZXAoZixmdW5jdGlvbihhKXtyZXR1cm4gMD09PWElMX0pOi4xPj1wJiYoZj1bMS9wXSkpKTtcbmZvcih2PTA7djxmLmxlbmd0aCYmIShkPWZbdl0sbCYmZCpwPj1ofHwhbCYmdTw9KGZbdl0rKGZbdisxXXx8Zlt2XSkpLzIpO3YrKyk7cmV0dXJuIGQqcH07YS5zdGFibGVTb3J0PWZ1bmN0aW9uKGEsZil7dmFyIHA9YS5sZW5ndGgsaCxsO2ZvcihsPTA7bDxwO2wrKylhW2xdLnNhZmVJPWw7YS5zb3J0KGZ1bmN0aW9uKGEsZCl7aD1mKGEsZCk7cmV0dXJuIDA9PT1oP2Euc2FmZUktZC5zYWZlSTpofSk7Zm9yKGw9MDtsPHA7bCsrKWRlbGV0ZSBhW2xdLnNhZmVJfTthLmFycmF5TWluPWZ1bmN0aW9uKGEpe2Zvcih2YXIgZj1hLmxlbmd0aCxwPWFbMF07Zi0tOylhW2ZdPHAmJihwPWFbZl0pO3JldHVybiBwfTthLmFycmF5TWF4PWZ1bmN0aW9uKGEpe2Zvcih2YXIgZj1hLmxlbmd0aCxwPWFbMF07Zi0tOylhW2ZdPnAmJihwPWFbZl0pO3JldHVybiBwfTthLmRlc3Ryb3lPYmplY3RQcm9wZXJ0aWVzPWZ1bmN0aW9uKGEsZil7Zm9yKHZhciBwIGluIGEpYVtwXSYmYVtwXSE9PWYmJmFbcF0uZGVzdHJveSYmXG5hW3BdLmRlc3Ryb3koKSxkZWxldGUgYVtwXX07YS5kaXNjYXJkRWxlbWVudD1mdW5jdGlvbihoKXt2YXIgZj1hLmdhcmJhZ2VCaW47Znx8KGY9YS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTtoJiZmLmFwcGVuZENoaWxkKGgpO2YuaW5uZXJIVE1MPVwiXCJ9O2EuY29ycmVjdEZsb2F0PWZ1bmN0aW9uKGEsZil7cmV0dXJuIHBhcnNlRmxvYXQoYS50b1ByZWNpc2lvbihmfHwxNCkpfTthLnNldEFuaW1hdGlvbj1mdW5jdGlvbihoLGYpe2YucmVuZGVyZXIuZ2xvYmFsQW5pbWF0aW9uPWEucGljayhoLGYub3B0aW9ucy5jaGFydC5hbmltYXRpb24sITApfTthLmFuaW1PYmplY3Q9ZnVuY3Rpb24oaCl7cmV0dXJuIGEuaXNPYmplY3QoaCk/YS5tZXJnZShoKTp7ZHVyYXRpb246aD81MDA6MH19O2EudGltZVVuaXRzPXttaWxsaXNlY29uZDoxLHNlY29uZDoxRTMsbWludXRlOjZFNCxob3VyOjM2RTUsZGF5Ojg2NEU1LHdlZWs6NjA0OEU1LG1vbnRoOjI0MTkyRTUseWVhcjozMTQ0OTZFNX07YS5udW1iZXJGb3JtYXQ9XG5mdW5jdGlvbihoLGYscCx2KXtoPStofHwwO2Y9K2Y7dmFyIGw9YS5kZWZhdWx0T3B0aW9ucy5sYW5nLHU9KGgudG9TdHJpbmcoKS5zcGxpdChcIi5cIilbMV18fFwiXCIpLmxlbmd0aCxkLGMsbj1NYXRoLmFicyhoKTstMT09PWY/Zj1NYXRoLm1pbih1LDIwKTphLmlzTnVtYmVyKGYpfHwoZj0yKTtkPVN0cmluZyhhLnBJbnQobi50b0ZpeGVkKGYpKSk7Yz0zPGQubGVuZ3RoP2QubGVuZ3RoJTM6MDtwPWEucGljayhwLGwuZGVjaW1hbFBvaW50KTt2PWEucGljayh2LGwudGhvdXNhbmRzU2VwKTtoPSgwPmg/XCItXCI6XCJcIikrKGM/ZC5zdWJzdHIoMCxjKSt2OlwiXCIpO2grPWQuc3Vic3RyKGMpLnJlcGxhY2UoLyhcXGR7M30pKD89XFxkKS9nLFwiJDFcIit2KTtmJiYodj1NYXRoLmFicyhuLWQrTWF0aC5wb3coMTAsLU1hdGgubWF4KGYsdSktMSkpLGgrPXArdi50b0ZpeGVkKGYpLnNsaWNlKDIpKTtyZXR1cm4gaH07TWF0aC5lYXNlSW5PdXRTaW5lPWZ1bmN0aW9uKGEpe3JldHVybi0uNSooTWF0aC5jb3MoTWF0aC5QSSpcbmEpLTEpfTthLmdldFN0eWxlPWZ1bmN0aW9uKGgsZil7cmV0dXJuXCJ3aWR0aFwiPT09Zj9NYXRoLm1pbihoLm9mZnNldFdpZHRoLGguc2Nyb2xsV2lkdGgpLWEuZ2V0U3R5bGUoaCxcInBhZGRpbmctbGVmdFwiKS1hLmdldFN0eWxlKGgsXCJwYWRkaW5nLXJpZ2h0XCIpOlwiaGVpZ2h0XCI9PT1mP01hdGgubWluKGgub2Zmc2V0SGVpZ2h0LGguc2Nyb2xsSGVpZ2h0KS1hLmdldFN0eWxlKGgsXCJwYWRkaW5nLXRvcFwiKS1hLmdldFN0eWxlKGgsXCJwYWRkaW5nLWJvdHRvbVwiKTooaD1JLmdldENvbXB1dGVkU3R5bGUoaCx2b2lkIDApKSYmYS5wSW50KGguZ2V0UHJvcGVydHlWYWx1ZShmKSl9O2EuaW5BcnJheT1mdW5jdGlvbihhLGYpe3JldHVybiBmLmluZGV4T2Y/Zi5pbmRleE9mKGEpOltdLmluZGV4T2YuY2FsbChmLGEpfTthLmdyZXA9ZnVuY3Rpb24oYSxmKXtyZXR1cm5bXS5maWx0ZXIuY2FsbChhLGYpfTthLmZpbmQ9ZnVuY3Rpb24oYSxmKXtyZXR1cm5bXS5maW5kLmNhbGwoYSxmKX07YS5tYXA9ZnVuY3Rpb24oYSxcbmYpe2Zvcih2YXIgcD1bXSxoPTAsbD1hLmxlbmd0aDtoPGw7aCsrKXBbaF09Zi5jYWxsKGFbaF0sYVtoXSxoLGEpO3JldHVybiBwfTthLm9mZnNldD1mdW5jdGlvbihhKXt2YXIgZj1HLmRvY3VtZW50RWxlbWVudDthPWEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7cmV0dXJue3RvcDphLnRvcCsoSS5wYWdlWU9mZnNldHx8Zi5zY3JvbGxUb3ApLShmLmNsaWVudFRvcHx8MCksbGVmdDphLmxlZnQrKEkucGFnZVhPZmZzZXR8fGYuc2Nyb2xsTGVmdCktKGYuY2xpZW50TGVmdHx8MCl9fTthLnN0b3A9ZnVuY3Rpb24oYSxmKXtmb3IodmFyIHA9RC5sZW5ndGg7cC0tOylEW3BdLmVsZW0hPT1hfHxmJiZmIT09RFtwXS5wcm9wfHwoRFtwXS5zdG9wcGVkPSEwKX07YS5lYWNoPWZ1bmN0aW9uKGEsZixwKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhLGYscCl9O2EuYWRkRXZlbnQ9ZnVuY3Rpb24oaCxmLHApe2Z1bmN0aW9uIHYoYSl7YS50YXJnZXQ9YS5zcmNFbGVtZW50fHxcbkk7cC5jYWxsKGgsYSl9dmFyIGw9aC5oY0V2ZW50cz1oLmhjRXZlbnRzfHx7fTtoLmFkZEV2ZW50TGlzdGVuZXI/aC5hZGRFdmVudExpc3RlbmVyKGYscCwhMSk6aC5hdHRhY2hFdmVudCYmKGguaGNFdmVudHNJRXx8KGguaGNFdmVudHNJRT17fSksaC5oY0V2ZW50c0lFW3AudG9TdHJpbmcoKV09dixoLmF0dGFjaEV2ZW50KFwib25cIitmLHYpKTtsW2ZdfHwobFtmXT1bXSk7bFtmXS5wdXNoKHApO3JldHVybiBmdW5jdGlvbigpe2EucmVtb3ZlRXZlbnQoaCxmLHApfX07YS5yZW1vdmVFdmVudD1mdW5jdGlvbihoLGYscCl7ZnVuY3Rpb24gdihhLGMpe2gucmVtb3ZlRXZlbnRMaXN0ZW5lcj9oLnJlbW92ZUV2ZW50TGlzdGVuZXIoYSxjLCExKTpoLmF0dGFjaEV2ZW50JiYoYz1oLmhjRXZlbnRzSUVbYy50b1N0cmluZygpXSxoLmRldGFjaEV2ZW50KFwib25cIithLGMpKX1mdW5jdGlvbiBsKCl7dmFyIGEsYztpZihoLm5vZGVOYW1lKWZvcihjIGluIGY/KGE9e30sYVtmXT0hMCk6YT1kLGEpaWYoZFtjXSlmb3IoYT1cbmRbY10ubGVuZ3RoO2EtLTspdihjLGRbY11bYV0pfXZhciB1LGQ9aC5oY0V2ZW50cyxjO2QmJihmPyh1PWRbZl18fFtdLHA/KGM9YS5pbkFycmF5KHAsdSksLTE8YyYmKHUuc3BsaWNlKGMsMSksZFtmXT11KSx2KGYscCkpOihsKCksZFtmXT1bXSkpOihsKCksaC5oY0V2ZW50cz17fSkpfTthLmZpcmVFdmVudD1mdW5jdGlvbihoLGYscCx2KXt2YXIgbDtsPWguaGNFdmVudHM7dmFyIHUsZDtwPXB8fHt9O2lmKEcuY3JlYXRlRXZlbnQmJihoLmRpc3BhdGNoRXZlbnR8fGguZmlyZUV2ZW50KSlsPUcuY3JlYXRlRXZlbnQoXCJFdmVudHNcIiksbC5pbml0RXZlbnQoZiwhMCwhMCksYS5leHRlbmQobCxwKSxoLmRpc3BhdGNoRXZlbnQ/aC5kaXNwYXRjaEV2ZW50KGwpOmguZmlyZUV2ZW50KGYsbCk7ZWxzZSBpZihsKWZvcihsPWxbZl18fFtdLHU9bC5sZW5ndGgscC50YXJnZXR8fGEuZXh0ZW5kKHAse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7cC5kZWZhdWx0UHJldmVudGVkPSEwfSx0YXJnZXQ6aCxcbnR5cGU6Zn0pLGY9MDtmPHU7ZisrKShkPWxbZl0pJiYhMT09PWQuY2FsbChoLHApJiZwLnByZXZlbnREZWZhdWx0KCk7diYmIXAuZGVmYXVsdFByZXZlbnRlZCYmdihwKX07YS5hbmltYXRlPWZ1bmN0aW9uKGgsZixwKXt2YXIgdixsPVwiXCIsdSxkLGM7YS5pc09iamVjdChwKXx8KHY9YXJndW1lbnRzLHA9e2R1cmF0aW9uOnZbMl0sZWFzaW5nOnZbM10sY29tcGxldGU6dls0XX0pO2EuaXNOdW1iZXIocC5kdXJhdGlvbil8fChwLmR1cmF0aW9uPTQwMCk7cC5lYXNpbmc9XCJmdW5jdGlvblwiPT09dHlwZW9mIHAuZWFzaW5nP3AuZWFzaW5nOk1hdGhbcC5lYXNpbmddfHxNYXRoLmVhc2VJbk91dFNpbmU7cC5jdXJBbmltPWEubWVyZ2UoZik7Zm9yKGMgaW4gZilhLnN0b3AoaCxjKSxkPW5ldyBhLkZ4KGgscCxjKSx1PW51bGwsXCJkXCI9PT1jPyhkLnBhdGhzPWQuaW5pdFBhdGgoaCxoLmQsZi5kKSxkLnRvRD1mLmQsdj0wLHU9MSk6aC5hdHRyP3Y9aC5hdHRyKGMpOih2PXBhcnNlRmxvYXQoYS5nZXRTdHlsZShoLFxuYykpfHwwLFwib3BhY2l0eVwiIT09YyYmKGw9XCJweFwiKSksdXx8KHU9ZltjXSksdS5tYXRjaCYmdS5tYXRjaChcInB4XCIpJiYodT11LnJlcGxhY2UoL3B4L2csXCJcIikpLGQucnVuKHYsdSxsKX07YS5zZXJpZXNUeXBlPWZ1bmN0aW9uKGgsZixwLHYsbCl7dmFyIHU9YS5nZXRPcHRpb25zKCksZD1hLnNlcmllc1R5cGVzO3UucGxvdE9wdGlvbnNbaF09YS5tZXJnZSh1LnBsb3RPcHRpb25zW2ZdLHApO2RbaF09YS5leHRlbmRDbGFzcyhkW2ZdfHxmdW5jdGlvbigpe30sdik7ZFtoXS5wcm90b3R5cGUudHlwZT1oO2wmJihkW2hdLnByb3RvdHlwZS5wb2ludENsYXNzPWEuZXh0ZW5kQ2xhc3MoYS5Qb2ludCxsKSk7cmV0dXJuIGRbaF19O2EudW5pcXVlS2V5PWZ1bmN0aW9uKCl7dmFyIGE9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsOSksZj0wO3JldHVybiBmdW5jdGlvbigpe3JldHVyblwiaGlnaGNoYXJ0cy1cIithK1wiLVwiK2YrK319KCk7SS5qUXVlcnkmJihJLmpRdWVyeS5mbi5oaWdoY2hhcnRzPVxuZnVuY3Rpb24oKXt2YXIgaD1bXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7aWYodGhpc1swXSlyZXR1cm4gaFswXT8obmV3IChhW2EuaXNTdHJpbmcoaFswXSk/aC5zaGlmdCgpOlwiQ2hhcnRcIl0pKHRoaXNbMF0saFswXSxoWzFdKSx0aGlzKTpDW2EuYXR0cih0aGlzWzBdLFwiZGF0YS1oaWdoY2hhcnRzLWNoYXJ0XCIpXX0pO0cmJiFHLmRlZmF1bHRWaWV3JiYoYS5nZXRTdHlsZT1mdW5jdGlvbihoLGYpe3ZhciBwPXt3aWR0aDpcImNsaWVudFdpZHRoXCIsaGVpZ2h0OlwiY2xpZW50SGVpZ2h0XCJ9W2ZdO2lmKGguc3R5bGVbZl0pcmV0dXJuIGEucEludChoLnN0eWxlW2ZdKTtcIm9wYWNpdHlcIj09PWYmJihmPVwiZmlsdGVyXCIpO2lmKHApcmV0dXJuIGguc3R5bGUuem9vbT0xLE1hdGgubWF4KGhbcF0tMiphLmdldFN0eWxlKGgsXCJwYWRkaW5nXCIpLDApO2g9aC5jdXJyZW50U3R5bGVbZi5yZXBsYWNlKC9cXC0oXFx3KS9nLGZ1bmN0aW9uKGEsbCl7cmV0dXJuIGwudG9VcHBlckNhc2UoKX0pXTtcImZpbHRlclwiPT09XG5mJiYoaD1oLnJlcGxhY2UoL2FscGhhXFwob3BhY2l0eT0oWzAtOV0rKVxcKS8sZnVuY3Rpb24oYSxsKXtyZXR1cm4gbC8xMDB9KSk7cmV0dXJuXCJcIj09PWg/MTphLnBJbnQoaCl9KTtBcnJheS5wcm90b3R5cGUuZm9yRWFjaHx8KGEuZWFjaD1mdW5jdGlvbihhLGYscCl7Zm9yKHZhciBoPTAsbD1hLmxlbmd0aDtoPGw7aCsrKWlmKCExPT09Zi5jYWxsKHAsYVtoXSxoLGEpKXJldHVybiBofSk7QXJyYXkucHJvdG90eXBlLmluZGV4T2Z8fChhLmluQXJyYXk9ZnVuY3Rpb24oYSxmKXt2YXIgcCxoPTA7aWYoZilmb3IocD1mLmxlbmd0aDtoPHA7aCsrKWlmKGZbaF09PT1hKXJldHVybiBoO3JldHVybi0xfSk7QXJyYXkucHJvdG90eXBlLmZpbHRlcnx8KGEuZ3JlcD1mdW5jdGlvbihhLGYpe2Zvcih2YXIgcD1bXSxoPTAsbD1hLmxlbmd0aDtoPGw7aCsrKWYoYVtoXSxoKSYmcC5wdXNoKGFbaF0pO3JldHVybiBwfSk7QXJyYXkucHJvdG90eXBlLmZpbmR8fChhLmZpbmQ9ZnVuY3Rpb24oYSxmKXt2YXIgcCxcbmg9YS5sZW5ndGg7Zm9yKHA9MDtwPGg7cCsrKWlmKGYoYVtwXSxwKSlyZXR1cm4gYVtwXX0pfSkoTCk7KGZ1bmN0aW9uKGEpe3ZhciBEPWEuZWFjaCxDPWEuaXNOdW1iZXIsRz1hLm1hcCxJPWEubWVyZ2UsaD1hLnBJbnQ7YS5Db2xvcj1mdW5jdGlvbihmKXtpZighKHRoaXMgaW5zdGFuY2VvZiBhLkNvbG9yKSlyZXR1cm4gbmV3IGEuQ29sb3IoZik7dGhpcy5pbml0KGYpfTthLkNvbG9yLnByb3RvdHlwZT17cGFyc2Vyczpbe3JlZ2V4Oi9yZ2JhXFwoXFxzKihbMC05XXsxLDN9KVxccyosXFxzKihbMC05XXsxLDN9KVxccyosXFxzKihbMC05XXsxLDN9KVxccyosXFxzKihbMC05XT8oPzpcXC5bMC05XSspPylcXHMqXFwpLyxwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm5baChhWzFdKSxoKGFbMl0pLGgoYVszXSkscGFyc2VGbG9hdChhWzRdLDEwKV19fSx7cmVnZXg6LyMoW2EtZkEtRjAtOV17Mn0pKFthLWZBLUYwLTldezJ9KShbYS1mQS1GMC05XXsyfSkvLHBhcnNlOmZ1bmN0aW9uKGEpe3JldHVybltoKGFbMV0sXG4xNiksaChhWzJdLDE2KSxoKGFbM10sMTYpLDFdfX0se3JlZ2V4Oi9yZ2JcXChcXHMqKFswLTldezEsM30pXFxzKixcXHMqKFswLTldezEsM30pXFxzKixcXHMqKFswLTldezEsM30pXFxzKlxcKS8scGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuW2goYVsxXSksaChhWzJdKSxoKGFbM10pLDFdfX1dLG5hbWVzOnt3aGl0ZTpcIiNmZmZmZmZcIixibGFjazpcIiMwMDAwMDBcIn0saW5pdDpmdW5jdGlvbihmKXt2YXIgcCxoLGwsdTtpZigodGhpcy5pbnB1dD1mPXRoaXMubmFtZXNbZl18fGYpJiZmLnN0b3BzKXRoaXMuc3RvcHM9RyhmLnN0b3BzLGZ1bmN0aW9uKGQpe3JldHVybiBuZXcgYS5Db2xvcihkWzFdKX0pO2Vsc2UgZm9yKGw9dGhpcy5wYXJzZXJzLmxlbmd0aDtsLS0mJiFoOyl1PXRoaXMucGFyc2Vyc1tsXSwocD11LnJlZ2V4LmV4ZWMoZikpJiYoaD11LnBhcnNlKHApKTt0aGlzLnJnYmE9aHx8W119LGdldDpmdW5jdGlvbihhKXt2YXIgZj10aGlzLmlucHV0LGg9dGhpcy5yZ2JhLGw7dGhpcy5zdG9wcz9cbihsPUkoZiksbC5zdG9wcz1bXS5jb25jYXQobC5zdG9wcyksRCh0aGlzLnN0b3BzLGZ1bmN0aW9uKGYsZCl7bC5zdG9wc1tkXT1bbC5zdG9wc1tkXVswXSxmLmdldChhKV19KSk6bD1oJiZDKGhbMF0pP1wicmdiXCI9PT1hfHwhYSYmMT09PWhbM10/XCJyZ2IoXCIraFswXStcIixcIitoWzFdK1wiLFwiK2hbMl0rXCIpXCI6XCJhXCI9PT1hP2hbM106XCJyZ2JhKFwiK2guam9pbihcIixcIikrXCIpXCI6ZjtyZXR1cm4gbH0sYnJpZ2h0ZW46ZnVuY3Rpb24oYSl7dmFyIGYsdj10aGlzLnJnYmE7aWYodGhpcy5zdG9wcylEKHRoaXMuc3RvcHMsZnVuY3Rpb24obCl7bC5icmlnaHRlbihhKX0pO2Vsc2UgaWYoQyhhKSYmMCE9PWEpZm9yKGY9MDszPmY7ZisrKXZbZl0rPWgoMjU1KmEpLDA+dltmXSYmKHZbZl09MCksMjU1PHZbZl0mJih2W2ZdPTI1NSk7cmV0dXJuIHRoaXN9LHNldE9wYWNpdHk6ZnVuY3Rpb24oYSl7dGhpcy5yZ2JhWzNdPWE7cmV0dXJuIHRoaXN9fTthLmNvbG9yPWZ1bmN0aW9uKGYpe3JldHVybiBuZXcgYS5Db2xvcihmKX19KShMKTtcbihmdW5jdGlvbihhKXt2YXIgRCxDLEc9YS5hZGRFdmVudCxJPWEuYW5pbWF0ZSxoPWEuYXR0cixmPWEuY2hhcnRzLHA9YS5jb2xvcix2PWEuY3NzLGw9YS5jcmVhdGVFbGVtZW50LHU9YS5kZWZpbmVkLGQ9YS5kZWcycmFkLGM9YS5kZXN0cm95T2JqZWN0UHJvcGVydGllcyxuPWEuZG9jLHk9YS5lYWNoLHQ9YS5leHRlbmQsbT1hLmVyYXNlLGI9YS5ncmVwLHE9YS5oYXNUb3VjaCx6PWEuaXNBcnJheSxGPWEuaXNGaXJlZm94LGU9YS5pc01TLHI9YS5pc09iamVjdCx4PWEuaXNTdHJpbmcsQT1hLmlzV2ViS2l0LGs9YS5tZXJnZSx3PWEubm9vcCxLPWEucGljayxKPWEucEludCxOPWEucmVtb3ZlRXZlbnQsZz1hLnN0b3AsQj1hLnN2ZyxTPWEuU1ZHX05TLE09YS5zeW1ib2xTaXplcyxSPWEud2luO0Q9YS5TVkdFbGVtZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O0QucHJvdG90eXBlPXtvcGFjaXR5OjEsU1ZHX05TOlMsdGV4dFByb3BzOlwiZGlyZWN0aW9uIGZvbnRTaXplIGZvbnRXZWlnaHQgZm9udEZhbWlseSBmb250U3R5bGUgY29sb3IgbGluZUhlaWdodCB3aWR0aCB0ZXh0RGVjb3JhdGlvbiB0ZXh0T3ZlcmZsb3cgdGV4dE91dGxpbmVcIi5zcGxpdChcIiBcIiksXG5pbml0OmZ1bmN0aW9uKGEsSCl7dGhpcy5lbGVtZW50PVwic3BhblwiPT09SD9sKEgpOm4uY3JlYXRlRWxlbWVudE5TKHRoaXMuU1ZHX05TLEgpO3RoaXMucmVuZGVyZXI9YX0sYW5pbWF0ZTpmdW5jdGlvbihFLEgsZyl7SD1hLmFuaW1PYmplY3QoSyhILHRoaXMucmVuZGVyZXIuZ2xvYmFsQW5pbWF0aW9uLCEwKSk7MCE9PUguZHVyYXRpb24/KGcmJihILmNvbXBsZXRlPWcpLEkodGhpcyxFLEgpKTp0aGlzLmF0dHIoRSxudWxsLGcpO3JldHVybiB0aGlzfSxjb2xvckdyYWRpZW50OmZ1bmN0aW9uKEUsSCxnKXt2YXIgZT10aGlzLnJlbmRlcmVyLGMsYixCLHIsbSx3LHEsZCx4LG4sUCx0PVtdLEE7RS5saW5lYXJHcmFkaWVudD9iPVwibGluZWFyR3JhZGllbnRcIjpFLnJhZGlhbEdyYWRpZW50JiYoYj1cInJhZGlhbEdyYWRpZW50XCIpO2lmKGIpe0I9RVtiXTttPWUuZ3JhZGllbnRzO3E9RS5zdG9wcztuPWcucmFkaWFsUmVmZXJlbmNlO3ooQikmJihFW2JdPUI9e3gxOkJbMF0seTE6QlsxXSx4MjpCWzJdLFxueTI6QlszXSxncmFkaWVudFVuaXRzOlwidXNlclNwYWNlT25Vc2VcIn0pO1wicmFkaWFsR3JhZGllbnRcIj09PWImJm4mJiF1KEIuZ3JhZGllbnRVbml0cykmJihyPUIsQj1rKEIsZS5nZXRSYWRpYWxBdHRyKG4scikse2dyYWRpZW50VW5pdHM6XCJ1c2VyU3BhY2VPblVzZVwifSkpO2ZvcihQIGluIEIpXCJpZFwiIT09UCYmdC5wdXNoKFAsQltQXSk7Zm9yKFAgaW4gcSl0LnB1c2gocVtQXSk7dD10LmpvaW4oXCIsXCIpO21bdF0/bj1tW3RdLmF0dHIoXCJpZFwiKTooQi5pZD1uPWEudW5pcXVlS2V5KCksbVt0XT13PWUuY3JlYXRlRWxlbWVudChiKS5hdHRyKEIpLmFkZChlLmRlZnMpLHcucmFkQXR0cj1yLHcuc3RvcHM9W10seShxLGZ1bmN0aW9uKEUpezA9PT1FWzFdLmluZGV4T2YoXCJyZ2JhXCIpPyhjPWEuY29sb3IoRVsxXSksZD1jLmdldChcInJnYlwiKSx4PWMuZ2V0KFwiYVwiKSk6KGQ9RVsxXSx4PTEpO0U9ZS5jcmVhdGVFbGVtZW50KFwic3RvcFwiKS5hdHRyKHtvZmZzZXQ6RVswXSxcInN0b3AtY29sb3JcIjpkLFxuXCJzdG9wLW9wYWNpdHlcIjp4fSkuYWRkKHcpO3cuc3RvcHMucHVzaChFKX0pKTtBPVwidXJsKFwiK2UudXJsK1wiI1wiK24rXCIpXCI7Zy5zZXRBdHRyaWJ1dGUoSCxBKTtnLmdyYWRpZW50PXQ7RS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBBfX19LGFwcGx5VGV4dE91dGxpbmU6ZnVuY3Rpb24oYSl7dmFyIEU9dGhpcy5lbGVtZW50LGcsZSxrLGI7LTEhPT1hLmluZGV4T2YoXCJjb250cmFzdFwiKSYmKGE9YS5yZXBsYWNlKC9jb250cmFzdC9nLHRoaXMucmVuZGVyZXIuZ2V0Q29udHJhc3QoRS5zdHlsZS5maWxsKSkpO3RoaXMuZmFrZVRTPSEwO3RoaXMueVNldHRlcj10aGlzLnhTZXR0ZXI7Zz1bXS5zbGljZS5jYWxsKEUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0c3BhblwiKSk7YT1hLnNwbGl0KFwiIFwiKTtlPWFbYS5sZW5ndGgtMV07KGs9YVswXSkmJlwibm9uZVwiIT09ayYmKGs9ay5yZXBsYWNlKC8oXltcXGRcXC5dKykoLio/KSQvZyxmdW5jdGlvbihhLEUsSCl7cmV0dXJuIDIqRStIfSkseShnLGZ1bmN0aW9uKGEpe1wiaGlnaGNoYXJ0cy10ZXh0LW91dGxpbmVcIj09PVxuYS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSYmbShnLEUucmVtb3ZlQ2hpbGQoYSkpfSksYj1FLmZpcnN0Q2hpbGQseShnLGZ1bmN0aW9uKGEsSCl7MD09PUgmJihhLnNldEF0dHJpYnV0ZShcInhcIixFLmdldEF0dHJpYnV0ZShcInhcIikpLEg9RS5nZXRBdHRyaWJ1dGUoXCJ5XCIpLGEuc2V0QXR0cmlidXRlKFwieVwiLEh8fDApLG51bGw9PT1IJiZFLnNldEF0dHJpYnV0ZShcInlcIiwwKSk7YT1hLmNsb25lTm9kZSgxKTtoKGEse1wiY2xhc3NcIjpcImhpZ2hjaGFydHMtdGV4dC1vdXRsaW5lXCIsZmlsbDplLHN0cm9rZTplLFwic3Ryb2tlLXdpZHRoXCI6ayxcInN0cm9rZS1saW5lam9pblwiOlwicm91bmRcIn0pO0UuaW5zZXJ0QmVmb3JlKGEsYil9KSl9LGF0dHI6ZnVuY3Rpb24oYSxILGUsayl7dmFyIEUsYj10aGlzLmVsZW1lbnQsYyxCPXRoaXMscjtcInN0cmluZ1wiPT09dHlwZW9mIGEmJnZvaWQgMCE9PUgmJihFPWEsYT17fSxhW0VdPUgpO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlCPSh0aGlzW2ErXCJHZXR0ZXJcIl18fFxudGhpcy5fZGVmYXVsdEdldHRlcikuY2FsbCh0aGlzLGEsYik7ZWxzZXtmb3IoRSBpbiBhKUg9YVtFXSxyPSExLGt8fGcodGhpcyxFKSx0aGlzLnN5bWJvbE5hbWUmJi9eKHh8eXx3aWR0aHxoZWlnaHR8cnxzdGFydHxlbmR8aW5uZXJSfGFuY2hvclh8YW5jaG9yWSkvLnRlc3QoRSkmJihjfHwodGhpcy5zeW1ib2xBdHRyKGEpLGM9ITApLHI9ITApLCF0aGlzLnJvdGF0aW9ufHxcInhcIiE9PUUmJlwieVwiIT09RXx8KHRoaXMuZG9UcmFuc2Zvcm09ITApLHJ8fChyPXRoaXNbRStcIlNldHRlclwiXXx8dGhpcy5fZGVmYXVsdFNldHRlcixyLmNhbGwodGhpcyxILEUsYiksdGhpcy5zaGFkb3dzJiYvXih3aWR0aHxoZWlnaHR8dmlzaWJpbGl0eXx4fHl8ZHx0cmFuc2Zvcm18Y3h8Y3l8cikkLy50ZXN0KEUpJiZ0aGlzLnVwZGF0ZVNoYWRvd3MoRSxILHIpKTt0aGlzLmRvVHJhbnNmb3JtJiYodGhpcy51cGRhdGVUcmFuc2Zvcm0oKSx0aGlzLmRvVHJhbnNmb3JtPSExKX1lJiZlKCk7cmV0dXJuIEJ9LHVwZGF0ZVNoYWRvd3M6ZnVuY3Rpb24oYSxcbkgsZyl7Zm9yKHZhciBFPXRoaXMuc2hhZG93cyxlPUUubGVuZ3RoO2UtLTspZy5jYWxsKEVbZV0sXCJoZWlnaHRcIj09PWE/TWF0aC5tYXgoSC0oRVtlXS5jdXRIZWlnaHR8fDApLDApOlwiZFwiPT09YT90aGlzLmQ6SCxhLEVbZV0pfSxhZGRDbGFzczpmdW5jdGlvbihhLEgpe3ZhciBFPXRoaXMuYXR0cihcImNsYXNzXCIpfHxcIlwiOy0xPT09RS5pbmRleE9mKGEpJiYoSHx8KGE9KEUrKEU/XCIgXCI6XCJcIikrYSkucmVwbGFjZShcIiAgXCIsXCIgXCIpKSx0aGlzLmF0dHIoXCJjbGFzc1wiLGEpKTtyZXR1cm4gdGhpc30saGFzQ2xhc3M6ZnVuY3Rpb24oYSl7cmV0dXJuLTEhPT1oKHRoaXMuZWxlbWVudCxcImNsYXNzXCIpLmluZGV4T2YoYSl9LHJlbW92ZUNsYXNzOmZ1bmN0aW9uKGEpe2godGhpcy5lbGVtZW50LFwiY2xhc3NcIiwoaCh0aGlzLmVsZW1lbnQsXCJjbGFzc1wiKXx8XCJcIikucmVwbGFjZShhLFwiXCIpKTtyZXR1cm4gdGhpc30sc3ltYm9sQXR0cjpmdW5jdGlvbihhKXt2YXIgRT10aGlzO3koXCJ4IHkgciBzdGFydCBlbmQgd2lkdGggaGVpZ2h0IGlubmVyUiBhbmNob3JYIGFuY2hvcllcIi5zcGxpdChcIiBcIiksXG5mdW5jdGlvbihnKXtFW2ddPUsoYVtnXSxFW2ddKX0pO0UuYXR0cih7ZDpFLnJlbmRlcmVyLnN5bWJvbHNbRS5zeW1ib2xOYW1lXShFLngsRS55LEUud2lkdGgsRS5oZWlnaHQsRSl9KX0sY2xpcDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5hdHRyKFwiY2xpcC1wYXRoXCIsYT9cInVybChcIit0aGlzLnJlbmRlcmVyLnVybCtcIiNcIithLmlkK1wiKVwiOlwibm9uZVwiKX0sY3Jpc3A6ZnVuY3Rpb24oYSxnKXt2YXIgRSxIPXt9LGU7Zz1nfHxhLnN0cm9rZVdpZHRofHwwO2U9TWF0aC5yb3VuZChnKSUyLzI7YS54PU1hdGguZmxvb3IoYS54fHx0aGlzLnh8fDApK2U7YS55PU1hdGguZmxvb3IoYS55fHx0aGlzLnl8fDApK2U7YS53aWR0aD1NYXRoLmZsb29yKChhLndpZHRofHx0aGlzLndpZHRofHwwKS0yKmUpO2EuaGVpZ2h0PU1hdGguZmxvb3IoKGEuaGVpZ2h0fHx0aGlzLmhlaWdodHx8MCktMiplKTt1KGEuc3Ryb2tlV2lkdGgpJiYoYS5zdHJva2VXaWR0aD1nKTtmb3IoRSBpbiBhKXRoaXNbRV0hPT1hW0VdJiZcbih0aGlzW0VdPUhbRV09YVtFXSk7cmV0dXJuIEh9LGNzczpmdW5jdGlvbihhKXt2YXIgZz10aGlzLnN0eWxlcyxFPXt9LGs9dGhpcy5lbGVtZW50LGIsYyxyPVwiXCI7Yj0hZzthJiZhLmNvbG9yJiYoYS5maWxsPWEuY29sb3IpO2lmKGcpZm9yKGMgaW4gYSlhW2NdIT09Z1tjXSYmKEVbY109YVtjXSxiPSEwKTtpZihiKXtiPXRoaXMudGV4dFdpZHRoPWEmJmEud2lkdGgmJlwidGV4dFwiPT09ay5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiZKKGEud2lkdGgpfHx0aGlzLnRleHRXaWR0aDtnJiYoYT10KGcsRSkpO3RoaXMuc3R5bGVzPWE7YiYmIUImJnRoaXMucmVuZGVyZXIuZm9yRXhwb3J0JiZkZWxldGUgYS53aWR0aDtpZihlJiYhQil2KHRoaXMuZWxlbWVudCxhKTtlbHNle2c9ZnVuY3Rpb24oYSxnKXtyZXR1cm5cIi1cIitnLnRvTG93ZXJDYXNlKCl9O2ZvcihjIGluIGEpcis9Yy5yZXBsYWNlKC8oW0EtWl0pL2csZykrXCI6XCIrYVtjXStcIjtcIjtoKGssXCJzdHlsZVwiLHIpfXRoaXMuYWRkZWQmJihiJiZcbnRoaXMucmVuZGVyZXIuYnVpbGRUZXh0KHRoaXMpLGEmJmEudGV4dE91dGxpbmUmJnRoaXMuYXBwbHlUZXh0T3V0bGluZShhLnRleHRPdXRsaW5lKSl9cmV0dXJuIHRoaXN9LHN0cm9rZVdpZHRoOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbXCJzdHJva2Utd2lkdGhcIl18fDB9LG9uOmZ1bmN0aW9uKGEsZyl7dmFyIEU9dGhpcyxlPUUuZWxlbWVudDtxJiZcImNsaWNrXCI9PT1hPyhlLm9udG91Y2hzdGFydD1mdW5jdGlvbihhKXtFLnRvdWNoRXZlbnRGaXJlZD1EYXRlLm5vdygpO2EucHJldmVudERlZmF1bHQoKTtnLmNhbGwoZSxhKX0sZS5vbmNsaWNrPWZ1bmN0aW9uKGEpeygtMT09PVIubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiQW5kcm9pZFwiKXx8MTEwMDxEYXRlLm5vdygpLShFLnRvdWNoRXZlbnRGaXJlZHx8MCkpJiZnLmNhbGwoZSxhKX0pOmVbXCJvblwiK2FdPWc7cmV0dXJuIHRoaXN9LHNldFJhZGlhbFJlZmVyZW5jZTpmdW5jdGlvbihhKXt2YXIgZz10aGlzLnJlbmRlcmVyLmdyYWRpZW50c1t0aGlzLmVsZW1lbnQuZ3JhZGllbnRdO1xudGhpcy5lbGVtZW50LnJhZGlhbFJlZmVyZW5jZT1hO2cmJmcucmFkQXR0ciYmZy5hbmltYXRlKHRoaXMucmVuZGVyZXIuZ2V0UmFkaWFsQXR0cihhLGcucmFkQXR0cikpO3JldHVybiB0aGlzfSx0cmFuc2xhdGU6ZnVuY3Rpb24oYSxnKXtyZXR1cm4gdGhpcy5hdHRyKHt0cmFuc2xhdGVYOmEsdHJhbnNsYXRlWTpnfSl9LGludmVydDpmdW5jdGlvbihhKXt0aGlzLmludmVydGVkPWE7dGhpcy51cGRhdGVUcmFuc2Zvcm0oKTtyZXR1cm4gdGhpc30sdXBkYXRlVHJhbnNmb3JtOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy50cmFuc2xhdGVYfHwwLGc9dGhpcy50cmFuc2xhdGVZfHwwLGU9dGhpcy5zY2FsZVgsaz10aGlzLnNjYWxlWSxiPXRoaXMuaW52ZXJ0ZWQsYz10aGlzLnJvdGF0aW9uLEI9dGhpcy5lbGVtZW50O2ImJihhKz10aGlzLmF0dHIoXCJ3aWR0aFwiKSxnKz10aGlzLmF0dHIoXCJoZWlnaHRcIikpO2E9W1widHJhbnNsYXRlKFwiK2ErXCIsXCIrZytcIilcIl07Yj9hLnB1c2goXCJyb3RhdGUoOTApIHNjYWxlKC0xLDEpXCIpOlxuYyYmYS5wdXNoKFwicm90YXRlKFwiK2MrXCIgXCIrKEIuZ2V0QXR0cmlidXRlKFwieFwiKXx8MCkrXCIgXCIrKEIuZ2V0QXR0cmlidXRlKFwieVwiKXx8MCkrXCIpXCIpOyh1KGUpfHx1KGspKSYmYS5wdXNoKFwic2NhbGUoXCIrSyhlLDEpK1wiIFwiK0soaywxKStcIilcIik7YS5sZW5ndGgmJkIuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsYS5qb2luKFwiIFwiKSl9LHRvRnJvbnQ6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmVsZW1lbnQ7YS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGEpO3JldHVybiB0aGlzfSxhbGlnbjpmdW5jdGlvbihhLGcsZSl7dmFyIEUsSCxrLGIsYz17fTtIPXRoaXMucmVuZGVyZXI7az1ILmFsaWduZWRPYmplY3RzO3ZhciBCLHI7aWYoYSl7aWYodGhpcy5hbGlnbk9wdGlvbnM9YSx0aGlzLmFsaWduQnlUcmFuc2xhdGU9ZywhZXx8eChlKSl0aGlzLmFsaWduVG89RT1lfHxcInJlbmRlcmVyXCIsbShrLHRoaXMpLGsucHVzaCh0aGlzKSxlPW51bGx9ZWxzZSBhPXRoaXMuYWxpZ25PcHRpb25zLGc9dGhpcy5hbGlnbkJ5VHJhbnNsYXRlLFxuRT10aGlzLmFsaWduVG87ZT1LKGUsSFtFXSxIKTtFPWEuYWxpZ247SD1hLnZlcnRpY2FsQWxpZ247az0oZS54fHwwKSsoYS54fHwwKTtiPShlLnl8fDApKyhhLnl8fDApO1wicmlnaHRcIj09PUU/Qj0xOlwiY2VudGVyXCI9PT1FJiYoQj0yKTtCJiYoays9KGUud2lkdGgtKGEud2lkdGh8fDApKS9CKTtjW2c/XCJ0cmFuc2xhdGVYXCI6XCJ4XCJdPU1hdGgucm91bmQoayk7XCJib3R0b21cIj09PUg/cj0xOlwibWlkZGxlXCI9PT1IJiYocj0yKTtyJiYoYis9KGUuaGVpZ2h0LShhLmhlaWdodHx8MCkpL3IpO2NbZz9cInRyYW5zbGF0ZVlcIjpcInlcIl09TWF0aC5yb3VuZChiKTt0aGlzW3RoaXMucGxhY2VkP1wiYW5pbWF0ZVwiOlwiYXR0clwiXShjKTt0aGlzLnBsYWNlZD0hMDt0aGlzLmFsaWduQXR0cj1jO3JldHVybiB0aGlzfSxnZXRCQm94OmZ1bmN0aW9uKGEsZyl7dmFyIEUsSD10aGlzLnJlbmRlcmVyLGssYj10aGlzLmVsZW1lbnQsYz10aGlzLnN0eWxlcyxCLHI9dGhpcy50ZXh0U3RyLG0sdz1ILmNhY2hlLHE9SC5jYWNoZUtleXMsXG54O2c9SyhnLHRoaXMucm90YXRpb24pO2s9ZypkO0I9YyYmYy5mb250U2l6ZTt2b2lkIDAhPT1yJiYoeD1yLnRvU3RyaW5nKCksLTE9PT14LmluZGV4T2YoXCJcXHgzY1wiKSYmKHg9eC5yZXBsYWNlKC9bMC05XS9nLFwiMFwiKSkseCs9W1wiXCIsZ3x8MCxCLGIuc3R5bGUud2lkdGgsYi5zdHlsZVtcInRleHQtb3ZlcmZsb3dcIl1dLmpvaW4oKSk7eCYmIWEmJihFPXdbeF0pO2lmKCFFKXtpZihiLm5hbWVzcGFjZVVSST09PXRoaXMuU1ZHX05TfHxILmZvckV4cG9ydCl7dHJ5eyhtPXRoaXMuZmFrZVRTJiZmdW5jdGlvbihhKXt5KGIucXVlcnlTZWxlY3RvckFsbChcIi5oaWdoY2hhcnRzLXRleHQtb3V0bGluZVwiKSxmdW5jdGlvbihnKXtnLnN0eWxlLmRpc3BsYXk9YX0pfSkmJm0oXCJub25lXCIpLEU9Yi5nZXRCQm94P3Qoe30sYi5nZXRCQm94KCkpOnt3aWR0aDpiLm9mZnNldFdpZHRoLGhlaWdodDpiLm9mZnNldEhlaWdodH0sbSYmbShcIlwiKX1jYXRjaChUKXt9aWYoIUV8fDA+RS53aWR0aClFPXt3aWR0aDowLFxuaGVpZ2h0OjB9fWVsc2UgRT10aGlzLmh0bWxHZXRCQm94KCk7SC5pc1NWRyYmKGE9RS53aWR0aCxIPUUuaGVpZ2h0LGUmJmMmJlwiMTFweFwiPT09Yy5mb250U2l6ZSYmXCIxNi45XCI9PT1ILnRvUHJlY2lzaW9uKDMpJiYoRS5oZWlnaHQ9SD0xNCksZyYmKEUud2lkdGg9TWF0aC5hYnMoSCpNYXRoLnNpbihrKSkrTWF0aC5hYnMoYSpNYXRoLmNvcyhrKSksRS5oZWlnaHQ9TWF0aC5hYnMoSCpNYXRoLmNvcyhrKSkrTWF0aC5hYnMoYSpNYXRoLnNpbihrKSkpKTtpZih4JiYwPEUuaGVpZ2h0KXtmb3IoOzI1MDxxLmxlbmd0aDspZGVsZXRlIHdbcS5zaGlmdCgpXTt3W3hdfHxxLnB1c2goeCk7d1t4XT1FfX1yZXR1cm4gRX0sc2hvdzpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5hdHRyKHt2aXNpYmlsaXR5OmE/XCJpbmhlcml0XCI6XCJ2aXNpYmxlXCJ9KX0saGlkZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmF0dHIoe3Zpc2liaWxpdHk6XCJoaWRkZW5cIn0pfSxmYWRlT3V0OmZ1bmN0aW9uKGEpe3ZhciBnPVxudGhpcztnLmFuaW1hdGUoe29wYWNpdHk6MH0se2R1cmF0aW9uOmF8fDE1MCxjb21wbGV0ZTpmdW5jdGlvbigpe2cuYXR0cih7eTotOTk5OX0pfX0pfSxhZGQ6ZnVuY3Rpb24oYSl7dmFyIGc9dGhpcy5yZW5kZXJlcixlPXRoaXMuZWxlbWVudCxFO2EmJih0aGlzLnBhcmVudEdyb3VwPWEpO3RoaXMucGFyZW50SW52ZXJ0ZWQ9YSYmYS5pbnZlcnRlZDt2b2lkIDAhPT10aGlzLnRleHRTdHImJmcuYnVpbGRUZXh0KHRoaXMpO3RoaXMuYWRkZWQ9ITA7aWYoIWF8fGEuaGFuZGxlWnx8dGhpcy56SW5kZXgpRT10aGlzLnpJbmRleFNldHRlcigpO0V8fChhP2EuZWxlbWVudDpnLmJveCkuYXBwZW5kQ2hpbGQoZSk7aWYodGhpcy5vbkFkZCl0aGlzLm9uQWRkKCk7cmV0dXJuIHRoaXN9LHNhZmVSZW1vdmVDaGlsZDpmdW5jdGlvbihhKXt2YXIgZz1hLnBhcmVudE5vZGU7ZyYmZy5yZW1vdmVDaGlsZChhKX0sZGVzdHJveTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZWxlbWVudHx8e30sZT10aGlzLnJlbmRlcmVyLmlzU1ZHJiZcblwiU1BBTlwiPT09YS5ub2RlTmFtZSYmdGhpcy5wYXJlbnRHcm91cCxrLGI7YS5vbmNsaWNrPWEub25tb3VzZW91dD1hLm9ubW91c2VvdmVyPWEub25tb3VzZW1vdmU9YS5wb2ludD1udWxsO2codGhpcyk7dGhpcy5jbGlwUGF0aCYmKHRoaXMuY2xpcFBhdGg9dGhpcy5jbGlwUGF0aC5kZXN0cm95KCkpO2lmKHRoaXMuc3RvcHMpe2ZvcihiPTA7Yjx0aGlzLnN0b3BzLmxlbmd0aDtiKyspdGhpcy5zdG9wc1tiXT10aGlzLnN0b3BzW2JdLmRlc3Ryb3koKTt0aGlzLnN0b3BzPW51bGx9dGhpcy5zYWZlUmVtb3ZlQ2hpbGQoYSk7Zm9yKHRoaXMuZGVzdHJveVNoYWRvd3MoKTtlJiZlLmRpdiYmMD09PWUuZGl2LmNoaWxkTm9kZXMubGVuZ3RoOylhPWUucGFyZW50R3JvdXAsdGhpcy5zYWZlUmVtb3ZlQ2hpbGQoZS5kaXYpLGRlbGV0ZSBlLmRpdixlPWE7dGhpcy5hbGlnblRvJiZtKHRoaXMucmVuZGVyZXIuYWxpZ25lZE9iamVjdHMsdGhpcyk7Zm9yKGsgaW4gdGhpcylkZWxldGUgdGhpc1trXTtyZXR1cm4gbnVsbH0sXG5zaGFkb3c6ZnVuY3Rpb24oYSxnLGUpe3ZhciBFPVtdLGIsayxIPXRoaXMuZWxlbWVudCxjLEIscixtO2lmKCFhKXRoaXMuZGVzdHJveVNoYWRvd3MoKTtlbHNlIGlmKCF0aGlzLnNoYWRvd3Mpe0I9SyhhLndpZHRoLDMpO3I9KGEub3BhY2l0eXx8LjE1KS9CO209dGhpcy5wYXJlbnRJbnZlcnRlZD9cIigtMSwtMSlcIjpcIihcIitLKGEub2Zmc2V0WCwxKStcIiwgXCIrSyhhLm9mZnNldFksMSkrXCIpXCI7Zm9yKGI9MTtiPD1CO2IrKylrPUguY2xvbmVOb2RlKDApLGM9MipCKzEtMipiLGgoayx7aXNTaGFkb3c6XCJ0cnVlXCIsc3Ryb2tlOmEuY29sb3J8fFwiIzAwMDAwMFwiLFwic3Ryb2tlLW9wYWNpdHlcIjpyKmIsXCJzdHJva2Utd2lkdGhcIjpjLHRyYW5zZm9ybTpcInRyYW5zbGF0ZVwiK20sZmlsbDpcIm5vbmVcIn0pLGUmJihoKGssXCJoZWlnaHRcIixNYXRoLm1heChoKGssXCJoZWlnaHRcIiktYywwKSksay5jdXRIZWlnaHQ9YyksZz9nLmVsZW1lbnQuYXBwZW5kQ2hpbGQoayk6SC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShrLFxuSCksRS5wdXNoKGspO3RoaXMuc2hhZG93cz1FfXJldHVybiB0aGlzfSxkZXN0cm95U2hhZG93czpmdW5jdGlvbigpe3kodGhpcy5zaGFkb3dzfHxbXSxmdW5jdGlvbihhKXt0aGlzLnNhZmVSZW1vdmVDaGlsZChhKX0sdGhpcyk7dGhpcy5zaGFkb3dzPXZvaWQgMH0seEdldHRlcjpmdW5jdGlvbihhKXtcImNpcmNsZVwiPT09dGhpcy5lbGVtZW50Lm5vZGVOYW1lJiYoXCJ4XCI9PT1hP2E9XCJjeFwiOlwieVwiPT09YSYmKGE9XCJjeVwiKSk7cmV0dXJuIHRoaXMuX2RlZmF1bHRHZXR0ZXIoYSl9LF9kZWZhdWx0R2V0dGVyOmZ1bmN0aW9uKGEpe2E9Syh0aGlzW2FdLHRoaXMuZWxlbWVudD90aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKGEpOm51bGwsMCk7L15bXFwtMC05XFwuXSskLy50ZXN0KGEpJiYoYT1wYXJzZUZsb2F0KGEpKTtyZXR1cm4gYX0sZFNldHRlcjpmdW5jdGlvbihhLGcsZSl7YSYmYS5qb2luJiYoYT1hLmpvaW4oXCIgXCIpKTsvKE5hTnwgezJ9fF4kKS8udGVzdChhKSYmKGE9XCJNIDAgMFwiKTtlLnNldEF0dHJpYnV0ZShnLFxuYSk7dGhpc1tnXT1hfSxkYXNoc3R5bGVTZXR0ZXI6ZnVuY3Rpb24oYSl7dmFyIGcsZT10aGlzW1wic3Ryb2tlLXdpZHRoXCJdO1wiaW5oZXJpdFwiPT09ZSYmKGU9MSk7aWYoYT1hJiZhLnRvTG93ZXJDYXNlKCkpe2E9YS5yZXBsYWNlKFwic2hvcnRkYXNoZG90ZG90XCIsXCIzLDEsMSwxLDEsMSxcIikucmVwbGFjZShcInNob3J0ZGFzaGRvdFwiLFwiMywxLDEsMVwiKS5yZXBsYWNlKFwic2hvcnRkb3RcIixcIjEsMSxcIikucmVwbGFjZShcInNob3J0ZGFzaFwiLFwiMywxLFwiKS5yZXBsYWNlKFwibG9uZ2Rhc2hcIixcIjgsMyxcIikucmVwbGFjZSgvZG90L2csXCIxLDMsXCIpLnJlcGxhY2UoXCJkYXNoXCIsXCI0LDMsXCIpLnJlcGxhY2UoLywkLyxcIlwiKS5zcGxpdChcIixcIik7Zm9yKGc9YS5sZW5ndGg7Zy0tOylhW2ddPUooYVtnXSkqZTthPWEuam9pbihcIixcIikucmVwbGFjZSgvTmFOL2csXCJub25lXCIpO3RoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJzdHJva2UtZGFzaGFycmF5XCIsYSl9fSxhbGlnblNldHRlcjpmdW5jdGlvbihhKXt0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwidGV4dC1hbmNob3JcIixcbntsZWZ0Olwic3RhcnRcIixjZW50ZXI6XCJtaWRkbGVcIixyaWdodDpcImVuZFwifVthXSl9LG9wYWNpdHlTZXR0ZXI6ZnVuY3Rpb24oYSxnLGUpe3RoaXNbZ109YTtlLnNldEF0dHJpYnV0ZShnLGEpfSx0aXRsZVNldHRlcjpmdW5jdGlvbihhKXt2YXIgZz10aGlzLmVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0aXRsZVwiKVswXTtnfHwoZz1uLmNyZWF0ZUVsZW1lbnROUyh0aGlzLlNWR19OUyxcInRpdGxlXCIpLHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChnKSk7Zy5maXJzdENoaWxkJiZnLnJlbW92ZUNoaWxkKGcuZmlyc3RDaGlsZCk7Zy5hcHBlbmRDaGlsZChuLmNyZWF0ZVRleHROb2RlKFN0cmluZyhLKGEpLFwiXCIpLnJlcGxhY2UoLzxbXj5dKj4vZyxcIlwiKSkpfSx0ZXh0U2V0dGVyOmZ1bmN0aW9uKGEpe2EhPT10aGlzLnRleHRTdHImJihkZWxldGUgdGhpcy5iQm94LHRoaXMudGV4dFN0cj1hLHRoaXMuYWRkZWQmJnRoaXMucmVuZGVyZXIuYnVpbGRUZXh0KHRoaXMpKX0sZmlsbFNldHRlcjpmdW5jdGlvbihhLFxuZyxlKXtcInN0cmluZ1wiPT09dHlwZW9mIGE/ZS5zZXRBdHRyaWJ1dGUoZyxhKTphJiZ0aGlzLmNvbG9yR3JhZGllbnQoYSxnLGUpfSx2aXNpYmlsaXR5U2V0dGVyOmZ1bmN0aW9uKGEsZyxlKXtcImluaGVyaXRcIj09PWE/ZS5yZW1vdmVBdHRyaWJ1dGUoZyk6ZS5zZXRBdHRyaWJ1dGUoZyxhKX0sekluZGV4U2V0dGVyOmZ1bmN0aW9uKGEsZyl7dmFyIGU9dGhpcy5yZW5kZXJlcixrPXRoaXMucGFyZW50R3JvdXAsYj0oa3x8ZSkuZWxlbWVudHx8ZS5ib3gsYyxCPXRoaXMuZWxlbWVudCxIO2M9dGhpcy5hZGRlZDt2YXIgcjt1KGEpJiYoQi56SW5kZXg9YSxhPSthLHRoaXNbZ109PT1hJiYoYz0hMSksdGhpc1tnXT1hKTtpZihjKXsoYT10aGlzLnpJbmRleCkmJmsmJihrLmhhbmRsZVo9ITApO2c9Yi5jaGlsZE5vZGVzO2ZvcihyPTA7cjxnLmxlbmd0aCYmIUg7cisrKWs9Z1tyXSxjPWsuekluZGV4LGshPT1CJiYoSihjKT5hfHwhdShhKSYmdShjKXx8MD5hJiYhdShjKSYmYiE9PWUuYm94KSYmKGIuaW5zZXJ0QmVmb3JlKEIsXG5rKSxIPSEwKTtIfHxiLmFwcGVuZENoaWxkKEIpfXJldHVybiBIfSxfZGVmYXVsdFNldHRlcjpmdW5jdGlvbihhLGcsZSl7ZS5zZXRBdHRyaWJ1dGUoZyxhKX19O0QucHJvdG90eXBlLnlHZXR0ZXI9RC5wcm90b3R5cGUueEdldHRlcjtELnByb3RvdHlwZS50cmFuc2xhdGVYU2V0dGVyPUQucHJvdG90eXBlLnRyYW5zbGF0ZVlTZXR0ZXI9RC5wcm90b3R5cGUucm90YXRpb25TZXR0ZXI9RC5wcm90b3R5cGUudmVydGljYWxBbGlnblNldHRlcj1ELnByb3RvdHlwZS5zY2FsZVhTZXR0ZXI9RC5wcm90b3R5cGUuc2NhbGVZU2V0dGVyPWZ1bmN0aW9uKGEsZyl7dGhpc1tnXT1hO3RoaXMuZG9UcmFuc2Zvcm09ITB9O0QucHJvdG90eXBlW1wic3Ryb2tlLXdpZHRoU2V0dGVyXCJdPUQucHJvdG90eXBlLnN0cm9rZVNldHRlcj1mdW5jdGlvbihhLGcsZSl7dGhpc1tnXT1hO3RoaXMuc3Ryb2tlJiZ0aGlzW1wic3Ryb2tlLXdpZHRoXCJdPyhELnByb3RvdHlwZS5maWxsU2V0dGVyLmNhbGwodGhpcyx0aGlzLnN0cm9rZSxcblwic3Ryb2tlXCIsZSksZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utd2lkdGhcIix0aGlzW1wic3Ryb2tlLXdpZHRoXCJdKSx0aGlzLmhhc1N0cm9rZT0hMCk6XCJzdHJva2Utd2lkdGhcIj09PWcmJjA9PT1hJiZ0aGlzLmhhc1N0cm9rZSYmKGUucmVtb3ZlQXR0cmlidXRlKFwic3Ryb2tlXCIpLHRoaXMuaGFzU3Ryb2tlPSExKX07Qz1hLlNWR1JlbmRlcmVyPWZ1bmN0aW9uKCl7dGhpcy5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX07Qy5wcm90b3R5cGU9e0VsZW1lbnQ6RCxTVkdfTlM6Uyxpbml0OmZ1bmN0aW9uKGEsZyxlLGssYixjKXt2YXIgQjtrPXRoaXMuY3JlYXRlRWxlbWVudChcInN2Z1wiKS5hdHRyKHt2ZXJzaW9uOlwiMS4xXCIsXCJjbGFzc1wiOlwiaGlnaGNoYXJ0cy1yb290XCJ9KS5jc3ModGhpcy5nZXRTdHlsZShrKSk7Qj1rLmVsZW1lbnQ7YS5hcHBlbmRDaGlsZChCKTstMT09PWEuaW5uZXJIVE1MLmluZGV4T2YoXCJ4bWxuc1wiKSYmaChCLFwieG1sbnNcIix0aGlzLlNWR19OUyk7dGhpcy5pc1NWRz0hMDtcbnRoaXMuYm94PUI7dGhpcy5ib3hXcmFwcGVyPWs7dGhpcy5hbGlnbmVkT2JqZWN0cz1bXTt0aGlzLnVybD0oRnx8QSkmJm4uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJiYXNlXCIpLmxlbmd0aD9SLmxvY2F0aW9uLmhyZWYucmVwbGFjZSgvIy4qPyQvLFwiXCIpLnJlcGxhY2UoLyhbXFwoJ1xcKV0pL2csXCJcXFxcJDFcIikucmVwbGFjZSgvIC9nLFwiJTIwXCIpOlwiXCI7dGhpcy5jcmVhdGVFbGVtZW50KFwiZGVzY1wiKS5hZGQoKS5lbGVtZW50LmFwcGVuZENoaWxkKG4uY3JlYXRlVGV4dE5vZGUoXCJDcmVhdGVkIHdpdGggSGlnaGNoYXJ0cyA1LjAuNlwiKSk7dGhpcy5kZWZzPXRoaXMuY3JlYXRlRWxlbWVudChcImRlZnNcIikuYWRkKCk7dGhpcy5hbGxvd0hUTUw9Yzt0aGlzLmZvckV4cG9ydD1iO3RoaXMuZ3JhZGllbnRzPXt9O3RoaXMuY2FjaGU9e307dGhpcy5jYWNoZUtleXM9W107dGhpcy5pbWdDb3VudD0wO3RoaXMuc2V0U2l6ZShnLGUsITEpO3ZhciBIO0YmJmEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0JiYoZz1mdW5jdGlvbigpe3YoYSxcbntsZWZ0OjAsdG9wOjB9KTtIPWEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7dihhLHtsZWZ0Ok1hdGguY2VpbChILmxlZnQpLUgubGVmdCtcInB4XCIsdG9wOk1hdGguY2VpbChILnRvcCktSC50b3ArXCJweFwifSl9LGcoKSx0aGlzLnVuU3ViUGl4ZWxGaXg9RyhSLFwicmVzaXplXCIsZykpfSxnZXRTdHlsZTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5zdHlsZT10KHtmb250RmFtaWx5OidcIkx1Y2lkYSBHcmFuZGVcIiwgXCJMdWNpZGEgU2FucyBVbmljb2RlXCIsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWYnLGZvbnRTaXplOlwiMTJweFwifSxhKX0sc2V0U3R5bGU6ZnVuY3Rpb24oYSl7dGhpcy5ib3hXcmFwcGVyLmNzcyh0aGlzLmdldFN0eWxlKGEpKX0saXNIaWRkZW46ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5ib3hXcmFwcGVyLmdldEJCb3goKS53aWR0aH0sZGVzdHJveTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZGVmczt0aGlzLmJveD1udWxsO3RoaXMuYm94V3JhcHBlcj10aGlzLmJveFdyYXBwZXIuZGVzdHJveSgpO1xuYyh0aGlzLmdyYWRpZW50c3x8e30pO3RoaXMuZ3JhZGllbnRzPW51bGw7YSYmKHRoaXMuZGVmcz1hLmRlc3Ryb3koKSk7dGhpcy51blN1YlBpeGVsRml4JiZ0aGlzLnVuU3ViUGl4ZWxGaXgoKTtyZXR1cm4gdGhpcy5hbGlnbmVkT2JqZWN0cz1udWxsfSxjcmVhdGVFbGVtZW50OmZ1bmN0aW9uKGEpe3ZhciBnPW5ldyB0aGlzLkVsZW1lbnQ7Zy5pbml0KHRoaXMsYSk7cmV0dXJuIGd9LGRyYXc6dyxnZXRSYWRpYWxBdHRyOmZ1bmN0aW9uKGEsZyl7cmV0dXJue2N4OmFbMF0tYVsyXS8yK2cuY3gqYVsyXSxjeTphWzFdLWFbMl0vMitnLmN5KmFbMl0scjpnLnIqYVsyXX19LGJ1aWxkVGV4dDpmdW5jdGlvbihhKXtmb3IodmFyIGc9YS5lbGVtZW50LGU9dGhpcyxrPWUuZm9yRXhwb3J0LGM9SyhhLnRleHRTdHIsXCJcIikudG9TdHJpbmcoKSxyPS0xIT09Yy5pbmRleE9mKFwiXFx4M2NcIiksbT1nLmNoaWxkTm9kZXMsdyxFLHEseCxkPWgoZyxcInhcIiksdD1hLnN0eWxlcyxBPWEudGV4dFdpZHRoLHo9dCYmXG50LmxpbmVIZWlnaHQsbD10JiZ0LnRleHRPdXRsaW5lLEY9dCYmXCJlbGxpcHNpc1wiPT09dC50ZXh0T3ZlcmZsb3csZj1tLmxlbmd0aCx1PUEmJiFhLmFkZGVkJiZ0aGlzLmJveCxwPWZ1bmN0aW9uKGEpe3ZhciBrO2s9LyhweHxlbSkkLy50ZXN0KGEmJmEuc3R5bGUuZm9udFNpemUpP2Euc3R5bGUuZm9udFNpemU6dCYmdC5mb250U2l6ZXx8ZS5zdHlsZS5mb250U2l6ZXx8MTI7cmV0dXJuIHo/Sih6KTplLmZvbnRNZXRyaWNzKGssYS5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiKT9hOmcpLmh9O2YtLTspZy5yZW1vdmVDaGlsZChtW2ZdKTtyfHxsfHxGfHxBfHwtMSE9PWMuaW5kZXhPZihcIiBcIik/KHc9LzwuKmNsYXNzPVwiKFteXCJdKylcIi4qPi8sRT0vPC4qc3R5bGU9XCIoW15cIl0rKVwiLio+LyxxPS88LipocmVmPVwiKGh0dHBbXlwiXSspXCIuKj4vLHUmJnUuYXBwZW5kQ2hpbGQoZyksYz1yP2MucmVwbGFjZSgvPChifHN0cm9uZyk+L2csJ1xceDNjc3BhbiBzdHlsZVxceDNkXCJmb250LXdlaWdodDpib2xkXCJcXHgzZScpLnJlcGxhY2UoLzwoaXxlbSk+L2csXG4nXFx4M2NzcGFuIHN0eWxlXFx4M2RcImZvbnQtc3R5bGU6aXRhbGljXCJcXHgzZScpLnJlcGxhY2UoLzxhL2csXCJcXHgzY3NwYW5cIikucmVwbGFjZSgvPFxcLyhifHN0cm9uZ3xpfGVtfGEpPi9nLFwiXFx4M2Mvc3BhblxceDNlXCIpLnNwbGl0KC88YnIuKj8+L2cpOltjXSxjPWIoYyxmdW5jdGlvbihhKXtyZXR1cm5cIlwiIT09YX0pLHkoYyxmdW5jdGlvbihiLGMpe3ZhciByLEg9MDtiPWIucmVwbGFjZSgvXlxccyt8XFxzKyQvZyxcIlwiKS5yZXBsYWNlKC88c3Bhbi9nLFwifHx8XFx4M2NzcGFuXCIpLnJlcGxhY2UoLzxcXC9zcGFuPi9nLFwiXFx4M2Mvc3BhblxceDNlfHx8XCIpO3I9Yi5zcGxpdChcInx8fFwiKTt5KHIsZnVuY3Rpb24oYil7aWYoXCJcIiE9PWJ8fDE9PT1yLmxlbmd0aCl7dmFyIG09e30sbD1uLmNyZWF0ZUVsZW1lbnROUyhlLlNWR19OUyxcInRzcGFuXCIpLHosZjt3LnRlc3QoYikmJih6PWIubWF0Y2godylbMV0saChsLFwiY2xhc3NcIix6KSk7RS50ZXN0KGIpJiYoZj1iLm1hdGNoKEUpWzFdLnJlcGxhY2UoLyg7fCB8Xiljb2xvcihbIDpdKS8sXG5cIiQxZmlsbCQyXCIpLGgobCxcInN0eWxlXCIsZikpO3EudGVzdChiKSYmIWsmJihoKGwsXCJvbmNsaWNrXCIsJ2xvY2F0aW9uLmhyZWZcXHgzZFwiJytiLm1hdGNoKHEpWzFdKydcIicpLHYobCx7Y3Vyc29yOlwicG9pbnRlclwifSkpO2I9KGIucmVwbGFjZSgvPCgufFxcbikqPz4vZyxcIlwiKXx8XCIgXCIpLnJlcGxhY2UoLyZsdDsvZyxcIlxceDNjXCIpLnJlcGxhY2UoLyZndDsvZyxcIlxceDNlXCIpO2lmKFwiIFwiIT09Yil7bC5hcHBlbmRDaGlsZChuLmNyZWF0ZVRleHROb2RlKGIpKTtIP20uZHg9MDpjJiZudWxsIT09ZCYmKG0ueD1kKTtoKGwsbSk7Zy5hcHBlbmRDaGlsZChsKTshSCYmYyYmKCFCJiZrJiZ2KGwse2Rpc3BsYXk6XCJibG9ja1wifSksaChsLFwiZHlcIixwKGwpKSk7aWYoQSl7bT1iLnJlcGxhY2UoLyhbXlxcXl0pLS9nLFwiJDEtIFwiKS5zcGxpdChcIiBcIik7ej1cIm5vd3JhcFwiPT09dC53aGl0ZVNwYWNlO2Zvcih2YXIgSz0xPHIubGVuZ3RofHxjfHwxPG0ubGVuZ3RoJiYheix1LHksSj1bXSxNPXAobCksUD1hLnJvdGF0aW9uLFxuTz1iLE49Ty5sZW5ndGg7KEt8fEYpJiYobS5sZW5ndGh8fEoubGVuZ3RoKTspYS5yb3RhdGlvbj0wLHU9YS5nZXRCQm94KCEwKSx5PXUud2lkdGgsIUImJmUuZm9yRXhwb3J0JiYoeT1lLm1lYXN1cmVTcGFuV2lkdGgobC5maXJzdENoaWxkLmRhdGEsYS5zdHlsZXMpKSx1PXk+QSx2b2lkIDA9PT14JiYoeD11KSxGJiZ4PyhOLz0yLFwiXCI9PT1PfHwhdSYmLjU+Tj9tPVtdOihPPWIuc3Vic3RyaW5nKDAsTy5sZW5ndGgrKHU/LTE6MSkqTWF0aC5jZWlsKE4pKSxtPVtPKygzPEE/XCJcXHUyMDI2XCI6XCJcIildLGwucmVtb3ZlQ2hpbGQobC5maXJzdENoaWxkKSkpOnUmJjEhPT1tLmxlbmd0aD8obC5yZW1vdmVDaGlsZChsLmZpcnN0Q2hpbGQpLEoudW5zaGlmdChtLnBvcCgpKSk6KG09SixKPVtdLG0ubGVuZ3RoJiYheiYmKGw9bi5jcmVhdGVFbGVtZW50TlMoUyxcInRzcGFuXCIpLGgobCx7ZHk6TSx4OmR9KSxmJiZoKGwsXCJzdHlsZVwiLGYpLGcuYXBwZW5kQ2hpbGQobCkpLHk+QSYmKEE9eSkpLG0ubGVuZ3RoJiZcbmwuYXBwZW5kQ2hpbGQobi5jcmVhdGVUZXh0Tm9kZShtLmpvaW4oXCIgXCIpLnJlcGxhY2UoLy0gL2csXCItXCIpKSk7YS5yb3RhdGlvbj1QfUgrK319fSl9KSx4JiZhLmF0dHIoXCJ0aXRsZVwiLGEudGV4dFN0ciksdSYmdS5yZW1vdmVDaGlsZChnKSxsJiZhLmFwcGx5VGV4dE91dGxpbmUmJmEuYXBwbHlUZXh0T3V0bGluZShsKSk6Zy5hcHBlbmRDaGlsZChuLmNyZWF0ZVRleHROb2RlKGMucmVwbGFjZSgvJmx0Oy9nLFwiXFx4M2NcIikucmVwbGFjZSgvJmd0Oy9nLFwiXFx4M2VcIikpKX0sZ2V0Q29udHJhc3Q6ZnVuY3Rpb24oYSl7YT1wKGEpLnJnYmE7cmV0dXJuIDUxMDxhWzBdK2FbMV0rYVsyXT9cIiMwMDAwMDBcIjpcIiNGRkZGRkZcIn0sYnV0dG9uOmZ1bmN0aW9uKGEsZyxiLGMsQixyLG0sdyxxKXt2YXIgSD10aGlzLmxhYmVsKGEsZyxiLHEsbnVsbCxudWxsLG51bGwsbnVsbCxcImJ1dHRvblwiKSxFPTA7SC5hdHRyKGsoe3BhZGRpbmc6OCxyOjJ9LEIpKTt2YXIgeCxkLG4sbDtCPWsoe2ZpbGw6XCIjZjdmN2Y3XCIsXG5zdHJva2U6XCIjY2NjY2NjXCIsXCJzdHJva2Utd2lkdGhcIjoxLHN0eWxlOntjb2xvcjpcIiMzMzMzMzNcIixjdXJzb3I6XCJwb2ludGVyXCIsZm9udFdlaWdodDpcIm5vcm1hbFwifX0sQik7eD1CLnN0eWxlO2RlbGV0ZSBCLnN0eWxlO3I9ayhCLHtmaWxsOlwiI2U2ZTZlNlwifSxyKTtkPXIuc3R5bGU7ZGVsZXRlIHIuc3R5bGU7bT1rKEIse2ZpbGw6XCIjZTZlYmY1XCIsc3R5bGU6e2NvbG9yOlwiIzAwMDAwMFwiLGZvbnRXZWlnaHQ6XCJib2xkXCJ9fSxtKTtuPW0uc3R5bGU7ZGVsZXRlIG0uc3R5bGU7dz1rKEIse3N0eWxlOntjb2xvcjpcIiNjY2NjY2NcIn19LHcpO2w9dy5zdHlsZTtkZWxldGUgdy5zdHlsZTtHKEguZWxlbWVudCxlP1wibW91c2VvdmVyXCI6XCJtb3VzZWVudGVyXCIsZnVuY3Rpb24oKXszIT09RSYmSC5zZXRTdGF0ZSgxKX0pO0coSC5lbGVtZW50LGU/XCJtb3VzZW91dFwiOlwibW91c2VsZWF2ZVwiLGZ1bmN0aW9uKCl7MyE9PUUmJkguc2V0U3RhdGUoRSl9KTtILnNldFN0YXRlPWZ1bmN0aW9uKGEpezEhPT1hJiZcbihILnN0YXRlPUU9YSk7SC5yZW1vdmVDbGFzcygvaGlnaGNoYXJ0cy1idXR0b24tKG5vcm1hbHxob3ZlcnxwcmVzc2VkfGRpc2FibGVkKS8pLmFkZENsYXNzKFwiaGlnaGNoYXJ0cy1idXR0b24tXCIrW1wibm9ybWFsXCIsXCJob3ZlclwiLFwicHJlc3NlZFwiLFwiZGlzYWJsZWRcIl1bYXx8MF0pO0guYXR0cihbQixyLG0sd11bYXx8MF0pLmNzcyhbeCxkLG4sbF1bYXx8MF0pfTtILmF0dHIoQikuY3NzKHQoe2N1cnNvcjpcImRlZmF1bHRcIn0seCkpO3JldHVybiBILm9uKFwiY2xpY2tcIixmdW5jdGlvbihhKXszIT09RSYmYy5jYWxsKEgsYSl9KX0sY3Jpc3BMaW5lOmZ1bmN0aW9uKGEsZyl7YVsxXT09PWFbNF0mJihhWzFdPWFbNF09TWF0aC5yb3VuZChhWzFdKS1nJTIvMik7YVsyXT09PWFbNV0mJihhWzJdPWFbNV09TWF0aC5yb3VuZChhWzJdKStnJTIvMik7cmV0dXJuIGF9LHBhdGg6ZnVuY3Rpb24oYSl7dmFyIGc9e2ZpbGw6XCJub25lXCJ9O3ooYSk/Zy5kPWE6cihhKSYmdChnLGEpO3JldHVybiB0aGlzLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIpLmF0dHIoZyl9LFxuY2lyY2xlOmZ1bmN0aW9uKGEsZyxlKXthPXIoYSk/YTp7eDphLHk6ZyxyOmV9O2c9dGhpcy5jcmVhdGVFbGVtZW50KFwiY2lyY2xlXCIpO2cueFNldHRlcj1nLnlTZXR0ZXI9ZnVuY3Rpb24oYSxnLGUpe2Uuc2V0QXR0cmlidXRlKFwiY1wiK2csYSl9O3JldHVybiBnLmF0dHIoYSl9LGFyYzpmdW5jdGlvbihhLGcsZSxiLGssYyl7cihhKSYmKGc9YS55LGU9YS5yLGI9YS5pbm5lclIsaz1hLnN0YXJ0LGM9YS5lbmQsYT1hLngpO2E9dGhpcy5zeW1ib2woXCJhcmNcIixhfHwwLGd8fDAsZXx8MCxlfHwwLHtpbm5lclI6Ynx8MCxzdGFydDprfHwwLGVuZDpjfHwwfSk7YS5yPWU7cmV0dXJuIGF9LHJlY3Q6ZnVuY3Rpb24oYSxnLGUsYixrLGMpe2s9cihhKT9hLnI6azt2YXIgQj10aGlzLmNyZWF0ZUVsZW1lbnQoXCJyZWN0XCIpO2E9cihhKT9hOnZvaWQgMD09PWE/e306e3g6YSx5Omcsd2lkdGg6TWF0aC5tYXgoZSwwKSxoZWlnaHQ6TWF0aC5tYXgoYiwwKX07dm9pZCAwIT09YyYmKGEuc3Ryb2tlV2lkdGg9XG5jLGE9Qi5jcmlzcChhKSk7YS5maWxsPVwibm9uZVwiO2smJihhLnI9ayk7Qi5yU2V0dGVyPWZ1bmN0aW9uKGEsZyxlKXtoKGUse3J4OmEscnk6YX0pfTtyZXR1cm4gQi5hdHRyKGEpfSxzZXRTaXplOmZ1bmN0aW9uKGEsZyxlKXt2YXIgYj10aGlzLmFsaWduZWRPYmplY3RzLGs9Yi5sZW5ndGg7dGhpcy53aWR0aD1hO3RoaXMuaGVpZ2h0PWc7Zm9yKHRoaXMuYm94V3JhcHBlci5hbmltYXRlKHt3aWR0aDphLGhlaWdodDpnfSx7c3RlcDpmdW5jdGlvbigpe3RoaXMuYXR0cih7dmlld0JveDpcIjAgMCBcIit0aGlzLmF0dHIoXCJ3aWR0aFwiKStcIiBcIit0aGlzLmF0dHIoXCJoZWlnaHRcIil9KX0sZHVyYXRpb246SyhlLCEwKT92b2lkIDA6MH0pO2stLTspYltrXS5hbGlnbigpfSxnOmZ1bmN0aW9uKGEpe3ZhciBnPXRoaXMuY3JlYXRlRWxlbWVudChcImdcIik7cmV0dXJuIGE/Zy5hdHRyKHtcImNsYXNzXCI6XCJoaWdoY2hhcnRzLVwiK2F9KTpnfSxpbWFnZTpmdW5jdGlvbihhLGcsZSxiLGspe3ZhciBjPXtwcmVzZXJ2ZUFzcGVjdFJhdGlvOlwibm9uZVwifTtcbjE8YXJndW1lbnRzLmxlbmd0aCYmdChjLHt4OmcseTplLHdpZHRoOmIsaGVpZ2h0Omt9KTtjPXRoaXMuY3JlYXRlRWxlbWVudChcImltYWdlXCIpLmF0dHIoYyk7Yy5lbGVtZW50LnNldEF0dHJpYnV0ZU5TP2MuZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcImhyZWZcIixhKTpjLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaGMtc3ZnLWhyZWZcIixhKTtyZXR1cm4gY30sc3ltYm9sOmZ1bmN0aW9uKGEsZyxlLGIsayxjKXt2YXIgQj10aGlzLHIsSD10aGlzLnN5bWJvbHNbYV0sbT11KGcpJiZIJiZIKE1hdGgucm91bmQoZyksTWF0aC5yb3VuZChlKSxiLGssYyksdz0vXnVybFxcKCguKj8pXFwpJC8scSx4O0g/KHI9dGhpcy5wYXRoKG0pLHIuYXR0cihcImZpbGxcIixcIm5vbmVcIiksdChyLHtzeW1ib2xOYW1lOmEseDpnLHk6ZSx3aWR0aDpiLGhlaWdodDprfSksYyYmdChyLGMpKTp3LnRlc3QoYSkmJihxPWEubWF0Y2godylbMV0scj10aGlzLmltYWdlKHEpLFxuci5pbWd3aWR0aD1LKE1bcV0mJk1bcV0ud2lkdGgsYyYmYy53aWR0aCksci5pbWdoZWlnaHQ9SyhNW3FdJiZNW3FdLmhlaWdodCxjJiZjLmhlaWdodCkseD1mdW5jdGlvbigpe3IuYXR0cih7d2lkdGg6ci53aWR0aCxoZWlnaHQ6ci5oZWlnaHR9KX0seShbXCJ3aWR0aFwiLFwiaGVpZ2h0XCJdLGZ1bmN0aW9uKGEpe3JbYStcIlNldHRlclwiXT1mdW5jdGlvbihhLGcpe3ZhciBlPXt9LGI9dGhpc1tcImltZ1wiK2ddLGs9XCJ3aWR0aFwiPT09Zz9cInRyYW5zbGF0ZVhcIjpcInRyYW5zbGF0ZVlcIjt0aGlzW2ddPWE7dShiKSYmKHRoaXMuZWxlbWVudCYmdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShnLGIpLHRoaXMuYWxpZ25CeVRyYW5zbGF0ZXx8KGVba109KCh0aGlzW2ddfHwwKS1iKS8yLHRoaXMuYXR0cihlKSkpfX0pLHUoZykmJnIuYXR0cih7eDpnLHk6ZX0pLHIuaXNJbWc9ITAsdShyLmltZ3dpZHRoKSYmdShyLmltZ2hlaWdodCk/eCgpOihyLmF0dHIoe3dpZHRoOjAsaGVpZ2h0OjB9KSxsKFwiaW1nXCIse29ubG9hZDpmdW5jdGlvbigpe3ZhciBhPVxuZltCLmNoYXJ0SW5kZXhdOzA9PT10aGlzLndpZHRoJiYodih0aGlzLHtwb3NpdGlvbjpcImFic29sdXRlXCIsdG9wOlwiLTk5OWVtXCJ9KSxuLmJvZHkuYXBwZW5kQ2hpbGQodGhpcykpO01bcV09e3dpZHRoOnRoaXMud2lkdGgsaGVpZ2h0OnRoaXMuaGVpZ2h0fTtyLmltZ3dpZHRoPXRoaXMud2lkdGg7ci5pbWdoZWlnaHQ9dGhpcy5oZWlnaHQ7ci5lbGVtZW50JiZ4KCk7dGhpcy5wYXJlbnROb2RlJiZ0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcyk7Qi5pbWdDb3VudC0tO2lmKCFCLmltZ0NvdW50JiZhJiZhLm9ubG9hZClhLm9ubG9hZCgpfSxzcmM6cX0pLHRoaXMuaW1nQ291bnQrKykpO3JldHVybiByfSxzeW1ib2xzOntjaXJjbGU6ZnVuY3Rpb24oYSxnLGUsYil7dmFyIGs9LjE2NiplO3JldHVybltcIk1cIixhK2UvMixnLFwiQ1wiLGErZStrLGcsYStlK2ssZytiLGErZS8yLGcrYixcIkNcIixhLWssZytiLGEtayxnLGErZS8yLGcsXCJaXCJdfSxzcXVhcmU6ZnVuY3Rpb24oYSxnLGUsYil7cmV0dXJuW1wiTVwiLFxuYSxnLFwiTFwiLGErZSxnLGErZSxnK2IsYSxnK2IsXCJaXCJdfSx0cmlhbmdsZTpmdW5jdGlvbihhLGcsZSxiKXtyZXR1cm5bXCJNXCIsYStlLzIsZyxcIkxcIixhK2UsZytiLGEsZytiLFwiWlwiXX0sXCJ0cmlhbmdsZS1kb3duXCI6ZnVuY3Rpb24oYSxnLGUsYil7cmV0dXJuW1wiTVwiLGEsZyxcIkxcIixhK2UsZyxhK2UvMixnK2IsXCJaXCJdfSxkaWFtb25kOmZ1bmN0aW9uKGEsZyxlLGIpe3JldHVybltcIk1cIixhK2UvMixnLFwiTFwiLGErZSxnK2IvMixhK2UvMixnK2IsYSxnK2IvMixcIlpcIl19LGFyYzpmdW5jdGlvbihhLGcsZSxiLGspe3ZhciBjPWsuc3RhcnQ7ZT1rLnJ8fGV8fGI7dmFyIEI9ay5lbmQtLjAwMTtiPWsuaW5uZXJSO3ZhciByPWsub3BlbixtPU1hdGguY29zKGMpLEg9TWF0aC5zaW4oYyksdz1NYXRoLmNvcyhCKSxCPU1hdGguc2luKEIpO2s9ay5lbmQtYzxNYXRoLlBJPzA6MTtyZXR1cm5bXCJNXCIsYStlKm0sZytlKkgsXCJBXCIsZSxlLDAsaywxLGErZSp3LGcrZSpCLHI/XCJNXCI6XCJMXCIsYStiKncsZytiKkIsXG5cIkFcIixiLGIsMCxrLDAsYStiKm0sZytiKkgscj9cIlwiOlwiWlwiXX0sY2FsbG91dDpmdW5jdGlvbihhLGcsZSxiLGspe3ZhciBjPU1hdGgubWluKGsmJmsucnx8MCxlLGIpLEI9Yys2LHI9ayYmay5hbmNob3JYO2s9ayYmay5hbmNob3JZO3ZhciBtO209W1wiTVwiLGErYyxnLFwiTFwiLGErZS1jLGcsXCJDXCIsYStlLGcsYStlLGcsYStlLGcrYyxcIkxcIixhK2UsZytiLWMsXCJDXCIsYStlLGcrYixhK2UsZytiLGErZS1jLGcrYixcIkxcIixhK2MsZytiLFwiQ1wiLGEsZytiLGEsZytiLGEsZytiLWMsXCJMXCIsYSxnK2MsXCJDXCIsYSxnLGEsZyxhK2MsZ107ciYmcj5lP2s+ZytCJiZrPGcrYi1CP20uc3BsaWNlKDEzLDMsXCJMXCIsYStlLGstNixhK2UrNixrLGErZSxrKzYsYStlLGcrYi1jKTptLnNwbGljZSgxMywzLFwiTFwiLGErZSxiLzIscixrLGErZSxiLzIsYStlLGcrYi1jKTpyJiYwPnI/az5nK0ImJms8ZytiLUI/bS5zcGxpY2UoMzMsMyxcIkxcIixhLGsrNixhLTYsayxhLGstNixhLGcrYyk6bS5zcGxpY2UoMzMsMyxcIkxcIixcbmEsYi8yLHIsayxhLGIvMixhLGcrYyk6ayYmaz5iJiZyPmErQiYmcjxhK2UtQj9tLnNwbGljZSgyMywzLFwiTFwiLHIrNixnK2IscixnK2IrNixyLTYsZytiLGErYyxnK2IpOmsmJjA+ayYmcj5hK0ImJnI8YStlLUImJm0uc3BsaWNlKDMsMyxcIkxcIixyLTYsZyxyLGctNixyKzYsZyxlLWMsZyk7cmV0dXJuIG19fSxjbGlwUmVjdDpmdW5jdGlvbihnLGUsYixrKXt2YXIgYz1hLnVuaXF1ZUtleSgpLEI9dGhpcy5jcmVhdGVFbGVtZW50KFwiY2xpcFBhdGhcIikuYXR0cih7aWQ6Y30pLmFkZCh0aGlzLmRlZnMpO2c9dGhpcy5yZWN0KGcsZSxiLGssMCkuYWRkKEIpO2cuaWQ9YztnLmNsaXBQYXRoPUI7Zy5jb3VudD0wO3JldHVybiBnfSx0ZXh0OmZ1bmN0aW9uKGEsZyxlLGIpe3ZhciBrPSFCJiZ0aGlzLmZvckV4cG9ydCxjPXt9O2lmKGImJih0aGlzLmFsbG93SFRNTHx8IXRoaXMuZm9yRXhwb3J0KSlyZXR1cm4gdGhpcy5odG1sKGEsZyxlKTtjLng9TWF0aC5yb3VuZChnfHwwKTtlJiYoYy55PU1hdGgucm91bmQoZSkpO1xuaWYoYXx8MD09PWEpYy50ZXh0PWE7YT10aGlzLmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0XCIpLmF0dHIoYyk7ayYmYS5jc3Moe3Bvc2l0aW9uOlwiYWJzb2x1dGVcIn0pO2J8fChhLnhTZXR0ZXI9ZnVuY3Rpb24oYSxnLGUpe3ZhciBiPWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0c3BhblwiKSxrLGM9ZS5nZXRBdHRyaWJ1dGUoZyksQjtmb3IoQj0wO0I8Yi5sZW5ndGg7QisrKWs9YltCXSxrLmdldEF0dHJpYnV0ZShnKT09PWMmJmsuc2V0QXR0cmlidXRlKGcsYSk7ZS5zZXRBdHRyaWJ1dGUoZyxhKX0pO3JldHVybiBhfSxmb250TWV0cmljczpmdW5jdGlvbihhLGcpe2E9YXx8ZyYmZy5zdHlsZSYmZy5zdHlsZS5mb250U2l6ZXx8dGhpcy5zdHlsZSYmdGhpcy5zdHlsZS5mb250U2l6ZTthPS9weC8udGVzdChhKT9KKGEpOi9lbS8udGVzdChhKT9wYXJzZUZsb2F0KGEpKihnP3RoaXMuZm9udE1ldHJpY3MobnVsbCxnLnBhcmVudE5vZGUpLmY6MTYpOjEyO2c9MjQ+YT9hKzM6TWF0aC5yb3VuZCgxLjIqXG5hKTtyZXR1cm57aDpnLGI6TWF0aC5yb3VuZCguOCpnKSxmOmF9fSxyb3RDb3JyOmZ1bmN0aW9uKGEsZyxlKXt2YXIgYj1hO2cmJmUmJihiPU1hdGgubWF4KGIqTWF0aC5jb3MoZypkKSw0KSk7cmV0dXJue3g6LWEvMypNYXRoLnNpbihnKmQpLHk6Yn19LGxhYmVsOmZ1bmN0aW9uKGEsZyxlLGIsYyxCLHIsbSx3KXt2YXIgcT10aGlzLHg9cS5nKFwiYnV0dG9uXCIhPT13JiZcImxhYmVsXCIpLGQ9eC50ZXh0PXEudGV4dChcIlwiLDAsMCxyKS5hdHRyKHt6SW5kZXg6MX0pLEgsbixsPTAsQT0zLHo9MCxGLGYsSyxwLEosaD17fSxNLFMsRT0vXnVybFxcKCguKj8pXFwpJC8udGVzdChiKSx2PUUsUCxSLE8sUTt3JiZ4LmFkZENsYXNzKFwiaGlnaGNoYXJ0cy1cIit3KTt2PUU7UD1mdW5jdGlvbigpe3JldHVybihNfHwwKSUyLzJ9O1I9ZnVuY3Rpb24oKXt2YXIgYT1kLmVsZW1lbnQuc3R5bGUsZz17fTtuPSh2b2lkIDA9PT1GfHx2b2lkIDA9PT1mfHxKKSYmdShkLnRleHRTdHIpJiZkLmdldEJCb3goKTt4LndpZHRoPVxuKEZ8fG4ud2lkdGh8fDApKzIqQSt6O3guaGVpZ2h0PShmfHxuLmhlaWdodHx8MCkrMipBO1M9QStxLmZvbnRNZXRyaWNzKGEmJmEuZm9udFNpemUsZCkuYjt2JiYoSHx8KHguYm94PUg9cS5zeW1ib2xzW2JdfHxFP3Euc3ltYm9sKGIpOnEucmVjdCgpLEguYWRkQ2xhc3MoKFwiYnV0dG9uXCI9PT13P1wiXCI6XCJoaWdoY2hhcnRzLWxhYmVsLWJveFwiKSsodz9cIiBoaWdoY2hhcnRzLVwiK3crXCItYm94XCI6XCJcIikpLEguYWRkKHgpLGE9UCgpLGcueD1hLGcueT0obT8tUzowKSthKSxnLndpZHRoPU1hdGgucm91bmQoeC53aWR0aCksZy5oZWlnaHQ9TWF0aC5yb3VuZCh4LmhlaWdodCksSC5hdHRyKHQoZyxoKSksaD17fSl9O089ZnVuY3Rpb24oKXt2YXIgYT16K0EsZztnPW0/MDpTO3UoRikmJm4mJihcImNlbnRlclwiPT09Snx8XCJyaWdodFwiPT09SikmJihhKz17Y2VudGVyOi41LHJpZ2h0OjF9W0pdKihGLW4ud2lkdGgpKTtpZihhIT09ZC54fHxnIT09ZC55KWQuYXR0cihcInhcIixhKSx2b2lkIDAhPT1nJiZkLmF0dHIoXCJ5XCIsXG5nKTtkLng9YTtkLnk9Z307UT1mdW5jdGlvbihhLGcpe0g/SC5hdHRyKGEsZyk6aFthXT1nfTt4Lm9uQWRkPWZ1bmN0aW9uKCl7ZC5hZGQoeCk7eC5hdHRyKHt0ZXh0OmF8fDA9PT1hP2E6XCJcIix4OmcseTplfSk7SCYmdShjKSYmeC5hdHRyKHthbmNob3JYOmMsYW5jaG9yWTpCfSl9O3gud2lkdGhTZXR0ZXI9ZnVuY3Rpb24oYSl7Rj1hfTt4LmhlaWdodFNldHRlcj1mdW5jdGlvbihhKXtmPWF9O3hbXCJ0ZXh0LWFsaWduU2V0dGVyXCJdPWZ1bmN0aW9uKGEpe0o9YX07eC5wYWRkaW5nU2V0dGVyPWZ1bmN0aW9uKGEpe3UoYSkmJmEhPT1BJiYoQT14LnBhZGRpbmc9YSxPKCkpfTt4LnBhZGRpbmdMZWZ0U2V0dGVyPWZ1bmN0aW9uKGEpe3UoYSkmJmEhPT16JiYoej1hLE8oKSl9O3guYWxpZ25TZXR0ZXI9ZnVuY3Rpb24oYSl7YT17bGVmdDowLGNlbnRlcjouNSxyaWdodDoxfVthXTthIT09bCYmKGw9YSxuJiZ4LmF0dHIoe3g6S30pKX07eC50ZXh0U2V0dGVyPWZ1bmN0aW9uKGEpe3ZvaWQgMCE9PVxuYSYmZC50ZXh0U2V0dGVyKGEpO1IoKTtPKCl9O3hbXCJzdHJva2Utd2lkdGhTZXR0ZXJcIl09ZnVuY3Rpb24oYSxnKXthJiYodj0hMCk7TT10aGlzW1wic3Ryb2tlLXdpZHRoXCJdPWE7UShnLGEpfTt4LnN0cm9rZVNldHRlcj14LmZpbGxTZXR0ZXI9eC5yU2V0dGVyPWZ1bmN0aW9uKGEsZyl7XCJmaWxsXCI9PT1nJiZhJiYodj0hMCk7UShnLGEpfTt4LmFuY2hvclhTZXR0ZXI9ZnVuY3Rpb24oYSxnKXtjPWE7UShnLE1hdGgucm91bmQoYSktUCgpLUspfTt4LmFuY2hvcllTZXR0ZXI9ZnVuY3Rpb24oYSxnKXtCPWE7UShnLGEtcCl9O3gueFNldHRlcj1mdW5jdGlvbihhKXt4Lng9YTtsJiYoYS09bCooKEZ8fG4ud2lkdGgpKzIqQSkpO0s9TWF0aC5yb3VuZChhKTt4LmF0dHIoXCJ0cmFuc2xhdGVYXCIsSyl9O3gueVNldHRlcj1mdW5jdGlvbihhKXtwPXgueT1NYXRoLnJvdW5kKGEpO3guYXR0cihcInRyYW5zbGF0ZVlcIixwKX07dmFyIFY9eC5jc3M7cmV0dXJuIHQoeCx7Y3NzOmZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBnPVxue307YT1rKGEpO3koeC50ZXh0UHJvcHMsZnVuY3Rpb24oZSl7dm9pZCAwIT09YVtlXSYmKGdbZV09YVtlXSxkZWxldGUgYVtlXSl9KTtkLmNzcyhnKX1yZXR1cm4gVi5jYWxsKHgsYSl9LGdldEJCb3g6ZnVuY3Rpb24oKXtyZXR1cm57d2lkdGg6bi53aWR0aCsyKkEsaGVpZ2h0Om4uaGVpZ2h0KzIqQSx4Om4ueC1BLHk6bi55LUF9fSxzaGFkb3c6ZnVuY3Rpb24oYSl7YSYmKFIoKSxIJiZILnNoYWRvdyhhKSk7cmV0dXJuIHh9LGRlc3Ryb3k6ZnVuY3Rpb24oKXtOKHguZWxlbWVudCxcIm1vdXNlZW50ZXJcIik7Tih4LmVsZW1lbnQsXCJtb3VzZWxlYXZlXCIpO2QmJihkPWQuZGVzdHJveSgpKTtIJiYoSD1ILmRlc3Ryb3koKSk7RC5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHgpO3g9cT1SPU89UT1udWxsfX0pfX07YS5SZW5kZXJlcj1DfSkoTCk7KGZ1bmN0aW9uKGEpe3ZhciBEPWEuYXR0cixDPWEuY3JlYXRlRWxlbWVudCxHPWEuY3NzLEk9YS5kZWZpbmVkLGg9YS5lYWNoLGY9YS5leHRlbmQscD1cbmEuaXNGaXJlZm94LHY9YS5pc01TLGw9YS5pc1dlYktpdCx1PWEucEludCxkPWEuU1ZHUmVuZGVyZXIsYz1hLndpbixuPWEud3JhcDtmKGEuU1ZHRWxlbWVudC5wcm90b3R5cGUse2h0bWxDc3M6ZnVuY3Rpb24oYSl7dmFyIGM9dGhpcy5lbGVtZW50O2lmKGM9YSYmXCJTUEFOXCI9PT1jLnRhZ05hbWUmJmEud2lkdGgpZGVsZXRlIGEud2lkdGgsdGhpcy50ZXh0V2lkdGg9Yyx0aGlzLnVwZGF0ZVRyYW5zZm9ybSgpO2EmJlwiZWxsaXBzaXNcIj09PWEudGV4dE92ZXJmbG93JiYoYS53aGl0ZVNwYWNlPVwibm93cmFwXCIsYS5vdmVyZmxvdz1cImhpZGRlblwiKTt0aGlzLnN0eWxlcz1mKHRoaXMuc3R5bGVzLGEpO0codGhpcy5lbGVtZW50LGEpO3JldHVybiB0aGlzfSxodG1sR2V0QkJveDpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZWxlbWVudDtcInRleHRcIj09PWEubm9kZU5hbWUmJihhLnN0eWxlLnBvc2l0aW9uPVwiYWJzb2x1dGVcIik7cmV0dXJue3g6YS5vZmZzZXRMZWZ0LHk6YS5vZmZzZXRUb3Asd2lkdGg6YS5vZmZzZXRXaWR0aCxcbmhlaWdodDphLm9mZnNldEhlaWdodH19LGh0bWxVcGRhdGVUcmFuc2Zvcm06ZnVuY3Rpb24oKXtpZih0aGlzLmFkZGVkKXt2YXIgYT10aGlzLnJlbmRlcmVyLGM9dGhpcy5lbGVtZW50LG09dGhpcy50cmFuc2xhdGVYfHwwLGI9dGhpcy50cmFuc2xhdGVZfHwwLHE9dGhpcy54fHwwLGQ9dGhpcy55fHwwLG49dGhpcy50ZXh0QWxpZ258fFwibGVmdFwiLGU9e2xlZnQ6MCxjZW50ZXI6LjUscmlnaHQ6MX1bbl0scj10aGlzLnN0eWxlcztHKGMse21hcmdpbkxlZnQ6bSxtYXJnaW5Ub3A6Yn0pO3RoaXMuc2hhZG93cyYmaCh0aGlzLnNoYWRvd3MsZnVuY3Rpb24oYSl7RyhhLHttYXJnaW5MZWZ0Om0rMSxtYXJnaW5Ub3A6YisxfSl9KTt0aGlzLmludmVydGVkJiZoKGMuY2hpbGROb2RlcyxmdW5jdGlvbihlKXthLmludmVydENoaWxkKGUsYyl9KTtpZihcIlNQQU5cIj09PWMudGFnTmFtZSl7dmFyIHg9dGhpcy5yb3RhdGlvbixBPXUodGhpcy50ZXh0V2lkdGgpLGs9ciYmci53aGl0ZVNwYWNlLHc9W3gsXG5uLGMuaW5uZXJIVE1MLHRoaXMudGV4dFdpZHRoLHRoaXMudGV4dEFsaWduXS5qb2luKCk7dyE9PXRoaXMuY1RUJiYocj1hLmZvbnRNZXRyaWNzKGMuc3R5bGUuZm9udFNpemUpLmIsSSh4KSYmdGhpcy5zZXRTcGFuUm90YXRpb24oeCxlLHIpLEcoYyx7d2lkdGg6XCJcIix3aGl0ZVNwYWNlOmt8fFwibm93cmFwXCJ9KSxjLm9mZnNldFdpZHRoPkEmJi9bIFxcLV0vLnRlc3QoYy50ZXh0Q29udGVudHx8Yy5pbm5lclRleHQpJiZHKGMse3dpZHRoOkErXCJweFwiLGRpc3BsYXk6XCJibG9ja1wiLHdoaXRlU3BhY2U6a3x8XCJub3JtYWxcIn0pLHRoaXMuZ2V0U3BhbkNvcnJlY3Rpb24oYy5vZmZzZXRXaWR0aCxyLGUseCxuKSk7RyhjLHtsZWZ0OnErKHRoaXMueENvcnJ8fDApK1wicHhcIix0b3A6ZCsodGhpcy55Q29ycnx8MCkrXCJweFwifSk7bCYmKHI9Yy5vZmZzZXRIZWlnaHQpO3RoaXMuY1RUPXd9fWVsc2UgdGhpcy5hbGlnbk9uQWRkPSEwfSxzZXRTcGFuUm90YXRpb246ZnVuY3Rpb24oYSxkLG0pe3ZhciBiPXt9LFxucT12P1wiLW1zLXRyYW5zZm9ybVwiOmw/XCItd2Via2l0LXRyYW5zZm9ybVwiOnA/XCJNb3pUcmFuc2Zvcm1cIjpjLm9wZXJhP1wiLW8tdHJhbnNmb3JtXCI6XCJcIjtiW3FdPWIudHJhbnNmb3JtPVwicm90YXRlKFwiK2ErXCJkZWcpXCI7YltxKyhwP1wiT3JpZ2luXCI6XCItb3JpZ2luXCIpXT1iLnRyYW5zZm9ybU9yaWdpbj0xMDAqZCtcIiUgXCIrbStcInB4XCI7Ryh0aGlzLmVsZW1lbnQsYil9LGdldFNwYW5Db3JyZWN0aW9uOmZ1bmN0aW9uKGEsYyxtKXt0aGlzLnhDb3JyPS1hKm07dGhpcy55Q29ycj0tY319KTtmKGQucHJvdG90eXBlLHtodG1sOmZ1bmN0aW9uKGEsYyxtKXt2YXIgYj10aGlzLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLHE9Yi5lbGVtZW50LGQ9Yi5yZW5kZXJlcixsPWQuaXNTVkcsZT1mdW5jdGlvbihhLGUpe2goW1wib3BhY2l0eVwiLFwidmlzaWJpbGl0eVwiXSxmdW5jdGlvbihiKXtuKGEsYitcIlNldHRlclwiLGZ1bmN0aW9uKGEsYixjLHIpe2EuY2FsbCh0aGlzLGIsYyxyKTtlW2NdPWJ9KX0pfTtiLnRleHRTZXR0ZXI9XG5mdW5jdGlvbihhKXthIT09cS5pbm5lckhUTUwmJmRlbGV0ZSB0aGlzLmJCb3g7cS5pbm5lckhUTUw9dGhpcy50ZXh0U3RyPWE7Yi5odG1sVXBkYXRlVHJhbnNmb3JtKCl9O2wmJmUoYixiLmVsZW1lbnQuc3R5bGUpO2IueFNldHRlcj1iLnlTZXR0ZXI9Yi5hbGlnblNldHRlcj1iLnJvdGF0aW9uU2V0dGVyPWZ1bmN0aW9uKGEsZSl7XCJhbGlnblwiPT09ZSYmKGU9XCJ0ZXh0QWxpZ25cIik7YltlXT1hO2IuaHRtbFVwZGF0ZVRyYW5zZm9ybSgpfTtiLmF0dHIoe3RleHQ6YSx4Ok1hdGgucm91bmQoYykseTpNYXRoLnJvdW5kKG0pfSkuY3NzKHtmb250RmFtaWx5OnRoaXMuc3R5bGUuZm9udEZhbWlseSxmb250U2l6ZTp0aGlzLnN0eWxlLmZvbnRTaXplLHBvc2l0aW9uOlwiYWJzb2x1dGVcIn0pO3Euc3R5bGUud2hpdGVTcGFjZT1cIm5vd3JhcFwiO2IuY3NzPWIuaHRtbENzcztsJiYoYi5hZGQ9ZnVuY3Rpb24oYSl7dmFyIGMscj1kLmJveC5wYXJlbnROb2RlLGs9W107aWYodGhpcy5wYXJlbnRHcm91cD1cbmEpe2lmKGM9YS5kaXYsIWMpe2Zvcig7YTspay5wdXNoKGEpLGE9YS5wYXJlbnRHcm91cDtoKGsucmV2ZXJzZSgpLGZ1bmN0aW9uKGEpe3ZhciBtLHg9RChhLmVsZW1lbnQsXCJjbGFzc1wiKTt4JiYoeD17Y2xhc3NOYW1lOnh9KTtjPWEuZGl2PWEuZGl2fHxDKFwiZGl2XCIseCx7cG9zaXRpb246XCJhYnNvbHV0ZVwiLGxlZnQ6KGEudHJhbnNsYXRlWHx8MCkrXCJweFwiLHRvcDooYS50cmFuc2xhdGVZfHwwKStcInB4XCIsZGlzcGxheTphLmRpc3BsYXksb3BhY2l0eTphLm9wYWNpdHkscG9pbnRlckV2ZW50czphLnN0eWxlcyYmYS5zdHlsZXMucG9pbnRlckV2ZW50c30sY3x8cik7bT1jLnN0eWxlO2YoYSx7b246ZnVuY3Rpb24oKXtiLm9uLmFwcGx5KHtlbGVtZW50OmtbMF0uZGl2fSxhcmd1bWVudHMpO3JldHVybiBhfSx0cmFuc2xhdGVYU2V0dGVyOmZ1bmN0aW9uKGUsZyl7bS5sZWZ0PWUrXCJweFwiO2FbZ109ZTthLmRvVHJhbnNmb3JtPSEwfSx0cmFuc2xhdGVZU2V0dGVyOmZ1bmN0aW9uKGUsZyl7bS50b3A9XG5lK1wicHhcIjthW2ddPWU7YS5kb1RyYW5zZm9ybT0hMH19KTtlKGEsbSl9KX19ZWxzZSBjPXI7Yy5hcHBlbmRDaGlsZChxKTtiLmFkZGVkPSEwO2IuYWxpZ25PbkFkZCYmYi5odG1sVXBkYXRlVHJhbnNmb3JtKCk7cmV0dXJuIGJ9KTtyZXR1cm4gYn19KX0pKEwpOyhmdW5jdGlvbihhKXt2YXIgRCxDLEc9YS5jcmVhdGVFbGVtZW50LEk9YS5jc3MsaD1hLmRlZmluZWQsZj1hLmRlZzJyYWQscD1hLmRpc2NhcmRFbGVtZW50LHY9YS5kb2MsbD1hLmVhY2gsdT1hLmVyYXNlLGQ9YS5leHRlbmQ7RD1hLmV4dGVuZENsYXNzO3ZhciBjPWEuaXNBcnJheSxuPWEuaXNOdW1iZXIseT1hLmlzT2JqZWN0LHQ9YS5tZXJnZTtDPWEubm9vcDt2YXIgbT1hLnBpY2ssYj1hLnBJbnQscT1hLlNWR0VsZW1lbnQsej1hLlNWR1JlbmRlcmVyLEY9YS53aW47YS5zdmd8fChDPXtkb2NNb2RlODp2JiY4PT09di5kb2N1bWVudE1vZGUsaW5pdDpmdW5jdGlvbihhLGIpe3ZhciBlPVtcIlxceDNjXCIsYiwnIGZpbGxlZFxceDNkXCJmXCIgc3Ryb2tlZFxceDNkXCJmXCInXSxcbmM9W1wicG9zaXRpb246IFwiLFwiYWJzb2x1dGVcIixcIjtcIl0saz1cImRpdlwiPT09YjsoXCJzaGFwZVwiPT09Ynx8aykmJmMucHVzaChcImxlZnQ6MDt0b3A6MDt3aWR0aDoxcHg7aGVpZ2h0OjFweDtcIik7Yy5wdXNoKFwidmlzaWJpbGl0eTogXCIsaz9cImhpZGRlblwiOlwidmlzaWJsZVwiKTtlLnB1c2goJyBzdHlsZVxceDNkXCInLGMuam9pbihcIlwiKSwnXCIvXFx4M2UnKTtiJiYoZT1rfHxcInNwYW5cIj09PWJ8fFwiaW1nXCI9PT1iP2Uuam9pbihcIlwiKTphLnByZXBWTUwoZSksdGhpcy5lbGVtZW50PUcoZSkpO3RoaXMucmVuZGVyZXI9YX0sYWRkOmZ1bmN0aW9uKGEpe3ZhciBlPXRoaXMucmVuZGVyZXIsYj10aGlzLmVsZW1lbnQsYz1lLmJveCxrPWEmJmEuaW52ZXJ0ZWQsYz1hP2EuZWxlbWVudHx8YTpjO2EmJih0aGlzLnBhcmVudEdyb3VwPWEpO2smJmUuaW52ZXJ0Q2hpbGQoYixjKTtjLmFwcGVuZENoaWxkKGIpO3RoaXMuYWRkZWQ9ITA7dGhpcy5hbGlnbk9uQWRkJiYhdGhpcy5kZWZlclVwZGF0ZVRyYW5zZm9ybSYmdGhpcy51cGRhdGVUcmFuc2Zvcm0oKTtcbmlmKHRoaXMub25BZGQpdGhpcy5vbkFkZCgpO3RoaXMuY2xhc3NOYW1lJiZ0aGlzLmF0dHIoXCJjbGFzc1wiLHRoaXMuY2xhc3NOYW1lKTtyZXR1cm4gdGhpc30sdXBkYXRlVHJhbnNmb3JtOnEucHJvdG90eXBlLmh0bWxVcGRhdGVUcmFuc2Zvcm0sc2V0U3BhblJvdGF0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5yb3RhdGlvbixiPU1hdGguY29zKGEqZiksYz1NYXRoLnNpbihhKmYpO0kodGhpcy5lbGVtZW50LHtmaWx0ZXI6YT9bXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuTWF0cml4KE0xMVxceDNkXCIsYixcIiwgTTEyXFx4M2RcIiwtYyxcIiwgTTIxXFx4M2RcIixjLFwiLCBNMjJcXHgzZFwiLGIsXCIsIHNpemluZ01ldGhvZFxceDNkJ2F1dG8gZXhwYW5kJylcIl0uam9pbihcIlwiKTpcIm5vbmVcIn0pfSxnZXRTcGFuQ29ycmVjdGlvbjpmdW5jdGlvbihhLGIsYyxxLGspe3ZhciBlPXE/TWF0aC5jb3MocSpmKToxLHI9cT9NYXRoLnNpbihxKmYpOjAseD1tKHRoaXMuZWxlbUhlaWdodCx0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0KSxcbmQ7dGhpcy54Q29ycj0wPmUmJi1hO3RoaXMueUNvcnI9MD5yJiYteDtkPTA+ZSpyO3RoaXMueENvcnIrPXIqYiooZD8xLWM6Yyk7dGhpcy55Q29yci09ZSpiKihxP2Q/YzoxLWM6MSk7ayYmXCJsZWZ0XCIhPT1rJiYodGhpcy54Q29yci09YSpjKigwPmU/LTE6MSkscSYmKHRoaXMueUNvcnItPXgqYyooMD5yPy0xOjEpKSxJKHRoaXMuZWxlbWVudCx7dGV4dEFsaWduOmt9KSl9LHBhdGhUb1ZNTDpmdW5jdGlvbihhKXtmb3IodmFyIGU9YS5sZW5ndGgsYj1bXTtlLS07KW4oYVtlXSk/YltlXT1NYXRoLnJvdW5kKDEwKmFbZV0pLTU6XCJaXCI9PT1hW2VdP2JbZV09XCJ4XCI6KGJbZV09YVtlXSwhYS5pc0FyY3x8XCJ3YVwiIT09YVtlXSYmXCJhdFwiIT09YVtlXXx8KGJbZSs1XT09PWJbZSs3XSYmKGJbZSs3XSs9YVtlKzddPmFbZSs1XT8xOi0xKSxiW2UrNl09PT1iW2UrOF0mJihiW2UrOF0rPWFbZSs4XT5hW2UrNl0/MTotMSkpKTtyZXR1cm4gYi5qb2luKFwiIFwiKXx8XCJ4XCJ9LGNsaXA6ZnVuY3Rpb24oYSl7dmFyIGU9XG50aGlzLGI7YT8oYj1hLm1lbWJlcnMsdShiLGUpLGIucHVzaChlKSxlLmRlc3Ryb3lDbGlwPWZ1bmN0aW9uKCl7dShiLGUpfSxhPWEuZ2V0Q1NTKGUpKTooZS5kZXN0cm95Q2xpcCYmZS5kZXN0cm95Q2xpcCgpLGE9e2NsaXA6ZS5kb2NNb2RlOD9cImluaGVyaXRcIjpcInJlY3QoYXV0bylcIn0pO3JldHVybiBlLmNzcyhhKX0sY3NzOnEucHJvdG90eXBlLmh0bWxDc3Msc2FmZVJlbW92ZUNoaWxkOmZ1bmN0aW9uKGEpe2EucGFyZW50Tm9kZSYmcChhKX0sZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuZGVzdHJveUNsaXAmJnRoaXMuZGVzdHJveUNsaXAoKTtyZXR1cm4gcS5wcm90b3R5cGUuZGVzdHJveS5hcHBseSh0aGlzKX0sb246ZnVuY3Rpb24oYSxiKXt0aGlzLmVsZW1lbnRbXCJvblwiK2FdPWZ1bmN0aW9uKCl7dmFyIGE9Ri5ldmVudDthLnRhcmdldD1hLnNyY0VsZW1lbnQ7YihhKX07cmV0dXJuIHRoaXN9LGN1dE9mZlBhdGg6ZnVuY3Rpb24oYSxjKXt2YXIgZTthPWEuc3BsaXQoL1sgLF0vKTtcbmU9YS5sZW5ndGg7aWYoOT09PWV8fDExPT09ZSlhW2UtNF09YVtlLTJdPWIoYVtlLTJdKS0xMCpjO3JldHVybiBhLmpvaW4oXCIgXCIpfSxzaGFkb3c6ZnVuY3Rpb24oYSxjLHEpe3ZhciBlPVtdLGsscj10aGlzLmVsZW1lbnQsZD10aGlzLnJlbmRlcmVyLHgsbj1yLnN0eWxlLGcsQj1yLnBhdGgsbCx0LHosZjtCJiZcInN0cmluZ1wiIT09dHlwZW9mIEIudmFsdWUmJihCPVwieFwiKTt0PUI7aWYoYSl7ej1tKGEud2lkdGgsMyk7Zj0oYS5vcGFjaXR5fHwuMTUpL3o7Zm9yKGs9MTszPj1rO2srKylsPTIqeisxLTIqayxxJiYodD10aGlzLmN1dE9mZlBhdGgoQi52YWx1ZSxsKy41KSksZz1bJ1xceDNjc2hhcGUgaXNTaGFkb3dcXHgzZFwidHJ1ZVwiIHN0cm9rZXdlaWdodFxceDNkXCInLGwsJ1wiIGZpbGxlZFxceDNkXCJmYWxzZVwiIHBhdGhcXHgzZFwiJyx0LCdcIiBjb29yZHNpemVcXHgzZFwiMTAgMTBcIiBzdHlsZVxceDNkXCInLHIuc3R5bGUuY3NzVGV4dCwnXCIgL1xceDNlJ10seD1HKGQucHJlcFZNTChnKSxudWxsLHtsZWZ0OmIobi5sZWZ0KStcbm0oYS5vZmZzZXRYLDEpLHRvcDpiKG4udG9wKSttKGEub2Zmc2V0WSwxKX0pLHEmJih4LmN1dE9mZj1sKzEpLGc9WydcXHgzY3N0cm9rZSBjb2xvclxceDNkXCInLGEuY29sb3J8fFwiIzAwMDAwMFwiLCdcIiBvcGFjaXR5XFx4M2RcIicsZiprLCdcIi9cXHgzZSddLEcoZC5wcmVwVk1MKGcpLG51bGwsbnVsbCx4KSxjP2MuZWxlbWVudC5hcHBlbmRDaGlsZCh4KTpyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHgsciksZS5wdXNoKHgpO3RoaXMuc2hhZG93cz1lfXJldHVybiB0aGlzfSx1cGRhdGVTaGFkb3dzOkMsc2V0QXR0cjpmdW5jdGlvbihhLGIpe3RoaXMuZG9jTW9kZTg/dGhpcy5lbGVtZW50W2FdPWI6dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShhLGIpfSxjbGFzc1NldHRlcjpmdW5jdGlvbihhKXsodGhpcy5hZGRlZD90aGlzLmVsZW1lbnQ6dGhpcykuY2xhc3NOYW1lPWF9LGRhc2hzdHlsZVNldHRlcjpmdW5jdGlvbihhLGIsYyl7KGMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzdHJva2VcIilbMF18fFxuRyh0aGlzLnJlbmRlcmVyLnByZXBWTUwoW1wiXFx4M2NzdHJva2UvXFx4M2VcIl0pLG51bGwsbnVsbCxjKSlbYl09YXx8XCJzb2xpZFwiO3RoaXNbYl09YX0sZFNldHRlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGU9dGhpcy5zaGFkb3dzO2E9YXx8W107dGhpcy5kPWEuam9pbiYmYS5qb2luKFwiIFwiKTtjLnBhdGg9YT10aGlzLnBhdGhUb1ZNTChhKTtpZihlKWZvcihjPWUubGVuZ3RoO2MtLTspZVtjXS5wYXRoPWVbY10uY3V0T2ZmP3RoaXMuY3V0T2ZmUGF0aChhLGVbY10uY3V0T2ZmKTphO3RoaXMuc2V0QXR0cihiLGEpfSxmaWxsU2V0dGVyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZT1jLm5vZGVOYW1lO1wiU1BBTlwiPT09ZT9jLnN0eWxlLmNvbG9yPWE6XCJJTUdcIiE9PWUmJihjLmZpbGxlZD1cIm5vbmVcIiE9PWEsdGhpcy5zZXRBdHRyKFwiZmlsbGNvbG9yXCIsdGhpcy5yZW5kZXJlci5jb2xvcihhLGMsYix0aGlzKSkpfSxcImZpbGwtb3BhY2l0eVNldHRlclwiOmZ1bmN0aW9uKGEsYixjKXtHKHRoaXMucmVuZGVyZXIucHJlcFZNTChbXCJcXHgzY1wiLFxuYi5zcGxpdChcIi1cIilbMF0sJyBvcGFjaXR5XFx4M2RcIicsYSwnXCIvXFx4M2UnXSksbnVsbCxudWxsLGMpfSxvcGFjaXR5U2V0dGVyOkMscm90YXRpb25TZXR0ZXI6ZnVuY3Rpb24oYSxiLGMpe2M9Yy5zdHlsZTt0aGlzW2JdPWNbYl09YTtjLmxlZnQ9LU1hdGgucm91bmQoTWF0aC5zaW4oYSpmKSsxKStcInB4XCI7Yy50b3A9TWF0aC5yb3VuZChNYXRoLmNvcyhhKmYpKStcInB4XCJ9LHN0cm9rZVNldHRlcjpmdW5jdGlvbihhLGIsYyl7dGhpcy5zZXRBdHRyKFwic3Ryb2tlY29sb3JcIix0aGlzLnJlbmRlcmVyLmNvbG9yKGEsYyxiLHRoaXMpKX0sXCJzdHJva2Utd2lkdGhTZXR0ZXJcIjpmdW5jdGlvbihhLGIsYyl7Yy5zdHJva2VkPSEhYTt0aGlzW2JdPWE7bihhKSYmKGErPVwicHhcIik7dGhpcy5zZXRBdHRyKFwic3Ryb2tld2VpZ2h0XCIsYSl9LHRpdGxlU2V0dGVyOmZ1bmN0aW9uKGEsYil7dGhpcy5zZXRBdHRyKGIsYSl9LHZpc2liaWxpdHlTZXR0ZXI6ZnVuY3Rpb24oYSxiLGMpe1wiaW5oZXJpdFwiPT09YSYmXG4oYT1cInZpc2libGVcIik7dGhpcy5zaGFkb3dzJiZsKHRoaXMuc2hhZG93cyxmdW5jdGlvbihjKXtjLnN0eWxlW2JdPWF9KTtcIkRJVlwiPT09Yy5ub2RlTmFtZSYmKGE9XCJoaWRkZW5cIj09PWE/XCItOTk5ZW1cIjowLHRoaXMuZG9jTW9kZTh8fChjLnN0eWxlW2JdPWE/XCJ2aXNpYmxlXCI6XCJoaWRkZW5cIiksYj1cInRvcFwiKTtjLnN0eWxlW2JdPWF9LHhTZXR0ZXI6ZnVuY3Rpb24oYSxiLGMpe3RoaXNbYl09YTtcInhcIj09PWI/Yj1cImxlZnRcIjpcInlcIj09PWImJihiPVwidG9wXCIpO3RoaXMudXBkYXRlQ2xpcHBpbmc/KHRoaXNbYl09YSx0aGlzLnVwZGF0ZUNsaXBwaW5nKCkpOmMuc3R5bGVbYl09YX0sekluZGV4U2V0dGVyOmZ1bmN0aW9uKGEsYixjKXtjLnN0eWxlW2JdPWF9fSxDW1wic3Ryb2tlLW9wYWNpdHlTZXR0ZXJcIl09Q1tcImZpbGwtb3BhY2l0eVNldHRlclwiXSxhLlZNTEVsZW1lbnQ9Qz1EKHEsQyksQy5wcm90b3R5cGUueVNldHRlcj1DLnByb3RvdHlwZS53aWR0aFNldHRlcj1DLnByb3RvdHlwZS5oZWlnaHRTZXR0ZXI9XG5DLnByb3RvdHlwZS54U2V0dGVyLEM9e0VsZW1lbnQ6Qyxpc0lFODotMTxGLm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIk1TSUUgOC4wXCIpLGluaXQ6ZnVuY3Rpb24oYSxiLGMpe3ZhciBlLGs7dGhpcy5hbGlnbmVkT2JqZWN0cz1bXTtlPXRoaXMuY3JlYXRlRWxlbWVudChcImRpdlwiKS5jc3Moe3Bvc2l0aW9uOlwicmVsYXRpdmVcIn0pO2s9ZS5lbGVtZW50O2EuYXBwZW5kQ2hpbGQoZS5lbGVtZW50KTt0aGlzLmlzVk1MPSEwO3RoaXMuYm94PWs7dGhpcy5ib3hXcmFwcGVyPWU7dGhpcy5ncmFkaWVudHM9e307dGhpcy5jYWNoZT17fTt0aGlzLmNhY2hlS2V5cz1bXTt0aGlzLmltZ0NvdW50PTA7dGhpcy5zZXRTaXplKGIsYywhMSk7aWYoIXYubmFtZXNwYWNlcy5oY3Ype3YubmFtZXNwYWNlcy5hZGQoXCJoY3ZcIixcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206dm1sXCIpO3RyeXt2LmNyZWF0ZVN0eWxlU2hlZXQoKS5jc3NUZXh0PVwiaGN2XFxcXDpmaWxsLCBoY3ZcXFxcOnBhdGgsIGhjdlxcXFw6c2hhcGUsIGhjdlxcXFw6c3Ryb2tleyBiZWhhdmlvcjp1cmwoI2RlZmF1bHQjVk1MKTsgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9IFwifWNhdGNoKHcpe3Yuc3R5bGVTaGVldHNbMF0uY3NzVGV4dCs9XG5cImhjdlxcXFw6ZmlsbCwgaGN2XFxcXDpwYXRoLCBoY3ZcXFxcOnNoYXBlLCBoY3ZcXFxcOnN0cm9rZXsgYmVoYXZpb3I6dXJsKCNkZWZhdWx0I1ZNTCk7IGRpc3BsYXk6IGlubGluZS1ibG9jazsgfSBcIn19fSxpc0hpZGRlbjpmdW5jdGlvbigpe3JldHVybiF0aGlzLmJveC5vZmZzZXRXaWR0aH0sY2xpcFJlY3Q6ZnVuY3Rpb24oYSxiLGMsbSl7dmFyIGU9dGhpcy5jcmVhdGVFbGVtZW50KCkscj15KGEpO3JldHVybiBkKGUse21lbWJlcnM6W10sY291bnQ6MCxsZWZ0OihyP2EueDphKSsxLHRvcDoocj9hLnk6YikrMSx3aWR0aDoocj9hLndpZHRoOmMpLTEsaGVpZ2h0OihyP2EuaGVpZ2h0Om0pLTEsZ2V0Q1NTOmZ1bmN0aW9uKGEpe3ZhciBiPWEuZWxlbWVudCxjPWIubm9kZU5hbWUsZz1hLmludmVydGVkLGU9dGhpcy50b3AtKFwic2hhcGVcIj09PWM/Yi5vZmZzZXRUb3A6MCksaz10aGlzLmxlZnQsYj1rK3RoaXMud2lkdGgsbT1lK3RoaXMuaGVpZ2h0LGU9e2NsaXA6XCJyZWN0KFwiK01hdGgucm91bmQoZz9cbms6ZSkrXCJweCxcIitNYXRoLnJvdW5kKGc/bTpiKStcInB4LFwiK01hdGgucm91bmQoZz9iOm0pK1wicHgsXCIrTWF0aC5yb3VuZChnP2U6aykrXCJweClcIn07IWcmJmEuZG9jTW9kZTgmJlwiRElWXCI9PT1jJiZkKGUse3dpZHRoOmIrXCJweFwiLGhlaWdodDptK1wicHhcIn0pO3JldHVybiBlfSx1cGRhdGVDbGlwcGluZzpmdW5jdGlvbigpe2woZS5tZW1iZXJzLGZ1bmN0aW9uKGEpe2EuZWxlbWVudCYmYS5jc3MoZS5nZXRDU1MoYSkpfSl9fSl9LGNvbG9yOmZ1bmN0aW9uKGIsYyxtLHEpe3ZhciBlPXRoaXMscixkPS9ecmdiYS8sbix4LGc9XCJub25lXCI7YiYmYi5saW5lYXJHcmFkaWVudD94PVwiZ3JhZGllbnRcIjpiJiZiLnJhZGlhbEdyYWRpZW50JiYoeD1cInBhdHRlcm5cIik7aWYoeCl7dmFyIEIsdCx6PWIubGluZWFyR3JhZGllbnR8fGIucmFkaWFsR3JhZGllbnQsZixGLEgsQSx1LHA9XCJcIjtiPWIuc3RvcHM7dmFyIGgseT1bXSx2PWZ1bmN0aW9uKCl7bj1bJ1xceDNjZmlsbCBjb2xvcnNcXHgzZFwiJyt5LmpvaW4oXCIsXCIpK1xuJ1wiIG9wYWNpdHlcXHgzZFwiJyxILCdcIiBvOm9wYWNpdHkyXFx4M2RcIicsRiwnXCIgdHlwZVxceDNkXCInLHgsJ1wiICcscCwnZm9jdXNcXHgzZFwiMTAwJVwiIG1ldGhvZFxceDNkXCJhbnlcIiAvXFx4M2UnXTtHKGUucHJlcFZNTChuKSxudWxsLG51bGwsYyl9O2Y9YlswXTtoPWJbYi5sZW5ndGgtMV07MDxmWzBdJiZiLnVuc2hpZnQoWzAsZlsxXV0pOzE+aFswXSYmYi5wdXNoKFsxLGhbMV1dKTtsKGIsZnVuY3Rpb24oZyxiKXtkLnRlc3QoZ1sxXSk/KHI9YS5jb2xvcihnWzFdKSxCPXIuZ2V0KFwicmdiXCIpLHQ9ci5nZXQoXCJhXCIpKTooQj1nWzFdLHQ9MSk7eS5wdXNoKDEwMCpnWzBdK1wiJSBcIitCKTtiPyhIPXQsQT1CKTooRj10LHU9Qil9KTtpZihcImZpbGxcIj09PW0paWYoXCJncmFkaWVudFwiPT09eCltPXoueDF8fHpbMF18fDAsYj16LnkxfHx6WzFdfHwwLGY9ei54Mnx8elsyXXx8MCx6PXoueTJ8fHpbM118fDAscD0nYW5nbGVcXHgzZFwiJysoOTAtMTgwKk1hdGguYXRhbigoei1iKS8oZi1tKSkvTWF0aC5QSSkrJ1wiJyxcbnYoKTtlbHNle3ZhciBnPXoucixDPTIqZyxEPTIqZyxJPXouY3gsVT16LmN5LEw9Yy5yYWRpYWxSZWZlcmVuY2UsVCxnPWZ1bmN0aW9uKCl7TCYmKFQ9cS5nZXRCQm94KCksSSs9KExbMF0tVC54KS9ULndpZHRoLS41LFUrPShMWzFdLVQueSkvVC5oZWlnaHQtLjUsQyo9TFsyXS9ULndpZHRoLEQqPUxbMl0vVC5oZWlnaHQpO3A9J3NyY1xceDNkXCInK2EuZ2V0T3B0aW9ucygpLmdsb2JhbC5WTUxSYWRpYWxHcmFkaWVudFVSTCsnXCIgc2l6ZVxceDNkXCInK0MrXCIsXCIrRCsnXCIgb3JpZ2luXFx4M2RcIjAuNSwwLjVcIiBwb3NpdGlvblxceDNkXCInK0krXCIsXCIrVSsnXCIgY29sb3IyXFx4M2RcIicrdSsnXCIgJzt2KCl9O3EuYWRkZWQ/ZygpOnEub25BZGQ9ZztnPUF9ZWxzZSBnPUJ9ZWxzZSBkLnRlc3QoYikmJlwiSU1HXCIhPT1jLnRhZ05hbWU/KHI9YS5jb2xvcihiKSxxW20rXCItb3BhY2l0eVNldHRlclwiXShyLmdldChcImFcIiksbSxjKSxnPXIuZ2V0KFwicmdiXCIpKTooZz1jLmdldEVsZW1lbnRzQnlUYWdOYW1lKG0pLFxuZy5sZW5ndGgmJihnWzBdLm9wYWNpdHk9MSxnWzBdLnR5cGU9XCJzb2xpZFwiKSxnPWIpO3JldHVybiBnfSxwcmVwVk1MOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuaXNJRTg7YT1hLmpvaW4oXCJcIik7Yj8oYT1hLnJlcGxhY2UoXCIvXFx4M2VcIiwnIHhtbG5zXFx4M2RcInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206dm1sXCIgL1xceDNlJyksYT0tMT09PWEuaW5kZXhPZignc3R5bGVcXHgzZFwiJyk/YS5yZXBsYWNlKFwiL1xceDNlXCIsJyBzdHlsZVxceDNkXCJkaXNwbGF5OmlubGluZS1ibG9jaztiZWhhdmlvcjp1cmwoI2RlZmF1bHQjVk1MKTtcIiAvXFx4M2UnKTphLnJlcGxhY2UoJ3N0eWxlXFx4M2RcIicsJ3N0eWxlXFx4M2RcImRpc3BsYXk6aW5saW5lLWJsb2NrO2JlaGF2aW9yOnVybCgjZGVmYXVsdCNWTUwpOycpKTphPWEucmVwbGFjZShcIlxceDNjXCIsXCJcXHgzY2hjdjpcIik7cmV0dXJuIGF9LHRleHQ6ei5wcm90b3R5cGUuaHRtbCxwYXRoOmZ1bmN0aW9uKGEpe3ZhciBiPXtjb29yZHNpemU6XCIxMCAxMFwifTtjKGEpP2IuZD1cbmE6eShhKSYmZChiLGEpO3JldHVybiB0aGlzLmNyZWF0ZUVsZW1lbnQoXCJzaGFwZVwiKS5hdHRyKGIpfSxjaXJjbGU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBlPXRoaXMuc3ltYm9sKFwiY2lyY2xlXCIpO3koYSkmJihjPWEucixiPWEueSxhPWEueCk7ZS5pc0NpcmNsZT0hMDtlLnI9YztyZXR1cm4gZS5hdHRyKHt4OmEseTpifSl9LGc6ZnVuY3Rpb24oYSl7dmFyIGI7YSYmKGI9e2NsYXNzTmFtZTpcImhpZ2hjaGFydHMtXCIrYSxcImNsYXNzXCI6XCJoaWdoY2hhcnRzLVwiK2F9KTtyZXR1cm4gdGhpcy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLmF0dHIoYil9LGltYWdlOmZ1bmN0aW9uKGEsYixjLG0sayl7dmFyIGU9dGhpcy5jcmVhdGVFbGVtZW50KFwiaW1nXCIpLmF0dHIoe3NyYzphfSk7MTxhcmd1bWVudHMubGVuZ3RoJiZlLmF0dHIoe3g6Yix5OmMsd2lkdGg6bSxoZWlnaHQ6a30pO3JldHVybiBlfSxjcmVhdGVFbGVtZW50OmZ1bmN0aW9uKGEpe3JldHVyblwicmVjdFwiPT09YT90aGlzLnN5bWJvbChhKTp6LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50LmNhbGwodGhpcyxcbmEpfSxpbnZlcnRDaGlsZDpmdW5jdGlvbihhLGMpe3ZhciBlPXRoaXM7Yz1jLnN0eWxlO3ZhciBtPVwiSU1HXCI9PT1hLnRhZ05hbWUmJmEuc3R5bGU7SShhLHtmbGlwOlwieFwiLGxlZnQ6YihjLndpZHRoKS0obT9iKG0udG9wKToxKSx0b3A6YihjLmhlaWdodCktKG0/YihtLmxlZnQpOjEpLHJvdGF0aW9uOi05MH0pO2woYS5jaGlsZE5vZGVzLGZ1bmN0aW9uKGIpe2UuaW52ZXJ0Q2hpbGQoYixhKX0pfSxzeW1ib2xzOnthcmM6ZnVuY3Rpb24oYSxiLGMsbSxrKXt2YXIgZT1rLnN0YXJ0LHE9ay5lbmQsZD1rLnJ8fGN8fG07Yz1rLmlubmVyUjttPU1hdGguY29zKGUpO3ZhciByPU1hdGguc2luKGUpLGc9TWF0aC5jb3MocSksQj1NYXRoLnNpbihxKTtpZigwPT09cS1lKXJldHVybltcInhcIl07ZT1bXCJ3YVwiLGEtZCxiLWQsYStkLGIrZCxhK2QqbSxiK2QqcixhK2QqZyxiK2QqQl07ay5vcGVuJiYhYyYmZS5wdXNoKFwiZVwiLFwiTVwiLGEsYik7ZS5wdXNoKFwiYXRcIixhLWMsYi1jLGErYyxiK2MsYStjKmcsXG5iK2MqQixhK2MqbSxiK2MqcixcInhcIixcImVcIik7ZS5pc0FyYz0hMDtyZXR1cm4gZX0sY2lyY2xlOmZ1bmN0aW9uKGEsYixjLG0sayl7ayYmaChrLnIpJiYoYz1tPTIqay5yKTtrJiZrLmlzQ2lyY2xlJiYoYS09Yy8yLGItPW0vMik7cmV0dXJuW1wid2FcIixhLGIsYStjLGIrbSxhK2MsYittLzIsYStjLGIrbS8yLFwiZVwiXX0scmVjdDpmdW5jdGlvbihhLGIsYyxtLGspe3JldHVybiB6LnByb3RvdHlwZS5zeW1ib2xzW2goaykmJmsucj9cImNhbGxvdXRcIjpcInNxdWFyZVwiXS5jYWxsKDAsYSxiLGMsbSxrKX19fSxhLlZNTFJlbmRlcmVyPUQ9ZnVuY3Rpb24oKXt0aGlzLmluaXQuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxELnByb3RvdHlwZT10KHoucHJvdG90eXBlLEMpLGEuUmVuZGVyZXI9RCk7ei5wcm90b3R5cGUubWVhc3VyZVNwYW5XaWR0aD1mdW5jdGlvbihhLGIpe3ZhciBjPXYuY3JlYXRlRWxlbWVudChcInNwYW5cIik7YT12LmNyZWF0ZVRleHROb2RlKGEpO2MuYXBwZW5kQ2hpbGQoYSk7SShjLFxuYik7dGhpcy5ib3guYXBwZW5kQ2hpbGQoYyk7Yj1jLm9mZnNldFdpZHRoO3AoYyk7cmV0dXJuIGJ9fSkoTCk7KGZ1bmN0aW9uKGEpe2Z1bmN0aW9uIEQoKXt2YXIgaD1hLmRlZmF1bHRPcHRpb25zLmdsb2JhbCxsLHU9aC51c2VVVEMsZD11P1wiZ2V0VVRDXCI6XCJnZXRcIixjPXU/XCJzZXRVVENcIjpcInNldFwiO2EuRGF0ZT1sPWguRGF0ZXx8cC5EYXRlO2wuaGNUaW1lem9uZU9mZnNldD11JiZoLnRpbWV6b25lT2Zmc2V0O2wuaGNHZXRUaW1lem9uZU9mZnNldD11JiZoLmdldFRpbWV6b25lT2Zmc2V0O2wuaGNNYWtlVGltZT1mdW5jdGlvbihhLGMsZCxtLGIscSl7dmFyIG47dT8obj1sLlVUQy5hcHBseSgwLGFyZ3VtZW50cyksbis9SShuKSk6bj0obmV3IGwoYSxjLGYoZCwxKSxmKG0sMCksZihiLDApLGYocSwwKSkpLmdldFRpbWUoKTtyZXR1cm4gbn07RyhcIk1pbnV0ZXMgSG91cnMgRGF5IERhdGUgTW9udGggRnVsbFllYXJcIi5zcGxpdChcIiBcIiksZnVuY3Rpb24oYSl7bFtcImhjR2V0XCIrYV09ZCtcbmF9KTtHKFwiTWlsbGlzZWNvbmRzIFNlY29uZHMgTWludXRlcyBIb3VycyBEYXRlIE1vbnRoIEZ1bGxZZWFyXCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEpe2xbXCJoY1NldFwiK2FdPWMrYX0pfXZhciBDPWEuY29sb3IsRz1hLmVhY2gsST1hLmdldFRaT2Zmc2V0LGg9YS5tZXJnZSxmPWEucGljayxwPWEud2luO2EuZGVmYXVsdE9wdGlvbnM9e2NvbG9yczpcIiM3Y2I1ZWMgIzQzNDM0OCAjOTBlZDdkICNmN2EzNWMgIzgwODVlOSAjZjE1YzgwICNlNGQzNTQgIzJiOTA4ZiAjZjQ1YjViICM5MWU4ZTFcIi5zcGxpdChcIiBcIiksc3ltYm9sczpbXCJjaXJjbGVcIixcImRpYW1vbmRcIixcInNxdWFyZVwiLFwidHJpYW5nbGVcIixcInRyaWFuZ2xlLWRvd25cIl0sbGFuZzp7bG9hZGluZzpcIkxvYWRpbmcuLi5cIixtb250aHM6XCJKYW51YXJ5IEZlYnJ1YXJ5IE1hcmNoIEFwcmlsIE1heSBKdW5lIEp1bHkgQXVndXN0IFNlcHRlbWJlciBPY3RvYmVyIE5vdmVtYmVyIERlY2VtYmVyXCIuc3BsaXQoXCIgXCIpLHNob3J0TW9udGhzOlwiSmFuIEZlYiBNYXIgQXByIE1heSBKdW4gSnVsIEF1ZyBTZXAgT2N0IE5vdiBEZWNcIi5zcGxpdChcIiBcIiksXG53ZWVrZGF5czpcIlN1bmRheSBNb25kYXkgVHVlc2RheSBXZWRuZXNkYXkgVGh1cnNkYXkgRnJpZGF5IFNhdHVyZGF5XCIuc3BsaXQoXCIgXCIpLGRlY2ltYWxQb2ludDpcIi5cIixudW1lcmljU3ltYm9sczpcImtNR1RQRVwiLnNwbGl0KFwiXCIpLHJlc2V0Wm9vbTpcIlJlc2V0IHpvb21cIixyZXNldFpvb21UaXRsZTpcIlJlc2V0IHpvb20gbGV2ZWwgMToxXCIsdGhvdXNhbmRzU2VwOlwiIFwifSxnbG9iYWw6e3VzZVVUQzohMCxWTUxSYWRpYWxHcmFkaWVudFVSTDpcImh0dHA6Ly9jb2RlLmhpZ2hjaGFydHMuY29tLzUuMC42L2dmeC92bWwtcmFkaWFsLWdyYWRpZW50LnBuZ1wifSxjaGFydDp7Ym9yZGVyUmFkaXVzOjAsZGVmYXVsdFNlcmllc1R5cGU6XCJsaW5lXCIsaWdub3JlSGlkZGVuU2VyaWVzOiEwLHNwYWNpbmc6WzEwLDEwLDE1LDEwXSxyZXNldFpvb21CdXR0b246e3RoZW1lOnt6SW5kZXg6MjB9LHBvc2l0aW9uOnthbGlnbjpcInJpZ2h0XCIseDotMTAseToxMH19LHdpZHRoOm51bGwsaGVpZ2h0Om51bGwsYm9yZGVyQ29sb3I6XCIjMzM1Y2FkXCIsXG5iYWNrZ3JvdW5kQ29sb3I6XCIjZmZmZmZmXCIscGxvdEJvcmRlckNvbG9yOlwiI2NjY2NjY1wifSx0aXRsZTp7dGV4dDpcIkNoYXJ0IHRpdGxlXCIsYWxpZ246XCJjZW50ZXJcIixtYXJnaW46MTUsd2lkdGhBZGp1c3Q6LTQ0fSxzdWJ0aXRsZTp7dGV4dDpcIlwiLGFsaWduOlwiY2VudGVyXCIsd2lkdGhBZGp1c3Q6LTQ0fSxwbG90T3B0aW9uczp7fSxsYWJlbHM6e3N0eWxlOntwb3NpdGlvbjpcImFic29sdXRlXCIsY29sb3I6XCIjMzMzMzMzXCJ9fSxsZWdlbmQ6e2VuYWJsZWQ6ITAsYWxpZ246XCJjZW50ZXJcIixsYXlvdXQ6XCJob3Jpem9udGFsXCIsbGFiZWxGb3JtYXR0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5uYW1lfSxib3JkZXJDb2xvcjpcIiM5OTk5OTlcIixib3JkZXJSYWRpdXM6MCxuYXZpZ2F0aW9uOnthY3RpdmVDb2xvcjpcIiMwMDMzOTlcIixpbmFjdGl2ZUNvbG9yOlwiI2NjY2NjY1wifSxpdGVtU3R5bGU6e2NvbG9yOlwiIzMzMzMzM1wiLGZvbnRTaXplOlwiMTJweFwiLGZvbnRXZWlnaHQ6XCJib2xkXCJ9LGl0ZW1Ib3ZlclN0eWxlOntjb2xvcjpcIiMwMDAwMDBcIn0sXG5pdGVtSGlkZGVuU3R5bGU6e2NvbG9yOlwiI2NjY2NjY1wifSxzaGFkb3c6ITEsaXRlbUNoZWNrYm94U3R5bGU6e3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix3aWR0aDpcIjEzcHhcIixoZWlnaHQ6XCIxM3B4XCJ9LHNxdWFyZVN5bWJvbDohMCxzeW1ib2xQYWRkaW5nOjUsdmVydGljYWxBbGlnbjpcImJvdHRvbVwiLHg6MCx5OjAsdGl0bGU6e3N0eWxlOntmb250V2VpZ2h0OlwiYm9sZFwifX19LGxvYWRpbmc6e2xhYmVsU3R5bGU6e2ZvbnRXZWlnaHQ6XCJib2xkXCIscG9zaXRpb246XCJyZWxhdGl2ZVwiLHRvcDpcIjQ1JVwifSxzdHlsZTp7cG9zaXRpb246XCJhYnNvbHV0ZVwiLGJhY2tncm91bmRDb2xvcjpcIiNmZmZmZmZcIixvcGFjaXR5Oi41LHRleHRBbGlnbjpcImNlbnRlclwifX0sdG9vbHRpcDp7ZW5hYmxlZDohMCxhbmltYXRpb246YS5zdmcsYm9yZGVyUmFkaXVzOjMsZGF0ZVRpbWVMYWJlbEZvcm1hdHM6e21pbGxpc2Vjb25kOlwiJUEsICViICVlLCAlSDolTTolUy4lTFwiLHNlY29uZDpcIiVBLCAlYiAlZSwgJUg6JU06JVNcIixcbm1pbnV0ZTpcIiVBLCAlYiAlZSwgJUg6JU1cIixob3VyOlwiJUEsICViICVlLCAlSDolTVwiLGRheTpcIiVBLCAlYiAlZSwgJVlcIix3ZWVrOlwiV2VlayBmcm9tICVBLCAlYiAlZSwgJVlcIixtb250aDpcIiVCICVZXCIseWVhcjpcIiVZXCJ9LGZvb3RlckZvcm1hdDpcIlwiLHBhZGRpbmc6OCxzbmFwOmEuaXNUb3VjaERldmljZT8yNToxMCxiYWNrZ3JvdW5kQ29sb3I6QyhcIiNmN2Y3ZjdcIikuc2V0T3BhY2l0eSguODUpLmdldCgpLGJvcmRlcldpZHRoOjEsaGVhZGVyRm9ybWF0OidcXHgzY3NwYW4gc3R5bGVcXHgzZFwiZm9udC1zaXplOiAxMHB4XCJcXHgzZXtwb2ludC5rZXl9XFx4M2Mvc3BhblxceDNlXFx4M2Nici9cXHgzZScscG9pbnRGb3JtYXQ6J1xceDNjc3BhbiBzdHlsZVxceDNkXCJjb2xvcjp7cG9pbnQuY29sb3J9XCJcXHgzZVxcdTI1Y2ZcXHgzYy9zcGFuXFx4M2Uge3Nlcmllcy5uYW1lfTogXFx4M2NiXFx4M2V7cG9pbnQueX1cXHgzYy9iXFx4M2VcXHgzY2JyL1xceDNlJyxzaGFkb3c6ITAsc3R5bGU6e2NvbG9yOlwiIzMzMzMzM1wiLGN1cnNvcjpcImRlZmF1bHRcIixcbmZvbnRTaXplOlwiMTJweFwiLHBvaW50ZXJFdmVudHM6XCJub25lXCIsd2hpdGVTcGFjZTpcIm5vd3JhcFwifX0sY3JlZGl0czp7ZW5hYmxlZDohMCxocmVmOlwiaHR0cDovL3d3dy5oaWdoY2hhcnRzLmNvbVwiLHBvc2l0aW9uOnthbGlnbjpcInJpZ2h0XCIseDotMTAsdmVydGljYWxBbGlnbjpcImJvdHRvbVwiLHk6LTV9LHN0eWxlOntjdXJzb3I6XCJwb2ludGVyXCIsY29sb3I6XCIjOTk5OTk5XCIsZm9udFNpemU6XCI5cHhcIn0sdGV4dDpcIkhpZ2hjaGFydHMuY29tXCJ9fTthLnNldE9wdGlvbnM9ZnVuY3Rpb24oZil7YS5kZWZhdWx0T3B0aW9ucz1oKCEwLGEuZGVmYXVsdE9wdGlvbnMsZik7RCgpO3JldHVybiBhLmRlZmF1bHRPcHRpb25zfTthLmdldE9wdGlvbnM9ZnVuY3Rpb24oKXtyZXR1cm4gYS5kZWZhdWx0T3B0aW9uc307YS5kZWZhdWx0UGxvdE9wdGlvbnM9YS5kZWZhdWx0T3B0aW9ucy5wbG90T3B0aW9ucztEKCl9KShMKTsoZnVuY3Rpb24oYSl7dmFyIEQ9YS5hcnJheU1heCxDPWEuYXJyYXlNaW4sRz1hLmRlZmluZWQsXG5JPWEuZGVzdHJveU9iamVjdFByb3BlcnRpZXMsaD1hLmVhY2gsZj1hLmVyYXNlLHA9YS5tZXJnZSx2PWEucGljazthLlBsb3RMaW5lT3JCYW5kPWZ1bmN0aW9uKGEsZil7dGhpcy5heGlzPWE7ZiYmKHRoaXMub3B0aW9ucz1mLHRoaXMuaWQ9Zi5pZCl9O2EuUGxvdExpbmVPckJhbmQucHJvdG90eXBlPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLGY9YS5heGlzLGQ9Zi5ob3JpeixjPWEub3B0aW9ucyxuPWMubGFiZWwsaD1hLmxhYmVsLHQ9Yy50byxtPWMuZnJvbSxiPWMudmFsdWUscT1HKG0pJiZHKHQpLHo9RyhiKSxGPWEuc3ZnRWxlbSxlPSFGLHI9W10seCxBPWMuY29sb3Isaz12KGMuekluZGV4LDApLHc9Yy5ldmVudHMscj17XCJjbGFzc1wiOlwiaGlnaGNoYXJ0cy1wbG90LVwiKyhxP1wiYmFuZCBcIjpcImxpbmUgXCIpKyhjLmNsYXNzTmFtZXx8XCJcIil9LEs9e30sSj1mLmNoYXJ0LnJlbmRlcmVyLE49cT9cImJhbmRzXCI6XCJsaW5lc1wiLGc9Zi5sb2cybGluO2YuaXNMb2cmJihtPWcobSksdD1cbmcodCksYj1nKGIpKTt6PyhyPXtzdHJva2U6QSxcInN0cm9rZS13aWR0aFwiOmMud2lkdGh9LGMuZGFzaFN0eWxlJiYoci5kYXNoc3R5bGU9Yy5kYXNoU3R5bGUpKTpxJiYoQSYmKHIuZmlsbD1BKSxjLmJvcmRlcldpZHRoJiYoci5zdHJva2U9Yy5ib3JkZXJDb2xvcixyW1wic3Ryb2tlLXdpZHRoXCJdPWMuYm9yZGVyV2lkdGgpKTtLLnpJbmRleD1rO04rPVwiLVwiK2s7KEE9ZltOXSl8fChmW05dPUE9Si5nKFwicGxvdC1cIitOKS5hdHRyKEspLmFkZCgpKTtlJiYoYS5zdmdFbGVtPUY9Si5wYXRoKCkuYXR0cihyKS5hZGQoQSkpO2lmKHopcj1mLmdldFBsb3RMaW5lUGF0aChiLEYuc3Ryb2tlV2lkdGgoKSk7ZWxzZSBpZihxKXI9Zi5nZXRQbG90QmFuZFBhdGgobSx0LGMpO2Vsc2UgcmV0dXJuO2lmKGUmJnImJnIubGVuZ3RoKXtpZihGLmF0dHIoe2Q6cn0pLHcpZm9yKHggaW4gYz1mdW5jdGlvbihnKXtGLm9uKGcsZnVuY3Rpb24oYil7d1tnXS5hcHBseShhLFtiXSl9KX0sdyljKHgpfWVsc2UgRiYmXG4ocj8oRi5zaG93KCksRi5hbmltYXRlKHtkOnJ9KSk6KEYuaGlkZSgpLGgmJihhLmxhYmVsPWg9aC5kZXN0cm95KCkpKSk7biYmRyhuLnRleHQpJiZyJiZyLmxlbmd0aCYmMDxmLndpZHRoJiYwPGYuaGVpZ2h0JiYhci5mbGF0PyhuPXAoe2FsaWduOmQmJnEmJlwiY2VudGVyXCIseDpkPyFxJiY0OjEwLHZlcnRpY2FsQWxpZ246IWQmJnEmJlwibWlkZGxlXCIseTpkP3E/MTY6MTA6cT82Oi00LHJvdGF0aW9uOmQmJiFxJiY5MH0sbiksdGhpcy5yZW5kZXJMYWJlbChuLHIscSxrKSk6aCYmaC5oaWRlKCk7cmV0dXJuIGF9LHJlbmRlckxhYmVsOmZ1bmN0aW9uKGEsZixkLGMpe3ZhciBuPXRoaXMubGFiZWwsbD10aGlzLmF4aXMuY2hhcnQucmVuZGVyZXI7bnx8KG49e2FsaWduOmEudGV4dEFsaWdufHxhLmFsaWduLHJvdGF0aW9uOmEucm90YXRpb24sXCJjbGFzc1wiOlwiaGlnaGNoYXJ0cy1wbG90LVwiKyhkP1wiYmFuZFwiOlwibGluZVwiKStcIi1sYWJlbCBcIisoYS5jbGFzc05hbWV8fFwiXCIpfSxuLnpJbmRleD1jLFxudGhpcy5sYWJlbD1uPWwudGV4dChhLnRleHQsMCwwLGEudXNlSFRNTCkuYXR0cihuKS5hZGQoKSxuLmNzcyhhLnN0eWxlKSk7Yz1bZlsxXSxmWzRdLGQ/Zls2XTpmWzFdXTtmPVtmWzJdLGZbNV0sZD9mWzddOmZbMl1dO2Q9QyhjKTtsPUMoZik7bi5hbGlnbihhLCExLHt4OmQseTpsLHdpZHRoOkQoYyktZCxoZWlnaHQ6RChmKS1sfSk7bi5zaG93KCl9LGRlc3Ryb3k6ZnVuY3Rpb24oKXtmKHRoaXMuYXhpcy5wbG90TGluZXNBbmRCYW5kcyx0aGlzKTtkZWxldGUgdGhpcy5heGlzO0kodGhpcyl9fTthLkF4aXNQbG90TGluZU9yQmFuZEV4dGVuc2lvbj17Z2V0UGxvdEJhbmRQYXRoOmZ1bmN0aW9uKGEsZil7Zj10aGlzLmdldFBsb3RMaW5lUGF0aChmLG51bGwsbnVsbCwhMCk7KGE9dGhpcy5nZXRQbG90TGluZVBhdGgoYSxudWxsLG51bGwsITApKSYmZj8oYS5mbGF0PWEudG9TdHJpbmcoKT09PWYudG9TdHJpbmcoKSxhLnB1c2goZls0XSxmWzVdLGZbMV0sZlsyXSxcInpcIikpOmE9bnVsbDtcbnJldHVybiBhfSxhZGRQbG90QmFuZDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5hZGRQbG90QmFuZE9yTGluZShhLFwicGxvdEJhbmRzXCIpfSxhZGRQbG90TGluZTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5hZGRQbG90QmFuZE9yTGluZShhLFwicGxvdExpbmVzXCIpfSxhZGRQbG90QmFuZE9yTGluZTpmdW5jdGlvbihmLGgpe3ZhciBkPShuZXcgYS5QbG90TGluZU9yQmFuZCh0aGlzLGYpKS5yZW5kZXIoKSxjPXRoaXMudXNlck9wdGlvbnM7ZCYmKGgmJihjW2hdPWNbaF18fFtdLGNbaF0ucHVzaChmKSksdGhpcy5wbG90TGluZXNBbmRCYW5kcy5wdXNoKGQpKTtyZXR1cm4gZH0scmVtb3ZlUGxvdEJhbmRPckxpbmU6ZnVuY3Rpb24oYSl7Zm9yKHZhciBsPXRoaXMucGxvdExpbmVzQW5kQmFuZHMsZD10aGlzLm9wdGlvbnMsYz10aGlzLnVzZXJPcHRpb25zLG49bC5sZW5ndGg7bi0tOylsW25dLmlkPT09YSYmbFtuXS5kZXN0cm95KCk7aChbZC5wbG90TGluZXN8fFtdLGMucGxvdExpbmVzfHxcbltdLGQucGxvdEJhbmRzfHxbXSxjLnBsb3RCYW5kc3x8W11dLGZ1bmN0aW9uKGMpe2ZvcihuPWMubGVuZ3RoO24tLTspY1tuXS5pZD09PWEmJmYoYyxjW25dKX0pfX19KShMKTsoZnVuY3Rpb24oYSl7dmFyIEQ9YS5jb3JyZWN0RmxvYXQsQz1hLmRlZmluZWQsRz1hLmRlc3Ryb3lPYmplY3RQcm9wZXJ0aWVzLEk9YS5pc051bWJlcixoPWEubWVyZ2UsZj1hLnBpY2sscD1hLmRlZzJyYWQ7YS5UaWNrPWZ1bmN0aW9uKGEsZixoLGQpe3RoaXMuYXhpcz1hO3RoaXMucG9zPWY7dGhpcy50eXBlPWh8fFwiXCI7dGhpcy5pc05ldz0hMDtofHxkfHx0aGlzLmFkZExhYmVsKCl9O2EuVGljay5wcm90b3R5cGU9e2FkZExhYmVsOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5heGlzLGw9YS5vcHRpb25zLHA9YS5jaGFydCxkPWEuY2F0ZWdvcmllcyxjPWEubmFtZXMsbj10aGlzLnBvcyx5PWwubGFiZWxzLHQ9YS50aWNrUG9zaXRpb25zLG09bj09PXRbMF0sYj1uPT09dFt0Lmxlbmd0aC0xXSxjPWQ/ZihkW25dLFxuY1tuXSxuKTpuLGQ9dGhpcy5sYWJlbCx0PXQuaW5mbyxxO2EuaXNEYXRldGltZUF4aXMmJnQmJihxPWwuZGF0ZVRpbWVMYWJlbEZvcm1hdHNbdC5oaWdoZXJSYW5rc1tuXXx8dC51bml0TmFtZV0pO3RoaXMuaXNGaXJzdD1tO3RoaXMuaXNMYXN0PWI7bD1hLmxhYmVsRm9ybWF0dGVyLmNhbGwoe2F4aXM6YSxjaGFydDpwLGlzRmlyc3Q6bSxpc0xhc3Q6YixkYXRlVGltZUxhYmVsRm9ybWF0OnEsdmFsdWU6YS5pc0xvZz9EKGEubGluMmxvZyhjKSk6Y30pO0MoZCk/ZCYmZC5hdHRyKHt0ZXh0Omx9KToodGhpcy5sYWJlbExlbmd0aD0odGhpcy5sYWJlbD1kPUMobCkmJnkuZW5hYmxlZD9wLnJlbmRlcmVyLnRleHQobCwwLDAseS51c2VIVE1MKS5jc3MoaCh5LnN0eWxlKSkuYWRkKGEubGFiZWxHcm91cCk6bnVsbCkmJmQuZ2V0QkJveCgpLndpZHRoLHRoaXMucm90YXRpb249MCl9LGdldExhYmVsU2l6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxhYmVsP3RoaXMubGFiZWwuZ2V0QkJveCgpW3RoaXMuYXhpcy5ob3Jpej9cblwiaGVpZ2h0XCI6XCJ3aWR0aFwiXTowfSxoYW5kbGVPdmVyZmxvdzpmdW5jdGlvbihhKXt2YXIgbD10aGlzLmF4aXMsaD1hLngsZD1sLmNoYXJ0LmNoYXJ0V2lkdGgsYz1sLmNoYXJ0LnNwYWNpbmcsbj1mKGwubGFiZWxMZWZ0LE1hdGgubWluKGwucG9zLGNbM10pKSxjPWYobC5sYWJlbFJpZ2h0LE1hdGgubWF4KGwucG9zK2wubGVuLGQtY1sxXSkpLHk9dGhpcy5sYWJlbCx0PXRoaXMucm90YXRpb24sbT17bGVmdDowLGNlbnRlcjouNSxyaWdodDoxfVtsLmxhYmVsQWxpZ25dLGI9eS5nZXRCQm94KCkud2lkdGgscT1sLmdldFNsb3RXaWR0aCgpLHo9cSxGPTEsZSxyPXt9O2lmKHQpMD50JiZoLW0qYjxuP2U9TWF0aC5yb3VuZChoL01hdGguY29zKHQqcCktbik6MDx0JiZoK20qYj5jJiYoZT1NYXRoLnJvdW5kKChkLWgpL01hdGguY29zKHQqcCkpKTtlbHNlIGlmKGQ9aCsoMS1tKSpiLGgtbSpiPG4/ej1hLngreiooMS1tKS1uOmQ+YyYmKHo9Yy1hLngreiptLEY9LTEpLHo9TWF0aC5taW4ocSxcbnopLHo8cSYmXCJjZW50ZXJcIj09PWwubGFiZWxBbGlnbiYmKGEueCs9RioocS16LW0qKHEtTWF0aC5taW4oYix6KSkpKSxiPnp8fGwuYXV0b1JvdGF0aW9uJiYoeS5zdHlsZXN8fHt9KS53aWR0aCllPXo7ZSYmKHIud2lkdGg9ZSwobC5vcHRpb25zLmxhYmVscy5zdHlsZXx8e30pLnRleHRPdmVyZmxvd3x8KHIudGV4dE92ZXJmbG93PVwiZWxsaXBzaXNcIikseS5jc3MocikpfSxnZXRQb3NpdGlvbjpmdW5jdGlvbihhLGYsaCxkKXt2YXIgYz10aGlzLmF4aXMsbj1jLmNoYXJ0LGw9ZCYmbi5vbGRDaGFydEhlaWdodHx8bi5jaGFydEhlaWdodDtyZXR1cm57eDphP2MudHJhbnNsYXRlKGYraCxudWxsLG51bGwsZCkrYy50cmFuc0I6Yy5sZWZ0K2Mub2Zmc2V0KyhjLm9wcG9zaXRlPyhkJiZuLm9sZENoYXJ0V2lkdGh8fG4uY2hhcnRXaWR0aCktYy5yaWdodC1jLmxlZnQ6MCkseTphP2wtYy5ib3R0b20rYy5vZmZzZXQtKGMub3Bwb3NpdGU/Yy5oZWlnaHQ6MCk6bC1jLnRyYW5zbGF0ZShmK2gsbnVsbCxcbm51bGwsZCktYy50cmFuc0J9fSxnZXRMYWJlbFBvc2l0aW9uOmZ1bmN0aW9uKGEsZixoLGQsYyxuLHksdCl7dmFyIG09dGhpcy5heGlzLGI9bS50cmFuc0EscT1tLnJldmVyc2VkLHo9bS5zdGFnZ2VyTGluZXMsbD1tLnRpY2tSb3RDb3JyfHx7eDowLHk6MH0sZT1jLnk7QyhlKXx8KGU9MD09PW0uc2lkZT9oLnJvdGF0aW9uPy04Oi1oLmdldEJCb3goKS5oZWlnaHQ6Mj09PW0uc2lkZT9sLnkrODpNYXRoLmNvcyhoLnJvdGF0aW9uKnApKihsLnktaC5nZXRCQm94KCExLDApLmhlaWdodC8yKSk7YT1hK2MueCtsLngtKG4mJmQ/bipiKihxPy0xOjEpOjApO2Y9ZitlLShuJiYhZD9uKmIqKHE/MTotMSk6MCk7eiYmKGg9eS8odHx8MSkleixtLm9wcG9zaXRlJiYoaD16LWgtMSksZis9bS5sYWJlbE9mZnNldC96KmgpO3JldHVybnt4OmEseTpNYXRoLnJvdW5kKGYpfX0sZ2V0TWFya1BhdGg6ZnVuY3Rpb24oYSxmLGgsZCxjLG4pe3JldHVybiBuLmNyaXNwTGluZShbXCJNXCIsYSxmLFwiTFwiLGErKGM/XG4wOi1oKSxmKyhjP2g6MCldLGQpfSxyZW5kZXI6ZnVuY3Rpb24oYSxsLGgpe3ZhciBkPXRoaXMuYXhpcyxjPWQub3B0aW9ucyxuPWQuY2hhcnQucmVuZGVyZXIscD1kLmhvcml6LHQ9dGhpcy50eXBlLG09dGhpcy5sYWJlbCxiPXRoaXMucG9zLHE9Yy5sYWJlbHMsej10aGlzLmdyaWRMaW5lLEY9dD90K1wiVGlja1wiOlwidGlja1wiLGU9ZC50aWNrU2l6ZShGKSxyPXRoaXMubWFyayx4PSFyLEE9cS5zdGVwLGs9e30sdz0hMCxLPWQudGlja21hcmtPZmZzZXQsSj10aGlzLmdldFBvc2l0aW9uKHAsYixLLGwpLHU9Si54LEo9Si55LGc9cCYmdT09PWQucG9zK2QubGVufHwhcCYmSj09PWQucG9zPy0xOjEsQj10P3QrXCJHcmlkXCI6XCJncmlkXCIsUz1jW0IrXCJMaW5lV2lkdGhcIl0sTT1jW0IrXCJMaW5lQ29sb3JcIl0sdj1jW0IrXCJMaW5lRGFzaFN0eWxlXCJdLEI9ZihjW0YrXCJXaWR0aFwiXSwhdCYmZC5pc1hBeGlzPzE6MCksRj1jW0YrXCJDb2xvclwiXTtoPWYoaCwxKTt0aGlzLmlzQWN0aXZlPSEwO3p8fChrLnN0cm9rZT1cbk0sa1tcInN0cm9rZS13aWR0aFwiXT1TLHYmJihrLmRhc2hzdHlsZT12KSx0fHwoay56SW5kZXg9MSksbCYmKGsub3BhY2l0eT0wKSx0aGlzLmdyaWRMaW5lPXo9bi5wYXRoKCkuYXR0cihrKS5hZGRDbGFzcyhcImhpZ2hjaGFydHMtXCIrKHQ/dCtcIi1cIjpcIlwiKStcImdyaWQtbGluZVwiKS5hZGQoZC5ncmlkR3JvdXApKTtpZighbCYmeiYmKGI9ZC5nZXRQbG90TGluZVBhdGgoYitLLHouc3Ryb2tlV2lkdGgoKSpnLGwsITApKSl6W3RoaXMuaXNOZXc/XCJhdHRyXCI6XCJhbmltYXRlXCJdKHtkOmIsb3BhY2l0eTpofSk7ZSYmKGQub3Bwb3NpdGUmJihlWzBdPS1lWzBdKSx4JiYodGhpcy5tYXJrPXI9bi5wYXRoKCkuYWRkQ2xhc3MoXCJoaWdoY2hhcnRzLVwiKyh0P3QrXCItXCI6XCJcIikrXCJ0aWNrXCIpLmFkZChkLmF4aXNHcm91cCksci5hdHRyKHtzdHJva2U6RixcInN0cm9rZS13aWR0aFwiOkJ9KSksclt4P1wiYXR0clwiOlwiYW5pbWF0ZVwiXSh7ZDp0aGlzLmdldE1hcmtQYXRoKHUsSixlWzBdLHIuc3Ryb2tlV2lkdGgoKSpcbmcscCxuKSxvcGFjaXR5Omh9KSk7bSYmSSh1KSYmKG0ueHk9Sj10aGlzLmdldExhYmVsUG9zaXRpb24odSxKLG0scCxxLEssYSxBKSx0aGlzLmlzRmlyc3QmJiF0aGlzLmlzTGFzdCYmIWYoYy5zaG93Rmlyc3RMYWJlbCwxKXx8dGhpcy5pc0xhc3QmJiF0aGlzLmlzRmlyc3QmJiFmKGMuc2hvd0xhc3RMYWJlbCwxKT93PSExOiFwfHxkLmlzUmFkaWFsfHxxLnN0ZXB8fHEucm90YXRpb258fGx8fDA9PT1ofHx0aGlzLmhhbmRsZU92ZXJmbG93KEopLEEmJmElQSYmKHc9ITEpLHcmJkkoSi55KT8oSi5vcGFjaXR5PWgsbVt0aGlzLmlzTmV3P1wiYXR0clwiOlwiYW5pbWF0ZVwiXShKKSk6bS5hdHRyKFwieVwiLC05OTk5KSx0aGlzLmlzTmV3PSExKX0sZGVzdHJveTpmdW5jdGlvbigpe0codGhpcyx0aGlzLmF4aXMpfX19KShMKTsoZnVuY3Rpb24oYSl7dmFyIEQ9YS5hZGRFdmVudCxDPWEuYW5pbU9iamVjdCxHPWEuYXJyYXlNYXgsST1hLmFycmF5TWluLGg9YS5BeGlzUGxvdExpbmVPckJhbmRFeHRlbnNpb24sXG5mPWEuY29sb3IscD1hLmNvcnJlY3RGbG9hdCx2PWEuZGVmYXVsdE9wdGlvbnMsbD1hLmRlZmluZWQsdT1hLmRlZzJyYWQsZD1hLmRlc3Ryb3lPYmplY3RQcm9wZXJ0aWVzLGM9YS5lYWNoLG49YS5leHRlbmQseT1hLmZpcmVFdmVudCx0PWEuZm9ybWF0LG09YS5nZXRNYWduaXR1ZGUsYj1hLmdyZXAscT1hLmluQXJyYXksej1hLmlzQXJyYXksRj1hLmlzTnVtYmVyLGU9YS5pc1N0cmluZyxyPWEubWVyZ2UseD1hLm5vcm1hbGl6ZVRpY2tJbnRlcnZhbCxBPWEucGljayxrPWEuUGxvdExpbmVPckJhbmQsdz1hLnJlbW92ZUV2ZW50LEs9YS5zcGxhdCxKPWEuc3luY1RpbWVvdXQsTj1hLlRpY2s7YS5BeGlzPWZ1bmN0aW9uKCl7dGhpcy5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX07YS5BeGlzLnByb3RvdHlwZT17ZGVmYXVsdE9wdGlvbnM6e2RhdGVUaW1lTGFiZWxGb3JtYXRzOnttaWxsaXNlY29uZDpcIiVIOiVNOiVTLiVMXCIsc2Vjb25kOlwiJUg6JU06JVNcIixtaW51dGU6XCIlSDolTVwiLGhvdXI6XCIlSDolTVwiLFxuZGF5OlwiJWUuICViXCIsd2VlazpcIiVlLiAlYlwiLG1vbnRoOlwiJWIgJyV5XCIseWVhcjpcIiVZXCJ9LGVuZE9uVGljazohMSxsYWJlbHM6e2VuYWJsZWQ6ITAsc3R5bGU6e2NvbG9yOlwiIzY2NjY2NlwiLGN1cnNvcjpcImRlZmF1bHRcIixmb250U2l6ZTpcIjExcHhcIn0seDowfSxtaW5QYWRkaW5nOi4wMSxtYXhQYWRkaW5nOi4wMSxtaW5vclRpY2tMZW5ndGg6MixtaW5vclRpY2tQb3NpdGlvbjpcIm91dHNpZGVcIixzdGFydE9mV2VlazoxLHN0YXJ0T25UaWNrOiExLHRpY2tMZW5ndGg6MTAsdGlja21hcmtQbGFjZW1lbnQ6XCJiZXR3ZWVuXCIsdGlja1BpeGVsSW50ZXJ2YWw6MTAwLHRpY2tQb3NpdGlvbjpcIm91dHNpZGVcIix0aXRsZTp7YWxpZ246XCJtaWRkbGVcIixzdHlsZTp7Y29sb3I6XCIjNjY2NjY2XCJ9fSx0eXBlOlwibGluZWFyXCIsbWlub3JHcmlkTGluZUNvbG9yOlwiI2YyZjJmMlwiLG1pbm9yR3JpZExpbmVXaWR0aDoxLG1pbm9yVGlja0NvbG9yOlwiIzk5OTk5OVwiLGxpbmVDb2xvcjpcIiNjY2Q2ZWJcIixsaW5lV2lkdGg6MSxcbmdyaWRMaW5lQ29sb3I6XCIjZTZlNmU2XCIsdGlja0NvbG9yOlwiI2NjZDZlYlwifSxkZWZhdWx0WUF4aXNPcHRpb25zOntlbmRPblRpY2s6ITAsdGlja1BpeGVsSW50ZXJ2YWw6NzIsc2hvd0xhc3RMYWJlbDohMCxsYWJlbHM6e3g6LTh9LG1heFBhZGRpbmc6LjA1LG1pblBhZGRpbmc6LjA1LHN0YXJ0T25UaWNrOiEwLHRpdGxlOntyb3RhdGlvbjoyNzAsdGV4dDpcIlZhbHVlc1wifSxzdGFja0xhYmVsczp7ZW5hYmxlZDohMSxmb3JtYXR0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gYS5udW1iZXJGb3JtYXQodGhpcy50b3RhbCwtMSl9LHN0eWxlOntmb250U2l6ZTpcIjExcHhcIixmb250V2VpZ2h0OlwiYm9sZFwiLGNvbG9yOlwiIzAwMDAwMFwiLHRleHRPdXRsaW5lOlwiMXB4IGNvbnRyYXN0XCJ9fSxncmlkTGluZVdpZHRoOjEsbGluZVdpZHRoOjB9LGRlZmF1bHRMZWZ0QXhpc09wdGlvbnM6e2xhYmVsczp7eDotMTV9LHRpdGxlOntyb3RhdGlvbjoyNzB9fSxkZWZhdWx0UmlnaHRBeGlzT3B0aW9uczp7bGFiZWxzOnt4OjE1fSxcbnRpdGxlOntyb3RhdGlvbjo5MH19LGRlZmF1bHRCb3R0b21BeGlzT3B0aW9uczp7bGFiZWxzOnthdXRvUm90YXRpb246Wy00NV0seDowfSx0aXRsZTp7cm90YXRpb246MH19LGRlZmF1bHRUb3BBeGlzT3B0aW9uczp7bGFiZWxzOnthdXRvUm90YXRpb246Wy00NV0seDowfSx0aXRsZTp7cm90YXRpb246MH19LGluaXQ6ZnVuY3Rpb24oYSxiKXt2YXIgZz1iLmlzWDt0aGlzLmNoYXJ0PWE7dGhpcy5ob3Jpej1hLmludmVydGVkPyFnOmc7dGhpcy5pc1hBeGlzPWc7dGhpcy5jb2xsPXRoaXMuY29sbHx8KGc/XCJ4QXhpc1wiOlwieUF4aXNcIik7dGhpcy5vcHBvc2l0ZT1iLm9wcG9zaXRlO3RoaXMuc2lkZT1iLnNpZGV8fCh0aGlzLmhvcml6P3RoaXMub3Bwb3NpdGU/MDoyOnRoaXMub3Bwb3NpdGU/MTozKTt0aGlzLnNldE9wdGlvbnMoYik7dmFyIGM9dGhpcy5vcHRpb25zLGU9Yy50eXBlO3RoaXMubGFiZWxGb3JtYXR0ZXI9Yy5sYWJlbHMuZm9ybWF0dGVyfHx0aGlzLmRlZmF1bHRMYWJlbEZvcm1hdHRlcjtcbnRoaXMudXNlck9wdGlvbnM9Yjt0aGlzLm1pblBpeGVsUGFkZGluZz0wO3RoaXMucmV2ZXJzZWQ9Yy5yZXZlcnNlZDt0aGlzLnZpc2libGU9ITEhPT1jLnZpc2libGU7dGhpcy56b29tRW5hYmxlZD0hMSE9PWMuem9vbUVuYWJsZWQ7dGhpcy5oYXNOYW1lcz1cImNhdGVnb3J5XCI9PT1lfHwhMD09PWMuY2F0ZWdvcmllczt0aGlzLmNhdGVnb3JpZXM9Yy5jYXRlZ29yaWVzfHx0aGlzLmhhc05hbWVzO3RoaXMubmFtZXM9dGhpcy5uYW1lc3x8W107dGhpcy5pc0xvZz1cImxvZ2FyaXRobWljXCI9PT1lO3RoaXMuaXNEYXRldGltZUF4aXM9XCJkYXRldGltZVwiPT09ZTt0aGlzLmlzTGlua2VkPWwoYy5saW5rZWRUbyk7dGhpcy50aWNrcz17fTt0aGlzLmxhYmVsRWRnZT1bXTt0aGlzLm1pbm9yVGlja3M9e307dGhpcy5wbG90TGluZXNBbmRCYW5kcz1bXTt0aGlzLmFsdGVybmF0ZUJhbmRzPXt9O3RoaXMubGVuPTA7dGhpcy5taW5SYW5nZT10aGlzLnVzZXJNaW5SYW5nZT1jLm1pblJhbmdlfHxjLm1heFpvb207XG50aGlzLnJhbmdlPWMucmFuZ2U7dGhpcy5vZmZzZXQ9Yy5vZmZzZXR8fDA7dGhpcy5zdGFja3M9e307dGhpcy5vbGRTdGFja3M9e307dGhpcy5zdGFja3NUb3VjaGVkPTA7dGhpcy5taW49dGhpcy5tYXg9bnVsbDt0aGlzLmNyb3NzaGFpcj1BKGMuY3Jvc3NoYWlyLEsoYS5vcHRpb25zLnRvb2x0aXAuY3Jvc3NoYWlycylbZz8wOjFdLCExKTt2YXIgaztiPXRoaXMub3B0aW9ucy5ldmVudHM7LTE9PT1xKHRoaXMsYS5heGVzKSYmKGc/YS5heGVzLnNwbGljZShhLnhBeGlzLmxlbmd0aCwwLHRoaXMpOmEuYXhlcy5wdXNoKHRoaXMpLGFbdGhpcy5jb2xsXS5wdXNoKHRoaXMpKTt0aGlzLnNlcmllcz10aGlzLnNlcmllc3x8W107YS5pbnZlcnRlZCYmZyYmdm9pZCAwPT09dGhpcy5yZXZlcnNlZCYmKHRoaXMucmV2ZXJzZWQ9ITApO3RoaXMucmVtb3ZlUGxvdExpbmU9dGhpcy5yZW1vdmVQbG90QmFuZD10aGlzLnJlbW92ZVBsb3RCYW5kT3JMaW5lO2ZvcihrIGluIGIpRCh0aGlzLGssYltrXSk7XG50aGlzLmlzTG9nJiYodGhpcy52YWwybGluPXRoaXMubG9nMmxpbix0aGlzLmxpbjJ2YWw9dGhpcy5saW4ybG9nKX0sc2V0T3B0aW9uczpmdW5jdGlvbihhKXt0aGlzLm9wdGlvbnM9cih0aGlzLmRlZmF1bHRPcHRpb25zLFwieUF4aXNcIj09PXRoaXMuY29sbCYmdGhpcy5kZWZhdWx0WUF4aXNPcHRpb25zLFt0aGlzLmRlZmF1bHRUb3BBeGlzT3B0aW9ucyx0aGlzLmRlZmF1bHRSaWdodEF4aXNPcHRpb25zLHRoaXMuZGVmYXVsdEJvdHRvbUF4aXNPcHRpb25zLHRoaXMuZGVmYXVsdExlZnRBeGlzT3B0aW9uc11bdGhpcy5zaWRlXSxyKHZbdGhpcy5jb2xsXSxhKSl9LGRlZmF1bHRMYWJlbEZvcm1hdHRlcjpmdW5jdGlvbigpe3ZhciBnPXRoaXMuYXhpcyxiPXRoaXMudmFsdWUsYz1nLmNhdGVnb3JpZXMsZT10aGlzLmRhdGVUaW1lTGFiZWxGb3JtYXQsaz12LmxhbmcsbT1rLm51bWVyaWNTeW1ib2xzLGs9ay5udW1lcmljU3ltYm9sTWFnbml0dWRlfHwxRTMscT1tJiZtLmxlbmd0aCxkLHI9Zy5vcHRpb25zLmxhYmVscy5mb3JtYXQsXG5nPWcuaXNMb2c/YjpnLnRpY2tJbnRlcnZhbDtpZihyKWQ9dChyLHRoaXMpO2Vsc2UgaWYoYylkPWI7ZWxzZSBpZihlKWQ9YS5kYXRlRm9ybWF0KGUsYik7ZWxzZSBpZihxJiYxRTM8PWcpZm9yKDtxLS0mJnZvaWQgMD09PWQ7KWM9TWF0aC5wb3coayxxKzEpLGc+PWMmJjA9PT0xMCpiJWMmJm51bGwhPT1tW3FdJiYwIT09YiYmKGQ9YS5udW1iZXJGb3JtYXQoYi9jLC0xKSttW3FdKTt2b2lkIDA9PT1kJiYoZD0xRTQ8PU1hdGguYWJzKGIpP2EubnVtYmVyRm9ybWF0KGIsLTEpOmEubnVtYmVyRm9ybWF0KGIsLTEsdm9pZCAwLFwiXCIpKTtyZXR1cm4gZH0sZ2V0U2VyaWVzRXh0cmVtZXM6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLGU9YS5jaGFydDthLmhhc1Zpc2libGVTZXJpZXM9ITE7YS5kYXRhTWluPWEuZGF0YU1heD1hLnRocmVzaG9sZD1udWxsO2Euc29mdFRocmVzaG9sZD0hYS5pc1hBeGlzO2EuYnVpbGRTdGFja3MmJmEuYnVpbGRTdGFja3MoKTtjKGEuc2VyaWVzLGZ1bmN0aW9uKGcpe2lmKGcudmlzaWJsZXx8XG4hZS5vcHRpb25zLmNoYXJ0Lmlnbm9yZUhpZGRlblNlcmllcyl7dmFyIGM9Zy5vcHRpb25zLGs9Yy50aHJlc2hvbGQsQjthLmhhc1Zpc2libGVTZXJpZXM9ITA7YS5pc0xvZyYmMD49ayYmKGs9bnVsbCk7aWYoYS5pc1hBeGlzKWM9Zy54RGF0YSxjLmxlbmd0aCYmKGc9SShjKSxGKGcpfHxnIGluc3RhbmNlb2YgRGF0ZXx8KGM9YihjLGZ1bmN0aW9uKGEpe3JldHVybiBGKGEpfSksZz1JKGMpKSxhLmRhdGFNaW49TWF0aC5taW4oQShhLmRhdGFNaW4sY1swXSksZyksYS5kYXRhTWF4PU1hdGgubWF4KEEoYS5kYXRhTWF4LGNbMF0pLEcoYykpKTtlbHNlIGlmKGcuZ2V0RXh0cmVtZXMoKSxCPWcuZGF0YU1heCxnPWcuZGF0YU1pbixsKGcpJiZsKEIpJiYoYS5kYXRhTWluPU1hdGgubWluKEEoYS5kYXRhTWluLGcpLGcpLGEuZGF0YU1heD1NYXRoLm1heChBKGEuZGF0YU1heCxCKSxCKSksbChrKSYmKGEudGhyZXNob2xkPWspLCFjLnNvZnRUaHJlc2hvbGR8fGEuaXNMb2cpYS5zb2Z0VGhyZXNob2xkPVxuITF9fSl9LHRyYW5zbGF0ZTpmdW5jdGlvbihhLGIsYyxlLGssbSl7dmFyIGc9dGhpcy5saW5rZWRQYXJlbnR8fHRoaXMsQj0xLHE9MCxkPWU/Zy5vbGRUcmFuc0E6Zy50cmFuc0E7ZT1lP2cub2xkTWluOmcubWluO3ZhciByPWcubWluUGl4ZWxQYWRkaW5nO2s9KGcuaXNPcmRpbmFsfHxnLmlzQnJva2VufHxnLmlzTG9nJiZrKSYmZy5saW4ydmFsO2R8fChkPWcudHJhbnNBKTtjJiYoQio9LTEscT1nLmxlbik7Zy5yZXZlcnNlZCYmKEIqPS0xLHEtPUIqKGcuc2VjdG9yfHxnLmxlbikpO2I/KGE9KGEqQitxLXIpL2QrZSxrJiYoYT1nLmxpbjJ2YWwoYSkpKTooayYmKGE9Zy52YWwybGluKGEpKSxhPUIqKGEtZSkqZCtxK0IqcisoRihtKT9kKm06MCkpO3JldHVybiBhfSx0b1BpeGVsczpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLnRyYW5zbGF0ZShhLCExLCF0aGlzLmhvcml6LG51bGwsITApKyhiPzA6dGhpcy5wb3MpfSx0b1ZhbHVlOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMudHJhbnNsYXRlKGEtXG4oYj8wOnRoaXMucG9zKSwhMCwhdGhpcy5ob3JpeixudWxsLCEwKX0sZ2V0UGxvdExpbmVQYXRoOmZ1bmN0aW9uKGEsYixjLGUsayl7dmFyIGc9dGhpcy5jaGFydCxCPXRoaXMubGVmdCxtPXRoaXMudG9wLHEsZCxyPWMmJmcub2xkQ2hhcnRIZWlnaHR8fGcuY2hhcnRIZWlnaHQsbj1jJiZnLm9sZENoYXJ0V2lkdGh8fGcuY2hhcnRXaWR0aCxmO3E9dGhpcy50cmFuc0I7dmFyIHc9ZnVuY3Rpb24oYSxnLGIpe2lmKGE8Z3x8YT5iKWU/YT1NYXRoLm1pbihNYXRoLm1heChnLGEpLGIpOmY9ITA7cmV0dXJuIGF9O2s9QShrLHRoaXMudHJhbnNsYXRlKGEsbnVsbCxudWxsLGMpKTthPWM9TWF0aC5yb3VuZChrK3EpO3E9ZD1NYXRoLnJvdW5kKHItay1xKTtGKGspP3RoaXMuaG9yaXo/KHE9bSxkPXItdGhpcy5ib3R0b20sYT1jPXcoYSxCLEIrdGhpcy53aWR0aCkpOihhPUIsYz1uLXRoaXMucmlnaHQscT1kPXcocSxtLG0rdGhpcy5oZWlnaHQpKTpmPSEwO3JldHVybiBmJiYhZT9udWxsOmcucmVuZGVyZXIuY3Jpc3BMaW5lKFtcIk1cIixcbmEscSxcIkxcIixjLGRdLGJ8fDEpfSxnZXRMaW5lYXJUaWNrUG9zaXRpb25zOmZ1bmN0aW9uKGEsYixjKXt2YXIgZyxrPXAoTWF0aC5mbG9vcihiL2EpKmEpLGU9cChNYXRoLmNlaWwoYy9hKSphKSxCPVtdO2lmKGI9PT1jJiZGKGIpKXJldHVybltiXTtmb3IoYj1rO2I8PWU7KXtCLnB1c2goYik7Yj1wKGIrYSk7aWYoYj09PWcpYnJlYWs7Zz1ifXJldHVybiBCfSxnZXRNaW5vclRpY2tQb3NpdGlvbnM6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9wdGlvbnMsYj10aGlzLnRpY2tQb3NpdGlvbnMsYz10aGlzLm1pbm9yVGlja0ludGVydmFsLGs9W10sZSxtPXRoaXMucG9pbnRSYW5nZVBhZGRpbmd8fDA7ZT10aGlzLm1pbi1tO3ZhciBtPXRoaXMubWF4K20scT1tLWU7aWYocSYmcS9jPHRoaXMubGVuLzMpaWYodGhpcy5pc0xvZylmb3IobT1iLmxlbmd0aCxlPTE7ZTxtO2UrKylrPWsuY29uY2F0KHRoaXMuZ2V0TG9nVGlja1Bvc2l0aW9ucyhjLGJbZS0xXSxiW2VdLCEwKSk7ZWxzZSBpZih0aGlzLmlzRGF0ZXRpbWVBeGlzJiZcblwiYXV0b1wiPT09YS5taW5vclRpY2tJbnRlcnZhbClrPWsuY29uY2F0KHRoaXMuZ2V0VGltZVRpY2tzKHRoaXMubm9ybWFsaXplVGltZVRpY2tJbnRlcnZhbChjKSxlLG0sYS5zdGFydE9mV2VlaykpO2Vsc2UgZm9yKGI9ZSsoYlswXS1lKSVjO2I8PW0mJmIhPT1rWzBdO2IrPWMpay5wdXNoKGIpOzAhPT1rLmxlbmd0aCYmdGhpcy50cmltVGlja3MoayxhLnN0YXJ0T25UaWNrLGEuZW5kT25UaWNrKTtyZXR1cm4ga30sYWRqdXN0Rm9yTWluUmFuZ2U6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9wdGlvbnMsYj10aGlzLm1pbixrPXRoaXMubWF4LGUsbT10aGlzLmRhdGFNYXgtdGhpcy5kYXRhTWluPj10aGlzLm1pblJhbmdlLHEsZCxyLGYsbix3O3RoaXMuaXNYQXhpcyYmdm9pZCAwPT09dGhpcy5taW5SYW5nZSYmIXRoaXMuaXNMb2cmJihsKGEubWluKXx8bChhLm1heCk/dGhpcy5taW5SYW5nZT1udWxsOihjKHRoaXMuc2VyaWVzLGZ1bmN0aW9uKGEpe2Y9YS54RGF0YTtmb3IoZD1uPWEueEluY3JlbWVudD9cbjE6Zi5sZW5ndGgtMTswPGQ7ZC0tKWlmKHI9ZltkXS1mW2QtMV0sdm9pZCAwPT09cXx8cjxxKXE9cn0pLHRoaXMubWluUmFuZ2U9TWF0aC5taW4oNSpxLHRoaXMuZGF0YU1heC10aGlzLmRhdGFNaW4pKSk7ay1iPHRoaXMubWluUmFuZ2UmJih3PXRoaXMubWluUmFuZ2UsZT0ody1rK2IpLzIsZT1bYi1lLEEoYS5taW4sYi1lKV0sbSYmKGVbMl09dGhpcy5pc0xvZz90aGlzLmxvZzJsaW4odGhpcy5kYXRhTWluKTp0aGlzLmRhdGFNaW4pLGI9RyhlKSxrPVtiK3csQShhLm1heCxiK3cpXSxtJiYoa1syXT10aGlzLmlzTG9nP3RoaXMubG9nMmxpbih0aGlzLmRhdGFNYXgpOnRoaXMuZGF0YU1heCksaz1JKGspLGstYjx3JiYoZVswXT1rLXcsZVsxXT1BKGEubWluLGstdyksYj1HKGUpKSk7dGhpcy5taW49Yjt0aGlzLm1heD1rfSxnZXRDbG9zZXN0OmZ1bmN0aW9uKCl7dmFyIGE7dGhpcy5jYXRlZ29yaWVzP2E9MTpjKHRoaXMuc2VyaWVzLGZ1bmN0aW9uKGIpe3ZhciBnPWIuY2xvc2VzdFBvaW50UmFuZ2UsXG5jPWIudmlzaWJsZXx8IWIuY2hhcnQub3B0aW9ucy5jaGFydC5pZ25vcmVIaWRkZW5TZXJpZXM7IWIubm9TaGFyZWRUb29sdGlwJiZsKGcpJiZjJiYoYT1sKGEpP01hdGgubWluKGEsZyk6Zyl9KTtyZXR1cm4gYX0sbmFtZVRvWDpmdW5jdGlvbihhKXt2YXIgYj16KHRoaXMuY2F0ZWdvcmllcyksZz1iP3RoaXMuY2F0ZWdvcmllczp0aGlzLm5hbWVzLGM9YS5vcHRpb25zLngsazthLnNlcmllcy5yZXF1aXJlU29ydGluZz0hMTtsKGMpfHwoYz0hMT09PXRoaXMub3B0aW9ucy51bmlxdWVOYW1lcz9hLnNlcmllcy5hdXRvSW5jcmVtZW50KCk6cShhLm5hbWUsZykpOy0xPT09Yz9ifHwoaz1nLmxlbmd0aCk6az1jO3RoaXMubmFtZXNba109YS5uYW1lO3JldHVybiBrfSx1cGRhdGVOYW1lczpmdW5jdGlvbigpe3ZhciBhPXRoaXM7MDx0aGlzLm5hbWVzLmxlbmd0aCYmKHRoaXMubmFtZXMubGVuZ3RoPTAsdGhpcy5taW5SYW5nZT12b2lkIDAsYyh0aGlzLnNlcmllc3x8W10sZnVuY3Rpb24oYil7Yi54SW5jcmVtZW50PVxubnVsbDtpZighYi5wb2ludHN8fGIuaXNEaXJ0eURhdGEpYi5wcm9jZXNzRGF0YSgpLGIuZ2VuZXJhdGVQb2ludHMoKTtjKGIucG9pbnRzLGZ1bmN0aW9uKGcsYyl7dmFyIGs7Zy5vcHRpb25zJiZ2b2lkIDA9PT1nLm9wdGlvbnMueCYmKGs9YS5uYW1lVG9YKGcpLGshPT1nLngmJihnLng9ayxiLnhEYXRhW2NdPWspKX0pfSkpfSxzZXRBeGlzVHJhbnNsYXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcyxnPWIubWF4LWIubWluLGs9Yi5heGlzUG9pbnRSYW5nZXx8MCxtLHE9MCxkPTAscj1iLmxpbmtlZFBhcmVudCxmPSEhYi5jYXRlZ29yaWVzLG49Yi50cmFuc0Esdz1iLmlzWEF4aXM7aWYod3x8Znx8ayltPWIuZ2V0Q2xvc2VzdCgpLHI/KHE9ci5taW5Qb2ludE9mZnNldCxkPXIucG9pbnRSYW5nZVBhZGRpbmcpOmMoYi5zZXJpZXMsZnVuY3Rpb24oYSl7dmFyIGc9Zj8xOnc/QShhLm9wdGlvbnMucG9pbnRSYW5nZSxtLDApOmIuYXhpc1BvaW50UmFuZ2V8fDA7YT1hLm9wdGlvbnMucG9pbnRQbGFjZW1lbnQ7XG5rPU1hdGgubWF4KGssZyk7Yi5zaW5nbGV8fChxPU1hdGgubWF4KHEsZShhKT8wOmcvMiksZD1NYXRoLm1heChkLFwib25cIj09PWE/MDpnKSl9KSxyPWIub3JkaW5hbFNsb3BlJiZtP2Iub3JkaW5hbFNsb3BlL206MSxiLm1pblBvaW50T2Zmc2V0PXEqPXIsYi5wb2ludFJhbmdlUGFkZGluZz1kKj1yLGIucG9pbnRSYW5nZT1NYXRoLm1pbihrLGcpLHcmJihiLmNsb3Nlc3RQb2ludFJhbmdlPW0pO2EmJihiLm9sZFRyYW5zQT1uKTtiLnRyYW5zbGF0aW9uU2xvcGU9Yi50cmFuc0E9bj1iLmxlbi8oZytkfHwxKTtiLnRyYW5zQj1iLmhvcml6P2IubGVmdDpiLmJvdHRvbTtiLm1pblBpeGVsUGFkZGluZz1uKnF9LG1pbkZyb21SYW5nZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1heC10aGlzLnJhbmdlfSxzZXRUaWNrSW50ZXJ2YWw6ZnVuY3Rpb24oYil7dmFyIGc9dGhpcyxrPWcuY2hhcnQsZT1nLm9wdGlvbnMscT1nLmlzTG9nLGQ9Zy5sb2cybGluLHI9Zy5pc0RhdGV0aW1lQXhpcyxmPWcuaXNYQXhpcyxcbm49Zy5pc0xpbmtlZCx3PWUubWF4UGFkZGluZyx0PWUubWluUGFkZGluZyx6PWUudGlja0ludGVydmFsLGg9ZS50aWNrUGl4ZWxJbnRlcnZhbCxLPWcuY2F0ZWdvcmllcyxKPWcudGhyZXNob2xkLHU9Zy5zb2Z0VGhyZXNob2xkLE4sdixDLEQ7cnx8S3x8bnx8dGhpcy5nZXRUaWNrQW1vdW50KCk7Qz1BKGcudXNlck1pbixlLm1pbik7RD1BKGcudXNlck1heCxlLm1heCk7bj8oZy5saW5rZWRQYXJlbnQ9a1tnLmNvbGxdW2UubGlua2VkVG9dLGs9Zy5saW5rZWRQYXJlbnQuZ2V0RXh0cmVtZXMoKSxnLm1pbj1BKGsubWluLGsuZGF0YU1pbiksZy5tYXg9QShrLm1heCxrLmRhdGFNYXgpLGUudHlwZSE9PWcubGlua2VkUGFyZW50Lm9wdGlvbnMudHlwZSYmYS5lcnJvcigxMSwxKSk6KCF1JiZsKEopJiYoZy5kYXRhTWluPj1KPyhOPUosdD0wKTpnLmRhdGFNYXg8PUomJih2PUosdz0wKSksZy5taW49QShDLE4sZy5kYXRhTWluKSxnLm1heD1BKEQsdixnLmRhdGFNYXgpKTtxJiYoIWImJjA+PVxuTWF0aC5taW4oZy5taW4sQShnLmRhdGFNaW4sZy5taW4pKSYmYS5lcnJvcigxMCwxKSxnLm1pbj1wKGQoZy5taW4pLDE1KSxnLm1heD1wKGQoZy5tYXgpLDE1KSk7Zy5yYW5nZSYmbChnLm1heCkmJihnLnVzZXJNaW49Zy5taW49Qz1NYXRoLm1heChnLm1pbixnLm1pbkZyb21SYW5nZSgpKSxnLnVzZXJNYXg9RD1nLm1heCxnLnJhbmdlPW51bGwpO3koZyxcImZvdW5kRXh0cmVtZXNcIik7Zy5iZWZvcmVQYWRkaW5nJiZnLmJlZm9yZVBhZGRpbmcoKTtnLmFkanVzdEZvck1pblJhbmdlKCk7IShLfHxnLmF4aXNQb2ludFJhbmdlfHxnLnVzZVBlcmNlbnRhZ2V8fG4pJiZsKGcubWluKSYmbChnLm1heCkmJihkPWcubWF4LWcubWluKSYmKCFsKEMpJiZ0JiYoZy5taW4tPWQqdCksIWwoRCkmJncmJihnLm1heCs9ZCp3KSk7RihlLmZsb29yKT9nLm1pbj1NYXRoLm1heChnLm1pbixlLmZsb29yKTpGKGUuc29mdE1pbikmJihnLm1pbj1NYXRoLm1pbihnLm1pbixlLnNvZnRNaW4pKTtGKGUuY2VpbGluZyk/XG5nLm1heD1NYXRoLm1pbihnLm1heCxlLmNlaWxpbmcpOkYoZS5zb2Z0TWF4KSYmKGcubWF4PU1hdGgubWF4KGcubWF4LGUuc29mdE1heCkpO3UmJmwoZy5kYXRhTWluKSYmKEo9Snx8MCwhbChDKSYmZy5taW48SiYmZy5kYXRhTWluPj1KP2cubWluPUo6IWwoRCkmJmcubWF4PkomJmcuZGF0YU1heDw9SiYmKGcubWF4PUopKTtnLnRpY2tJbnRlcnZhbD1nLm1pbj09PWcubWF4fHx2b2lkIDA9PT1nLm1pbnx8dm9pZCAwPT09Zy5tYXg/MTpuJiYheiYmaD09PWcubGlua2VkUGFyZW50Lm9wdGlvbnMudGlja1BpeGVsSW50ZXJ2YWw/ej1nLmxpbmtlZFBhcmVudC50aWNrSW50ZXJ2YWw6QSh6LHRoaXMudGlja0Ftb3VudD8oZy5tYXgtZy5taW4pL01hdGgubWF4KHRoaXMudGlja0Ftb3VudC0xLDEpOnZvaWQgMCxLPzE6KGcubWF4LWcubWluKSpoL01hdGgubWF4KGcubGVuLGgpKTtmJiYhYiYmYyhnLnNlcmllcyxmdW5jdGlvbihhKXthLnByb2Nlc3NEYXRhKGcubWluIT09Zy5vbGRNaW58fGcubWF4IT09XG5nLm9sZE1heCl9KTtnLnNldEF4aXNUcmFuc2xhdGlvbighMCk7Zy5iZWZvcmVTZXRUaWNrUG9zaXRpb25zJiZnLmJlZm9yZVNldFRpY2tQb3NpdGlvbnMoKTtnLnBvc3RQcm9jZXNzVGlja0ludGVydmFsJiYoZy50aWNrSW50ZXJ2YWw9Zy5wb3N0UHJvY2Vzc1RpY2tJbnRlcnZhbChnLnRpY2tJbnRlcnZhbCkpO2cucG9pbnRSYW5nZSYmIXomJihnLnRpY2tJbnRlcnZhbD1NYXRoLm1heChnLnBvaW50UmFuZ2UsZy50aWNrSW50ZXJ2YWwpKTtiPUEoZS5taW5UaWNrSW50ZXJ2YWwsZy5pc0RhdGV0aW1lQXhpcyYmZy5jbG9zZXN0UG9pbnRSYW5nZSk7IXomJmcudGlja0ludGVydmFsPGImJihnLnRpY2tJbnRlcnZhbD1iKTtyfHxxfHx6fHwoZy50aWNrSW50ZXJ2YWw9eChnLnRpY2tJbnRlcnZhbCxudWxsLG0oZy50aWNrSW50ZXJ2YWwpLEEoZS5hbGxvd0RlY2ltYWxzLCEoLjU8Zy50aWNrSW50ZXJ2YWwmJjU+Zy50aWNrSW50ZXJ2YWwmJjFFMzxnLm1heCYmOTk5OT5nLm1heCkpLCEhdGhpcy50aWNrQW1vdW50KSk7XG50aGlzLnRpY2tBbW91bnR8fChnLnRpY2tJbnRlcnZhbD1nLnVuc3F1aXNoKCkpO3RoaXMuc2V0VGlja1Bvc2l0aW9ucygpfSxzZXRUaWNrUG9zaXRpb25zOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcHRpb25zLGIsYz1hLnRpY2tQb3NpdGlvbnMsaz1hLnRpY2tQb3NpdGlvbmVyLGU9YS5zdGFydE9uVGljayxtPWEuZW5kT25UaWNrLHE7dGhpcy50aWNrbWFya09mZnNldD10aGlzLmNhdGVnb3JpZXMmJlwiYmV0d2VlblwiPT09YS50aWNrbWFya1BsYWNlbWVudCYmMT09PXRoaXMudGlja0ludGVydmFsPy41OjA7dGhpcy5taW5vclRpY2tJbnRlcnZhbD1cImF1dG9cIj09PWEubWlub3JUaWNrSW50ZXJ2YWwmJnRoaXMudGlja0ludGVydmFsP3RoaXMudGlja0ludGVydmFsLzU6YS5taW5vclRpY2tJbnRlcnZhbDt0aGlzLnRpY2tQb3NpdGlvbnM9Yj1jJiZjLnNsaWNlKCk7IWImJihiPXRoaXMuaXNEYXRldGltZUF4aXM/dGhpcy5nZXRUaW1lVGlja3ModGhpcy5ub3JtYWxpemVUaW1lVGlja0ludGVydmFsKHRoaXMudGlja0ludGVydmFsLFxuYS51bml0cyksdGhpcy5taW4sdGhpcy5tYXgsYS5zdGFydE9mV2Vlayx0aGlzLm9yZGluYWxQb3NpdGlvbnMsdGhpcy5jbG9zZXN0UG9pbnRSYW5nZSwhMCk6dGhpcy5pc0xvZz90aGlzLmdldExvZ1RpY2tQb3NpdGlvbnModGhpcy50aWNrSW50ZXJ2YWwsdGhpcy5taW4sdGhpcy5tYXgpOnRoaXMuZ2V0TGluZWFyVGlja1Bvc2l0aW9ucyh0aGlzLnRpY2tJbnRlcnZhbCx0aGlzLm1pbix0aGlzLm1heCksYi5sZW5ndGg+dGhpcy5sZW4mJihiPVtiWzBdLGIucG9wKCldKSx0aGlzLnRpY2tQb3NpdGlvbnM9YixrJiYoaz1rLmFwcGx5KHRoaXMsW3RoaXMubWluLHRoaXMubWF4XSkpKSYmKHRoaXMudGlja1Bvc2l0aW9ucz1iPWspO3RoaXMuaXNMaW5rZWR8fCh0aGlzLnRyaW1UaWNrcyhiLGUsbSksdGhpcy5taW49PT10aGlzLm1heCYmbCh0aGlzLm1pbikmJiF0aGlzLnRpY2tBbW91bnQmJihxPSEwLHRoaXMubWluLT0uNSx0aGlzLm1heCs9LjUpLHRoaXMuc2luZ2xlPXEsY3x8a3x8dGhpcy5hZGp1c3RUaWNrQW1vdW50KCkpfSxcbnRyaW1UaWNrczpmdW5jdGlvbihhLGIsYyl7dmFyIGc9YVswXSxrPWFbYS5sZW5ndGgtMV0sZT10aGlzLm1pblBvaW50T2Zmc2V0fHwwO2lmKGIpdGhpcy5taW49ZztlbHNlIGZvcig7dGhpcy5taW4tZT5hWzBdOylhLnNoaWZ0KCk7aWYoYyl0aGlzLm1heD1rO2Vsc2UgZm9yKDt0aGlzLm1heCtlPGFbYS5sZW5ndGgtMV07KWEucG9wKCk7MD09PWEubGVuZ3RoJiZsKGcpJiZhLnB1c2goKGsrZykvMil9LGFsaWduVG9PdGhlcnM6ZnVuY3Rpb24oKXt2YXIgYT17fSxiLGs9dGhpcy5vcHRpb25zOyExPT09dGhpcy5jaGFydC5vcHRpb25zLmNoYXJ0LmFsaWduVGlja3N8fCExPT09ay5hbGlnblRpY2tzfHx0aGlzLmlzTG9nfHxjKHRoaXMuY2hhcnRbdGhpcy5jb2xsXSxmdW5jdGlvbihnKXt2YXIgYz1nLm9wdGlvbnMsYz1bZy5ob3Jpej9jLmxlZnQ6Yy50b3AsYy53aWR0aCxjLmhlaWdodCxjLnBhbmVdLmpvaW4oKTtnLnNlcmllcy5sZW5ndGgmJihhW2NdP2I9ITA6YVtjXT0xKX0pO3JldHVybiBifSxcbmdldFRpY2tBbW91bnQ6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9wdGlvbnMsYj1hLnRpY2tBbW91bnQsYz1hLnRpY2tQaXhlbEludGVydmFsOyFsKGEudGlja0ludGVydmFsKSYmdGhpcy5sZW48YyYmIXRoaXMuaXNSYWRpYWwmJiF0aGlzLmlzTG9nJiZhLnN0YXJ0T25UaWNrJiZhLmVuZE9uVGljayYmKGI9Mik7IWImJnRoaXMuYWxpZ25Ub090aGVycygpJiYoYj1NYXRoLmNlaWwodGhpcy5sZW4vYykrMSk7ND5iJiYodGhpcy5maW5hbFRpY2tBbXQ9YixiPTUpO3RoaXMudGlja0Ftb3VudD1ifSxhZGp1c3RUaWNrQW1vdW50OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy50aWNrSW50ZXJ2YWwsYj10aGlzLnRpY2tQb3NpdGlvbnMsYz10aGlzLnRpY2tBbW91bnQsaz10aGlzLmZpbmFsVGlja0FtdCxlPWImJmIubGVuZ3RoO2lmKGU8Yyl7Zm9yKDtiLmxlbmd0aDxjOyliLnB1c2gocChiW2IubGVuZ3RoLTFdK2EpKTt0aGlzLnRyYW5zQSo9KGUtMSkvKGMtMSk7dGhpcy5tYXg9YltiLmxlbmd0aC1cbjFdfWVsc2UgZT5jJiYodGhpcy50aWNrSW50ZXJ2YWwqPTIsdGhpcy5zZXRUaWNrUG9zaXRpb25zKCkpO2lmKGwoaykpe2ZvcihhPWM9Yi5sZW5ndGg7YS0tOykoMz09PWsmJjE9PT1hJTJ8fDI+PWsmJjA8YSYmYTxjLTEpJiZiLnNwbGljZShhLDEpO3RoaXMuZmluYWxUaWNrQW10PXZvaWQgMH19LHNldFNjYWxlOmZ1bmN0aW9uKCl7dmFyIGEsYjt0aGlzLm9sZE1pbj10aGlzLm1pbjt0aGlzLm9sZE1heD10aGlzLm1heDt0aGlzLm9sZEF4aXNMZW5ndGg9dGhpcy5sZW47dGhpcy5zZXRBeGlzU2l6ZSgpO2I9dGhpcy5sZW4hPT10aGlzLm9sZEF4aXNMZW5ndGg7Yyh0aGlzLnNlcmllcyxmdW5jdGlvbihiKXtpZihiLmlzRGlydHlEYXRhfHxiLmlzRGlydHl8fGIueEF4aXMuaXNEaXJ0eSlhPSEwfSk7Ynx8YXx8dGhpcy5pc0xpbmtlZHx8dGhpcy5mb3JjZVJlZHJhd3x8dGhpcy51c2VyTWluIT09dGhpcy5vbGRVc2VyTWlufHx0aGlzLnVzZXJNYXghPT10aGlzLm9sZFVzZXJNYXh8fHRoaXMuYWxpZ25Ub090aGVycygpP1xuKHRoaXMucmVzZXRTdGFja3MmJnRoaXMucmVzZXRTdGFja3MoKSx0aGlzLmZvcmNlUmVkcmF3PSExLHRoaXMuZ2V0U2VyaWVzRXh0cmVtZXMoKSx0aGlzLnNldFRpY2tJbnRlcnZhbCgpLHRoaXMub2xkVXNlck1pbj10aGlzLnVzZXJNaW4sdGhpcy5vbGRVc2VyTWF4PXRoaXMudXNlck1heCx0aGlzLmlzRGlydHl8fCh0aGlzLmlzRGlydHk9Ynx8dGhpcy5taW4hPT10aGlzLm9sZE1pbnx8dGhpcy5tYXghPT10aGlzLm9sZE1heCkpOnRoaXMuY2xlYW5TdGFja3MmJnRoaXMuY2xlYW5TdGFja3MoKX0sc2V0RXh0cmVtZXM6ZnVuY3Rpb24oYSxiLGssZSxtKXt2YXIgZz10aGlzLHE9Zy5jaGFydDtrPUEoaywhMCk7YyhnLnNlcmllcyxmdW5jdGlvbihhKXtkZWxldGUgYS5rZFRyZWV9KTttPW4obSx7bWluOmEsbWF4OmJ9KTt5KGcsXCJzZXRFeHRyZW1lc1wiLG0sZnVuY3Rpb24oKXtnLnVzZXJNaW49YTtnLnVzZXJNYXg9YjtnLmV2ZW50QXJncz1tO2smJnEucmVkcmF3KGUpfSl9LHpvb206ZnVuY3Rpb24oYSxcbmIpe3ZhciBnPXRoaXMuZGF0YU1pbixjPXRoaXMuZGF0YU1heCxrPXRoaXMub3B0aW9ucyxlPU1hdGgubWluKGcsQShrLm1pbixnKSksaz1NYXRoLm1heChjLEEoay5tYXgsYykpO2lmKGEhPT10aGlzLm1pbnx8YiE9PXRoaXMubWF4KXRoaXMuYWxsb3dab29tT3V0c2lkZXx8KGwoZykmJihhPGUmJihhPWUpLGE+ayYmKGE9aykpLGwoYykmJihiPGUmJihiPWUpLGI+ayYmKGI9aykpKSx0aGlzLmRpc3BsYXlCdG49dm9pZCAwIT09YXx8dm9pZCAwIT09Yix0aGlzLnNldEV4dHJlbWVzKGEsYiwhMSx2b2lkIDAse3RyaWdnZXI6XCJ6b29tXCJ9KTtyZXR1cm4hMH0sc2V0QXhpc1NpemU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNoYXJ0LGI9dGhpcy5vcHRpb25zLGM9Yi5vZmZzZXRMZWZ0fHwwLGs9dGhpcy5ob3JpeixlPUEoYi53aWR0aCxhLnBsb3RXaWR0aC1jKyhiLm9mZnNldFJpZ2h0fHwwKSksbT1BKGIuaGVpZ2h0LGEucGxvdEhlaWdodCkscT1BKGIudG9wLGEucGxvdFRvcCksYj1BKGIubGVmdCxcbmEucGxvdExlZnQrYyksYz0vJSQvO2MudGVzdChtKSYmKG09TWF0aC5yb3VuZChwYXJzZUZsb2F0KG0pLzEwMCphLnBsb3RIZWlnaHQpKTtjLnRlc3QocSkmJihxPU1hdGgucm91bmQocGFyc2VGbG9hdChxKS8xMDAqYS5wbG90SGVpZ2h0K2EucGxvdFRvcCkpO3RoaXMubGVmdD1iO3RoaXMudG9wPXE7dGhpcy53aWR0aD1lO3RoaXMuaGVpZ2h0PW07dGhpcy5ib3R0b209YS5jaGFydEhlaWdodC1tLXE7dGhpcy5yaWdodD1hLmNoYXJ0V2lkdGgtZS1iO3RoaXMubGVuPU1hdGgubWF4KGs/ZTptLDApO3RoaXMucG9zPWs/YjpxfSxnZXRFeHRyZW1lczpmdW5jdGlvbigpe3ZhciBhPXRoaXMuaXNMb2csYj10aGlzLmxpbjJsb2c7cmV0dXJue21pbjphP3AoYih0aGlzLm1pbikpOnRoaXMubWluLG1heDphP3AoYih0aGlzLm1heCkpOnRoaXMubWF4LGRhdGFNaW46dGhpcy5kYXRhTWluLGRhdGFNYXg6dGhpcy5kYXRhTWF4LHVzZXJNaW46dGhpcy51c2VyTWluLHVzZXJNYXg6dGhpcy51c2VyTWF4fX0sXG5nZXRUaHJlc2hvbGQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5pc0xvZyxnPXRoaXMubGluMmxvZyxjPWI/Zyh0aGlzLm1pbik6dGhpcy5taW4sYj1iP2codGhpcy5tYXgpOnRoaXMubWF4O251bGw9PT1hP2E9YzpjPmE/YT1jOmI8YSYmKGE9Yik7cmV0dXJuIHRoaXMudHJhbnNsYXRlKGEsMCwxLDAsMSl9LGF1dG9MYWJlbEFsaWduOmZ1bmN0aW9uKGEpe2E9KEEoYSwwKS05MCp0aGlzLnNpZGUrNzIwKSUzNjA7cmV0dXJuIDE1PGEmJjE2NT5hP1wicmlnaHRcIjoxOTU8YSYmMzQ1PmE/XCJsZWZ0XCI6XCJjZW50ZXJcIn0sdGlja1NpemU6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5vcHRpb25zLGc9YlthK1wiTGVuZ3RoXCJdLGM9QShiW2ErXCJXaWR0aFwiXSxcInRpY2tcIj09PWEmJnRoaXMuaXNYQXhpcz8xOjApO2lmKGMmJmcpcmV0dXJuXCJpbnNpZGVcIj09PWJbYStcIlBvc2l0aW9uXCJdJiYoZz0tZyksW2csY119LGxhYmVsTWV0cmljczpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNoYXJ0LnJlbmRlcmVyLmZvbnRNZXRyaWNzKHRoaXMub3B0aW9ucy5sYWJlbHMuc3R5bGUmJlxudGhpcy5vcHRpb25zLmxhYmVscy5zdHlsZS5mb250U2l6ZSx0aGlzLnRpY2tzWzBdJiZ0aGlzLnRpY2tzWzBdLmxhYmVsKX0sdW5zcXVpc2g6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9wdGlvbnMubGFiZWxzLGI9dGhpcy5ob3JpeixrPXRoaXMudGlja0ludGVydmFsLGU9ayxtPXRoaXMubGVuLygoKHRoaXMuY2F0ZWdvcmllcz8xOjApK3RoaXMubWF4LXRoaXMubWluKS9rKSxxLGQ9YS5yb3RhdGlvbixyPXRoaXMubGFiZWxNZXRyaWNzKCksZixuPU51bWJlci5NQVhfVkFMVUUsdyx0PWZ1bmN0aW9uKGEpe2EvPW18fDE7YT0xPGE/TWF0aC5jZWlsKGEpOjE7cmV0dXJuIGEqa307Yj8odz0hYS5zdGFnZ2VyTGluZXMmJiFhLnN0ZXAmJihsKGQpP1tkXTptPEEoYS5hdXRvUm90YXRpb25MaW1pdCw4MCkmJmEuYXV0b1JvdGF0aW9uKSkmJmModyxmdW5jdGlvbihhKXt2YXIgYjtpZihhPT09ZHx8YSYmLTkwPD1hJiY5MD49YSlmPXQoTWF0aC5hYnMoci5oL01hdGguc2luKHUqYSkpKSxiPWYrXG5NYXRoLmFicyhhLzM2MCksYjxuJiYobj1iLHE9YSxlPWYpfSk6YS5zdGVwfHwoZT10KHIuaCkpO3RoaXMuYXV0b1JvdGF0aW9uPXc7dGhpcy5sYWJlbFJvdGF0aW9uPUEocSxkKTtyZXR1cm4gZX0sZ2V0U2xvdFdpZHRoOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jaGFydCxiPXRoaXMuaG9yaXosYz10aGlzLm9wdGlvbnMubGFiZWxzLGs9TWF0aC5tYXgodGhpcy50aWNrUG9zaXRpb25zLmxlbmd0aC0odGhpcy5jYXRlZ29yaWVzPzA6MSksMSksZT1hLm1hcmdpblszXTtyZXR1cm4gYiYmMj4oYy5zdGVwfHwwKSYmIWMucm90YXRpb24mJih0aGlzLnN0YWdnZXJMaW5lc3x8MSkqYS5wbG90V2lkdGgva3x8IWImJihlJiZlLWEuc3BhY2luZ1szXXx8LjMzKmEuY2hhcnRXaWR0aCl9LHJlbmRlclVuc3F1aXNoOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jaGFydCxiPWEucmVuZGVyZXIsaz10aGlzLnRpY2tQb3NpdGlvbnMsbT10aGlzLnRpY2tzLHE9dGhpcy5vcHRpb25zLmxhYmVscyxkPXRoaXMuaG9yaXosXG5mPXRoaXMuZ2V0U2xvdFdpZHRoKCksbj1NYXRoLm1heCgxLE1hdGgucm91bmQoZi0yKihxLnBhZGRpbmd8fDUpKSksdz17fSx0PXRoaXMubGFiZWxNZXRyaWNzKCksej1xLnN0eWxlJiZxLnN0eWxlLnRleHRPdmVyZmxvdyxoLGw9MCx4LEY7ZShxLnJvdGF0aW9uKXx8KHcucm90YXRpb249cS5yb3RhdGlvbnx8MCk7YyhrLGZ1bmN0aW9uKGEpeyhhPW1bYV0pJiZhLmxhYmVsTGVuZ3RoPmwmJihsPWEubGFiZWxMZW5ndGgpfSk7dGhpcy5tYXhMYWJlbExlbmd0aD1sO2lmKHRoaXMuYXV0b1JvdGF0aW9uKWw+biYmbD50Lmg/dy5yb3RhdGlvbj10aGlzLmxhYmVsUm90YXRpb246dGhpcy5sYWJlbFJvdGF0aW9uPTA7ZWxzZSBpZihmJiYoaD17d2lkdGg6bitcInB4XCJ9LCF6KSlmb3IoaC50ZXh0T3ZlcmZsb3c9XCJjbGlwXCIseD1rLmxlbmd0aDshZCYmeC0tOylpZihGPWtbeF0sbj1tW0ZdLmxhYmVsKW4uc3R5bGVzJiZcImVsbGlwc2lzXCI9PT1uLnN0eWxlcy50ZXh0T3ZlcmZsb3c/bi5jc3Moe3RleHRPdmVyZmxvdzpcImNsaXBcIn0pOlxubVtGXS5sYWJlbExlbmd0aD5mJiZuLmNzcyh7d2lkdGg6ZitcInB4XCJ9KSxuLmdldEJCb3goKS5oZWlnaHQ+dGhpcy5sZW4vay5sZW5ndGgtKHQuaC10LmYpJiYobi5zcGVjQ3NzPXt0ZXh0T3ZlcmZsb3c6XCJlbGxpcHNpc1wifSk7dy5yb3RhdGlvbiYmKGg9e3dpZHRoOihsPi41KmEuY2hhcnRIZWlnaHQ/LjMzKmEuY2hhcnRIZWlnaHQ6YS5jaGFydEhlaWdodCkrXCJweFwifSx6fHwoaC50ZXh0T3ZlcmZsb3c9XCJlbGxpcHNpc1wiKSk7aWYodGhpcy5sYWJlbEFsaWduPXEuYWxpZ258fHRoaXMuYXV0b0xhYmVsQWxpZ24odGhpcy5sYWJlbFJvdGF0aW9uKSl3LmFsaWduPXRoaXMubGFiZWxBbGlnbjtjKGssZnVuY3Rpb24oYSl7dmFyIGI9KGE9bVthXSkmJmEubGFiZWw7YiYmKGIuYXR0cih3KSxoJiZiLmNzcyhyKGgsYi5zcGVjQ3NzKSksZGVsZXRlIGIuc3BlY0NzcyxhLnJvdGF0aW9uPXcucm90YXRpb24pfSk7dGhpcy50aWNrUm90Q29ycj1iLnJvdENvcnIodC5iLHRoaXMubGFiZWxSb3RhdGlvbnx8XG4wLDAhPT10aGlzLnNpZGUpfSxoYXNEYXRhOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFzVmlzaWJsZVNlcmllc3x8bCh0aGlzLm1pbikmJmwodGhpcy5tYXgpJiYhIXRoaXMudGlja1Bvc2l0aW9uc30sYWRkVGl0bGU6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5jaGFydC5yZW5kZXJlcixnPXRoaXMuaG9yaXosYz10aGlzLm9wcG9zaXRlLGs9dGhpcy5vcHRpb25zLnRpdGxlLGU7dGhpcy5heGlzVGl0bGV8fCgoZT1rLnRleHRBbGlnbil8fChlPShnP3tsb3c6XCJsZWZ0XCIsbWlkZGxlOlwiY2VudGVyXCIsaGlnaDpcInJpZ2h0XCJ9Ontsb3c6Yz9cInJpZ2h0XCI6XCJsZWZ0XCIsbWlkZGxlOlwiY2VudGVyXCIsaGlnaDpjP1wibGVmdFwiOlwicmlnaHRcIn0pW2suYWxpZ25dKSx0aGlzLmF4aXNUaXRsZT1iLnRleHQoay50ZXh0LDAsMCxrLnVzZUhUTUwpLmF0dHIoe3pJbmRleDo3LHJvdGF0aW9uOmsucm90YXRpb258fDAsYWxpZ246ZX0pLmFkZENsYXNzKFwiaGlnaGNoYXJ0cy1heGlzLXRpdGxlXCIpLmNzcyhrLnN0eWxlKS5hZGQodGhpcy5heGlzR3JvdXApLFxudGhpcy5heGlzVGl0bGUuaXNOZXc9ITApO3RoaXMuYXhpc1RpdGxlW2E/XCJzaG93XCI6XCJoaWRlXCJdKCEwKX0sZ2V0T2Zmc2V0OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxiPWEuY2hhcnQsaz1iLnJlbmRlcmVyLGU9YS5vcHRpb25zLG09YS50aWNrUG9zaXRpb25zLHE9YS50aWNrcyxkPWEuaG9yaXoscj1hLnNpZGUsbj1iLmludmVydGVkP1sxLDAsMywyXVtyXTpyLHcsZix0PTAseixoPTAseD1lLnRpdGxlLEY9ZS5sYWJlbHMscD0wLEs9Yi5heGlzT2Zmc2V0LGI9Yi5jbGlwT2Zmc2V0LEo9Wy0xLDEsMSwtMV1bcl0sdSx5PWUuY2xhc3NOYW1lLHY9YS5heGlzUGFyZW50LEM9dGhpcy50aWNrU2l6ZShcInRpY2tcIik7dz1hLmhhc0RhdGEoKTthLnNob3dBeGlzPWY9d3x8QShlLnNob3dFbXB0eSwhMCk7YS5zdGFnZ2VyTGluZXM9YS5ob3JpeiYmRi5zdGFnZ2VyTGluZXM7YS5heGlzR3JvdXB8fChhLmdyaWRHcm91cD1rLmcoXCJncmlkXCIpLmF0dHIoe3pJbmRleDplLmdyaWRaSW5kZXh8fDF9KS5hZGRDbGFzcyhcImhpZ2hjaGFydHMtXCIrXG50aGlzLmNvbGwudG9Mb3dlckNhc2UoKStcIi1ncmlkIFwiKyh5fHxcIlwiKSkuYWRkKHYpLGEuYXhpc0dyb3VwPWsuZyhcImF4aXNcIikuYXR0cih7ekluZGV4OmUuekluZGV4fHwyfSkuYWRkQ2xhc3MoXCJoaWdoY2hhcnRzLVwiK3RoaXMuY29sbC50b0xvd2VyQ2FzZSgpK1wiIFwiKyh5fHxcIlwiKSkuYWRkKHYpLGEubGFiZWxHcm91cD1rLmcoXCJheGlzLWxhYmVsc1wiKS5hdHRyKHt6SW5kZXg6Ri56SW5kZXh8fDd9KS5hZGRDbGFzcyhcImhpZ2hjaGFydHMtXCIrYS5jb2xsLnRvTG93ZXJDYXNlKCkrXCItbGFiZWxzIFwiKyh5fHxcIlwiKSkuYWRkKHYpKTtpZih3fHxhLmlzTGlua2VkKWMobSxmdW5jdGlvbihiKXtxW2JdP3FbYl0uYWRkTGFiZWwoKTpxW2JdPW5ldyBOKGEsYil9KSxhLnJlbmRlclVuc3F1aXNoKCksITE9PT1GLnJlc2VydmVTcGFjZXx8MCE9PXImJjIhPT1yJiZ7MTpcImxlZnRcIiwzOlwicmlnaHRcIn1bcl0hPT1hLmxhYmVsQWxpZ24mJlwiY2VudGVyXCIhPT1hLmxhYmVsQWxpZ258fGMobSxmdW5jdGlvbihhKXtwPVxuTWF0aC5tYXgocVthXS5nZXRMYWJlbFNpemUoKSxwKX0pLGEuc3RhZ2dlckxpbmVzJiYocCo9YS5zdGFnZ2VyTGluZXMsYS5sYWJlbE9mZnNldD1wKihhLm9wcG9zaXRlPy0xOjEpKTtlbHNlIGZvcih1IGluIHEpcVt1XS5kZXN0cm95KCksZGVsZXRlIHFbdV07eCYmeC50ZXh0JiYhMSE9PXguZW5hYmxlZCYmKGEuYWRkVGl0bGUoZiksZiYmKHQ9YS5heGlzVGl0bGUuZ2V0QkJveCgpW2Q/XCJoZWlnaHRcIjpcIndpZHRoXCJdLHo9eC5vZmZzZXQsaD1sKHopPzA6QSh4Lm1hcmdpbixkPzU6MTApKSk7YS5yZW5kZXJMaW5lKCk7YS5vZmZzZXQ9SipBKGUub2Zmc2V0LEtbcl0pO2EudGlja1JvdENvcnI9YS50aWNrUm90Q29ycnx8e3g6MCx5OjB9O2s9MD09PXI/LWEubGFiZWxNZXRyaWNzKCkuaDoyPT09cj9hLnRpY2tSb3RDb3JyLnk6MDtoPU1hdGguYWJzKHApK2g7cCYmKGg9aC1rK0oqKGQ/QShGLnksYS50aWNrUm90Q29yci55KzgqSik6Ri54KSk7YS5heGlzVGl0bGVNYXJnaW49QSh6LGgpO1xuS1tyXT1NYXRoLm1heChLW3JdLGEuYXhpc1RpdGxlTWFyZ2luK3QrSiphLm9mZnNldCxoLHcmJm0ubGVuZ3RoJiZDP0NbMF06MCk7ZT1lLm9mZnNldD8wOjIqTWF0aC5mbG9vcihhLmF4aXNMaW5lLnN0cm9rZVdpZHRoKCkvMik7YltuXT1NYXRoLm1heChiW25dLGUpfSxnZXRMaW5lUGF0aDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmNoYXJ0LGM9dGhpcy5vcHBvc2l0ZSxnPXRoaXMub2Zmc2V0LGs9dGhpcy5ob3JpeixlPXRoaXMubGVmdCsoYz90aGlzLndpZHRoOjApK2csZz1iLmNoYXJ0SGVpZ2h0LXRoaXMuYm90dG9tLShjP3RoaXMuaGVpZ2h0OjApK2c7YyYmKGEqPS0xKTtyZXR1cm4gYi5yZW5kZXJlci5jcmlzcExpbmUoW1wiTVwiLGs/dGhpcy5sZWZ0OmUsaz9nOnRoaXMudG9wLFwiTFwiLGs/Yi5jaGFydFdpZHRoLXRoaXMucmlnaHQ6ZSxrP2c6Yi5jaGFydEhlaWdodC10aGlzLmJvdHRvbV0sYSl9LHJlbmRlckxpbmU6ZnVuY3Rpb24oKXt0aGlzLmF4aXNMaW5lfHwodGhpcy5heGlzTGluZT1cbnRoaXMuY2hhcnQucmVuZGVyZXIucGF0aCgpLmFkZENsYXNzKFwiaGlnaGNoYXJ0cy1heGlzLWxpbmVcIikuYWRkKHRoaXMuYXhpc0dyb3VwKSx0aGlzLmF4aXNMaW5lLmF0dHIoe3N0cm9rZTp0aGlzLm9wdGlvbnMubGluZUNvbG9yLFwic3Ryb2tlLXdpZHRoXCI6dGhpcy5vcHRpb25zLmxpbmVXaWR0aCx6SW5kZXg6N30pKX0sZ2V0VGl0bGVQb3NpdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuaG9yaXosYj10aGlzLmxlZnQsYz10aGlzLnRvcCxrPXRoaXMubGVuLGU9dGhpcy5vcHRpb25zLnRpdGxlLG09YT9iOmMscT10aGlzLm9wcG9zaXRlLGQ9dGhpcy5vZmZzZXQscj1lLnh8fDAsbj1lLnl8fDAsdz10aGlzLmNoYXJ0LnJlbmRlcmVyLmZvbnRNZXRyaWNzKGUuc3R5bGUmJmUuc3R5bGUuZm9udFNpemUsdGhpcy5heGlzVGl0bGUpLmYsaz17bG93Om0rKGE/MDprKSxtaWRkbGU6bStrLzIsaGlnaDptKyhhP2s6MCl9W2UuYWxpZ25dLGI9KGE/Yyt0aGlzLmhlaWdodDpiKSsoYT8xOi0xKSpcbihxPy0xOjEpKnRoaXMuYXhpc1RpdGxlTWFyZ2luKygyPT09dGhpcy5zaWRlP3c6MCk7cmV0dXJue3g6YT9rK3I6YisocT90aGlzLndpZHRoOjApK2Qrcix5OmE/YituLShxP3RoaXMuaGVpZ2h0OjApK2Q6aytufX0scmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxiPWEuY2hhcnQsZT1iLnJlbmRlcmVyLG09YS5vcHRpb25zLHE9YS5pc0xvZyxkPWEubGluMmxvZyxyPWEuaXNMaW5rZWQsbj1hLnRpY2tQb3NpdGlvbnMsdz1hLmF4aXNUaXRsZSxmPWEudGlja3MsdD1hLm1pbm9yVGlja3Msej1hLmFsdGVybmF0ZUJhbmRzLGg9bS5zdGFja0xhYmVscyxsPW0uYWx0ZXJuYXRlR3JpZENvbG9yLHg9YS50aWNrbWFya09mZnNldCxwPWEuYXhpc0xpbmUsQT1iLmhhc1JlbmRlcmVkJiZGKGEub2xkTWluKSxLPWEuc2hvd0F4aXMsdT1DKGUuZ2xvYmFsQW5pbWF0aW9uKSx5LHY7YS5sYWJlbEVkZ2UubGVuZ3RoPTA7YS5vdmVybGFwPSExO2MoW2YsdCx6XSxmdW5jdGlvbihhKXtmb3IodmFyIGIgaW4gYSlhW2JdLmlzQWN0aXZlPVxuITF9KTtpZihhLmhhc0RhdGEoKXx8cilhLm1pbm9yVGlja0ludGVydmFsJiYhYS5jYXRlZ29yaWVzJiZjKGEuZ2V0TWlub3JUaWNrUG9zaXRpb25zKCksZnVuY3Rpb24oYil7dFtiXXx8KHRbYl09bmV3IE4oYSxiLFwibWlub3JcIikpO0EmJnRbYl0uaXNOZXcmJnRbYl0ucmVuZGVyKG51bGwsITApO3RbYl0ucmVuZGVyKG51bGwsITEsMSl9KSxuLmxlbmd0aCYmKGMobixmdW5jdGlvbihiLGMpe2lmKCFyfHxiPj1hLm1pbiYmYjw9YS5tYXgpZltiXXx8KGZbYl09bmV3IE4oYSxiKSksQSYmZltiXS5pc05ldyYmZltiXS5yZW5kZXIoYywhMCwuMSksZltiXS5yZW5kZXIoYyl9KSx4JiYoMD09PWEubWlufHxhLnNpbmdsZSkmJihmWy0xXXx8KGZbLTFdPW5ldyBOKGEsLTEsbnVsbCwhMCkpLGZbLTFdLnJlbmRlcigtMSkpKSxsJiZjKG4sZnVuY3Rpb24oYyxnKXt2PXZvaWQgMCE9PW5bZysxXT9uW2crMV0reDphLm1heC14OzA9PT1nJTImJmM8YS5tYXgmJnY8PWEubWF4KyhiLnBvbGFyPy14OngpJiZcbih6W2NdfHwoeltjXT1uZXcgayhhKSkseT1jK3gseltjXS5vcHRpb25zPXtmcm9tOnE/ZCh5KTp5LHRvOnE/ZCh2KTp2LGNvbG9yOmx9LHpbY10ucmVuZGVyKCkseltjXS5pc0FjdGl2ZT0hMCl9KSxhLl9hZGRlZFBsb3RMQnx8KGMoKG0ucGxvdExpbmVzfHxbXSkuY29uY2F0KG0ucGxvdEJhbmRzfHxbXSksZnVuY3Rpb24oYil7YS5hZGRQbG90QmFuZE9yTGluZShiKX0pLGEuX2FkZGVkUGxvdExCPSEwKTtjKFtmLHQsel0sZnVuY3Rpb24oYSl7dmFyIGMsZyxrPVtdLGU9dS5kdXJhdGlvbjtmb3IoYyBpbiBhKWFbY10uaXNBY3RpdmV8fChhW2NdLnJlbmRlcihjLCExLDApLGFbY10uaXNBY3RpdmU9ITEsay5wdXNoKGMpKTtKKGZ1bmN0aW9uKCl7Zm9yKGc9ay5sZW5ndGg7Zy0tOylhW2tbZ11dJiYhYVtrW2ddXS5pc0FjdGl2ZSYmKGFba1tnXV0uZGVzdHJveSgpLGRlbGV0ZSBhW2tbZ11dKX0sYSE9PXomJmIuaGFzUmVuZGVyZWQmJmU/ZTowKX0pO3AmJihwW3AuaXNQbGFjZWQ/XCJhbmltYXRlXCI6XG5cImF0dHJcIl0oe2Q6dGhpcy5nZXRMaW5lUGF0aChwLnN0cm9rZVdpZHRoKCkpfSkscC5pc1BsYWNlZD0hMCxwW0s/XCJzaG93XCI6XCJoaWRlXCJdKCEwKSk7dyYmSyYmKHdbdy5pc05ldz9cImF0dHJcIjpcImFuaW1hdGVcIl0oYS5nZXRUaXRsZVBvc2l0aW9uKCkpLHcuaXNOZXc9ITEpO2gmJmguZW5hYmxlZCYmYS5yZW5kZXJTdGFja1RvdGFscygpO2EuaXNEaXJ0eT0hMX0scmVkcmF3OmZ1bmN0aW9uKCl7dGhpcy52aXNpYmxlJiYodGhpcy5yZW5kZXIoKSxjKHRoaXMucGxvdExpbmVzQW5kQmFuZHMsZnVuY3Rpb24oYSl7YS5yZW5kZXIoKX0pKTtjKHRoaXMuc2VyaWVzLGZ1bmN0aW9uKGEpe2EuaXNEaXJ0eT0hMH0pfSxrZWVwUHJvcHM6XCJleHRLZXkgaGNFdmVudHMgbmFtZXMgc2VyaWVzIHVzZXJNYXggdXNlck1pblwiLnNwbGl0KFwiIFwiKSxkZXN0cm95OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsZz1iLnN0YWNrcyxrLGU9Yi5wbG90TGluZXNBbmRCYW5kcyxtO2F8fHcoYik7Zm9yKGsgaW4gZylkKGdba10pLFxuZ1trXT1udWxsO2MoW2IudGlja3MsYi5taW5vclRpY2tzLGIuYWx0ZXJuYXRlQmFuZHNdLGZ1bmN0aW9uKGEpe2QoYSl9KTtpZihlKWZvcihhPWUubGVuZ3RoO2EtLTspZVthXS5kZXN0cm95KCk7YyhcInN0YWNrVG90YWxHcm91cCBheGlzTGluZSBheGlzVGl0bGUgYXhpc0dyb3VwIGdyaWRHcm91cCBsYWJlbEdyb3VwIGNyb3NzXCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEpe2JbYV0mJihiW2FdPWJbYV0uZGVzdHJveSgpKX0pO2ZvcihtIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShtKSYmLTE9PT1xKG0sYi5rZWVwUHJvcHMpJiZkZWxldGUgYlttXX0sZHJhd0Nyb3NzaGFpcjpmdW5jdGlvbihhLGIpe3ZhciBjLGc9dGhpcy5jcm9zc2hhaXIsaz1BKGcuc25hcCwhMCksZSxtPXRoaXMuY3Jvc3M7YXx8KGE9dGhpcy5jcm9zcyYmdGhpcy5jcm9zcy5lKTt0aGlzLmNyb3NzaGFpciYmITEhPT0obChiKXx8IWspPyhrP2woYikmJihlPXRoaXMuaXNYQXhpcz9iLnBsb3RYOnRoaXMubGVuLWIucGxvdFkpOlxuZT1hJiYodGhpcy5ob3Jpej9hLmNoYXJ0WC10aGlzLnBvczp0aGlzLmxlbi1hLmNoYXJ0WSt0aGlzLnBvcyksbChlKSYmKGM9dGhpcy5nZXRQbG90TGluZVBhdGgoYiYmKHRoaXMuaXNYQXhpcz9iLng6QShiLnN0YWNrWSxiLnkpKSxudWxsLG51bGwsbnVsbCxlKXx8bnVsbCksbChjKT8oYj10aGlzLmNhdGVnb3JpZXMmJiF0aGlzLmlzUmFkaWFsLG18fCh0aGlzLmNyb3NzPW09dGhpcy5jaGFydC5yZW5kZXJlci5wYXRoKCkuYWRkQ2xhc3MoXCJoaWdoY2hhcnRzLWNyb3NzaGFpciBoaWdoY2hhcnRzLWNyb3NzaGFpci1cIisoYj9cImNhdGVnb3J5IFwiOlwidGhpbiBcIikrZy5jbGFzc05hbWUpLmF0dHIoe3pJbmRleDpBKGcuekluZGV4LDIpfSkuYWRkKCksbS5hdHRyKHtzdHJva2U6Zy5jb2xvcnx8KGI/ZihcIiNjY2Q2ZWJcIikuc2V0T3BhY2l0eSguMjUpLmdldCgpOlwiI2NjY2NjY1wiKSxcInN0cm9rZS13aWR0aFwiOkEoZy53aWR0aCwxKX0pLGcuZGFzaFN0eWxlJiZtLmF0dHIoe2Rhc2hzdHlsZTpnLmRhc2hTdHlsZX0pKSxcbm0uc2hvdygpLmF0dHIoe2Q6Y30pLGImJiFnLndpZHRoJiZtLmF0dHIoe1wic3Ryb2tlLXdpZHRoXCI6dGhpcy50cmFuc0F9KSx0aGlzLmNyb3NzLmU9YSk6dGhpcy5oaWRlQ3Jvc3NoYWlyKCkpOnRoaXMuaGlkZUNyb3NzaGFpcigpfSxoaWRlQ3Jvc3NoYWlyOmZ1bmN0aW9uKCl7dGhpcy5jcm9zcyYmdGhpcy5jcm9zcy5oaWRlKCl9fTtuKGEuQXhpcy5wcm90b3R5cGUsaCl9KShMKTsoZnVuY3Rpb24oYSl7dmFyIEQ9YS5BeGlzLEM9YS5EYXRlLEc9YS5kYXRlRm9ybWF0LEk9YS5kZWZhdWx0T3B0aW9ucyxoPWEuZGVmaW5lZCxmPWEuZWFjaCxwPWEuZXh0ZW5kLHY9YS5nZXRNYWduaXR1ZGUsbD1hLmdldFRaT2Zmc2V0LHU9YS5ub3JtYWxpemVUaWNrSW50ZXJ2YWwsZD1hLnBpY2ssYz1hLnRpbWVVbml0cztELnByb3RvdHlwZS5nZXRUaW1lVGlja3M9ZnVuY3Rpb24oYSx5LHQsbSl7dmFyIGI9W10scT17fSxuPUkuZ2xvYmFsLnVzZVVUQyxGLGU9bmV3IEMoeS1sKHkpKSxyPUMuaGNNYWtlVGltZSxcbng9YS51bml0UmFuZ2UsQT1hLmNvdW50LGs7aWYoaCh5KSl7ZVtDLmhjU2V0TWlsbGlzZWNvbmRzXSh4Pj1jLnNlY29uZD8wOkEqTWF0aC5mbG9vcihlLmdldE1pbGxpc2Vjb25kcygpL0EpKTtpZih4Pj1jLnNlY29uZCllW0MuaGNTZXRTZWNvbmRzXSh4Pj1jLm1pbnV0ZT8wOkEqTWF0aC5mbG9vcihlLmdldFNlY29uZHMoKS9BKSk7aWYoeD49Yy5taW51dGUpZVtDLmhjU2V0TWludXRlc10oeD49Yy5ob3VyPzA6QSpNYXRoLmZsb29yKGVbQy5oY0dldE1pbnV0ZXNdKCkvQSkpO2lmKHg+PWMuaG91cillW0MuaGNTZXRIb3Vyc10oeD49Yy5kYXk/MDpBKk1hdGguZmxvb3IoZVtDLmhjR2V0SG91cnNdKCkvQSkpO2lmKHg+PWMuZGF5KWVbQy5oY1NldERhdGVdKHg+PWMubW9udGg/MTpBKk1hdGguZmxvb3IoZVtDLmhjR2V0RGF0ZV0oKS9BKSk7eD49Yy5tb250aCYmKGVbQy5oY1NldE1vbnRoXSh4Pj1jLnllYXI/MDpBKk1hdGguZmxvb3IoZVtDLmhjR2V0TW9udGhdKCkvQSkpLEY9ZVtDLmhjR2V0RnVsbFllYXJdKCkpO1xuaWYoeD49Yy55ZWFyKWVbQy5oY1NldEZ1bGxZZWFyXShGLUYlQSk7aWYoeD09PWMud2VlayllW0MuaGNTZXREYXRlXShlW0MuaGNHZXREYXRlXSgpLWVbQy5oY0dldERheV0oKStkKG0sMSkpO0Y9ZVtDLmhjR2V0RnVsbFllYXJdKCk7bT1lW0MuaGNHZXRNb250aF0oKTt2YXIgdz1lW0MuaGNHZXREYXRlXSgpLEs9ZVtDLmhjR2V0SG91cnNdKCk7aWYoQy5oY1RpbWV6b25lT2Zmc2V0fHxDLmhjR2V0VGltZXpvbmVPZmZzZXQpaz0oIW58fCEhQy5oY0dldFRpbWV6b25lT2Zmc2V0KSYmKHQteT40KmMubW9udGh8fGwoeSkhPT1sKHQpKSxlPWUuZ2V0VGltZSgpLGU9bmV3IEMoZStsKGUpKTtuPWUuZ2V0VGltZSgpO2Zvcih5PTE7bjx0OyliLnB1c2gobiksbj14PT09Yy55ZWFyP3IoRit5KkEsMCk6eD09PWMubW9udGg/cihGLG0reSpBKToha3x8eCE9PWMuZGF5JiZ4IT09Yy53ZWVrP2smJng9PT1jLmhvdXI/cihGLG0sdyxLK3kqQSk6bit4KkE6cihGLG0sdyt5KkEqKHg9PT1jLmRheT8xOlxuNykpLHkrKztiLnB1c2gobik7eDw9Yy5ob3VyJiZmKGIsZnVuY3Rpb24oYSl7XCIwMDAwMDAwMDBcIj09PUcoXCIlSCVNJVMlTFwiLGEpJiYocVthXT1cImRheVwiKX0pfWIuaW5mbz1wKGEse2hpZ2hlclJhbmtzOnEsdG90YWxSYW5nZTp4KkF9KTtyZXR1cm4gYn07RC5wcm90b3R5cGUubm9ybWFsaXplVGltZVRpY2tJbnRlcnZhbD1mdW5jdGlvbihhLGQpe3ZhciBmPWR8fFtbXCJtaWxsaXNlY29uZFwiLFsxLDIsNSwxMCwyMCwyNSw1MCwxMDAsMjAwLDUwMF1dLFtcInNlY29uZFwiLFsxLDIsNSwxMCwxNSwzMF1dLFtcIm1pbnV0ZVwiLFsxLDIsNSwxMCwxNSwzMF1dLFtcImhvdXJcIixbMSwyLDMsNCw2LDgsMTJdXSxbXCJkYXlcIixbMSwyXV0sW1wid2Vla1wiLFsxLDJdXSxbXCJtb250aFwiLFsxLDIsMyw0LDZdXSxbXCJ5ZWFyXCIsbnVsbF1dO2Q9ZltmLmxlbmd0aC0xXTt2YXIgbT1jW2RbMF1dLGI9ZFsxXSxxO2ZvcihxPTA7cTxmLmxlbmd0aCYmIShkPWZbcV0sbT1jW2RbMF1dLGI9ZFsxXSxmW3ErMV0mJmE8PShtKlxuYltiLmxlbmd0aC0xXStjW2ZbcSsxXVswXV0pLzIpO3ErKyk7bT09PWMueWVhciYmYTw1Km0mJihiPVsxLDIsNV0pO2E9dShhL20sYixcInllYXJcIj09PWRbMF0/TWF0aC5tYXgodihhL20pLDEpOjEpO3JldHVybnt1bml0UmFuZ2U6bSxjb3VudDphLHVuaXROYW1lOmRbMF19fX0pKEwpOyhmdW5jdGlvbihhKXt2YXIgRD1hLkF4aXMsQz1hLmdldE1hZ25pdHVkZSxHPWEubWFwLEk9YS5ub3JtYWxpemVUaWNrSW50ZXJ2YWwsaD1hLnBpY2s7RC5wcm90b3R5cGUuZ2V0TG9nVGlja1Bvc2l0aW9ucz1mdW5jdGlvbihhLHAsdixsKXt2YXIgZj10aGlzLm9wdGlvbnMsZD10aGlzLmxlbixjPXRoaXMubGluMmxvZyxuPXRoaXMubG9nMmxpbix5PVtdO2x8fCh0aGlzLl9taW5vckF1dG9JbnRlcnZhbD1udWxsKTtpZiguNTw9YSlhPU1hdGgucm91bmQoYSkseT10aGlzLmdldExpbmVhclRpY2tQb3NpdGlvbnMoYSxwLHYpO2Vsc2UgaWYoLjA4PD1hKWZvcih2YXIgZD1NYXRoLmZsb29yKHApLHQsbSxcbmIscSx6LGY9LjM8YT9bMSwyLDRdOi4xNTxhP1sxLDIsNCw2LDhdOlsxLDIsMyw0LDUsNiw3LDgsOV07ZDx2KzEmJiF6O2QrKylmb3IobT1mLmxlbmd0aCx0PTA7dDxtJiYhejt0KyspYj1uKGMoZCkqZlt0XSksYj5wJiYoIWx8fHE8PXYpJiZ2b2lkIDAhPT1xJiZ5LnB1c2gocSkscT52JiYoej0hMCkscT1iO2Vsc2UgcD1jKHApLHY9Yyh2KSxhPWZbbD9cIm1pbm9yVGlja0ludGVydmFsXCI6XCJ0aWNrSW50ZXJ2YWxcIl0sYT1oKFwiYXV0b1wiPT09YT9udWxsOmEsdGhpcy5fbWlub3JBdXRvSW50ZXJ2YWwsZi50aWNrUGl4ZWxJbnRlcnZhbC8obD81OjEpKih2LXApLygobD9kL3RoaXMudGlja1Bvc2l0aW9ucy5sZW5ndGg6ZCl8fDEpKSxhPUkoYSxudWxsLEMoYSkpLHk9Ryh0aGlzLmdldExpbmVhclRpY2tQb3NpdGlvbnMoYSxwLHYpLG4pLGx8fCh0aGlzLl9taW5vckF1dG9JbnRlcnZhbD1hLzUpO2x8fCh0aGlzLnRpY2tJbnRlcnZhbD1hKTtyZXR1cm4geX07RC5wcm90b3R5cGUubG9nMmxpbj1cbmZ1bmN0aW9uKGEpe3JldHVybiBNYXRoLmxvZyhhKS9NYXRoLkxOMTB9O0QucHJvdG90eXBlLmxpbjJsb2c9ZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGgucG93KDEwLGEpfX0pKEwpOyhmdW5jdGlvbihhKXt2YXIgRD1hLmRhdGVGb3JtYXQsQz1hLmVhY2gsRz1hLmV4dGVuZCxJPWEuZm9ybWF0LGg9YS5pc051bWJlcixmPWEubWFwLHA9YS5tZXJnZSx2PWEucGljayxsPWEuc3BsYXQsdT1hLnN5bmNUaW1lb3V0LGQ9YS50aW1lVW5pdHM7YS5Ub29sdGlwPWZ1bmN0aW9uKCl7dGhpcy5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX07YS5Ub29sdGlwLnByb3RvdHlwZT17aW5pdDpmdW5jdGlvbihhLGQpe3RoaXMuY2hhcnQ9YTt0aGlzLm9wdGlvbnM9ZDt0aGlzLmNyb3NzaGFpcnM9W107dGhpcy5ub3c9e3g6MCx5OjB9O3RoaXMuaXNIaWRkZW49ITA7dGhpcy5zcGxpdD1kLnNwbGl0JiYhYS5pbnZlcnRlZDt0aGlzLnNoYXJlZD1kLnNoYXJlZHx8dGhpcy5zcGxpdH0sY2xlYW5TcGxpdDpmdW5jdGlvbihhKXtDKHRoaXMuY2hhcnQuc2VyaWVzLFxuZnVuY3Rpb24oYyl7dmFyIGQ9YyYmYy50dDtkJiYoIWQuaXNBY3RpdmV8fGE/Yy50dD1kLmRlc3Ryb3koKTpkLmlzQWN0aXZlPSExKX0pfSxnZXRMYWJlbDpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY2hhcnQucmVuZGVyZXIsZD10aGlzLm9wdGlvbnM7dGhpcy5sYWJlbHx8KHRoaXMuc3BsaXQ/dGhpcy5sYWJlbD1hLmcoXCJ0b29sdGlwXCIpOih0aGlzLmxhYmVsPWEubGFiZWwoXCJcIiwwLDAsZC5zaGFwZXx8XCJjYWxsb3V0XCIsbnVsbCxudWxsLGQudXNlSFRNTCxudWxsLFwidG9vbHRpcFwiKS5hdHRyKHtwYWRkaW5nOmQucGFkZGluZyxyOmQuYm9yZGVyUmFkaXVzfSksdGhpcy5sYWJlbC5hdHRyKHtmaWxsOmQuYmFja2dyb3VuZENvbG9yLFwic3Ryb2tlLXdpZHRoXCI6ZC5ib3JkZXJXaWR0aH0pLmNzcyhkLnN0eWxlKS5zaGFkb3coZC5zaGFkb3cpKSx0aGlzLmxhYmVsLmF0dHIoe3pJbmRleDo4fSkuYWRkKCkpO3JldHVybiB0aGlzLmxhYmVsfSx1cGRhdGU6ZnVuY3Rpb24oYSl7dGhpcy5kZXN0cm95KCk7XG50aGlzLmluaXQodGhpcy5jaGFydCxwKCEwLHRoaXMub3B0aW9ucyxhKSl9LGRlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLmxhYmVsJiYodGhpcy5sYWJlbD10aGlzLmxhYmVsLmRlc3Ryb3koKSk7dGhpcy5zcGxpdCYmdGhpcy50dCYmKHRoaXMuY2xlYW5TcGxpdCh0aGlzLmNoYXJ0LCEwKSx0aGlzLnR0PXRoaXMudHQuZGVzdHJveSgpKTtjbGVhclRpbWVvdXQodGhpcy5oaWRlVGltZXIpO2NsZWFyVGltZW91dCh0aGlzLnRvb2x0aXBUaW1lb3V0KX0sbW92ZTpmdW5jdGlvbihhLGQsZix0KXt2YXIgYz10aGlzLGI9Yy5ub3cscT0hMSE9PWMub3B0aW9ucy5hbmltYXRpb24mJiFjLmlzSGlkZGVuJiYoMTxNYXRoLmFicyhhLWIueCl8fDE8TWF0aC5hYnMoZC1iLnkpKSxuPWMuZm9sbG93UG9pbnRlcnx8MTxjLmxlbjtHKGIse3g6cT8oMipiLngrYSkvMzphLHk6cT8oYi55K2QpLzI6ZCxhbmNob3JYOm4/dm9pZCAwOnE/KDIqYi5hbmNob3JYK2YpLzM6ZixhbmNob3JZOm4/dm9pZCAwOnE/KGIuYW5jaG9yWStcbnQpLzI6dH0pO2MuZ2V0TGFiZWwoKS5hdHRyKGIpO3EmJihjbGVhclRpbWVvdXQodGhpcy50b29sdGlwVGltZW91dCksdGhpcy50b29sdGlwVGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YyYmYy5tb3ZlKGEsZCxmLHQpfSwzMikpfSxoaWRlOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXM7Y2xlYXJUaW1lb3V0KHRoaXMuaGlkZVRpbWVyKTthPXYoYSx0aGlzLm9wdGlvbnMuaGlkZURlbGF5LDUwMCk7dGhpcy5pc0hpZGRlbnx8KHRoaXMuaGlkZVRpbWVyPXUoZnVuY3Rpb24oKXtjLmdldExhYmVsKClbYT9cImZhZGVPdXRcIjpcImhpZGVcIl0oKTtjLmlzSGlkZGVuPSEwfSxhKSl9LGdldEFuY2hvcjpmdW5jdGlvbihhLGQpe3ZhciBjLG49dGhpcy5jaGFydCxtPW4uaW52ZXJ0ZWQsYj1uLnBsb3RUb3AscT1uLnBsb3RMZWZ0LHo9MCxoPTAsZSxyO2E9bChhKTtjPWFbMF0udG9vbHRpcFBvczt0aGlzLmZvbGxvd1BvaW50ZXImJmQmJih2b2lkIDA9PT1kLmNoYXJ0WCYmKGQ9bi5wb2ludGVyLm5vcm1hbGl6ZShkKSksXG5jPVtkLmNoYXJ0WC1uLnBsb3RMZWZ0LGQuY2hhcnRZLWJdKTtjfHwoQyhhLGZ1bmN0aW9uKGEpe2U9YS5zZXJpZXMueUF4aXM7cj1hLnNlcmllcy54QXhpczt6Kz1hLnBsb3RYKyghbSYmcj9yLmxlZnQtcTowKTtoKz0oYS5wbG90TG93PyhhLnBsb3RMb3crYS5wbG90SGlnaCkvMjphLnBsb3RZKSsoIW0mJmU/ZS50b3AtYjowKX0pLHovPWEubGVuZ3RoLGgvPWEubGVuZ3RoLGM9W20/bi5wbG90V2lkdGgtaDp6LHRoaXMuc2hhcmVkJiYhbSYmMTxhLmxlbmd0aCYmZD9kLmNoYXJ0WS1iOm0/bi5wbG90SGVpZ2h0LXo6aF0pO3JldHVybiBmKGMsTWF0aC5yb3VuZCl9LGdldFBvc2l0aW9uOmZ1bmN0aW9uKGEsZCxmKXt2YXIgYz10aGlzLmNoYXJ0LG09dGhpcy5kaXN0YW5jZSxiPXt9LHE9Zi5ofHwwLG4saD1bXCJ5XCIsYy5jaGFydEhlaWdodCxkLGYucGxvdFkrYy5wbG90VG9wLGMucGxvdFRvcCxjLnBsb3RUb3ArYy5wbG90SGVpZ2h0XSxlPVtcInhcIixjLmNoYXJ0V2lkdGgsYSxmLnBsb3RYK1xuYy5wbG90TGVmdCxjLnBsb3RMZWZ0LGMucGxvdExlZnQrYy5wbG90V2lkdGhdLHI9IXRoaXMuZm9sbG93UG9pbnRlciYmdihmLnR0QmVsb3csIWMuaW52ZXJ0ZWQ9PT0hIWYubmVnYXRpdmUpLGw9ZnVuY3Rpb24oYSxjLGssZyxlLGQpe3ZhciBmPWs8Zy1tLHc9ZyttK2s8YyxuPWctbS1rO2crPW07aWYociYmdyliW2FdPWc7ZWxzZSBpZighciYmZiliW2FdPW47ZWxzZSBpZihmKWJbYV09TWF0aC5taW4oZC1rLDA+bi1xP246bi1xKTtlbHNlIGlmKHcpYlthXT1NYXRoLm1heChlLGcrcStrPmM/ZzpnK3EpO2Vsc2UgcmV0dXJuITF9LHA9ZnVuY3Rpb24oYSxjLGssZyl7dmFyIGU7ZzxtfHxnPmMtbT9lPSExOmJbYV09ZzxrLzI/MTpnPmMtay8yP2Mtay0yOmctay8yO3JldHVybiBlfSxrPWZ1bmN0aW9uKGEpe3ZhciBiPWg7aD1lO2U9YjtuPWF9LHc9ZnVuY3Rpb24oKXshMSE9PWwuYXBwbHkoMCxoKT8hMSE9PXAuYXBwbHkoMCxlKXx8bnx8KGsoITApLHcoKSk6bj9iLng9Yi55PTA6KGsoITApLFxudygpKX07KGMuaW52ZXJ0ZWR8fDE8dGhpcy5sZW4pJiZrKCk7dygpO3JldHVybiBifSxkZWZhdWx0Rm9ybWF0dGVyOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMucG9pbnRzfHxsKHRoaXMpLGQ7ZD1bYS50b29sdGlwRm9vdGVySGVhZGVyRm9ybWF0dGVyKGNbMF0pXTtkPWQuY29uY2F0KGEuYm9keUZvcm1hdHRlcihjKSk7ZC5wdXNoKGEudG9vbHRpcEZvb3RlckhlYWRlckZvcm1hdHRlcihjWzBdLCEwKSk7cmV0dXJuIGR9LHJlZnJlc2g6ZnVuY3Rpb24oYSxkKXt2YXIgYz10aGlzLmNoYXJ0LGYsbT10aGlzLm9wdGlvbnMsYixxLG49e30saD1bXTtmPW0uZm9ybWF0dGVyfHx0aGlzLmRlZmF1bHRGb3JtYXR0ZXI7dmFyIG49Yy5ob3ZlclBvaW50cyxlPXRoaXMuc2hhcmVkO2NsZWFyVGltZW91dCh0aGlzLmhpZGVUaW1lcik7dGhpcy5mb2xsb3dQb2ludGVyPWwoYSlbMF0uc2VyaWVzLnRvb2x0aXBPcHRpb25zLmZvbGxvd1BvaW50ZXI7cT10aGlzLmdldEFuY2hvcihhLGQpO2Q9cVswXTtiPVxucVsxXTshZXx8YS5zZXJpZXMmJmEuc2VyaWVzLm5vU2hhcmVkVG9vbHRpcD9uPWEuZ2V0TGFiZWxDb25maWcoKTooYy5ob3ZlclBvaW50cz1hLG4mJkMobixmdW5jdGlvbihhKXthLnNldFN0YXRlKCl9KSxDKGEsZnVuY3Rpb24oYSl7YS5zZXRTdGF0ZShcImhvdmVyXCIpO2gucHVzaChhLmdldExhYmVsQ29uZmlnKCkpfSksbj17eDphWzBdLmNhdGVnb3J5LHk6YVswXS55fSxuLnBvaW50cz1oLHRoaXMubGVuPWgubGVuZ3RoLGE9YVswXSk7bj1mLmNhbGwobix0aGlzKTtlPWEuc2VyaWVzO3RoaXMuZGlzdGFuY2U9dihlLnRvb2x0aXBPcHRpb25zLmRpc3RhbmNlLDE2KTshMT09PW4/dGhpcy5oaWRlKCk6KGY9dGhpcy5nZXRMYWJlbCgpLHRoaXMuaXNIaWRkZW4mJmYuYXR0cih7b3BhY2l0eToxfSkuc2hvdygpLHRoaXMuc3BsaXQ/dGhpcy5yZW5kZXJTcGxpdChuLGMuaG92ZXJQb2ludHMpOihmLmF0dHIoe3RleHQ6biYmbi5qb2luP24uam9pbihcIlwiKTpufSksZi5yZW1vdmVDbGFzcygvaGlnaGNoYXJ0cy1jb2xvci1bXFxkXSsvZykuYWRkQ2xhc3MoXCJoaWdoY2hhcnRzLWNvbG9yLVwiK1xudihhLmNvbG9ySW5kZXgsZS5jb2xvckluZGV4KSksZi5hdHRyKHtzdHJva2U6bS5ib3JkZXJDb2xvcnx8YS5jb2xvcnx8ZS5jb2xvcnx8XCIjNjY2NjY2XCJ9KSx0aGlzLnVwZGF0ZVBvc2l0aW9uKHtwbG90WDpkLHBsb3RZOmIsbmVnYXRpdmU6YS5uZWdhdGl2ZSx0dEJlbG93OmEudHRCZWxvdyxoOnFbMl18fDB9KSksdGhpcy5pc0hpZGRlbj0hMSl9LHJlbmRlclNwbGl0OmZ1bmN0aW9uKGMsZCl7dmFyIGY9dGhpcyxuPVtdLG09dGhpcy5jaGFydCxiPW0ucmVuZGVyZXIscT0hMCxoPXRoaXMub3B0aW9ucyxsLGU9dGhpcy5nZXRMYWJlbCgpO0MoYy5zbGljZSgwLGMubGVuZ3RoLTEpLGZ1bmN0aW9uKGEsYyl7Yz1kW2MtMV18fHtpc0hlYWRlcjohMCxwbG90WDpkWzBdLnBsb3RYfTt2YXIgcj1jLnNlcmllc3x8ZixrPXIudHQsdz1jLnNlcmllc3x8e30sdD1cImhpZ2hjaGFydHMtY29sb3ItXCIrdihjLmNvbG9ySW5kZXgsdy5jb2xvckluZGV4LFwibm9uZVwiKTtrfHwoci50dD1rPWIubGFiZWwobnVsbCxcbm51bGwsbnVsbCxcImNhbGxvdXRcIikuYWRkQ2xhc3MoXCJoaWdoY2hhcnRzLXRvb2x0aXAtYm94IFwiK3QpLmF0dHIoe3BhZGRpbmc6aC5wYWRkaW5nLHI6aC5ib3JkZXJSYWRpdXMsZmlsbDpoLmJhY2tncm91bmRDb2xvcixzdHJva2U6Yy5jb2xvcnx8dy5jb2xvcnx8XCIjMzMzMzMzXCIsXCJzdHJva2Utd2lkdGhcIjpoLmJvcmRlcldpZHRofSkuYWRkKGUpKTtrLmlzQWN0aXZlPSEwO2suYXR0cih7dGV4dDphfSk7ay5jc3MoaC5zdHlsZSk7YT1rLmdldEJCb3goKTt3PWEud2lkdGgray5zdHJva2VXaWR0aCgpO2MuaXNIZWFkZXI/KGw9YS5oZWlnaHQsdz1NYXRoLm1heCgwLE1hdGgubWluKGMucGxvdFgrbS5wbG90TGVmdC13LzIsbS5jaGFydFdpZHRoLXcpKSk6dz1jLnBsb3RYK20ucGxvdExlZnQtdihoLmRpc3RhbmNlLDE2KS13OzA+dyYmKHE9ITEpO2E9KGMuc2VyaWVzJiZjLnNlcmllcy55QXhpcyYmYy5zZXJpZXMueUF4aXMucG9zKSsoYy5wbG90WXx8MCk7YS09bS5wbG90VG9wO24ucHVzaCh7dGFyZ2V0OmMuaXNIZWFkZXI/XG5tLnBsb3RIZWlnaHQrbDphLHJhbms6Yy5pc0hlYWRlcj8xOjAsc2l6ZTpyLnR0LmdldEJCb3goKS5oZWlnaHQrMSxwb2ludDpjLHg6dyx0dDprfSl9KTt0aGlzLmNsZWFuU3BsaXQoKTthLmRpc3RyaWJ1dGUobixtLnBsb3RIZWlnaHQrbCk7QyhuLGZ1bmN0aW9uKGEpe3ZhciBiPWEucG9pbnQsYz1iLnNlcmllczthLnR0LmF0dHIoe3Zpc2liaWxpdHk6dm9pZCAwPT09YS5wb3M/XCJoaWRkZW5cIjpcImluaGVyaXRcIix4OnF8fGIuaXNIZWFkZXI/YS54OmIucGxvdFgrbS5wbG90TGVmdCt2KGguZGlzdGFuY2UsMTYpLHk6YS5wb3MrbS5wbG90VG9wLGFuY2hvclg6Yi5pc0hlYWRlcj9iLnBsb3RYK20ucGxvdExlZnQ6Yi5wbG90WCtjLnhBeGlzLnBvcyxhbmNob3JZOmIuaXNIZWFkZXI/YS5wb3MrbS5wbG90VG9wLTE1OmIucGxvdFkrYy55QXhpcy5wb3N9KX0pfSx1cGRhdGVQb3NpdGlvbjpmdW5jdGlvbihhKXt2YXIgYz10aGlzLmNoYXJ0LGQ9dGhpcy5nZXRMYWJlbCgpLGQ9KHRoaXMub3B0aW9ucy5wb3NpdGlvbmVyfHxcbnRoaXMuZ2V0UG9zaXRpb24pLmNhbGwodGhpcyxkLndpZHRoLGQuaGVpZ2h0LGEpO3RoaXMubW92ZShNYXRoLnJvdW5kKGQueCksTWF0aC5yb3VuZChkLnl8fDApLGEucGxvdFgrYy5wbG90TGVmdCxhLnBsb3RZK2MucGxvdFRvcCl9LGdldFhEYXRlRm9ybWF0OmZ1bmN0aW9uKGEsZixoKXt2YXIgYztmPWYuZGF0ZVRpbWVMYWJlbEZvcm1hdHM7dmFyIG09aCYmaC5jbG9zZXN0UG9pbnRSYW5nZSxiLHE9e21pbGxpc2Vjb25kOjE1LHNlY29uZDoxMixtaW51dGU6OSxob3VyOjYsZGF5OjN9LG4sbD1cIm1pbGxpc2Vjb25kXCI7aWYobSl7bj1EKFwiJW0tJWQgJUg6JU06JVMuJUxcIixhLngpO2ZvcihiIGluIGQpe2lmKG09PT1kLndlZWsmJitEKFwiJXdcIixhLngpPT09aC5vcHRpb25zLnN0YXJ0T2ZXZWVrJiZcIjAwOjAwOjAwLjAwMFwiPT09bi5zdWJzdHIoNikpe2I9XCJ3ZWVrXCI7YnJlYWt9aWYoZFtiXT5tKXtiPWw7YnJlYWt9aWYocVtiXSYmbi5zdWJzdHIocVtiXSkhPT1cIjAxLTAxIDAwOjAwOjAwLjAwMFwiLnN1YnN0cihxW2JdKSlicmVhaztcblwid2Vla1wiIT09YiYmKGw9Yil9YiYmKGM9ZltiXSl9ZWxzZSBjPWYuZGF5O3JldHVybiBjfHxmLnllYXJ9LHRvb2x0aXBGb290ZXJIZWFkZXJGb3JtYXR0ZXI6ZnVuY3Rpb24oYSxkKXt2YXIgYz1kP1wiZm9vdGVyXCI6XCJoZWFkZXJcIjtkPWEuc2VyaWVzO3ZhciBmPWQudG9vbHRpcE9wdGlvbnMsbT1mLnhEYXRlRm9ybWF0LGI9ZC54QXhpcyxxPWImJlwiZGF0ZXRpbWVcIj09PWIub3B0aW9ucy50eXBlJiZoKGEua2V5KSxjPWZbYytcIkZvcm1hdFwiXTtxJiYhbSYmKG09dGhpcy5nZXRYRGF0ZUZvcm1hdChhLGYsYikpO3EmJm0mJihjPWMucmVwbGFjZShcIntwb2ludC5rZXl9XCIsXCJ7cG9pbnQua2V5OlwiK20rXCJ9XCIpKTtyZXR1cm4gSShjLHtwb2ludDphLHNlcmllczpkfSl9LGJvZHlGb3JtYXR0ZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGYoYSxmdW5jdGlvbihhKXt2YXIgYz1hLnNlcmllcy50b29sdGlwT3B0aW9ucztyZXR1cm4oYy5wb2ludEZvcm1hdHRlcnx8YS5wb2ludC50b29sdGlwRm9ybWF0dGVyKS5jYWxsKGEucG9pbnQsXG5jLnBvaW50Rm9ybWF0KX0pfX19KShMKTsoZnVuY3Rpb24oYSl7dmFyIEQ9YS5hZGRFdmVudCxDPWEuYXR0cixHPWEuY2hhcnRzLEk9YS5jb2xvcixoPWEuY3NzLGY9YS5kZWZpbmVkLHA9YS5kb2Msdj1hLmVhY2gsbD1hLmV4dGVuZCx1PWEuZmlyZUV2ZW50LGQ9YS5vZmZzZXQsYz1hLnBpY2ssbj1hLnJlbW92ZUV2ZW50LHk9YS5zcGxhdCx0PWEuVG9vbHRpcCxtPWEud2luO2EuUG9pbnRlcj1mdW5jdGlvbihhLGMpe3RoaXMuaW5pdChhLGMpfTthLlBvaW50ZXIucHJvdG90eXBlPXtpbml0OmZ1bmN0aW9uKGEsbSl7dGhpcy5vcHRpb25zPW07dGhpcy5jaGFydD1hO3RoaXMucnVuQ2hhcnRDbGljaz1tLmNoYXJ0LmV2ZW50cyYmISFtLmNoYXJ0LmV2ZW50cy5jbGljazt0aGlzLnBpbmNoRG93bj1bXTt0aGlzLmxhc3RWYWxpZFRvdWNoPXt9O3QmJm0udG9vbHRpcC5lbmFibGVkJiYoYS50b29sdGlwPW5ldyB0KGEsbS50b29sdGlwKSx0aGlzLmZvbGxvd1RvdWNoTW92ZT1jKG0udG9vbHRpcC5mb2xsb3dUb3VjaE1vdmUsXG4hMCkpO3RoaXMuc2V0RE9NRXZlbnRzKCl9LHpvb21PcHRpb246ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5jaGFydCxtPWIub3B0aW9ucy5jaGFydCxkPW0uem9vbVR5cGV8fFwiXCIsYj1iLmludmVydGVkOy90b3VjaC8udGVzdChhLnR5cGUpJiYoZD1jKG0ucGluY2hUeXBlLGQpKTt0aGlzLnpvb21YPWE9L3gvLnRlc3QoZCk7dGhpcy56b29tWT1kPS95Ly50ZXN0KGQpO3RoaXMuem9vbUhvcj1hJiYhYnx8ZCYmYjt0aGlzLnpvb21WZXJ0PWQmJiFifHxhJiZiO3RoaXMuaGFzWm9vbT1hfHxkfSxub3JtYWxpemU6ZnVuY3Rpb24oYSxjKXt2YXIgYixxO2E9YXx8bS5ldmVudDthLnRhcmdldHx8KGEudGFyZ2V0PWEuc3JjRWxlbWVudCk7cT1hLnRvdWNoZXM/YS50b3VjaGVzLmxlbmd0aD9hLnRvdWNoZXMuaXRlbSgwKTphLmNoYW5nZWRUb3VjaGVzWzBdOmE7Y3x8KHRoaXMuY2hhcnRQb3NpdGlvbj1jPWQodGhpcy5jaGFydC5jb250YWluZXIpKTt2b2lkIDA9PT1xLnBhZ2VYPyhiPU1hdGgubWF4KGEueCxcbmEuY2xpZW50WC1jLmxlZnQpLGM9YS55KTooYj1xLnBhZ2VYLWMubGVmdCxjPXEucGFnZVktYy50b3ApO3JldHVybiBsKGEse2NoYXJ0WDpNYXRoLnJvdW5kKGIpLGNoYXJ0WTpNYXRoLnJvdW5kKGMpfSl9LGdldENvb3JkaW5hdGVzOmZ1bmN0aW9uKGEpe3ZhciBiPXt4QXhpczpbXSx5QXhpczpbXX07dih0aGlzLmNoYXJ0LmF4ZXMsZnVuY3Rpb24oYyl7YltjLmlzWEF4aXM/XCJ4QXhpc1wiOlwieUF4aXNcIl0ucHVzaCh7YXhpczpjLHZhbHVlOmMudG9WYWx1ZShhW2MuaG9yaXo/XCJjaGFydFhcIjpcImNoYXJ0WVwiXSl9KX0pO3JldHVybiBifSxydW5Qb2ludEFjdGlvbnM6ZnVuY3Rpb24oYil7dmFyIG09dGhpcy5jaGFydCxkPW0uc2VyaWVzLGY9bS50b29sdGlwLGU9Zj9mLnNoYXJlZDohMSxyPSEwLG49bS5ob3ZlclBvaW50LGg9bS5ob3ZlclNlcmllcyxrLHcsbCx0PVtdLHU7aWYoIWUmJiFoKWZvcihrPTA7azxkLmxlbmd0aDtrKyspaWYoZFtrXS5kaXJlY3RUb3VjaHx8IWRba10ub3B0aW9ucy5zdGlja3lUcmFja2luZylkPVxuW107aCYmKGU/aC5ub1NoYXJlZFRvb2x0aXA6aC5kaXJlY3RUb3VjaCkmJm4/dD1bbl06KGV8fCFofHxoLm9wdGlvbnMuc3RpY2t5VHJhY2tpbmd8fChkPVtoXSksdihkLGZ1bmN0aW9uKGEpe3c9YS5ub1NoYXJlZFRvb2x0aXAmJmU7bD0hZSYmYS5kaXJlY3RUb3VjaDthLnZpc2libGUmJiF3JiYhbCYmYyhhLm9wdGlvbnMuZW5hYmxlTW91c2VUcmFja2luZywhMCkmJih1PWEuc2VhcmNoUG9pbnQoYiwhdyYmMT09PWEua2REaW1lbnNpb25zKSkmJnUuc2VyaWVzJiZ0LnB1c2godSl9KSx0LnNvcnQoZnVuY3Rpb24oYSxiKXt2YXIgYz1hLmRpc3RYLWIuZGlzdFgsZz1hLmRpc3QtYi5kaXN0LGs9Yi5zZXJpZXMuZ3JvdXAuekluZGV4LWEuc2VyaWVzLmdyb3VwLnpJbmRleDtyZXR1cm4gMCE9PWMmJmU/YzowIT09Zz9nOjAhPT1rP2s6YS5zZXJpZXMuaW5kZXg+Yi5zZXJpZXMuaW5kZXg/LTE6MX0pKTtpZihlKWZvcihrPXQubGVuZ3RoO2stLTspKHRba10ueCE9PXRbMF0ueHx8dFtrXS5zZXJpZXMubm9TaGFyZWRUb29sdGlwKSYmXG50LnNwbGljZShrLDEpO2lmKHRbMF0mJih0WzBdIT09dGhpcy5wcmV2S0RQb2ludHx8ZiYmZi5pc0hpZGRlbikpe2lmKGUmJiF0WzBdLnNlcmllcy5ub1NoYXJlZFRvb2x0aXApe2ZvcihrPTA7azx0Lmxlbmd0aDtrKyspdFtrXS5vbk1vdXNlT3ZlcihiLHRba10hPT0oaCYmaC5kaXJlY3RUb3VjaCYmbnx8dFswXSkpO3QubGVuZ3RoJiZmJiZmLnJlZnJlc2godC5zb3J0KGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuc2VyaWVzLmluZGV4LWIuc2VyaWVzLmluZGV4fSksYil9ZWxzZSBpZihmJiZmLnJlZnJlc2godFswXSxiKSwhaHx8IWguZGlyZWN0VG91Y2gpdFswXS5vbk1vdXNlT3ZlcihiKTt0aGlzLnByZXZLRFBvaW50PXRbMF07cj0hMX1yJiYoZD1oJiZoLnRvb2x0aXBPcHRpb25zLmZvbGxvd1BvaW50ZXIsZiYmZCYmIWYuaXNIaWRkZW4mJihkPWYuZ2V0QW5jaG9yKFt7fV0sYiksZi51cGRhdGVQb3NpdGlvbih7cGxvdFg6ZFswXSxwbG90WTpkWzFdfSkpKTt0aGlzLnVuRG9jTW91c2VNb3ZlfHxcbih0aGlzLnVuRG9jTW91c2VNb3ZlPUQocCxcIm1vdXNlbW92ZVwiLGZ1bmN0aW9uKGIpe2lmKEdbYS5ob3ZlckNoYXJ0SW5kZXhdKUdbYS5ob3ZlckNoYXJ0SW5kZXhdLnBvaW50ZXIub25Eb2N1bWVudE1vdXNlTW92ZShiKX0pKTt2KGU/dDpbYyhuLHRbMF0pXSxmdW5jdGlvbihhKXt2KG0uYXhlcyxmdW5jdGlvbihjKXsoIWF8fGEuc2VyaWVzJiZhLnNlcmllc1tjLmNvbGxdPT09YykmJmMuZHJhd0Nyb3NzaGFpcihiLGEpfSl9KX0scmVzZXQ6ZnVuY3Rpb24oYSxjKXt2YXIgYj10aGlzLmNoYXJ0LG09Yi5ob3ZlclNlcmllcyxlPWIuaG92ZXJQb2ludCxkPWIuaG92ZXJQb2ludHMscT1iLnRvb2x0aXAsZj1xJiZxLnNoYXJlZD9kOmU7YSYmZiYmdih5KGYpLGZ1bmN0aW9uKGIpe2Iuc2VyaWVzLmlzQ2FydGVzaWFuJiZ2b2lkIDA9PT1iLnBsb3RYJiYoYT0hMSl9KTtpZihhKXEmJmYmJihxLnJlZnJlc2goZiksZSYmKGUuc2V0U3RhdGUoZS5zdGF0ZSwhMCksdihiLmF4ZXMsZnVuY3Rpb24oYSl7YS5jcm9zc2hhaXImJlxuYS5kcmF3Q3Jvc3NoYWlyKG51bGwsZSl9KSkpO2Vsc2V7aWYoZSllLm9uTW91c2VPdXQoKTtkJiZ2KGQsZnVuY3Rpb24oYSl7YS5zZXRTdGF0ZSgpfSk7aWYobSltLm9uTW91c2VPdXQoKTtxJiZxLmhpZGUoYyk7dGhpcy51bkRvY01vdXNlTW92ZSYmKHRoaXMudW5Eb2NNb3VzZU1vdmU9dGhpcy51bkRvY01vdXNlTW92ZSgpKTt2KGIuYXhlcyxmdW5jdGlvbihhKXthLmhpZGVDcm9zc2hhaXIoKX0pO3RoaXMuaG92ZXJYPXRoaXMucHJldktEUG9pbnQ9Yi5ob3ZlclBvaW50cz1iLmhvdmVyUG9pbnQ9bnVsbH19LHNjYWxlR3JvdXBzOmZ1bmN0aW9uKGEsYyl7dmFyIGI9dGhpcy5jaGFydCxtO3YoYi5zZXJpZXMsZnVuY3Rpb24oZSl7bT1hfHxlLmdldFBsb3RCb3goKTtlLnhBeGlzJiZlLnhBeGlzLnpvb21FbmFibGVkJiZlLmdyb3VwJiYoZS5ncm91cC5hdHRyKG0pLGUubWFya2VyR3JvdXAmJihlLm1hcmtlckdyb3VwLmF0dHIobSksZS5tYXJrZXJHcm91cC5jbGlwKGM/Yi5jbGlwUmVjdDpcbm51bGwpKSxlLmRhdGFMYWJlbHNHcm91cCYmZS5kYXRhTGFiZWxzR3JvdXAuYXR0cihtKSl9KTtiLmNsaXBSZWN0LmF0dHIoY3x8Yi5jbGlwQm94KX0sZHJhZ1N0YXJ0OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuY2hhcnQ7Yi5tb3VzZUlzRG93bj1hLnR5cGU7Yi5jYW5jZWxDbGljaz0hMTtiLm1vdXNlRG93blg9dGhpcy5tb3VzZURvd25YPWEuY2hhcnRYO2IubW91c2VEb3duWT10aGlzLm1vdXNlRG93blk9YS5jaGFydFl9LGRyYWc6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5jaGFydCxjPWIub3B0aW9ucy5jaGFydCxtPWEuY2hhcnRYLGU9YS5jaGFydFksZD10aGlzLnpvb21Ib3IsZj10aGlzLnpvb21WZXJ0LG49Yi5wbG90TGVmdCxrPWIucGxvdFRvcCx3PWIucGxvdFdpZHRoLGg9Yi5wbG90SGVpZ2h0LGwsdD10aGlzLnNlbGVjdGlvbk1hcmtlcixnPXRoaXMubW91c2VEb3duWCxwPXRoaXMubW91c2VEb3duWSx1PWMucGFuS2V5JiZhW2MucGFuS2V5K1wiS2V5XCJdO3QmJnQudG91Y2h8fFxuKG08bj9tPW46bT5uK3cmJihtPW4rdyksZTxrP2U9azplPmsraCYmKGU9aytoKSx0aGlzLmhhc0RyYWdnZWQ9TWF0aC5zcXJ0KE1hdGgucG93KGctbSwyKStNYXRoLnBvdyhwLWUsMikpLDEwPHRoaXMuaGFzRHJhZ2dlZCYmKGw9Yi5pc0luc2lkZVBsb3QoZy1uLHAtayksYi5oYXNDYXJ0ZXNpYW5TZXJpZXMmJih0aGlzLnpvb21YfHx0aGlzLnpvb21ZKSYmbCYmIXUmJiF0JiYodGhpcy5zZWxlY3Rpb25NYXJrZXI9dD1iLnJlbmRlcmVyLnJlY3QobixrLGQ/MTp3LGY/MTpoLDApLmF0dHIoe2ZpbGw6Yy5zZWxlY3Rpb25NYXJrZXJGaWxsfHxJKFwiIzMzNWNhZFwiKS5zZXRPcGFjaXR5KC4yNSkuZ2V0KCksXCJjbGFzc1wiOlwiaGlnaGNoYXJ0cy1zZWxlY3Rpb24tbWFya2VyXCIsekluZGV4Ojd9KS5hZGQoKSksdCYmZCYmKG0tPWcsdC5hdHRyKHt3aWR0aDpNYXRoLmFicyhtKSx4OigwPG0/MDptKStnfSkpLHQmJmYmJihtPWUtcCx0LmF0dHIoe2hlaWdodDpNYXRoLmFicyhtKSx5OigwPG0/MDptKStcbnB9KSksbCYmIXQmJmMucGFubmluZyYmYi5wYW4oYSxjLnBhbm5pbmcpKSl9LGRyb3A6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcyxjPXRoaXMuY2hhcnQsbT10aGlzLmhhc1BpbmNoZWQ7aWYodGhpcy5zZWxlY3Rpb25NYXJrZXIpe3ZhciBlPXtvcmlnaW5hbEV2ZW50OmEseEF4aXM6W10seUF4aXM6W119LGQ9dGhpcy5zZWxlY3Rpb25NYXJrZXIsbj1kLmF0dHI/ZC5hdHRyKFwieFwiKTpkLngsdD1kLmF0dHI/ZC5hdHRyKFwieVwiKTpkLnksaz1kLmF0dHI/ZC5hdHRyKFwid2lkdGhcIik6ZC53aWR0aCx3PWQuYXR0cj9kLmF0dHIoXCJoZWlnaHRcIik6ZC5oZWlnaHQscDtpZih0aGlzLmhhc0RyYWdnZWR8fG0pdihjLmF4ZXMsZnVuY3Rpb24oYyl7aWYoYy56b29tRW5hYmxlZCYmZihjLm1pbikmJihtfHxiW3t4QXhpczpcInpvb21YXCIseUF4aXM6XCJ6b29tWVwifVtjLmNvbGxdXSkpe3ZhciBkPWMuaG9yaXosZz1cInRvdWNoZW5kXCI9PT1hLnR5cGU/Yy5taW5QaXhlbFBhZGRpbmc6MCxxPWMudG9WYWx1ZSgoZD9cbm46dCkrZyksZD1jLnRvVmFsdWUoKGQ/bitrOnQrdyktZyk7ZVtjLmNvbGxdLnB1c2goe2F4aXM6YyxtaW46TWF0aC5taW4ocSxkKSxtYXg6TWF0aC5tYXgocSxkKX0pO3A9ITB9fSkscCYmdShjLFwic2VsZWN0aW9uXCIsZSxmdW5jdGlvbihhKXtjLnpvb20obChhLG0/e2FuaW1hdGlvbjohMX06bnVsbCkpfSk7dGhpcy5zZWxlY3Rpb25NYXJrZXI9dGhpcy5zZWxlY3Rpb25NYXJrZXIuZGVzdHJveSgpO20mJnRoaXMuc2NhbGVHcm91cHMoKX1jJiYoaChjLmNvbnRhaW5lcix7Y3Vyc29yOmMuX2N1cnNvcn0pLGMuY2FuY2VsQ2xpY2s9MTA8dGhpcy5oYXNEcmFnZ2VkLGMubW91c2VJc0Rvd249dGhpcy5oYXNEcmFnZ2VkPXRoaXMuaGFzUGluY2hlZD0hMSx0aGlzLnBpbmNoRG93bj1bXSl9LG9uQ29udGFpbmVyTW91c2VEb3duOmZ1bmN0aW9uKGEpe2E9dGhpcy5ub3JtYWxpemUoYSk7dGhpcy56b29tT3B0aW9uKGEpO2EucHJldmVudERlZmF1bHQmJmEucHJldmVudERlZmF1bHQoKTt0aGlzLmRyYWdTdGFydChhKX0sXG5vbkRvY3VtZW50TW91c2VVcDpmdW5jdGlvbihiKXtHW2EuaG92ZXJDaGFydEluZGV4XSYmR1thLmhvdmVyQ2hhcnRJbmRleF0ucG9pbnRlci5kcm9wKGIpfSxvbkRvY3VtZW50TW91c2VNb3ZlOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuY2hhcnQsYz10aGlzLmNoYXJ0UG9zaXRpb247YT10aGlzLm5vcm1hbGl6ZShhLGMpOyFjfHx0aGlzLmluQ2xhc3MoYS50YXJnZXQsXCJoaWdoY2hhcnRzLXRyYWNrZXJcIil8fGIuaXNJbnNpZGVQbG90KGEuY2hhcnRYLWIucGxvdExlZnQsYS5jaGFydFktYi5wbG90VG9wKXx8dGhpcy5yZXNldCgpfSxvbkNvbnRhaW5lck1vdXNlTGVhdmU6ZnVuY3Rpb24oYil7dmFyIGM9R1thLmhvdmVyQ2hhcnRJbmRleF07YyYmKGIucmVsYXRlZFRhcmdldHx8Yi50b0VsZW1lbnQpJiYoYy5wb2ludGVyLnJlc2V0KCksYy5wb2ludGVyLmNoYXJ0UG9zaXRpb249bnVsbCl9LG9uQ29udGFpbmVyTW91c2VNb3ZlOmZ1bmN0aW9uKGIpe3ZhciBjPXRoaXMuY2hhcnQ7ZihhLmhvdmVyQ2hhcnRJbmRleCkmJlxuR1thLmhvdmVyQ2hhcnRJbmRleF0mJkdbYS5ob3ZlckNoYXJ0SW5kZXhdLm1vdXNlSXNEb3dufHwoYS5ob3ZlckNoYXJ0SW5kZXg9Yy5pbmRleCk7Yj10aGlzLm5vcm1hbGl6ZShiKTtiLnJldHVyblZhbHVlPSExO1wibW91c2Vkb3duXCI9PT1jLm1vdXNlSXNEb3duJiZ0aGlzLmRyYWcoYik7IXRoaXMuaW5DbGFzcyhiLnRhcmdldCxcImhpZ2hjaGFydHMtdHJhY2tlclwiKSYmIWMuaXNJbnNpZGVQbG90KGIuY2hhcnRYLWMucGxvdExlZnQsYi5jaGFydFktYy5wbG90VG9wKXx8Yy5vcGVuTWVudXx8dGhpcy5ydW5Qb2ludEFjdGlvbnMoYil9LGluQ2xhc3M6ZnVuY3Rpb24oYSxjKXtmb3IodmFyIGI7YTspe2lmKGI9QyhhLFwiY2xhc3NcIikpe2lmKC0xIT09Yi5pbmRleE9mKGMpKXJldHVybiEwO2lmKC0xIT09Yi5pbmRleE9mKFwiaGlnaGNoYXJ0cy1jb250YWluZXJcIikpcmV0dXJuITF9YT1hLnBhcmVudE5vZGV9fSxvblRyYWNrZXJNb3VzZU91dDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmNoYXJ0LmhvdmVyU2VyaWVzO1xuYT1hLnJlbGF0ZWRUYXJnZXR8fGEudG9FbGVtZW50O2lmKCEoIWJ8fCFhfHxiLm9wdGlvbnMuc3RpY2t5VHJhY2tpbmd8fHRoaXMuaW5DbGFzcyhhLFwiaGlnaGNoYXJ0cy10b29sdGlwXCIpfHx0aGlzLmluQ2xhc3MoYSxcImhpZ2hjaGFydHMtc2VyaWVzLVwiK2IuaW5kZXgpJiZ0aGlzLmluQ2xhc3MoYSxcImhpZ2hjaGFydHMtdHJhY2tlclwiKSkpYi5vbk1vdXNlT3V0KCl9LG9uQ29udGFpbmVyQ2xpY2s6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5jaGFydCxjPWIuaG92ZXJQb2ludCxtPWIucGxvdExlZnQsZT1iLnBsb3RUb3A7YT10aGlzLm5vcm1hbGl6ZShhKTtiLmNhbmNlbENsaWNrfHwoYyYmdGhpcy5pbkNsYXNzKGEudGFyZ2V0LFwiaGlnaGNoYXJ0cy10cmFja2VyXCIpPyh1KGMuc2VyaWVzLFwiY2xpY2tcIixsKGEse3BvaW50OmN9KSksYi5ob3ZlclBvaW50JiZjLmZpcmVQb2ludEV2ZW50KFwiY2xpY2tcIixhKSk6KGwoYSx0aGlzLmdldENvb3JkaW5hdGVzKGEpKSxiLmlzSW5zaWRlUGxvdChhLmNoYXJ0WC1cbm0sYS5jaGFydFktZSkmJnUoYixcImNsaWNrXCIsYSkpKX0sc2V0RE9NRXZlbnRzOmZ1bmN0aW9uKCl7dmFyIGI9dGhpcyxjPWIuY2hhcnQuY29udGFpbmVyO2Mub25tb3VzZWRvd249ZnVuY3Rpb24oYSl7Yi5vbkNvbnRhaW5lck1vdXNlRG93bihhKX07Yy5vbm1vdXNlbW92ZT1mdW5jdGlvbihhKXtiLm9uQ29udGFpbmVyTW91c2VNb3ZlKGEpfTtjLm9uY2xpY2s9ZnVuY3Rpb24oYSl7Yi5vbkNvbnRhaW5lckNsaWNrKGEpfTtEKGMsXCJtb3VzZWxlYXZlXCIsYi5vbkNvbnRhaW5lck1vdXNlTGVhdmUpOzE9PT1hLmNoYXJ0Q291bnQmJkQocCxcIm1vdXNldXBcIixiLm9uRG9jdW1lbnRNb3VzZVVwKTthLmhhc1RvdWNoJiYoYy5vbnRvdWNoc3RhcnQ9ZnVuY3Rpb24oYSl7Yi5vbkNvbnRhaW5lclRvdWNoU3RhcnQoYSl9LGMub250b3VjaG1vdmU9ZnVuY3Rpb24oYSl7Yi5vbkNvbnRhaW5lclRvdWNoTW92ZShhKX0sMT09PWEuY2hhcnRDb3VudCYmRChwLFwidG91Y2hlbmRcIixiLm9uRG9jdW1lbnRUb3VjaEVuZCkpfSxcbmRlc3Ryb3k6ZnVuY3Rpb24oKXt2YXIgYjtuKHRoaXMuY2hhcnQuY29udGFpbmVyLFwibW91c2VsZWF2ZVwiLHRoaXMub25Db250YWluZXJNb3VzZUxlYXZlKTthLmNoYXJ0Q291bnR8fChuKHAsXCJtb3VzZXVwXCIsdGhpcy5vbkRvY3VtZW50TW91c2VVcCksbihwLFwidG91Y2hlbmRcIix0aGlzLm9uRG9jdW1lbnRUb3VjaEVuZCkpO2NsZWFySW50ZXJ2YWwodGhpcy50b29sdGlwVGltZW91dCk7Zm9yKGIgaW4gdGhpcyl0aGlzW2JdPW51bGx9fX0pKEwpOyhmdW5jdGlvbihhKXt2YXIgRD1hLmNoYXJ0cyxDPWEuZWFjaCxHPWEuZXh0ZW5kLEk9YS5tYXAsaD1hLm5vb3AsZj1hLnBpY2s7RyhhLlBvaW50ZXIucHJvdG90eXBlLHtwaW5jaFRyYW5zbGF0ZTpmdW5jdGlvbihhLGYsaCx1LGQsYyl7dGhpcy56b29tSG9yJiZ0aGlzLnBpbmNoVHJhbnNsYXRlRGlyZWN0aW9uKCEwLGEsZixoLHUsZCxjKTt0aGlzLnpvb21WZXJ0JiZ0aGlzLnBpbmNoVHJhbnNsYXRlRGlyZWN0aW9uKCExLGEsZixoLHUsZCxcbmMpfSxwaW5jaFRyYW5zbGF0ZURpcmVjdGlvbjpmdW5jdGlvbihhLGYsaCx1LGQsYyxuLHkpe3ZhciB0PXRoaXMuY2hhcnQsbT1hP1wieFwiOlwieVwiLGI9YT9cIlhcIjpcIllcIixxPVwiY2hhcnRcIitiLGw9YT9cIndpZHRoXCI6XCJoZWlnaHRcIixwPXRbXCJwbG90XCIrKGE/XCJMZWZ0XCI6XCJUb3BcIildLGUscix4PXl8fDEsQT10LmludmVydGVkLGs9dC5ib3VuZHNbYT9cImhcIjpcInZcIl0sdz0xPT09Zi5sZW5ndGgsSz1mWzBdW3FdLEo9aFswXVtxXSx2PSF3JiZmWzFdW3FdLGc9IXcmJmhbMV1bcV0sQjtoPWZ1bmN0aW9uKCl7IXcmJjIwPE1hdGguYWJzKEstdikmJih4PXl8fE1hdGguYWJzKEotZykvTWF0aC5hYnMoSy12KSk7cj0ocC1KKS94K0s7ZT10W1wicGxvdFwiKyhhP1wiV2lkdGhcIjpcIkhlaWdodFwiKV0veH07aCgpO2Y9cjtmPGsubWluPyhmPWsubWluLEI9ITApOmYrZT5rLm1heCYmKGY9ay5tYXgtZSxCPSEwKTtCPyhKLT0uOCooSi1uW21dWzBdKSx3fHwoZy09LjgqKGctblttXVsxXSkpLGgoKSk6blttXT1bSixcbmddO0F8fChjW21dPXItcCxjW2xdPWUpO2M9QT8xL3g6eDtkW2xdPWU7ZFttXT1mO3VbQT9hP1wic2NhbGVZXCI6XCJzY2FsZVhcIjpcInNjYWxlXCIrYl09eDt1W1widHJhbnNsYXRlXCIrYl09YypwKyhKLWMqSyl9LHBpbmNoOmZ1bmN0aW9uKGEpe3ZhciBwPXRoaXMsbD1wLmNoYXJ0LHU9cC5waW5jaERvd24sZD1hLnRvdWNoZXMsYz1kLmxlbmd0aCxuPXAubGFzdFZhbGlkVG91Y2gseT1wLmhhc1pvb20sdD1wLnNlbGVjdGlvbk1hcmtlcixtPXt9LGI9MT09PWMmJihwLmluQ2xhc3MoYS50YXJnZXQsXCJoaWdoY2hhcnRzLXRyYWNrZXJcIikmJmwucnVuVHJhY2tlckNsaWNrfHxwLnJ1bkNoYXJ0Q2xpY2spLHE9e307MTxjJiYocC5pbml0aWF0ZWQ9ITApO3kmJnAuaW5pdGlhdGVkJiYhYiYmYS5wcmV2ZW50RGVmYXVsdCgpO0koZCxmdW5jdGlvbihhKXtyZXR1cm4gcC5ub3JtYWxpemUoYSl9KTtcInRvdWNoc3RhcnRcIj09PWEudHlwZT8oQyhkLGZ1bmN0aW9uKGEsYil7dVtiXT17Y2hhcnRYOmEuY2hhcnRYLFxuY2hhcnRZOmEuY2hhcnRZfX0pLG4ueD1bdVswXS5jaGFydFgsdVsxXSYmdVsxXS5jaGFydFhdLG4ueT1bdVswXS5jaGFydFksdVsxXSYmdVsxXS5jaGFydFldLEMobC5heGVzLGZ1bmN0aW9uKGEpe2lmKGEuem9vbUVuYWJsZWQpe3ZhciBiPWwuYm91bmRzW2EuaG9yaXo/XCJoXCI6XCJ2XCJdLGM9YS5taW5QaXhlbFBhZGRpbmcsbT1hLnRvUGl4ZWxzKGYoYS5vcHRpb25zLm1pbixhLmRhdGFNaW4pKSxkPWEudG9QaXhlbHMoZihhLm9wdGlvbnMubWF4LGEuZGF0YU1heCkpLHE9TWF0aC5tYXgobSxkKTtiLm1pbj1NYXRoLm1pbihhLnBvcyxNYXRoLm1pbihtLGQpLWMpO2IubWF4PU1hdGgubWF4KGEucG9zK2EubGVuLHErYyl9fSkscC5yZXM9ITApOnAuZm9sbG93VG91Y2hNb3ZlJiYxPT09Yz90aGlzLnJ1blBvaW50QWN0aW9ucyhwLm5vcm1hbGl6ZShhKSk6dS5sZW5ndGgmJih0fHwocC5zZWxlY3Rpb25NYXJrZXI9dD1HKHtkZXN0cm95OmgsdG91Y2g6ITB9LGwucGxvdEJveCkpLHAucGluY2hUcmFuc2xhdGUodSxcbmQsbSx0LHEsbikscC5oYXNQaW5jaGVkPXkscC5zY2FsZUdyb3VwcyhtLHEpLHAucmVzJiYocC5yZXM9ITEsdGhpcy5yZXNldCghMSwwKSkpfSx0b3VjaDpmdW5jdGlvbihoLHYpe3ZhciBsPXRoaXMuY2hhcnQscCxkO2lmKGwuaW5kZXghPT1hLmhvdmVyQ2hhcnRJbmRleCl0aGlzLm9uQ29udGFpbmVyTW91c2VMZWF2ZSh7cmVsYXRlZFRhcmdldDohMH0pO2EuaG92ZXJDaGFydEluZGV4PWwuaW5kZXg7MT09PWgudG91Y2hlcy5sZW5ndGg/KGg9dGhpcy5ub3JtYWxpemUoaCksKGQ9bC5pc0luc2lkZVBsb3QoaC5jaGFydFgtbC5wbG90TGVmdCxoLmNoYXJ0WS1sLnBsb3RUb3ApKSYmIWwub3Blbk1lbnU/KHYmJnRoaXMucnVuUG9pbnRBY3Rpb25zKGgpLFwidG91Y2htb3ZlXCI9PT1oLnR5cGUmJih2PXRoaXMucGluY2hEb3duLHA9dlswXT80PD1NYXRoLnNxcnQoTWF0aC5wb3codlswXS5jaGFydFgtaC5jaGFydFgsMikrTWF0aC5wb3codlswXS5jaGFydFktaC5jaGFydFksMikpOiExKSxmKHAsXG4hMCkmJnRoaXMucGluY2goaCkpOnYmJnRoaXMucmVzZXQoKSk6Mj09PWgudG91Y2hlcy5sZW5ndGgmJnRoaXMucGluY2goaCl9LG9uQ29udGFpbmVyVG91Y2hTdGFydDpmdW5jdGlvbihhKXt0aGlzLnpvb21PcHRpb24oYSk7dGhpcy50b3VjaChhLCEwKX0sb25Db250YWluZXJUb3VjaE1vdmU6ZnVuY3Rpb24oYSl7dGhpcy50b3VjaChhKX0sb25Eb2N1bWVudFRvdWNoRW5kOmZ1bmN0aW9uKGYpe0RbYS5ob3ZlckNoYXJ0SW5kZXhdJiZEW2EuaG92ZXJDaGFydEluZGV4XS5wb2ludGVyLmRyb3AoZil9fSl9KShMKTsoZnVuY3Rpb24oYSl7dmFyIEQ9YS5hZGRFdmVudCxDPWEuY2hhcnRzLEc9YS5jc3MsST1hLmRvYyxoPWEuZXh0ZW5kLGY9YS5ub29wLHA9YS5Qb2ludGVyLHY9YS5yZW1vdmVFdmVudCxsPWEud2luLHU9YS53cmFwO2lmKGwuUG9pbnRlckV2ZW50fHxsLk1TUG9pbnRlckV2ZW50KXt2YXIgZD17fSxjPSEhbC5Qb2ludGVyRXZlbnQsbj1mdW5jdGlvbigpe3ZhciBhLGM9W107XG5jLml0ZW09ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXNbYV19O2ZvcihhIGluIGQpZC5oYXNPd25Qcm9wZXJ0eShhKSYmYy5wdXNoKHtwYWdlWDpkW2FdLnBhZ2VYLHBhZ2VZOmRbYV0ucGFnZVksdGFyZ2V0OmRbYV0udGFyZ2V0fSk7cmV0dXJuIGN9LHk9ZnVuY3Rpb24oYyxtLGIsZCl7XCJ0b3VjaFwiIT09Yy5wb2ludGVyVHlwZSYmYy5wb2ludGVyVHlwZSE9PWMuTVNQT0lOVEVSX1RZUEVfVE9VQ0h8fCFDW2EuaG92ZXJDaGFydEluZGV4XXx8KGQoYyksZD1DW2EuaG92ZXJDaGFydEluZGV4XS5wb2ludGVyLGRbbV0oe3R5cGU6Yix0YXJnZXQ6Yy5jdXJyZW50VGFyZ2V0LHByZXZlbnREZWZhdWx0OmYsdG91Y2hlczpuKCl9KSl9O2gocC5wcm90b3R5cGUse29uQ29udGFpbmVyUG9pbnRlckRvd246ZnVuY3Rpb24oYSl7eShhLFwib25Db250YWluZXJUb3VjaFN0YXJ0XCIsXCJ0b3VjaHN0YXJ0XCIsZnVuY3Rpb24oYSl7ZFthLnBvaW50ZXJJZF09e3BhZ2VYOmEucGFnZVgscGFnZVk6YS5wYWdlWSxcbnRhcmdldDphLmN1cnJlbnRUYXJnZXR9fSl9LG9uQ29udGFpbmVyUG9pbnRlck1vdmU6ZnVuY3Rpb24oYSl7eShhLFwib25Db250YWluZXJUb3VjaE1vdmVcIixcInRvdWNobW92ZVwiLGZ1bmN0aW9uKGEpe2RbYS5wb2ludGVySWRdPXtwYWdlWDphLnBhZ2VYLHBhZ2VZOmEucGFnZVl9O2RbYS5wb2ludGVySWRdLnRhcmdldHx8KGRbYS5wb2ludGVySWRdLnRhcmdldD1hLmN1cnJlbnRUYXJnZXQpfSl9LG9uRG9jdW1lbnRQb2ludGVyVXA6ZnVuY3Rpb24oYSl7eShhLFwib25Eb2N1bWVudFRvdWNoRW5kXCIsXCJ0b3VjaGVuZFwiLGZ1bmN0aW9uKGEpe2RlbGV0ZSBkW2EucG9pbnRlcklkXX0pfSxiYXRjaE1TRXZlbnRzOmZ1bmN0aW9uKGEpe2EodGhpcy5jaGFydC5jb250YWluZXIsYz9cInBvaW50ZXJkb3duXCI6XCJNU1BvaW50ZXJEb3duXCIsdGhpcy5vbkNvbnRhaW5lclBvaW50ZXJEb3duKTthKHRoaXMuY2hhcnQuY29udGFpbmVyLGM/XCJwb2ludGVybW92ZVwiOlwiTVNQb2ludGVyTW92ZVwiLHRoaXMub25Db250YWluZXJQb2ludGVyTW92ZSk7XG5hKEksYz9cInBvaW50ZXJ1cFwiOlwiTVNQb2ludGVyVXBcIix0aGlzLm9uRG9jdW1lbnRQb2ludGVyVXApfX0pO3UocC5wcm90b3R5cGUsXCJpbml0XCIsZnVuY3Rpb24oYSxjLGIpe2EuY2FsbCh0aGlzLGMsYik7dGhpcy5oYXNab29tJiZHKGMuY29udGFpbmVyLHtcIi1tcy10b3VjaC1hY3Rpb25cIjpcIm5vbmVcIixcInRvdWNoLWFjdGlvblwiOlwibm9uZVwifSl9KTt1KHAucHJvdG90eXBlLFwic2V0RE9NRXZlbnRzXCIsZnVuY3Rpb24oYSl7YS5hcHBseSh0aGlzKTsodGhpcy5oYXNab29tfHx0aGlzLmZvbGxvd1RvdWNoTW92ZSkmJnRoaXMuYmF0Y2hNU0V2ZW50cyhEKX0pO3UocC5wcm90b3R5cGUsXCJkZXN0cm95XCIsZnVuY3Rpb24oYSl7dGhpcy5iYXRjaE1TRXZlbnRzKHYpO2EuY2FsbCh0aGlzKX0pfX0pKEwpOyhmdW5jdGlvbihhKXt2YXIgRCxDPWEuYWRkRXZlbnQsRz1hLmNzcyxJPWEuZGlzY2FyZEVsZW1lbnQsaD1hLmRlZmluZWQsZj1hLmVhY2gscD1hLmV4dGVuZCx2PWEuaXNGaXJlZm94LGw9YS5tYXJnaW5OYW1lcyxcbnU9YS5tZXJnZSxkPWEucGljayxjPWEuc2V0QW5pbWF0aW9uLG49YS5zdGFibGVTb3J0LHk9YS53aW4sdD1hLndyYXA7RD1hLkxlZ2VuZD1mdW5jdGlvbihhLGIpe3RoaXMuaW5pdChhLGIpfTtELnByb3RvdHlwZT17aW5pdDpmdW5jdGlvbihhLGIpe3RoaXMuY2hhcnQ9YTt0aGlzLnNldE9wdGlvbnMoYik7Yi5lbmFibGVkJiYodGhpcy5yZW5kZXIoKSxDKHRoaXMuY2hhcnQsXCJlbmRSZXNpemVcIixmdW5jdGlvbigpe3RoaXMubGVnZW5kLnBvc2l0aW9uQ2hlY2tib3hlcygpfSkpfSxzZXRPcHRpb25zOmZ1bmN0aW9uKGEpe3ZhciBiPWQoYS5wYWRkaW5nLDgpO3RoaXMub3B0aW9ucz1hO3RoaXMuaXRlbVN0eWxlPWEuaXRlbVN0eWxlO3RoaXMuaXRlbUhpZGRlblN0eWxlPXUodGhpcy5pdGVtU3R5bGUsYS5pdGVtSGlkZGVuU3R5bGUpO3RoaXMuaXRlbU1hcmdpblRvcD1hLml0ZW1NYXJnaW5Ub3B8fDA7dGhpcy5pbml0aWFsSXRlbVg9dGhpcy5wYWRkaW5nPWI7dGhpcy5pbml0aWFsSXRlbVk9XG5iLTU7dGhpcy5pdGVtSGVpZ2h0PXRoaXMubWF4SXRlbVdpZHRoPTA7dGhpcy5zeW1ib2xXaWR0aD1kKGEuc3ltYm9sV2lkdGgsMTYpO3RoaXMucGFnZXM9W119LHVwZGF0ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuY2hhcnQ7dGhpcy5zZXRPcHRpb25zKHUoITAsdGhpcy5vcHRpb25zLGEpKTt0aGlzLmRlc3Ryb3koKTtjLmlzRGlydHlMZWdlbmQ9Yy5pc0RpcnR5Qm94PSEwO2QoYiwhMCkmJmMucmVkcmF3KCl9LGNvbG9yaXplSXRlbTpmdW5jdGlvbihhLGIpe2EubGVnZW5kR3JvdXBbYj9cInJlbW92ZUNsYXNzXCI6XCJhZGRDbGFzc1wiXShcImhpZ2hjaGFydHMtbGVnZW5kLWl0ZW0taGlkZGVuXCIpO3ZhciBjPXRoaXMub3B0aW9ucyxkPWEubGVnZW5kSXRlbSxtPWEubGVnZW5kTGluZSxlPWEubGVnZW5kU3ltYm9sLGY9dGhpcy5pdGVtSGlkZGVuU3R5bGUuY29sb3IsYz1iP2MuaXRlbVN0eWxlLmNvbG9yOmYsaD1iP2EuY29sb3J8fGY6ZixuPWEub3B0aW9ucyYmYS5vcHRpb25zLm1hcmtlcixcbms9e2ZpbGw6aH0sdztkJiZkLmNzcyh7ZmlsbDpjLGNvbG9yOmN9KTttJiZtLmF0dHIoe3N0cm9rZTpofSk7aWYoZSl7aWYobiYmZS5pc01hcmtlciYmKGs9YS5wb2ludEF0dHJpYnMoKSwhYikpZm9yKHcgaW4gaylrW3ddPWY7ZS5hdHRyKGspfX0scG9zaXRpb25JdGVtOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMub3B0aW9ucyxjPWIuc3ltYm9sUGFkZGluZyxiPSFiLnJ0bCxkPWEuX2xlZ2VuZEl0ZW1Qb3MsbT1kWzBdLGQ9ZFsxXSxlPWEuY2hlY2tib3g7KGE9YS5sZWdlbmRHcm91cCkmJmEuZWxlbWVudCYmYS50cmFuc2xhdGUoYj9tOnRoaXMubGVnZW5kV2lkdGgtbS0yKmMtNCxkKTtlJiYoZS54PW0sZS55PWQpfSxkZXN0cm95SXRlbTpmdW5jdGlvbihhKXt2YXIgYj1hLmNoZWNrYm94O2YoW1wibGVnZW5kSXRlbVwiLFwibGVnZW5kTGluZVwiLFwibGVnZW5kU3ltYm9sXCIsXCJsZWdlbmRHcm91cFwiXSxmdW5jdGlvbihiKXthW2JdJiYoYVtiXT1hW2JdLmRlc3Ryb3koKSl9KTtiJiZJKGEuY2hlY2tib3gpfSxcbmRlc3Ryb3k6ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEpe3RoaXNbYV0mJih0aGlzW2FdPXRoaXNbYV0uZGVzdHJveSgpKX1mKHRoaXMuZ2V0QWxsSXRlbXMoKSxmdW5jdGlvbihiKXtmKFtcImxlZ2VuZEl0ZW1cIixcImxlZ2VuZEdyb3VwXCJdLGEsYil9KTtmKFtcImJveFwiLFwidGl0bGVcIixcImdyb3VwXCJdLGEsdGhpcyk7dGhpcy5kaXNwbGF5PW51bGx9LHBvc2l0aW9uQ2hlY2tib3hlczpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmdyb3VwJiZ0aGlzLmdyb3VwLmFsaWduQXR0cixjLGQ9dGhpcy5jbGlwSGVpZ2h0fHx0aGlzLmxlZ2VuZEhlaWdodCxtPXRoaXMudGl0bGVIZWlnaHQ7YiYmKGM9Yi50cmFuc2xhdGVZLGYodGhpcy5hbGxJdGVtcyxmdW5jdGlvbihlKXt2YXIgZj1lLmNoZWNrYm94LGg7ZiYmKGg9YyttK2YueSsoYXx8MCkrMyxHKGYse2xlZnQ6Yi50cmFuc2xhdGVYK2UuY2hlY2tib3hPZmZzZXQrZi54LTIwK1wicHhcIix0b3A6aCtcInB4XCIsZGlzcGxheTpoPmMtNiYmaDxjK2QtNj9cIlwiOlwibm9uZVwifSkpfSkpfSxcbnJlbmRlclRpdGxlOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5wYWRkaW5nLGI9dGhpcy5vcHRpb25zLnRpdGxlLGM9MDtiLnRleHQmJih0aGlzLnRpdGxlfHwodGhpcy50aXRsZT10aGlzLmNoYXJ0LnJlbmRlcmVyLmxhYmVsKGIudGV4dCxhLTMsYS00LG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxcImxlZ2VuZC10aXRsZVwiKS5hdHRyKHt6SW5kZXg6MX0pLmNzcyhiLnN0eWxlKS5hZGQodGhpcy5ncm91cCkpLGE9dGhpcy50aXRsZS5nZXRCQm94KCksYz1hLmhlaWdodCx0aGlzLm9mZnNldFdpZHRoPWEud2lkdGgsdGhpcy5jb250ZW50R3JvdXAuYXR0cih7dHJhbnNsYXRlWTpjfSkpO3RoaXMudGl0bGVIZWlnaHQ9Y30sc2V0VGV4dDpmdW5jdGlvbihjKXt2YXIgYj10aGlzLm9wdGlvbnM7Yy5sZWdlbmRJdGVtLmF0dHIoe3RleHQ6Yi5sYWJlbEZvcm1hdD9hLmZvcm1hdChiLmxhYmVsRm9ybWF0LGMpOmIubGFiZWxGb3JtYXR0ZXIuY2FsbChjKX0pfSxyZW5kZXJJdGVtOmZ1bmN0aW9uKGEpe3ZhciBiPVxudGhpcy5jaGFydCxjPWIucmVuZGVyZXIsbT10aGlzLm9wdGlvbnMsZj1cImhvcml6b250YWxcIj09PW0ubGF5b3V0LGU9dGhpcy5zeW1ib2xXaWR0aCxoPW0uc3ltYm9sUGFkZGluZyxuPXRoaXMuaXRlbVN0eWxlLGw9dGhpcy5pdGVtSGlkZGVuU3R5bGUsaz10aGlzLnBhZGRpbmcsdz1mP2QobS5pdGVtRGlzdGFuY2UsMjApOjAsdD0hbS5ydGwscD1tLndpZHRoLHk9bS5pdGVtTWFyZ2luQm90dG9tfHwwLGc9dGhpcy5pdGVtTWFyZ2luVG9wLEI9dGhpcy5pbml0aWFsSXRlbVgsdj1hLmxlZ2VuZEl0ZW0sTT0hYS5zZXJpZXMsQz0hTSYmYS5zZXJpZXMuZHJhd0xlZ2VuZFN5bWJvbD9hLnNlcmllczphLEU9Qy5vcHRpb25zLEU9dGhpcy5jcmVhdGVDaGVja2JveEZvckl0ZW0mJkUmJkUuc2hvd0NoZWNrYm94LEg9bS51c2VIVE1MO3Z8fChhLmxlZ2VuZEdyb3VwPWMuZyhcImxlZ2VuZC1pdGVtXCIpLmFkZENsYXNzKFwiaGlnaGNoYXJ0cy1cIitDLnR5cGUrXCItc2VyaWVzIGhpZ2hjaGFydHMtY29sb3ItXCIrXG5hLmNvbG9ySW5kZXgrKGEub3B0aW9ucy5jbGFzc05hbWU/XCIgXCIrYS5vcHRpb25zLmNsYXNzTmFtZTpcIlwiKSsoTT9cIiBoaWdoY2hhcnRzLXNlcmllcy1cIithLmluZGV4OlwiXCIpKS5hdHRyKHt6SW5kZXg6MX0pLmFkZCh0aGlzLnNjcm9sbEdyb3VwKSxhLmxlZ2VuZEl0ZW09dj1jLnRleHQoXCJcIix0P2UraDotaCx0aGlzLmJhc2VsaW5lfHwwLEgpLmNzcyh1KGEudmlzaWJsZT9uOmwpKS5hdHRyKHthbGlnbjp0P1wibGVmdFwiOlwicmlnaHRcIix6SW5kZXg6Mn0pLmFkZChhLmxlZ2VuZEdyb3VwKSx0aGlzLmJhc2VsaW5lfHwobj1uLmZvbnRTaXplLHRoaXMuZm9udE1ldHJpY3M9Yy5mb250TWV0cmljcyhuLHYpLHRoaXMuYmFzZWxpbmU9dGhpcy5mb250TWV0cmljcy5mKzMrZyx2LmF0dHIoXCJ5XCIsdGhpcy5iYXNlbGluZSkpLEMuZHJhd0xlZ2VuZFN5bWJvbCh0aGlzLGEpLHRoaXMuc2V0SXRlbUV2ZW50cyYmdGhpcy5zZXRJdGVtRXZlbnRzKGEsdixIKSxFJiZ0aGlzLmNyZWF0ZUNoZWNrYm94Rm9ySXRlbShhKSk7XG50aGlzLmNvbG9yaXplSXRlbShhLGEudmlzaWJsZSk7dGhpcy5zZXRUZXh0KGEpO2M9di5nZXRCQm94KCk7ZT1hLmNoZWNrYm94T2Zmc2V0PW0uaXRlbVdpZHRofHxhLmxlZ2VuZEl0ZW1XaWR0aHx8ZStoK2Mud2lkdGgrdysoRT8yMDowKTt0aGlzLml0ZW1IZWlnaHQ9aD1NYXRoLnJvdW5kKGEubGVnZW5kSXRlbUhlaWdodHx8Yy5oZWlnaHQpO2YmJnRoaXMuaXRlbVgtQitlPihwfHxiLmNoYXJ0V2lkdGgtMiprLUItbS54KSYmKHRoaXMuaXRlbVg9Qix0aGlzLml0ZW1ZKz1nK3RoaXMubGFzdExpbmVIZWlnaHQreSx0aGlzLmxhc3RMaW5lSGVpZ2h0PTApO3RoaXMubWF4SXRlbVdpZHRoPU1hdGgubWF4KHRoaXMubWF4SXRlbVdpZHRoLGUpO3RoaXMubGFzdEl0ZW1ZPWcrdGhpcy5pdGVtWSt5O3RoaXMubGFzdExpbmVIZWlnaHQ9TWF0aC5tYXgoaCx0aGlzLmxhc3RMaW5lSGVpZ2h0KTthLl9sZWdlbmRJdGVtUG9zPVt0aGlzLml0ZW1YLHRoaXMuaXRlbVldO2Y/dGhpcy5pdGVtWCs9ZTpcbih0aGlzLml0ZW1ZKz1nK2greSx0aGlzLmxhc3RMaW5lSGVpZ2h0PWgpO3RoaXMub2Zmc2V0V2lkdGg9cHx8TWF0aC5tYXgoKGY/dGhpcy5pdGVtWC1CLXc6ZSkrayx0aGlzLm9mZnNldFdpZHRoKX0sZ2V0QWxsSXRlbXM6ZnVuY3Rpb24oKXt2YXIgYT1bXTtmKHRoaXMuY2hhcnQuc2VyaWVzLGZ1bmN0aW9uKGIpe3ZhciBjPWImJmIub3B0aW9ucztiJiZkKGMuc2hvd0luTGVnZW5kLGgoYy5saW5rZWRUbyk/ITE6dm9pZCAwLCEwKSYmKGE9YS5jb25jYXQoYi5sZWdlbmRJdGVtc3x8KFwicG9pbnRcIj09PWMubGVnZW5kVHlwZT9iLmRhdGE6YikpKX0pO3JldHVybiBhfSxhZGp1c3RNYXJnaW5zOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5jaGFydCxtPXRoaXMub3B0aW9ucyxuPW0uYWxpZ24uY2hhckF0KDApK20udmVydGljYWxBbGlnbi5jaGFyQXQoMCkrbS5sYXlvdXQuY2hhckF0KDApO20uZmxvYXRpbmd8fGYoWy8obHRofGN0fHJ0aCkvLC8ocnR2fHJtfHJidikvLC8ocmJofGNifGxiaCkvLFxuLyhsYnZ8bG18bHR2KS9dLGZ1bmN0aW9uKGUsZil7ZS50ZXN0KG4pJiYhaChhW2ZdKSYmKGNbbFtmXV09TWF0aC5tYXgoY1tsW2ZdXSxjLmxlZ2VuZFsoZisxKSUyP1wibGVnZW5kSGVpZ2h0XCI6XCJsZWdlbmRXaWR0aFwiXStbMSwtMSwtMSwxXVtmXSptW2YlMj9cInhcIjpcInlcIl0rZChtLm1hcmdpbiwxMikrYltmXSkpfSl9LHJlbmRlcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMsYj1hLmNoYXJ0LGM9Yi5yZW5kZXJlcixkPWEuZ3JvdXAsaCxlLHIsbCx0PWEuYm94LGs9YS5vcHRpb25zLHc9YS5wYWRkaW5nO2EuaXRlbVg9YS5pbml0aWFsSXRlbVg7YS5pdGVtWT1hLmluaXRpYWxJdGVtWTthLm9mZnNldFdpZHRoPTA7YS5sYXN0SXRlbVk9MDtkfHwoYS5ncm91cD1kPWMuZyhcImxlZ2VuZFwiKS5hdHRyKHt6SW5kZXg6N30pLmFkZCgpLGEuY29udGVudEdyb3VwPWMuZygpLmF0dHIoe3pJbmRleDoxfSkuYWRkKGQpLGEuc2Nyb2xsR3JvdXA9Yy5nKCkuYWRkKGEuY29udGVudEdyb3VwKSk7YS5yZW5kZXJUaXRsZSgpO1xuaD1hLmdldEFsbEl0ZW1zKCk7bihoLGZ1bmN0aW9uKGEsYil7cmV0dXJuKGEub3B0aW9ucyYmYS5vcHRpb25zLmxlZ2VuZEluZGV4fHwwKS0oYi5vcHRpb25zJiZiLm9wdGlvbnMubGVnZW5kSW5kZXh8fDApfSk7ay5yZXZlcnNlZCYmaC5yZXZlcnNlKCk7YS5hbGxJdGVtcz1oO2EuZGlzcGxheT1lPSEhaC5sZW5ndGg7YS5sYXN0TGluZUhlaWdodD0wO2YoaCxmdW5jdGlvbihiKXthLnJlbmRlckl0ZW0oYil9KTtyPShrLndpZHRofHxhLm9mZnNldFdpZHRoKSt3O2w9YS5sYXN0SXRlbVkrYS5sYXN0TGluZUhlaWdodCthLnRpdGxlSGVpZ2h0O2w9YS5oYW5kbGVPdmVyZmxvdyhsKTtsKz13O3R8fChhLmJveD10PWMucmVjdCgpLmFkZENsYXNzKFwiaGlnaGNoYXJ0cy1sZWdlbmQtYm94XCIpLmF0dHIoe3I6ay5ib3JkZXJSYWRpdXN9KS5hZGQoZCksdC5pc05ldz0hMCk7dC5hdHRyKHtzdHJva2U6ay5ib3JkZXJDb2xvcixcInN0cm9rZS13aWR0aFwiOmsuYm9yZGVyV2lkdGh8fDAsZmlsbDprLmJhY2tncm91bmRDb2xvcnx8XG5cIm5vbmVcIn0pLnNoYWRvdyhrLnNoYWRvdyk7MDxyJiYwPGwmJih0W3QuaXNOZXc/XCJhdHRyXCI6XCJhbmltYXRlXCJdKHQuY3Jpc3Aoe3g6MCx5OjAsd2lkdGg6cixoZWlnaHQ6bH0sdC5zdHJva2VXaWR0aCgpKSksdC5pc05ldz0hMSk7dFtlP1wic2hvd1wiOlwiaGlkZVwiXSgpO2EubGVnZW5kV2lkdGg9cjthLmxlZ2VuZEhlaWdodD1sO2YoaCxmdW5jdGlvbihiKXthLnBvc2l0aW9uSXRlbShiKX0pO2UmJmQuYWxpZ24ocCh7d2lkdGg6cixoZWlnaHQ6bH0sayksITAsXCJzcGFjaW5nQm94XCIpO2IuaXNSZXNpemluZ3x8dGhpcy5wb3NpdGlvbkNoZWNrYm94ZXMoKX0saGFuZGxlT3ZlcmZsb3c6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcyxjPXRoaXMuY2hhcnQsbT1jLnJlbmRlcmVyLGg9dGhpcy5vcHRpb25zLGU9aC55LGM9Yy5zcGFjaW5nQm94LmhlaWdodCsoXCJ0b3BcIj09PWgudmVydGljYWxBbGlnbj8tZTplKS10aGlzLnBhZGRpbmcsZT1oLm1heEhlaWdodCxuLGw9dGhpcy5jbGlwUmVjdCx0PWgubmF2aWdhdGlvbixcbms9ZCh0LmFuaW1hdGlvbiwhMCksdz10LmFycm93U2l6ZXx8MTIscD10aGlzLm5hdix1PXRoaXMucGFnZXMseT10aGlzLnBhZGRpbmcsZyxCPXRoaXMuYWxsSXRlbXMsdj1mdW5jdGlvbihhKXthP2wuYXR0cih7aGVpZ2h0OmF9KTpsJiYoYi5jbGlwUmVjdD1sLmRlc3Ryb3koKSxiLmNvbnRlbnRHcm91cC5jbGlwKCkpO2IuY29udGVudEdyb3VwLmRpdiYmKGIuY29udGVudEdyb3VwLmRpdi5zdHlsZS5jbGlwPWE/XCJyZWN0KFwiK3krXCJweCw5OTk5cHgsXCIrKHkrYSkrXCJweCwwKVwiOlwiYXV0b1wiKX07XCJob3Jpem9udGFsXCIhPT1oLmxheW91dHx8XCJtaWRkbGVcIj09PWgudmVydGljYWxBbGlnbnx8aC5mbG9hdGluZ3x8KGMvPTIpO2UmJihjPU1hdGgubWluKGMsZSkpO3UubGVuZ3RoPTA7YT5jJiYhMSE9PXQuZW5hYmxlZD8odGhpcy5jbGlwSGVpZ2h0PW49TWF0aC5tYXgoYy0yMC10aGlzLnRpdGxlSGVpZ2h0LXksMCksdGhpcy5jdXJyZW50UGFnZT1kKHRoaXMuY3VycmVudFBhZ2UsMSksdGhpcy5mdWxsSGVpZ2h0PVxuYSxmKEIsZnVuY3Rpb24oYSxiKXt2YXIgYz1hLl9sZWdlbmRJdGVtUG9zWzFdO2E9TWF0aC5yb3VuZChhLmxlZ2VuZEl0ZW0uZ2V0QkJveCgpLmhlaWdodCk7dmFyIGs9dS5sZW5ndGg7aWYoIWt8fGMtdVtrLTFdPm4mJihnfHxjKSE9PXVbay0xXSl1LnB1c2goZ3x8YyksaysrO2I9PT1CLmxlbmd0aC0xJiZjK2EtdVtrLTFdPm4mJnUucHVzaChjKTtjIT09ZyYmKGc9Yyl9KSxsfHwobD1iLmNsaXBSZWN0PW0uY2xpcFJlY3QoMCx5LDk5OTksMCksYi5jb250ZW50R3JvdXAuY2xpcChsKSksdihuKSxwfHwodGhpcy5uYXY9cD1tLmcoKS5hdHRyKHt6SW5kZXg6MX0pLmFkZCh0aGlzLmdyb3VwKSx0aGlzLnVwPW0uc3ltYm9sKFwidHJpYW5nbGVcIiwwLDAsdyx3KS5vbihcImNsaWNrXCIsZnVuY3Rpb24oKXtiLnNjcm9sbCgtMSxrKX0pLmFkZChwKSx0aGlzLnBhZ2VyPW0udGV4dChcIlwiLDE1LDEwKS5hZGRDbGFzcyhcImhpZ2hjaGFydHMtbGVnZW5kLW5hdmlnYXRpb25cIikuY3NzKHQuc3R5bGUpLmFkZChwKSxcbnRoaXMuZG93bj1tLnN5bWJvbChcInRyaWFuZ2xlLWRvd25cIiwwLDAsdyx3KS5vbihcImNsaWNrXCIsZnVuY3Rpb24oKXtiLnNjcm9sbCgxLGspfSkuYWRkKHApKSxiLnNjcm9sbCgwKSxhPWMpOnAmJih2KCkscC5oaWRlKCksdGhpcy5zY3JvbGxHcm91cC5hdHRyKHt0cmFuc2xhdGVZOjF9KSx0aGlzLmNsaXBIZWlnaHQ9MCk7cmV0dXJuIGF9LHNjcm9sbDpmdW5jdGlvbihhLGIpe3ZhciBkPXRoaXMucGFnZXMsZj1kLmxlbmd0aDthPXRoaXMuY3VycmVudFBhZ2UrYTt2YXIgbT10aGlzLmNsaXBIZWlnaHQsZT10aGlzLm9wdGlvbnMubmF2aWdhdGlvbixoPXRoaXMucGFnZXIsbj10aGlzLnBhZGRpbmc7YT5mJiYoYT1mKTswPGEmJih2b2lkIDAhPT1iJiZjKGIsdGhpcy5jaGFydCksdGhpcy5uYXYuYXR0cih7dHJhbnNsYXRlWDpuLHRyYW5zbGF0ZVk6bSt0aGlzLnBhZGRpbmcrNyt0aGlzLnRpdGxlSGVpZ2h0LHZpc2liaWxpdHk6XCJ2aXNpYmxlXCJ9KSx0aGlzLnVwLmF0dHIoe1wiY2xhc3NcIjoxPT09XG5hP1wiaGlnaGNoYXJ0cy1sZWdlbmQtbmF2LWluYWN0aXZlXCI6XCJoaWdoY2hhcnRzLWxlZ2VuZC1uYXYtYWN0aXZlXCJ9KSxoLmF0dHIoe3RleHQ6YStcIi9cIitmfSksdGhpcy5kb3duLmF0dHIoe3g6MTgrdGhpcy5wYWdlci5nZXRCQm94KCkud2lkdGgsXCJjbGFzc1wiOmE9PT1mP1wiaGlnaGNoYXJ0cy1sZWdlbmQtbmF2LWluYWN0aXZlXCI6XCJoaWdoY2hhcnRzLWxlZ2VuZC1uYXYtYWN0aXZlXCJ9KSx0aGlzLnVwLmF0dHIoe2ZpbGw6MT09PWE/ZS5pbmFjdGl2ZUNvbG9yOmUuYWN0aXZlQ29sb3J9KS5jc3Moe2N1cnNvcjoxPT09YT9cImRlZmF1bHRcIjpcInBvaW50ZXJcIn0pLHRoaXMuZG93bi5hdHRyKHtmaWxsOmE9PT1mP2UuaW5hY3RpdmVDb2xvcjplLmFjdGl2ZUNvbG9yfSkuY3NzKHtjdXJzb3I6YT09PWY/XCJkZWZhdWx0XCI6XCJwb2ludGVyXCJ9KSxiPS1kW2EtMV0rdGhpcy5pbml0aWFsSXRlbVksdGhpcy5zY3JvbGxHcm91cC5hbmltYXRlKHt0cmFuc2xhdGVZOmJ9KSx0aGlzLmN1cnJlbnRQYWdlPVxuYSx0aGlzLnBvc2l0aW9uQ2hlY2tib3hlcyhiKSl9fTthLkxlZ2VuZFN5bWJvbE1peGluPXtkcmF3UmVjdGFuZ2xlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS5vcHRpb25zLGY9Yy5zeW1ib2xIZWlnaHR8fGEuZm9udE1ldHJpY3MuZixjPWMuc3F1YXJlU3ltYm9sO2IubGVnZW5kU3ltYm9sPXRoaXMuY2hhcnQucmVuZGVyZXIucmVjdChjPyhhLnN5bWJvbFdpZHRoLWYpLzI6MCxhLmJhc2VsaW5lLWYrMSxjP2Y6YS5zeW1ib2xXaWR0aCxmLGQoYS5vcHRpb25zLnN5bWJvbFJhZGl1cyxmLzIpKS5hZGRDbGFzcyhcImhpZ2hjaGFydHMtcG9pbnRcIikuYXR0cih7ekluZGV4OjN9KS5hZGQoYi5sZWdlbmRHcm91cCl9LGRyYXdMaW5lTWFya2VyOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMub3B0aW9ucyxjPWIubWFya2VyLGQ9YS5zeW1ib2xXaWR0aCxmPXRoaXMuY2hhcnQucmVuZGVyZXIsZT10aGlzLmxlZ2VuZEdyb3VwO2E9YS5iYXNlbGluZS1NYXRoLnJvdW5kKC4zKmEuZm9udE1ldHJpY3MuYik7XG52YXIgbTttPXtcInN0cm9rZS13aWR0aFwiOmIubGluZVdpZHRofHwwfTtiLmRhc2hTdHlsZSYmKG0uZGFzaHN0eWxlPWIuZGFzaFN0eWxlKTt0aGlzLmxlZ2VuZExpbmU9Zi5wYXRoKFtcIk1cIiwwLGEsXCJMXCIsZCxhXSkuYWRkQ2xhc3MoXCJoaWdoY2hhcnRzLWdyYXBoXCIpLmF0dHIobSkuYWRkKGUpO2MmJiExIT09Yy5lbmFibGVkJiYoYj0wPT09dGhpcy5zeW1ib2wuaW5kZXhPZihcInVybFwiKT8wOmMucmFkaXVzLHRoaXMubGVnZW5kU3ltYm9sPWM9Zi5zeW1ib2wodGhpcy5zeW1ib2wsZC8yLWIsYS1iLDIqYiwyKmIsYykuYWRkQ2xhc3MoXCJoaWdoY2hhcnRzLXBvaW50XCIpLmFkZChlKSxjLmlzTWFya2VyPSEwKX19OygvVHJpZGVudFxcLzdcXC4wLy50ZXN0KHkubmF2aWdhdG9yLnVzZXJBZ2VudCl8fHYpJiZ0KEQucHJvdG90eXBlLFwicG9zaXRpb25JdGVtXCIsZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLGQ9ZnVuY3Rpb24oKXtiLl9sZWdlbmRJdGVtUG9zJiZhLmNhbGwoYyxiKX07ZCgpO3NldFRpbWVvdXQoZCl9KX0pKEwpO1xuKGZ1bmN0aW9uKGEpe3ZhciBEPWEuYWRkRXZlbnQsQz1hLmFuaW1hdGUsRz1hLmFuaW1PYmplY3QsST1hLmF0dHIsaD1hLmRvYyxmPWEuQXhpcyxwPWEuY3JlYXRlRWxlbWVudCx2PWEuZGVmYXVsdE9wdGlvbnMsbD1hLmRpc2NhcmRFbGVtZW50LHU9YS5jaGFydHMsZD1hLmNzcyxjPWEuZGVmaW5lZCxuPWEuZWFjaCx5PWEuZXh0ZW5kLHQ9YS5maW5kLG09YS5maXJlRXZlbnQsYj1hLmdldFN0eWxlLHE9YS5ncmVwLHo9YS5pc051bWJlcixGPWEuaXNPYmplY3QsZT1hLmlzU3RyaW5nLHI9YS5MZWdlbmQseD1hLm1hcmdpbk5hbWVzLEE9YS5tZXJnZSxrPWEuUG9pbnRlcix3PWEucGljayxLPWEucEludCxKPWEucmVtb3ZlRXZlbnQsTj1hLnNlcmllc1R5cGVzLGc9YS5zcGxhdCxCPWEuc3ZnLFM9YS5zeW5jVGltZW91dCxNPWEud2luLFI9YS5SZW5kZXJlcixFPWEuQ2hhcnQ9ZnVuY3Rpb24oKXt0aGlzLmdldEFyZ3MuYXBwbHkodGhpcyxhcmd1bWVudHMpfTthLmNoYXJ0PWZ1bmN0aW9uKGEsXG5iLGMpe3JldHVybiBuZXcgRShhLGIsYyl9O0UucHJvdG90eXBlPXtjYWxsYmFja3M6W10sZ2V0QXJnczpmdW5jdGlvbigpe3ZhciBhPVtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtpZihlKGFbMF0pfHxhWzBdLm5vZGVOYW1lKXRoaXMucmVuZGVyVG89YS5zaGlmdCgpO3RoaXMuaW5pdChhWzBdLGFbMV0pfSxpbml0OmZ1bmN0aW9uKGIsYyl7dmFyIGssZz1iLnNlcmllcztiLnNlcmllcz1udWxsO2s9QSh2LGIpO2suc2VyaWVzPWIuc2VyaWVzPWc7dGhpcy51c2VyT3B0aW9ucz1iO3RoaXMucmVzcFJ1bGVzPVtdO2I9ay5jaGFydDtnPWIuZXZlbnRzO3RoaXMubWFyZ2luPVtdO3RoaXMuc3BhY2luZz1bXTt0aGlzLmJvdW5kcz17aDp7fSx2Ont9fTt0aGlzLmNhbGxiYWNrPWM7dGhpcy5pc1Jlc2l6aW5nPTA7dGhpcy5vcHRpb25zPWs7dGhpcy5heGVzPVtdO3RoaXMuc2VyaWVzPVtdO3RoaXMuaGFzQ2FydGVzaWFuU2VyaWVzPWIuc2hvd0F4ZXM7dmFyIGU7dGhpcy5pbmRleD11Lmxlbmd0aDtcbnUucHVzaCh0aGlzKTthLmNoYXJ0Q291bnQrKztpZihnKWZvcihlIGluIGcpRCh0aGlzLGUsZ1tlXSk7dGhpcy54QXhpcz1bXTt0aGlzLnlBeGlzPVtdO3RoaXMucG9pbnRDb3VudD10aGlzLmNvbG9yQ291bnRlcj10aGlzLnN5bWJvbENvdW50ZXI9MDt0aGlzLmZpcnN0UmVuZGVyKCl9LGluaXRTZXJpZXM6ZnVuY3Rpb24oYil7dmFyIGM9dGhpcy5vcHRpb25zLmNoYXJ0OyhjPU5bYi50eXBlfHxjLnR5cGV8fGMuZGVmYXVsdFNlcmllc1R5cGVdKXx8YS5lcnJvcigxNywhMCk7Yz1uZXcgYztjLmluaXQodGhpcyxiKTtyZXR1cm4gY30saXNJbnNpZGVQbG90OmZ1bmN0aW9uKGEsYixjKXt2YXIgaz1jP2I6YTthPWM/YTpiO3JldHVybiAwPD1rJiZrPD10aGlzLnBsb3RXaWR0aCYmMDw9YSYmYTw9dGhpcy5wbG90SGVpZ2h0fSxyZWRyYXc6ZnVuY3Rpb24oYil7dmFyIGM9dGhpcy5heGVzLGs9dGhpcy5zZXJpZXMsZz10aGlzLnBvaW50ZXIsZT10aGlzLmxlZ2VuZCxkPXRoaXMuaXNEaXJ0eUxlZ2VuZCxcbmYsaCx3PXRoaXMuaGFzQ2FydGVzaWFuU2VyaWVzLHI9dGhpcy5pc0RpcnR5Qm94LGw9ay5sZW5ndGgscT1sLHQ9dGhpcy5yZW5kZXJlcixwPXQuaXNIaWRkZW4oKSxIPVtdO2Euc2V0QW5pbWF0aW9uKGIsdGhpcyk7cCYmdGhpcy5jbG9uZVJlbmRlclRvKCk7Zm9yKHRoaXMubGF5T3V0VGl0bGVzKCk7cS0tOylpZihiPWtbcV0sYi5vcHRpb25zLnN0YWNraW5nJiYoZj0hMCxiLmlzRGlydHkpKXtoPSEwO2JyZWFrfWlmKGgpZm9yKHE9bDtxLS07KWI9a1txXSxiLm9wdGlvbnMuc3RhY2tpbmcmJihiLmlzRGlydHk9ITApO24oayxmdW5jdGlvbihhKXthLmlzRGlydHkmJlwicG9pbnRcIj09PWEub3B0aW9ucy5sZWdlbmRUeXBlJiYoYS51cGRhdGVUb3RhbHMmJmEudXBkYXRlVG90YWxzKCksZD0hMCk7YS5pc0RpcnR5RGF0YSYmbShhLFwidXBkYXRlZERhdGFcIil9KTtkJiZlLm9wdGlvbnMuZW5hYmxlZCYmKGUucmVuZGVyKCksdGhpcy5pc0RpcnR5TGVnZW5kPSExKTtmJiZ0aGlzLmdldFN0YWNrcygpO1xudyYmbihjLGZ1bmN0aW9uKGEpe2EudXBkYXRlTmFtZXMoKTthLnNldFNjYWxlKCl9KTt0aGlzLmdldE1hcmdpbnMoKTt3JiYobihjLGZ1bmN0aW9uKGEpe2EuaXNEaXJ0eSYmKHI9ITApfSksbihjLGZ1bmN0aW9uKGEpe3ZhciBiPWEubWluK1wiLFwiK2EubWF4O2EuZXh0S2V5IT09YiYmKGEuZXh0S2V5PWIsSC5wdXNoKGZ1bmN0aW9uKCl7bShhLFwiYWZ0ZXJTZXRFeHRyZW1lc1wiLHkoYS5ldmVudEFyZ3MsYS5nZXRFeHRyZW1lcygpKSk7ZGVsZXRlIGEuZXZlbnRBcmdzfSkpOyhyfHxmKSYmYS5yZWRyYXcoKX0pKTtyJiZ0aGlzLmRyYXdDaGFydEJveCgpO24oayxmdW5jdGlvbihhKXsocnx8YS5pc0RpcnR5KSYmYS52aXNpYmxlJiZhLnJlZHJhdygpfSk7ZyYmZy5yZXNldCghMCk7dC5kcmF3KCk7bSh0aGlzLFwicmVkcmF3XCIpO3AmJnRoaXMuY2xvbmVSZW5kZXJUbyghMCk7bihILGZ1bmN0aW9uKGEpe2EuY2FsbCgpfSl9LGdldDpmdW5jdGlvbihhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBiLmlkPT09XG5hfHxiLm9wdGlvbnMuaWQ9PT1hfXZhciBjLGs9dGhpcy5zZXJpZXMsZztjPXQodGhpcy5heGVzLGIpfHx0KHRoaXMuc2VyaWVzLGIpO2ZvcihnPTA7IWMmJmc8ay5sZW5ndGg7ZysrKWM9dChrW2ddLnBvaW50c3x8W10sYik7cmV0dXJuIGN9LGdldEF4ZXM6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLGI9dGhpcy5vcHRpb25zLGM9Yi54QXhpcz1nKGIueEF4aXN8fHt9KSxiPWIueUF4aXM9ZyhiLnlBeGlzfHx7fSk7bihjLGZ1bmN0aW9uKGEsYil7YS5pbmRleD1iO2EuaXNYPSEwfSk7bihiLGZ1bmN0aW9uKGEsYil7YS5pbmRleD1ifSk7Yz1jLmNvbmNhdChiKTtuKGMsZnVuY3Rpb24oYil7bmV3IGYoYSxiKX0pfSxnZXRTZWxlY3RlZFBvaW50czpmdW5jdGlvbigpe3ZhciBhPVtdO24odGhpcy5zZXJpZXMsZnVuY3Rpb24oYil7YT1hLmNvbmNhdChxKGIucG9pbnRzfHxbXSxmdW5jdGlvbihhKXtyZXR1cm4gYS5zZWxlY3RlZH0pKX0pO3JldHVybiBhfSxnZXRTZWxlY3RlZFNlcmllczpmdW5jdGlvbigpe3JldHVybiBxKHRoaXMuc2VyaWVzLFxuZnVuY3Rpb24oYSl7cmV0dXJuIGEuc2VsZWN0ZWR9KX0sc2V0VGl0bGU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBrPXRoaXMsZz1rLm9wdGlvbnMsZTtlPWcudGl0bGU9QSh7c3R5bGU6e2NvbG9yOlwiIzMzMzMzM1wiLGZvbnRTaXplOmcuaXNTdG9jaz9cIjE2cHhcIjpcIjE4cHhcIn19LGcudGl0bGUsYSk7Zz1nLnN1YnRpdGxlPUEoe3N0eWxlOntjb2xvcjpcIiM2NjY2NjZcIn19LGcuc3VidGl0bGUsYik7bihbW1widGl0bGVcIixhLGVdLFtcInN1YnRpdGxlXCIsYixnXV0sZnVuY3Rpb24oYSxiKXt2YXIgYz1hWzBdLGc9a1tjXSxlPWFbMV07YT1hWzJdO2cmJmUmJihrW2NdPWc9Zy5kZXN0cm95KCkpO2EmJmEudGV4dCYmIWcmJihrW2NdPWsucmVuZGVyZXIudGV4dChhLnRleHQsMCwwLGEudXNlSFRNTCkuYXR0cih7YWxpZ246YS5hbGlnbixcImNsYXNzXCI6XCJoaWdoY2hhcnRzLVwiK2MsekluZGV4OmEuekluZGV4fHw0fSkuYWRkKCksa1tjXS51cGRhdGU9ZnVuY3Rpb24oYSl7ay5zZXRUaXRsZSghYiYmYSxiJiZcbmEpfSxrW2NdLmNzcyhhLnN0eWxlKSl9KTtrLmxheU91dFRpdGxlcyhjKX0sbGF5T3V0VGl0bGVzOmZ1bmN0aW9uKGEpe3ZhciBiPTAsYyxrPXRoaXMucmVuZGVyZXIsZz10aGlzLnNwYWNpbmdCb3g7bihbXCJ0aXRsZVwiLFwic3VidGl0bGVcIl0sZnVuY3Rpb24oYSl7dmFyIGM9dGhpc1thXSxlPXRoaXMub3B0aW9uc1thXSxkO2MmJihkPWUuc3R5bGUuZm9udFNpemUsZD1rLmZvbnRNZXRyaWNzKGQsYykuYixjLmNzcyh7d2lkdGg6KGUud2lkdGh8fGcud2lkdGgrZS53aWR0aEFkanVzdCkrXCJweFwifSkuYWxpZ24oeSh7eTpiK2QrKFwidGl0bGVcIj09PWE/LTM6Mil9LGUpLCExLFwic3BhY2luZ0JveFwiKSxlLmZsb2F0aW5nfHxlLnZlcnRpY2FsQWxpZ258fChiPU1hdGguY2VpbChiK2MuZ2V0QkJveCgpLmhlaWdodCkpKX0sdGhpcyk7Yz10aGlzLnRpdGxlT2Zmc2V0IT09Yjt0aGlzLnRpdGxlT2Zmc2V0PWI7IXRoaXMuaXNEaXJ0eUJveCYmYyYmKHRoaXMuaXNEaXJ0eUJveD1jLHRoaXMuaGFzUmVuZGVyZWQmJlxudyhhLCEwKSYmdGhpcy5pc0RpcnR5Qm94JiZ0aGlzLnJlZHJhdygpKX0sZ2V0Q2hhcnRTaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcHRpb25zLmNoYXJ0LGs9YS53aWR0aCxhPWEuaGVpZ2h0LGc9dGhpcy5yZW5kZXJUb0Nsb25lfHx0aGlzLnJlbmRlclRvO2Moayl8fCh0aGlzLmNvbnRhaW5lcldpZHRoPWIoZyxcIndpZHRoXCIpKTtjKGEpfHwodGhpcy5jb250YWluZXJIZWlnaHQ9YihnLFwiaGVpZ2h0XCIpKTt0aGlzLmNoYXJ0V2lkdGg9TWF0aC5tYXgoMCxrfHx0aGlzLmNvbnRhaW5lcldpZHRofHw2MDApO3RoaXMuY2hhcnRIZWlnaHQ9TWF0aC5tYXgoMCx3KGEsMTk8dGhpcy5jb250YWluZXJIZWlnaHQ/dGhpcy5jb250YWluZXJIZWlnaHQ6NDAwKSl9LGNsb25lUmVuZGVyVG86ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5yZW5kZXJUb0Nsb25lLGM9dGhpcy5jb250YWluZXI7aWYoYSl7aWYoYil7Zm9yKDtiLmNoaWxkTm9kZXMubGVuZ3RoOyl0aGlzLnJlbmRlclRvLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCk7XG5sKGIpO2RlbGV0ZSB0aGlzLnJlbmRlclRvQ2xvbmV9fWVsc2UgYyYmYy5wYXJlbnROb2RlPT09dGhpcy5yZW5kZXJUbyYmdGhpcy5yZW5kZXJUby5yZW1vdmVDaGlsZChjKSx0aGlzLnJlbmRlclRvQ2xvbmU9Yj10aGlzLnJlbmRlclRvLmNsb25lTm9kZSgwKSxkKGIse3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix0b3A6XCItOTk5OXB4XCIsZGlzcGxheTpcImJsb2NrXCJ9KSxiLnN0eWxlLnNldFByb3BlcnR5JiZiLnN0eWxlLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwiYmxvY2tcIixcImltcG9ydGFudFwiKSxoLmJvZHkuYXBwZW5kQ2hpbGQoYiksYyYmYi5hcHBlbmRDaGlsZChjKX0sc2V0Q2xhc3NOYW1lOmZ1bmN0aW9uKGEpe3RoaXMuY29udGFpbmVyLmNsYXNzTmFtZT1cImhpZ2hjaGFydHMtY29udGFpbmVyIFwiKyhhfHxcIlwiKX0sZ2V0Q29udGFpbmVyOmZ1bmN0aW9uKCl7dmFyIGIsYz10aGlzLm9wdGlvbnMsaz1jLmNoYXJ0LGcsZDtiPXRoaXMucmVuZGVyVG87dmFyIGY9YS51bmlxdWVLZXkoKSxtO2J8fFxuKHRoaXMucmVuZGVyVG89Yj1rLnJlbmRlclRvKTtlKGIpJiYodGhpcy5yZW5kZXJUbz1iPWguZ2V0RWxlbWVudEJ5SWQoYikpO2J8fGEuZXJyb3IoMTMsITApO2c9SyhJKGIsXCJkYXRhLWhpZ2hjaGFydHMtY2hhcnRcIikpO3ooZykmJnVbZ10mJnVbZ10uaGFzUmVuZGVyZWQmJnVbZ10uZGVzdHJveSgpO0koYixcImRhdGEtaGlnaGNoYXJ0cy1jaGFydFwiLHRoaXMuaW5kZXgpO2IuaW5uZXJIVE1MPVwiXCI7ay5za2lwQ2xvbmV8fGIub2Zmc2V0V2lkdGh8fHRoaXMuY2xvbmVSZW5kZXJUbygpO3RoaXMuZ2V0Q2hhcnRTaXplKCk7Zz10aGlzLmNoYXJ0V2lkdGg7ZD10aGlzLmNoYXJ0SGVpZ2h0O209eSh7cG9zaXRpb246XCJyZWxhdGl2ZVwiLG92ZXJmbG93OlwiaGlkZGVuXCIsd2lkdGg6ZytcInB4XCIsaGVpZ2h0OmQrXCJweFwiLHRleHRBbGlnbjpcImxlZnRcIixsaW5lSGVpZ2h0Olwibm9ybWFsXCIsekluZGV4OjAsXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIjpcInJnYmEoMCwwLDAsMClcIn0say5zdHlsZSk7XG50aGlzLmNvbnRhaW5lcj1iPXAoXCJkaXZcIix7aWQ6Zn0sbSx0aGlzLnJlbmRlclRvQ2xvbmV8fGIpO3RoaXMuX2N1cnNvcj1iLnN0eWxlLmN1cnNvcjt0aGlzLnJlbmRlcmVyPW5ldyAoYVtrLnJlbmRlcmVyXXx8UikoYixnLGQsbnVsbCxrLmZvckV4cG9ydCxjLmV4cG9ydGluZyYmYy5leHBvcnRpbmcuYWxsb3dIVE1MKTt0aGlzLnNldENsYXNzTmFtZShrLmNsYXNzTmFtZSk7dGhpcy5yZW5kZXJlci5zZXRTdHlsZShrLnN0eWxlKTt0aGlzLnJlbmRlcmVyLmNoYXJ0SW5kZXg9dGhpcy5pbmRleH0sZ2V0TWFyZ2luczpmdW5jdGlvbihhKXt2YXIgYj10aGlzLnNwYWNpbmcsaz10aGlzLm1hcmdpbixnPXRoaXMudGl0bGVPZmZzZXQ7dGhpcy5yZXNldE1hcmdpbnMoKTtnJiYhYyhrWzBdKSYmKHRoaXMucGxvdFRvcD1NYXRoLm1heCh0aGlzLnBsb3RUb3AsZyt0aGlzLm9wdGlvbnMudGl0bGUubWFyZ2luK2JbMF0pKTt0aGlzLmxlZ2VuZC5kaXNwbGF5JiZ0aGlzLmxlZ2VuZC5hZGp1c3RNYXJnaW5zKGssXG5iKTt0aGlzLmV4dHJhQm90dG9tTWFyZ2luJiYodGhpcy5tYXJnaW5Cb3R0b20rPXRoaXMuZXh0cmFCb3R0b21NYXJnaW4pO3RoaXMuZXh0cmFUb3BNYXJnaW4mJih0aGlzLnBsb3RUb3ArPXRoaXMuZXh0cmFUb3BNYXJnaW4pO2F8fHRoaXMuZ2V0QXhpc01hcmdpbnMoKX0sZ2V0QXhpc01hcmdpbnM6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLGI9YS5heGlzT2Zmc2V0PVswLDAsMCwwXSxrPWEubWFyZ2luO2EuaGFzQ2FydGVzaWFuU2VyaWVzJiZuKGEuYXhlcyxmdW5jdGlvbihhKXthLnZpc2libGUmJmEuZ2V0T2Zmc2V0KCl9KTtuKHgsZnVuY3Rpb24oZyxlKXtjKGtbZV0pfHwoYVtnXSs9YltlXSl9KTthLnNldENoYXJ0U2l6ZSgpfSxyZWZsb3c6ZnVuY3Rpb24oYSl7dmFyIGs9dGhpcyxnPWsub3B0aW9ucy5jaGFydCxlPWsucmVuZGVyVG8sZD1jKGcud2lkdGgpLGY9Zy53aWR0aHx8YihlLFwid2lkdGhcIiksZz1nLmhlaWdodHx8YihlLFwiaGVpZ2h0XCIpLGU9YT9hLnRhcmdldDpNO2lmKCFkJiZcbiFrLmlzUHJpbnRpbmcmJmYmJmcmJihlPT09TXx8ZT09PWgpKXtpZihmIT09ay5jb250YWluZXJXaWR0aHx8ZyE9PWsuY29udGFpbmVySGVpZ2h0KWNsZWFyVGltZW91dChrLnJlZmxvd1RpbWVvdXQpLGsucmVmbG93VGltZW91dD1TKGZ1bmN0aW9uKCl7ay5jb250YWluZXImJmsuc2V0U2l6ZSh2b2lkIDAsdm9pZCAwLCExKX0sYT8xMDA6MCk7ay5jb250YWluZXJXaWR0aD1mO2suY29udGFpbmVySGVpZ2h0PWd9fSxpbml0UmVmbG93OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxiO2I9RChNLFwicmVzaXplXCIsZnVuY3Rpb24oYil7YS5yZWZsb3coYil9KTtEKGEsXCJkZXN0cm95XCIsYil9LHNldFNpemU6ZnVuY3Rpb24oYixjLGspe3ZhciBnPXRoaXMsZT1nLnJlbmRlcmVyO2cuaXNSZXNpemluZys9MTthLnNldEFuaW1hdGlvbihrLGcpO2cub2xkQ2hhcnRIZWlnaHQ9Zy5jaGFydEhlaWdodDtnLm9sZENoYXJ0V2lkdGg9Zy5jaGFydFdpZHRoO3ZvaWQgMCE9PWImJihnLm9wdGlvbnMuY2hhcnQud2lkdGg9XG5iKTt2b2lkIDAhPT1jJiYoZy5vcHRpb25zLmNoYXJ0LmhlaWdodD1jKTtnLmdldENoYXJ0U2l6ZSgpO2I9ZS5nbG9iYWxBbmltYXRpb247KGI/QzpkKShnLmNvbnRhaW5lcix7d2lkdGg6Zy5jaGFydFdpZHRoK1wicHhcIixoZWlnaHQ6Zy5jaGFydEhlaWdodCtcInB4XCJ9LGIpO2cuc2V0Q2hhcnRTaXplKCEwKTtlLnNldFNpemUoZy5jaGFydFdpZHRoLGcuY2hhcnRIZWlnaHQsayk7bihnLmF4ZXMsZnVuY3Rpb24oYSl7YS5pc0RpcnR5PSEwO2Euc2V0U2NhbGUoKX0pO2cuaXNEaXJ0eUxlZ2VuZD0hMDtnLmlzRGlydHlCb3g9ITA7Zy5sYXlPdXRUaXRsZXMoKTtnLmdldE1hcmdpbnMoKTtnLnNldFJlc3BvbnNpdmUmJmcuc2V0UmVzcG9uc2l2ZSghMSk7Zy5yZWRyYXcoayk7Zy5vbGRDaGFydEhlaWdodD1udWxsO20oZyxcInJlc2l6ZVwiKTtTKGZ1bmN0aW9uKCl7ZyYmbShnLFwiZW5kUmVzaXplXCIsbnVsbCxmdW5jdGlvbigpey0tZy5pc1Jlc2l6aW5nfSl9LEcoYikuZHVyYXRpb24pfSxzZXRDaGFydFNpemU6ZnVuY3Rpb24oYSl7dmFyIGI9XG50aGlzLmludmVydGVkLGM9dGhpcy5yZW5kZXJlcixnPXRoaXMuY2hhcnRXaWR0aCxrPXRoaXMuY2hhcnRIZWlnaHQsZT10aGlzLm9wdGlvbnMuY2hhcnQsZD10aGlzLnNwYWNpbmcsZj10aGlzLmNsaXBPZmZzZXQsbSxoLHcscjt0aGlzLnBsb3RMZWZ0PW09TWF0aC5yb3VuZCh0aGlzLnBsb3RMZWZ0KTt0aGlzLnBsb3RUb3A9aD1NYXRoLnJvdW5kKHRoaXMucGxvdFRvcCk7dGhpcy5wbG90V2lkdGg9dz1NYXRoLm1heCgwLE1hdGgucm91bmQoZy1tLXRoaXMubWFyZ2luUmlnaHQpKTt0aGlzLnBsb3RIZWlnaHQ9cj1NYXRoLm1heCgwLE1hdGgucm91bmQoay1oLXRoaXMubWFyZ2luQm90dG9tKSk7dGhpcy5wbG90U2l6ZVg9Yj9yOnc7dGhpcy5wbG90U2l6ZVk9Yj93OnI7dGhpcy5wbG90Qm9yZGVyV2lkdGg9ZS5wbG90Qm9yZGVyV2lkdGh8fDA7dGhpcy5zcGFjaW5nQm94PWMuc3BhY2luZ0JveD17eDpkWzNdLHk6ZFswXSx3aWR0aDpnLWRbM10tZFsxXSxoZWlnaHQ6ay1kWzBdLWRbMl19O1xudGhpcy5wbG90Qm94PWMucGxvdEJveD17eDptLHk6aCx3aWR0aDp3LGhlaWdodDpyfTtnPTIqTWF0aC5mbG9vcih0aGlzLnBsb3RCb3JkZXJXaWR0aC8yKTtiPU1hdGguY2VpbChNYXRoLm1heChnLGZbM10pLzIpO2M9TWF0aC5jZWlsKE1hdGgubWF4KGcsZlswXSkvMik7dGhpcy5jbGlwQm94PXt4OmIseTpjLHdpZHRoOk1hdGguZmxvb3IodGhpcy5wbG90U2l6ZVgtTWF0aC5tYXgoZyxmWzFdKS8yLWIpLGhlaWdodDpNYXRoLm1heCgwLE1hdGguZmxvb3IodGhpcy5wbG90U2l6ZVktTWF0aC5tYXgoZyxmWzJdKS8yLWMpKX07YXx8bih0aGlzLmF4ZXMsZnVuY3Rpb24oYSl7YS5zZXRBeGlzU2l6ZSgpO2Euc2V0QXhpc1RyYW5zbGF0aW9uKCl9KX0scmVzZXRNYXJnaW5zOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxiPWEub3B0aW9ucy5jaGFydDtuKFtcIm1hcmdpblwiLFwic3BhY2luZ1wiXSxmdW5jdGlvbihjKXt2YXIgZz1iW2NdLGs9RihnKT9nOltnLGcsZyxnXTtuKFtcIlRvcFwiLFwiUmlnaHRcIixcblwiQm90dG9tXCIsXCJMZWZ0XCJdLGZ1bmN0aW9uKGcsZSl7YVtjXVtlXT13KGJbYytnXSxrW2VdKX0pfSk7bih4LGZ1bmN0aW9uKGIsYyl7YVtiXT13KGEubWFyZ2luW2NdLGEuc3BhY2luZ1tjXSl9KTthLmF4aXNPZmZzZXQ9WzAsMCwwLDBdO2EuY2xpcE9mZnNldD1bMCwwLDAsMF19LGRyYXdDaGFydEJveDpmdW5jdGlvbigpe3ZhciBhPXRoaXMub3B0aW9ucy5jaGFydCxiPXRoaXMucmVuZGVyZXIsYz10aGlzLmNoYXJ0V2lkdGgsZz10aGlzLmNoYXJ0SGVpZ2h0LGs9dGhpcy5jaGFydEJhY2tncm91bmQsZT10aGlzLnBsb3RCYWNrZ3JvdW5kLGQ9dGhpcy5wbG90Qm9yZGVyLGYsbT10aGlzLnBsb3RCR0ltYWdlLGg9YS5iYWNrZ3JvdW5kQ29sb3Isdz1hLnBsb3RCYWNrZ3JvdW5kQ29sb3Isbj1hLnBsb3RCYWNrZ3JvdW5kSW1hZ2UscixsPXRoaXMucGxvdExlZnQscT10aGlzLnBsb3RUb3AsdD10aGlzLnBsb3RXaWR0aCxwPXRoaXMucGxvdEhlaWdodCx4PXRoaXMucGxvdEJveCxLPXRoaXMuY2xpcFJlY3QsXG51PXRoaXMuY2xpcEJveCxBPVwiYW5pbWF0ZVwiO2t8fCh0aGlzLmNoYXJ0QmFja2dyb3VuZD1rPWIucmVjdCgpLmFkZENsYXNzKFwiaGlnaGNoYXJ0cy1iYWNrZ3JvdW5kXCIpLmFkZCgpLEE9XCJhdHRyXCIpO2Y9YS5ib3JkZXJXaWR0aHx8MDtyPWYrKGEuc2hhZG93Pzg6MCk7aD17ZmlsbDpofHxcIm5vbmVcIn07aWYoZnx8a1tcInN0cm9rZS13aWR0aFwiXSloLnN0cm9rZT1hLmJvcmRlckNvbG9yLGhbXCJzdHJva2Utd2lkdGhcIl09ZjtrLmF0dHIoaCkuc2hhZG93KGEuc2hhZG93KTtrW0FdKHt4OnIvMix5OnIvMix3aWR0aDpjLXItZiUyLGhlaWdodDpnLXItZiUyLHI6YS5ib3JkZXJSYWRpdXN9KTtBPVwiYW5pbWF0ZVwiO2V8fChBPVwiYXR0clwiLHRoaXMucGxvdEJhY2tncm91bmQ9ZT1iLnJlY3QoKS5hZGRDbGFzcyhcImhpZ2hjaGFydHMtcGxvdC1iYWNrZ3JvdW5kXCIpLmFkZCgpKTtlW0FdKHgpO2UuYXR0cih7ZmlsbDp3fHxcIm5vbmVcIn0pLnNoYWRvdyhhLnBsb3RTaGFkb3cpO24mJihtP20uYW5pbWF0ZSh4KTpcbnRoaXMucGxvdEJHSW1hZ2U9Yi5pbWFnZShuLGwscSx0LHApLmFkZCgpKTtLP0suYW5pbWF0ZSh7d2lkdGg6dS53aWR0aCxoZWlnaHQ6dS5oZWlnaHR9KTp0aGlzLmNsaXBSZWN0PWIuY2xpcFJlY3QodSk7QT1cImFuaW1hdGVcIjtkfHwoQT1cImF0dHJcIix0aGlzLnBsb3RCb3JkZXI9ZD1iLnJlY3QoKS5hZGRDbGFzcyhcImhpZ2hjaGFydHMtcGxvdC1ib3JkZXJcIikuYXR0cih7ekluZGV4OjF9KS5hZGQoKSk7ZC5hdHRyKHtzdHJva2U6YS5wbG90Qm9yZGVyQ29sb3IsXCJzdHJva2Utd2lkdGhcIjphLnBsb3RCb3JkZXJXaWR0aHx8MCxmaWxsOlwibm9uZVwifSk7ZFtBXShkLmNyaXNwKHt4OmwseTpxLHdpZHRoOnQsaGVpZ2h0OnB9LC1kLnN0cm9rZVdpZHRoKCkpKTt0aGlzLmlzRGlydHlCb3g9ITF9LHByb3BGcm9tU2VyaWVzOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxiPWEub3B0aW9ucy5jaGFydCxjLGc9YS5vcHRpb25zLnNlcmllcyxrLGU7bihbXCJpbnZlcnRlZFwiLFwiYW5ndWxhclwiLFwicG9sYXJcIl0sXG5mdW5jdGlvbihkKXtjPU5bYi50eXBlfHxiLmRlZmF1bHRTZXJpZXNUeXBlXTtlPWJbZF18fGMmJmMucHJvdG90eXBlW2RdO2ZvcihrPWcmJmcubGVuZ3RoOyFlJiZrLS07KShjPU5bZ1trXS50eXBlXSkmJmMucHJvdG90eXBlW2RdJiYoZT0hMCk7YVtkXT1lfSl9LGxpbmtTZXJpZXM6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLGI9YS5zZXJpZXM7bihiLGZ1bmN0aW9uKGEpe2EubGlua2VkU2VyaWVzLmxlbmd0aD0wfSk7bihiLGZ1bmN0aW9uKGIpe3ZhciBjPWIub3B0aW9ucy5saW5rZWRUbztlKGMpJiYoYz1cIjpwcmV2aW91c1wiPT09Yz9hLnNlcmllc1tiLmluZGV4LTFdOmEuZ2V0KGMpKSYmYy5saW5rZWRQYXJlbnQhPT1iJiYoYy5saW5rZWRTZXJpZXMucHVzaChiKSxiLmxpbmtlZFBhcmVudD1jLGIudmlzaWJsZT13KGIub3B0aW9ucy52aXNpYmxlLGMub3B0aW9ucy52aXNpYmxlLGIudmlzaWJsZSkpfSl9LHJlbmRlclNlcmllczpmdW5jdGlvbigpe24odGhpcy5zZXJpZXMsZnVuY3Rpb24oYSl7YS50cmFuc2xhdGUoKTtcbmEucmVuZGVyKCl9KX0scmVuZGVyTGFiZWxzOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxiPWEub3B0aW9ucy5sYWJlbHM7Yi5pdGVtcyYmbihiLml0ZW1zLGZ1bmN0aW9uKGMpe3ZhciBnPXkoYi5zdHlsZSxjLnN0eWxlKSxrPUsoZy5sZWZ0KSthLnBsb3RMZWZ0LGU9SyhnLnRvcCkrYS5wbG90VG9wKzEyO2RlbGV0ZSBnLmxlZnQ7ZGVsZXRlIGcudG9wO2EucmVuZGVyZXIudGV4dChjLmh0bWwsayxlKS5hdHRyKHt6SW5kZXg6Mn0pLmNzcyhnKS5hZGQoKX0pfSxyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmF4ZXMsYj10aGlzLnJlbmRlcmVyLGM9dGhpcy5vcHRpb25zLGcsayxlO3RoaXMuc2V0VGl0bGUoKTt0aGlzLmxlZ2VuZD1uZXcgcih0aGlzLGMubGVnZW5kKTt0aGlzLmdldFN0YWNrcyYmdGhpcy5nZXRTdGFja3MoKTt0aGlzLmdldE1hcmdpbnMoITApO3RoaXMuc2V0Q2hhcnRTaXplKCk7Yz10aGlzLnBsb3RXaWR0aDtnPXRoaXMucGxvdEhlaWdodC09MjE7bihhLGZ1bmN0aW9uKGEpe2Euc2V0U2NhbGUoKX0pO1xudGhpcy5nZXRBeGlzTWFyZ2lucygpO2s9MS4xPGMvdGhpcy5wbG90V2lkdGg7ZT0xLjA1PGcvdGhpcy5wbG90SGVpZ2h0O2lmKGt8fGUpbihhLGZ1bmN0aW9uKGEpeyhhLmhvcml6JiZrfHwhYS5ob3JpeiYmZSkmJmEuc2V0VGlja0ludGVydmFsKCEwKX0pLHRoaXMuZ2V0TWFyZ2lucygpO3RoaXMuZHJhd0NoYXJ0Qm94KCk7dGhpcy5oYXNDYXJ0ZXNpYW5TZXJpZXMmJm4oYSxmdW5jdGlvbihhKXthLnZpc2libGUmJmEucmVuZGVyKCl9KTt0aGlzLnNlcmllc0dyb3VwfHwodGhpcy5zZXJpZXNHcm91cD1iLmcoXCJzZXJpZXMtZ3JvdXBcIikuYXR0cih7ekluZGV4OjN9KS5hZGQoKSk7dGhpcy5yZW5kZXJTZXJpZXMoKTt0aGlzLnJlbmRlckxhYmVscygpO3RoaXMuYWRkQ3JlZGl0cygpO3RoaXMuc2V0UmVzcG9uc2l2ZSYmdGhpcy5zZXRSZXNwb25zaXZlKCk7dGhpcy5oYXNSZW5kZXJlZD0hMH0sYWRkQ3JlZGl0czpmdW5jdGlvbihhKXt2YXIgYj10aGlzO2E9QSghMCx0aGlzLm9wdGlvbnMuY3JlZGl0cyxcbmEpO2EuZW5hYmxlZCYmIXRoaXMuY3JlZGl0cyYmKHRoaXMuY3JlZGl0cz10aGlzLnJlbmRlcmVyLnRleHQoYS50ZXh0Kyh0aGlzLm1hcENyZWRpdHN8fFwiXCIpLDAsMCkuYWRkQ2xhc3MoXCJoaWdoY2hhcnRzLWNyZWRpdHNcIikub24oXCJjbGlja1wiLGZ1bmN0aW9uKCl7YS5ocmVmJiYoTS5sb2NhdGlvbi5ocmVmPWEuaHJlZil9KS5hdHRyKHthbGlnbjphLnBvc2l0aW9uLmFsaWduLHpJbmRleDo4fSkuY3NzKGEuc3R5bGUpLmFkZCgpLmFsaWduKGEucG9zaXRpb24pLHRoaXMuY3JlZGl0cy51cGRhdGU9ZnVuY3Rpb24oYSl7Yi5jcmVkaXRzPWIuY3JlZGl0cy5kZXN0cm95KCk7Yi5hZGRDcmVkaXRzKGEpfSl9LGRlc3Ryb3k6ZnVuY3Rpb24oKXt2YXIgYj10aGlzLGM9Yi5heGVzLGc9Yi5zZXJpZXMsaz1iLmNvbnRhaW5lcixlLGQ9ayYmay5wYXJlbnROb2RlO20oYixcImRlc3Ryb3lcIik7dVtiLmluZGV4XT12b2lkIDA7YS5jaGFydENvdW50LS07Yi5yZW5kZXJUby5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWhpZ2hjaGFydHMtY2hhcnRcIik7XG5KKGIpO2ZvcihlPWMubGVuZ3RoO2UtLTspY1tlXT1jW2VdLmRlc3Ryb3koKTt0aGlzLnNjcm9sbGVyJiZ0aGlzLnNjcm9sbGVyLmRlc3Ryb3kmJnRoaXMuc2Nyb2xsZXIuZGVzdHJveSgpO2ZvcihlPWcubGVuZ3RoO2UtLTspZ1tlXT1nW2VdLmRlc3Ryb3koKTtuKFwidGl0bGUgc3VidGl0bGUgY2hhcnRCYWNrZ3JvdW5kIHBsb3RCYWNrZ3JvdW5kIHBsb3RCR0ltYWdlIHBsb3RCb3JkZXIgc2VyaWVzR3JvdXAgY2xpcFJlY3QgY3JlZGl0cyBwb2ludGVyIHJhbmdlU2VsZWN0b3IgbGVnZW5kIHJlc2V0Wm9vbUJ1dHRvbiB0b29sdGlwIHJlbmRlcmVyXCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEpe3ZhciBjPWJbYV07YyYmYy5kZXN0cm95JiYoYlthXT1jLmRlc3Ryb3koKSl9KTtrJiYoay5pbm5lckhUTUw9XCJcIixKKGspLGQmJmwoaykpO2ZvcihlIGluIGIpZGVsZXRlIGJbZV19LGlzUmVhZHlUb1JlbmRlcjpmdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIEJ8fE0hPU0udG9wfHxcImNvbXBsZXRlXCI9PT1cbmgucmVhZHlTdGF0ZT8hMDooaC5hdHRhY2hFdmVudChcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLGZ1bmN0aW9uKCl7aC5kZXRhY2hFdmVudChcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLGEuZmlyc3RSZW5kZXIpO1wiY29tcGxldGVcIj09PWgucmVhZHlTdGF0ZSYmYS5maXJzdFJlbmRlcigpfSksITEpfSxmaXJzdFJlbmRlcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMsYj1hLm9wdGlvbnM7aWYoYS5pc1JlYWR5VG9SZW5kZXIoKSl7YS5nZXRDb250YWluZXIoKTttKGEsXCJpbml0XCIpO2EucmVzZXRNYXJnaW5zKCk7YS5zZXRDaGFydFNpemUoKTthLnByb3BGcm9tU2VyaWVzKCk7YS5nZXRBeGVzKCk7bihiLnNlcmllc3x8W10sZnVuY3Rpb24oYil7YS5pbml0U2VyaWVzKGIpfSk7YS5saW5rU2VyaWVzKCk7bShhLFwiYmVmb3JlUmVuZGVyXCIpO2smJihhLnBvaW50ZXI9bmV3IGsoYSxiKSk7YS5yZW5kZXIoKTthLnJlbmRlcmVyLmRyYXcoKTtpZighYS5yZW5kZXJlci5pbWdDb3VudCYmYS5vbmxvYWQpYS5vbmxvYWQoKTtcbmEuY2xvbmVSZW5kZXJUbyghMCl9fSxvbmxvYWQ6ZnVuY3Rpb24oKXtuKFt0aGlzLmNhbGxiYWNrXS5jb25jYXQodGhpcy5jYWxsYmFja3MpLGZ1bmN0aW9uKGEpe2EmJnZvaWQgMCE9PXRoaXMuaW5kZXgmJmEuYXBwbHkodGhpcyxbdGhpc10pfSx0aGlzKTttKHRoaXMsXCJsb2FkXCIpO2ModGhpcy5pbmRleCkmJiExIT09dGhpcy5vcHRpb25zLmNoYXJ0LnJlZmxvdyYmdGhpcy5pbml0UmVmbG93KCk7dGhpcy5vbmxvYWQ9bnVsbH19fSkoTCk7KGZ1bmN0aW9uKGEpe3ZhciBELEM9YS5lYWNoLEc9YS5leHRlbmQsST1hLmVyYXNlLGg9YS5maXJlRXZlbnQsZj1hLmZvcm1hdCxwPWEuaXNBcnJheSx2PWEuaXNOdW1iZXIsbD1hLnBpY2ssdT1hLnJlbW92ZUV2ZW50O0Q9YS5Qb2ludD1mdW5jdGlvbigpe307RC5wcm90b3R5cGU9e2luaXQ6ZnVuY3Rpb24oYSxjLGYpe3RoaXMuc2VyaWVzPWE7dGhpcy5jb2xvcj1hLmNvbG9yO3RoaXMuYXBwbHlPcHRpb25zKGMsZik7YS5vcHRpb25zLmNvbG9yQnlQb2ludD9cbihjPWEub3B0aW9ucy5jb2xvcnN8fGEuY2hhcnQub3B0aW9ucy5jb2xvcnMsdGhpcy5jb2xvcj10aGlzLmNvbG9yfHxjW2EuY29sb3JDb3VudGVyXSxjPWMubGVuZ3RoLGY9YS5jb2xvckNvdW50ZXIsYS5jb2xvckNvdW50ZXIrKyxhLmNvbG9yQ291bnRlcj09PWMmJihhLmNvbG9yQ291bnRlcj0wKSk6Zj1hLmNvbG9ySW5kZXg7dGhpcy5jb2xvckluZGV4PWwodGhpcy5jb2xvckluZGV4LGYpO2EuY2hhcnQucG9pbnRDb3VudCsrO3JldHVybiB0aGlzfSxhcHBseU9wdGlvbnM6ZnVuY3Rpb24oYSxjKXt2YXIgZD10aGlzLnNlcmllcyxmPWQub3B0aW9ucy5wb2ludFZhbEtleXx8ZC5wb2ludFZhbEtleTthPUQucHJvdG90eXBlLm9wdGlvbnNUb09iamVjdC5jYWxsKHRoaXMsYSk7Ryh0aGlzLGEpO3RoaXMub3B0aW9ucz10aGlzLm9wdGlvbnM/Ryh0aGlzLm9wdGlvbnMsYSk6YTthLmdyb3VwJiZkZWxldGUgdGhpcy5ncm91cDtmJiYodGhpcy55PXRoaXNbZl0pO3RoaXMuaXNOdWxsPWwodGhpcy5pc1ZhbGlkJiZcbiF0aGlzLmlzVmFsaWQoKSxudWxsPT09dGhpcy54fHwhdih0aGlzLnksITApKTt0aGlzLnNlbGVjdGVkJiYodGhpcy5zdGF0ZT1cInNlbGVjdFwiKTtcIm5hbWVcImluIHRoaXMmJnZvaWQgMD09PWMmJmQueEF4aXMmJmQueEF4aXMuaGFzTmFtZXMmJih0aGlzLng9ZC54QXhpcy5uYW1lVG9YKHRoaXMpKTt2b2lkIDA9PT10aGlzLngmJmQmJih0aGlzLng9dm9pZCAwPT09Yz9kLmF1dG9JbmNyZW1lbnQodGhpcyk6Yyk7cmV0dXJuIHRoaXN9LG9wdGlvbnNUb09iamVjdDpmdW5jdGlvbihhKXt2YXIgYz17fSxkPXRoaXMuc2VyaWVzLGY9ZC5vcHRpb25zLmtleXMsaD1mfHxkLnBvaW50QXJyYXlNYXB8fFtcInlcIl0sbT1oLmxlbmd0aCxiPTAsbD0wO2lmKHYoYSl8fG51bGw9PT1hKWNbaFswXV09YTtlbHNlIGlmKHAoYSkpZm9yKCFmJiZhLmxlbmd0aD5tJiYoZD10eXBlb2YgYVswXSxcInN0cmluZ1wiPT09ZD9jLm5hbWU9YVswXTpcIm51bWJlclwiPT09ZCYmKGMueD1hWzBdKSxiKyspO2w8bTspZiYmdm9pZCAwPT09XG5hW2JdfHwoY1toW2xdXT1hW2JdKSxiKyssbCsrO2Vsc2VcIm9iamVjdFwiPT09dHlwZW9mIGEmJihjPWEsYS5kYXRhTGFiZWxzJiYoZC5faGFzUG9pbnRMYWJlbHM9ITApLGEubWFya2VyJiYoZC5faGFzUG9pbnRNYXJrZXJzPSEwKSk7cmV0dXJuIGN9LGdldENsYXNzTmFtZTpmdW5jdGlvbigpe3JldHVyblwiaGlnaGNoYXJ0cy1wb2ludFwiKyh0aGlzLnNlbGVjdGVkP1wiIGhpZ2hjaGFydHMtcG9pbnQtc2VsZWN0XCI6XCJcIikrKHRoaXMubmVnYXRpdmU/XCIgaGlnaGNoYXJ0cy1uZWdhdGl2ZVwiOlwiXCIpKyh0aGlzLmlzTnVsbD9cIiBoaWdoY2hhcnRzLW51bGwtcG9pbnRcIjpcIlwiKSsodm9pZCAwIT09dGhpcy5jb2xvckluZGV4P1wiIGhpZ2hjaGFydHMtY29sb3ItXCIrdGhpcy5jb2xvckluZGV4OlwiXCIpKyh0aGlzLm9wdGlvbnMuY2xhc3NOYW1lP1wiIFwiK3RoaXMub3B0aW9ucy5jbGFzc05hbWU6XCJcIikrKHRoaXMuem9uZSYmdGhpcy56b25lLmNsYXNzTmFtZT9cIiBcIit0aGlzLnpvbmUuY2xhc3NOYW1lOlwiXCIpfSxcbmdldFpvbmU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnNlcmllcyxjPWEuem9uZXMsYT1hLnpvbmVBeGlzfHxcInlcIixmPTAsaDtmb3IoaD1jW2ZdO3RoaXNbYV0+PWgudmFsdWU7KWg9Y1srK2ZdO2gmJmguY29sb3ImJiF0aGlzLm9wdGlvbnMuY29sb3ImJih0aGlzLmNvbG9yPWguY29sb3IpO3JldHVybiBofSxkZXN0cm95OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5zZXJpZXMuY2hhcnQsYz1hLmhvdmVyUG9pbnRzLGY7YS5wb2ludENvdW50LS07YyYmKHRoaXMuc2V0U3RhdGUoKSxJKGMsdGhpcyksYy5sZW5ndGh8fChhLmhvdmVyUG9pbnRzPW51bGwpKTtpZih0aGlzPT09YS5ob3ZlclBvaW50KXRoaXMub25Nb3VzZU91dCgpO2lmKHRoaXMuZ3JhcGhpY3x8dGhpcy5kYXRhTGFiZWwpdSh0aGlzKSx0aGlzLmRlc3Ryb3lFbGVtZW50cygpO3RoaXMubGVnZW5kSXRlbSYmYS5sZWdlbmQuZGVzdHJveUl0ZW0odGhpcyk7Zm9yKGYgaW4gdGhpcyl0aGlzW2ZdPW51bGx9LGRlc3Ryb3lFbGVtZW50czpmdW5jdGlvbigpe2Zvcih2YXIgYT1cbltcImdyYXBoaWNcIixcImRhdGFMYWJlbFwiLFwiZGF0YUxhYmVsVXBwZXJcIixcImNvbm5lY3RvclwiLFwic2hhZG93R3JvdXBcIl0sYyxmPTY7Zi0tOyljPWFbZl0sdGhpc1tjXSYmKHRoaXNbY109dGhpc1tjXS5kZXN0cm95KCkpfSxnZXRMYWJlbENvbmZpZzpmdW5jdGlvbigpe3JldHVybnt4OnRoaXMuY2F0ZWdvcnkseTp0aGlzLnksY29sb3I6dGhpcy5jb2xvcixrZXk6dGhpcy5uYW1lfHx0aGlzLmNhdGVnb3J5LHNlcmllczp0aGlzLnNlcmllcyxwb2ludDp0aGlzLHBlcmNlbnRhZ2U6dGhpcy5wZXJjZW50YWdlLHRvdGFsOnRoaXMudG90YWx8fHRoaXMuc3RhY2tUb3RhbH19LHRvb2x0aXBGb3JtYXR0ZXI6ZnVuY3Rpb24oYSl7dmFyIGM9dGhpcy5zZXJpZXMsZD1jLnRvb2x0aXBPcHRpb25zLGg9bChkLnZhbHVlRGVjaW1hbHMsXCJcIiksdD1kLnZhbHVlUHJlZml4fHxcIlwiLG09ZC52YWx1ZVN1ZmZpeHx8XCJcIjtDKGMucG9pbnRBcnJheU1hcHx8W1wieVwiXSxmdW5jdGlvbihiKXtiPVwie3BvaW50LlwiK2I7XG5pZih0fHxtKWE9YS5yZXBsYWNlKGIrXCJ9XCIsdCtiK1wifVwiK20pO2E9YS5yZXBsYWNlKGIrXCJ9XCIsYitcIjosLlwiK2grXCJmfVwiKX0pO3JldHVybiBmKGEse3BvaW50OnRoaXMsc2VyaWVzOnRoaXMuc2VyaWVzfSl9LGZpcmVQb2ludEV2ZW50OmZ1bmN0aW9uKGEsYyxmKXt2YXIgZD10aGlzLG49dGhpcy5zZXJpZXMub3B0aW9uczsobi5wb2ludC5ldmVudHNbYV18fGQub3B0aW9ucyYmZC5vcHRpb25zLmV2ZW50cyYmZC5vcHRpb25zLmV2ZW50c1thXSkmJnRoaXMuaW1wb3J0RXZlbnRzKCk7XCJjbGlja1wiPT09YSYmbi5hbGxvd1BvaW50U2VsZWN0JiYoZj1mdW5jdGlvbihhKXtkLnNlbGVjdCYmZC5zZWxlY3QobnVsbCxhLmN0cmxLZXl8fGEubWV0YUtleXx8YS5zaGlmdEtleSl9KTtoKHRoaXMsYSxjLGYpfSx2aXNpYmxlOiEwfX0pKEwpOyhmdW5jdGlvbihhKXt2YXIgRD1hLmFkZEV2ZW50LEM9YS5hbmltT2JqZWN0LEc9YS5hcnJheU1heCxJPWEuYXJyYXlNaW4saD1hLmNvcnJlY3RGbG9hdCxcbmY9YS5EYXRlLHA9YS5kZWZhdWx0T3B0aW9ucyx2PWEuZGVmYXVsdFBsb3RPcHRpb25zLGw9YS5kZWZpbmVkLHU9YS5lYWNoLGQ9YS5lcmFzZSxjPWEuZXh0ZW5kLG49YS5maXJlRXZlbnQseT1hLmdyZXAsdD1hLmlzQXJyYXksbT1hLmlzTnVtYmVyLGI9YS5pc1N0cmluZyxxPWEubWVyZ2Usej1hLnBpY2ssRj1hLnJlbW92ZUV2ZW50LGU9YS5zcGxhdCxyPWEuU1ZHRWxlbWVudCx4PWEuc3luY1RpbWVvdXQsQT1hLndpbjthLlNlcmllcz1hLnNlcmllc1R5cGUoXCJsaW5lXCIsbnVsbCx7bGluZVdpZHRoOjIsYWxsb3dQb2ludFNlbGVjdDohMSxzaG93Q2hlY2tib3g6ITEsYW5pbWF0aW9uOntkdXJhdGlvbjoxRTN9LGV2ZW50czp7fSxtYXJrZXI6e2xpbmVXaWR0aDowLGxpbmVDb2xvcjpcIiNmZmZmZmZcIixyYWRpdXM6NCxzdGF0ZXM6e2hvdmVyOnthbmltYXRpb246e2R1cmF0aW9uOjUwfSxlbmFibGVkOiEwLHJhZGl1c1BsdXM6MixsaW5lV2lkdGhQbHVzOjF9LHNlbGVjdDp7ZmlsbENvbG9yOlwiI2NjY2NjY1wiLFxubGluZUNvbG9yOlwiIzAwMDAwMFwiLGxpbmVXaWR0aDoyfX19LHBvaW50OntldmVudHM6e319LGRhdGFMYWJlbHM6e2FsaWduOlwiY2VudGVyXCIsZm9ybWF0dGVyOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PT10aGlzLnk/XCJcIjphLm51bWJlckZvcm1hdCh0aGlzLnksLTEpfSxzdHlsZTp7Zm9udFNpemU6XCIxMXB4XCIsZm9udFdlaWdodDpcImJvbGRcIixjb2xvcjpcImNvbnRyYXN0XCIsdGV4dE91dGxpbmU6XCIxcHggY29udHJhc3RcIn0sdmVydGljYWxBbGlnbjpcImJvdHRvbVwiLHg6MCx5OjAscGFkZGluZzo1fSxjcm9wVGhyZXNob2xkOjMwMCxwb2ludFJhbmdlOjAsc29mdFRocmVzaG9sZDohMCxzdGF0ZXM6e2hvdmVyOntsaW5lV2lkdGhQbHVzOjEsbWFya2VyOnt9LGhhbG86e3NpemU6MTAsb3BhY2l0eTouMjV9fSxzZWxlY3Q6e21hcmtlcjp7fX19LHN0aWNreVRyYWNraW5nOiEwLHR1cmJvVGhyZXNob2xkOjFFM30se2lzQ2FydGVzaWFuOiEwLHBvaW50Q2xhc3M6YS5Qb2ludCxzb3J0ZWQ6ITAscmVxdWlyZVNvcnRpbmc6ITAsXG5kaXJlY3RUb3VjaDohMSxheGlzVHlwZXM6W1wieEF4aXNcIixcInlBeGlzXCJdLGNvbG9yQ291bnRlcjowLHBhcmFsbGVsQXJyYXlzOltcInhcIixcInlcIl0sY29sbDpcInNlcmllc1wiLGluaXQ6ZnVuY3Rpb24oYSxiKXt2YXIgaz10aGlzLGUsZCxnPWEuc2VyaWVzLGY7ay5jaGFydD1hO2sub3B0aW9ucz1iPWsuc2V0T3B0aW9ucyhiKTtrLmxpbmtlZFNlcmllcz1bXTtrLmJpbmRBeGVzKCk7YyhrLHtuYW1lOmIubmFtZSxzdGF0ZTpcIlwiLHZpc2libGU6ITEhPT1iLnZpc2libGUsc2VsZWN0ZWQ6ITA9PT1iLnNlbGVjdGVkfSk7ZD1iLmV2ZW50cztmb3IoZSBpbiBkKUQoayxlLGRbZV0pO2lmKGQmJmQuY2xpY2t8fGIucG9pbnQmJmIucG9pbnQuZXZlbnRzJiZiLnBvaW50LmV2ZW50cy5jbGlja3x8Yi5hbGxvd1BvaW50U2VsZWN0KWEucnVuVHJhY2tlckNsaWNrPSEwO2suZ2V0Q29sb3IoKTtrLmdldFN5bWJvbCgpO3Uoay5wYXJhbGxlbEFycmF5cyxmdW5jdGlvbihhKXtrW2ErXCJEYXRhXCJdPVtdfSk7ay5zZXREYXRhKGIuZGF0YSxcbiExKTtrLmlzQ2FydGVzaWFuJiYoYS5oYXNDYXJ0ZXNpYW5TZXJpZXM9ITApO2cubGVuZ3RoJiYoZj1nW2cubGVuZ3RoLTFdKTtrLl9pPXooZiYmZi5faSwtMSkrMTtmb3IoYT10aGlzLmluc2VydChnKTthPGcubGVuZ3RoO2ErKylnW2FdLmluZGV4PWEsZ1thXS5uYW1lPWdbYV0ubmFtZXx8XCJTZXJpZXMgXCIrKGdbYV0uaW5kZXgrMSl9LGluc2VydDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLm9wdGlvbnMuaW5kZXgsYztpZihtKGIpKXtmb3IoYz1hLmxlbmd0aDtjLS07KWlmKGI+PXooYVtjXS5vcHRpb25zLmluZGV4LGFbY10uX2kpKXthLnNwbGljZShjKzEsMCx0aGlzKTticmVha30tMT09PWMmJmEudW5zaGlmdCh0aGlzKTtjKz0xfWVsc2UgYS5wdXNoKHRoaXMpO3JldHVybiB6KGMsYS5sZW5ndGgtMSl9LGJpbmRBeGVzOmZ1bmN0aW9uKCl7dmFyIGI9dGhpcyxjPWIub3B0aW9ucyxlPWIuY2hhcnQsZDt1KGIuYXhpc1R5cGVzfHxbXSxmdW5jdGlvbihrKXt1KGVba10sZnVuY3Rpb24oYSl7ZD1cbmEub3B0aW9ucztpZihjW2tdPT09ZC5pbmRleHx8dm9pZCAwIT09Y1trXSYmY1trXT09PWQuaWR8fHZvaWQgMD09PWNba10mJjA9PT1kLmluZGV4KWIuaW5zZXJ0KGEuc2VyaWVzKSxiW2tdPWEsYS5pc0RpcnR5PSEwfSk7YltrXXx8Yi5vcHRpb25hbEF4aXM9PT1rfHxhLmVycm9yKDE4LCEwKX0pfSx1cGRhdGVQYXJhbGxlbEFycmF5czpmdW5jdGlvbihhLGIpe3ZhciBjPWEuc2VyaWVzLGs9YXJndW1lbnRzLGU9bShiKT9mdW5jdGlvbihnKXt2YXIgaz1cInlcIj09PWcmJmMudG9ZRGF0YT9jLnRvWURhdGEoYSk6YVtnXTtjW2crXCJEYXRhXCJdW2JdPWt9OmZ1bmN0aW9uKGEpe0FycmF5LnByb3RvdHlwZVtiXS5hcHBseShjW2ErXCJEYXRhXCJdLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGssMikpfTt1KGMucGFyYWxsZWxBcnJheXMsZSl9LGF1dG9JbmNyZW1lbnQ6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9wdGlvbnMsYj10aGlzLnhJbmNyZW1lbnQsYyxlPWEucG9pbnRJbnRlcnZhbFVuaXQsXG5iPXooYixhLnBvaW50U3RhcnQsMCk7dGhpcy5wb2ludEludGVydmFsPWM9eih0aGlzLnBvaW50SW50ZXJ2YWwsYS5wb2ludEludGVydmFsLDEpO2UmJihhPW5ldyBmKGIpLFwiZGF5XCI9PT1lP2E9K2FbZi5oY1NldERhdGVdKGFbZi5oY0dldERhdGVdKCkrYyk6XCJtb250aFwiPT09ZT9hPSthW2YuaGNTZXRNb250aF0oYVtmLmhjR2V0TW9udGhdKCkrYyk6XCJ5ZWFyXCI9PT1lJiYoYT0rYVtmLmhjU2V0RnVsbFllYXJdKGFbZi5oY0dldEZ1bGxZZWFyXSgpK2MpKSxjPWEtYik7dGhpcy54SW5jcmVtZW50PWIrYztyZXR1cm4gYn0sc2V0T3B0aW9uczpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmNoYXJ0LGM9Yi5vcHRpb25zLnBsb3RPcHRpb25zLGI9Yi51c2VyT3B0aW9uc3x8e30saz1iLnBsb3RPcHRpb25zfHx7fSxlPWNbdGhpcy50eXBlXTt0aGlzLnVzZXJPcHRpb25zPWE7Yz1xKGUsYy5zZXJpZXMsYSk7dGhpcy50b29sdGlwT3B0aW9ucz1xKHAudG9vbHRpcCxwLnBsb3RPcHRpb25zW3RoaXMudHlwZV0udG9vbHRpcCxcbmIudG9vbHRpcCxrLnNlcmllcyYmay5zZXJpZXMudG9vbHRpcCxrW3RoaXMudHlwZV0mJmtbdGhpcy50eXBlXS50b29sdGlwLGEudG9vbHRpcCk7bnVsbD09PWUubWFya2VyJiZkZWxldGUgYy5tYXJrZXI7dGhpcy56b25lQXhpcz1jLnpvbmVBeGlzO2E9dGhpcy56b25lcz0oYy56b25lc3x8W10pLnNsaWNlKCk7IWMubmVnYXRpdmVDb2xvciYmIWMubmVnYXRpdmVGaWxsQ29sb3J8fGMuem9uZXN8fGEucHVzaCh7dmFsdWU6Y1t0aGlzLnpvbmVBeGlzK1wiVGhyZXNob2xkXCJdfHxjLnRocmVzaG9sZHx8MCxjbGFzc05hbWU6XCJoaWdoY2hhcnRzLW5lZ2F0aXZlXCIsY29sb3I6Yy5uZWdhdGl2ZUNvbG9yLGZpbGxDb2xvcjpjLm5lZ2F0aXZlRmlsbENvbG9yfSk7YS5sZW5ndGgmJmwoYVthLmxlbmd0aC0xXS52YWx1ZSkmJmEucHVzaCh7Y29sb3I6dGhpcy5jb2xvcixmaWxsQ29sb3I6dGhpcy5maWxsQ29sb3J9KTtyZXR1cm4gY30sZ2V0Q3ljbGljOmZ1bmN0aW9uKGEsYixjKXt2YXIgayxlPXRoaXMudXNlck9wdGlvbnMsXG5nPWErXCJJbmRleFwiLGQ9YStcIkNvdW50ZXJcIixmPWM/Yy5sZW5ndGg6eih0aGlzLmNoYXJ0Lm9wdGlvbnMuY2hhcnRbYStcIkNvdW50XCJdLHRoaXMuY2hhcnRbYStcIkNvdW50XCJdKTtifHwoaz16KGVbZ10sZVtcIl9cIitnXSksbChrKXx8KGVbXCJfXCIrZ109az10aGlzLmNoYXJ0W2RdJWYsdGhpcy5jaGFydFtkXSs9MSksYyYmKGI9Y1trXSkpO3ZvaWQgMCE9PWsmJih0aGlzW2ddPWspO3RoaXNbYV09Yn0sZ2V0Q29sb3I6ZnVuY3Rpb24oKXt0aGlzLm9wdGlvbnMuY29sb3JCeVBvaW50P3RoaXMub3B0aW9ucy5jb2xvcj1udWxsOnRoaXMuZ2V0Q3ljbGljKFwiY29sb3JcIix0aGlzLm9wdGlvbnMuY29sb3J8fHZbdGhpcy50eXBlXS5jb2xvcix0aGlzLmNoYXJ0Lm9wdGlvbnMuY29sb3JzKX0sZ2V0U3ltYm9sOmZ1bmN0aW9uKCl7dGhpcy5nZXRDeWNsaWMoXCJzeW1ib2xcIix0aGlzLm9wdGlvbnMubWFya2VyLnN5bWJvbCx0aGlzLmNoYXJ0Lm9wdGlvbnMuc3ltYm9scyl9LGRyYXdMZWdlbmRTeW1ib2w6YS5MZWdlbmRTeW1ib2xNaXhpbi5kcmF3TGluZU1hcmtlcixcbnNldERhdGE6ZnVuY3Rpb24oYyxlLGQsZil7dmFyIGs9dGhpcyxnPWsucG9pbnRzLGg9ZyYmZy5sZW5ndGh8fDAsbixyPWsub3B0aW9ucyx3PWsuY2hhcnQsbD1udWxsLHE9ay54QXhpcyxwPXIudHVyYm9UaHJlc2hvbGQseD10aGlzLnhEYXRhLEE9dGhpcy55RGF0YSxGPShuPWsucG9pbnRBcnJheU1hcCkmJm4ubGVuZ3RoO2M9Y3x8W107bj1jLmxlbmd0aDtlPXooZSwhMCk7aWYoITEhPT1mJiZuJiZoPT09biYmIWsuY3JvcHBlZCYmIWsuaGFzR3JvdXBlZERhdGEmJmsudmlzaWJsZSl1KGMsZnVuY3Rpb24oYSxiKXtnW2JdLnVwZGF0ZSYmYSE9PXIuZGF0YVtiXSYmZ1tiXS51cGRhdGUoYSwhMSxudWxsLCExKX0pO2Vsc2V7ay54SW5jcmVtZW50PW51bGw7ay5jb2xvckNvdW50ZXI9MDt1KHRoaXMucGFyYWxsZWxBcnJheXMsZnVuY3Rpb24oYSl7a1thK1wiRGF0YVwiXS5sZW5ndGg9MH0pO2lmKHAmJm4+cCl7Zm9yKGQ9MDtudWxsPT09bCYmZDxuOylsPWNbZF0sZCsrO2lmKG0obCkpZm9yKGQ9XG4wO2Q8bjtkKyspeFtkXT10aGlzLmF1dG9JbmNyZW1lbnQoKSxBW2RdPWNbZF07ZWxzZSBpZih0KGwpKWlmKEYpZm9yKGQ9MDtkPG47ZCsrKWw9Y1tkXSx4W2RdPWxbMF0sQVtkXT1sLnNsaWNlKDEsRisxKTtlbHNlIGZvcihkPTA7ZDxuO2QrKylsPWNbZF0seFtkXT1sWzBdLEFbZF09bFsxXTtlbHNlIGEuZXJyb3IoMTIpfWVsc2UgZm9yKGQ9MDtkPG47ZCsrKXZvaWQgMCE9PWNbZF0mJihsPXtzZXJpZXM6a30say5wb2ludENsYXNzLnByb3RvdHlwZS5hcHBseU9wdGlvbnMuYXBwbHkobCxbY1tkXV0pLGsudXBkYXRlUGFyYWxsZWxBcnJheXMobCxkKSk7YihBWzBdKSYmYS5lcnJvcigxNCwhMCk7ay5kYXRhPVtdO2sub3B0aW9ucy5kYXRhPWsudXNlck9wdGlvbnMuZGF0YT1jO2ZvcihkPWg7ZC0tOylnW2RdJiZnW2RdLmRlc3Ryb3kmJmdbZF0uZGVzdHJveSgpO3EmJihxLm1pblJhbmdlPXEudXNlck1pblJhbmdlKTtrLmlzRGlydHk9dy5pc0RpcnR5Qm94PSEwO2suaXNEaXJ0eURhdGE9XG4hIWc7ZD0hMX1cInBvaW50XCI9PT1yLmxlZ2VuZFR5cGUmJih0aGlzLnByb2Nlc3NEYXRhKCksdGhpcy5nZW5lcmF0ZVBvaW50cygpKTtlJiZ3LnJlZHJhdyhkKX0scHJvY2Vzc0RhdGE6ZnVuY3Rpb24oYil7dmFyIGM9dGhpcy54RGF0YSxrPXRoaXMueURhdGEsZT1jLmxlbmd0aCxkO2Q9MDt2YXIgZyxmLG09dGhpcy54QXhpcyxoLG49dGhpcy5vcHRpb25zO2g9bi5jcm9wVGhyZXNob2xkO3ZhciBsPXRoaXMuZ2V0RXh0cmVtZXNGcm9tQWxsfHxuLmdldEV4dHJlbWVzRnJvbUFsbCxyPXRoaXMuaXNDYXJ0ZXNpYW4sbj1tJiZtLnZhbDJsaW4scT1tJiZtLmlzTG9nLHQscDtpZihyJiYhdGhpcy5pc0RpcnR5JiYhbS5pc0RpcnR5JiYhdGhpcy55QXhpcy5pc0RpcnR5JiYhYilyZXR1cm4hMTttJiYoYj1tLmdldEV4dHJlbWVzKCksdD1iLm1pbixwPWIubWF4KTtpZihyJiZ0aGlzLnNvcnRlZCYmIWwmJighaHx8ZT5ofHx0aGlzLmZvcmNlQ3JvcCkpaWYoY1tlLTFdPHR8fGNbMF0+cCljPVtdLFxuaz1bXTtlbHNlIGlmKGNbMF08dHx8Y1tlLTFdPnApZD10aGlzLmNyb3BEYXRhKHRoaXMueERhdGEsdGhpcy55RGF0YSx0LHApLGM9ZC54RGF0YSxrPWQueURhdGEsZD1kLnN0YXJ0LGc9ITA7Zm9yKGg9Yy5sZW5ndGh8fDE7LS1oOyllPXE/bihjW2hdKS1uKGNbaC0xXSk6Y1toXS1jW2gtMV0sMDxlJiYodm9pZCAwPT09Znx8ZTxmKT9mPWU6MD5lJiZ0aGlzLnJlcXVpcmVTb3J0aW5nJiZhLmVycm9yKDE1KTt0aGlzLmNyb3BwZWQ9Zzt0aGlzLmNyb3BTdGFydD1kO3RoaXMucHJvY2Vzc2VkWERhdGE9Yzt0aGlzLnByb2Nlc3NlZFlEYXRhPWs7dGhpcy5jbG9zZXN0UG9pbnRSYW5nZT1mfSxjcm9wRGF0YTpmdW5jdGlvbihhLGIsYyxlKXt2YXIgaz1hLmxlbmd0aCxnPTAsZD1rLGY9eih0aGlzLmNyb3BTaG91bGRlciwxKSxoO2ZvcihoPTA7aDxrO2grKylpZihhW2hdPj1jKXtnPU1hdGgubWF4KDAsaC1mKTticmVha31mb3IoYz1oO2M8aztjKyspaWYoYVtjXT5lKXtkPWMrZjticmVha31yZXR1cm57eERhdGE6YS5zbGljZShnLFxuZCkseURhdGE6Yi5zbGljZShnLGQpLHN0YXJ0OmcsZW5kOmR9fSxnZW5lcmF0ZVBvaW50czpmdW5jdGlvbigpe3ZhciBhPXRoaXMub3B0aW9ucy5kYXRhLGI9dGhpcy5kYXRhLGMsZD10aGlzLnByb2Nlc3NlZFhEYXRhLGY9dGhpcy5wcm9jZXNzZWRZRGF0YSxnPXRoaXMucG9pbnRDbGFzcyxoPWQubGVuZ3RoLG09dGhpcy5jcm9wU3RhcnR8fDAsbixyPXRoaXMuaGFzR3JvdXBlZERhdGEsbCxxPVtdLHQ7Ynx8cnx8KGI9W10sYi5sZW5ndGg9YS5sZW5ndGgsYj10aGlzLmRhdGE9Yik7Zm9yKHQ9MDt0PGg7dCsrKW49bSt0LHI/KGw9KG5ldyBnKS5pbml0KHRoaXMsW2RbdF1dLmNvbmNhdChlKGZbdF0pKSksbC5kYXRhR3JvdXA9dGhpcy5ncm91cE1hcFt0XSk6KGw9YltuXSl8fHZvaWQgMD09PWFbbl18fChiW25dPWw9KG5ldyBnKS5pbml0KHRoaXMsYVtuXSxkW3RdKSksbC5pbmRleD1uLHFbdF09bDtpZihiJiYoaCE9PShjPWIubGVuZ3RoKXx8cikpZm9yKHQ9MDt0PGM7dCsrKXQhPT1tfHxcbnJ8fCh0Kz1oKSxiW3RdJiYoYlt0XS5kZXN0cm95RWxlbWVudHMoKSxiW3RdLnBsb3RYPXZvaWQgMCk7dGhpcy5kYXRhPWI7dGhpcy5wb2ludHM9cX0sZ2V0RXh0cmVtZXM6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy55QXhpcyxjPXRoaXMucHJvY2Vzc2VkWERhdGEsZSxrPVtdLGc9MDtlPXRoaXMueEF4aXMuZ2V0RXh0cmVtZXMoKTt2YXIgZD1lLm1pbixmPWUubWF4LGgsbixsLHI7YT1hfHx0aGlzLnN0YWNrZWRZRGF0YXx8dGhpcy5wcm9jZXNzZWRZRGF0YXx8W107ZT1hLmxlbmd0aDtmb3Iocj0wO3I8ZTtyKyspaWYobj1jW3JdLGw9YVtyXSxoPShtKGwsITApfHx0KGwpKSYmKCFiLmlzTG9nfHxsLmxlbmd0aHx8MDxsKSxuPXRoaXMuZ2V0RXh0cmVtZXNGcm9tQWxsfHx0aGlzLm9wdGlvbnMuZ2V0RXh0cmVtZXNGcm9tQWxsfHx0aGlzLmNyb3BwZWR8fChjW3IrMV18fG4pPj1kJiYoY1tyLTFdfHxuKTw9ZixoJiZuKWlmKGg9bC5sZW5ndGgpZm9yKDtoLS07KW51bGwhPT1sW2hdJiYoa1tnKytdPVxubFtoXSk7ZWxzZSBrW2crK109bDt0aGlzLmRhdGFNaW49SShrKTt0aGlzLmRhdGFNYXg9RyhrKX0sdHJhbnNsYXRlOmZ1bmN0aW9uKCl7dGhpcy5wcm9jZXNzZWRYRGF0YXx8dGhpcy5wcm9jZXNzRGF0YSgpO3RoaXMuZ2VuZXJhdGVQb2ludHMoKTt2YXIgYT10aGlzLm9wdGlvbnMsYj1hLnN0YWNraW5nLGM9dGhpcy54QXhpcyxlPWMuY2F0ZWdvcmllcyxkPXRoaXMueUF4aXMsZz10aGlzLnBvaW50cyxmPWcubGVuZ3RoLG49ISF0aGlzLm1vZGlmeVZhbHVlLHI9YS5wb2ludFBsYWNlbWVudCx0PVwiYmV0d2VlblwiPT09cnx8bShyKSxxPWEudGhyZXNob2xkLHA9YS5zdGFydEZyb21UaHJlc2hvbGQ/cTowLHgsdSxBLEYsdj1OdW1iZXIuTUFYX1ZBTFVFO1wiYmV0d2VlblwiPT09ciYmKHI9LjUpO20ocikmJihyKj16KGEucG9pbnRSYW5nZXx8Yy5wb2ludFJhbmdlKSk7Zm9yKGE9MDthPGY7YSsrKXt2YXIgeT1nW2FdLEM9eS54LEQ9eS55O3U9eS5sb3c7dmFyIEc9YiYmZC5zdGFja3NbKHRoaXMubmVnU3RhY2tzJiZcbkQ8KHA/MDpxKT9cIi1cIjpcIlwiKSt0aGlzLnN0YWNrS2V5XSxJO2QuaXNMb2cmJm51bGwhPT1EJiYwPj1EJiYoeS5pc051bGw9ITApO3kucGxvdFg9eD1oKE1hdGgubWluKE1hdGgubWF4KC0xRTUsYy50cmFuc2xhdGUoQywwLDAsMCwxLHIsXCJmbGFnc1wiPT09dGhpcy50eXBlKSksMUU1KSk7YiYmdGhpcy52aXNpYmxlJiYheS5pc051bGwmJkcmJkdbQ10mJihGPXRoaXMuZ2V0U3RhY2tJbmRpY2F0b3IoRixDLHRoaXMuaW5kZXgpLEk9R1tDXSxEPUkucG9pbnRzW0Yua2V5XSx1PURbMF0sRD1EWzFdLHU9PT1wJiZGLmtleT09PUdbQ10uYmFzZSYmKHU9eihxLGQubWluKSksZC5pc0xvZyYmMD49dSYmKHU9bnVsbCkseS50b3RhbD15LnN0YWNrVG90YWw9SS50b3RhbCx5LnBlcmNlbnRhZ2U9SS50b3RhbCYmeS55L0kudG90YWwqMTAwLHkuc3RhY2tZPUQsSS5zZXRPZmZzZXQodGhpcy5wb2ludFhPZmZzZXR8fDAsdGhpcy5iYXJXfHwwKSk7eS55Qm90dG9tPWwodSk/ZC50cmFuc2xhdGUodSwwLFxuMSwwLDEpOm51bGw7biYmKEQ9dGhpcy5tb2RpZnlWYWx1ZShELHkpKTt5LnBsb3RZPXU9XCJudW1iZXJcIj09PXR5cGVvZiBEJiZJbmZpbml0eSE9PUQ/TWF0aC5taW4oTWF0aC5tYXgoLTFFNSxkLnRyYW5zbGF0ZShELDAsMSwwLDEpKSwxRTUpOnZvaWQgMDt5LmlzSW5zaWRlPXZvaWQgMCE9PXUmJjA8PXUmJnU8PWQubGVuJiYwPD14JiZ4PD1jLmxlbjt5LmNsaWVudFg9dD9oKGMudHJhbnNsYXRlKEMsMCwwLDAsMSxyKSk6eDt5Lm5lZ2F0aXZlPXkueTwocXx8MCk7eS5jYXRlZ29yeT1lJiZ2b2lkIDAhPT1lW3kueF0/ZVt5LnhdOnkueDt5LmlzTnVsbHx8KHZvaWQgMCE9PUEmJih2PU1hdGgubWluKHYsTWF0aC5hYnMoeC1BKSkpLEE9eCk7eS56b25lPXRoaXMuem9uZXMubGVuZ3RoJiZ5LmdldFpvbmUoKX10aGlzLmNsb3Nlc3RQb2ludFJhbmdlUHg9dn0sZ2V0VmFsaWRQb2ludHM6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmNoYXJ0O3JldHVybiB5KGF8fHRoaXMucG9pbnRzfHxbXSxcbmZ1bmN0aW9uKGEpe3JldHVybiBiJiYhYy5pc0luc2lkZVBsb3QoYS5wbG90WCxhLnBsb3RZLGMuaW52ZXJ0ZWQpPyExOiFhLmlzTnVsbH0pfSxzZXRDbGlwOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuY2hhcnQsYz10aGlzLm9wdGlvbnMsZT1iLnJlbmRlcmVyLGs9Yi5pbnZlcnRlZCxnPXRoaXMuY2xpcEJveCxkPWd8fGIuY2xpcEJveCxmPXRoaXMuc2hhcmVkQ2xpcEtleXx8W1wiX3NoYXJlZENsaXBcIixhJiZhLmR1cmF0aW9uLGEmJmEuZWFzaW5nLGQuaGVpZ2h0LGMueEF4aXMsYy55QXhpc10uam9pbigpLGg9YltmXSxtPWJbZitcIm1cIl07aHx8KGEmJihkLndpZHRoPTAsYltmK1wibVwiXT1tPWUuY2xpcFJlY3QoLTk5LGs/LWIucGxvdExlZnQ6LWIucGxvdFRvcCw5OSxrP2IuY2hhcnRXaWR0aDpiLmNoYXJ0SGVpZ2h0KSksYltmXT1oPWUuY2xpcFJlY3QoZCksaC5jb3VudD17bGVuZ3RoOjB9KTthJiYhaC5jb3VudFt0aGlzLmluZGV4XSYmKGguY291bnRbdGhpcy5pbmRleF09ITAsaC5jb3VudC5sZW5ndGgrPVxuMSk7ITEhPT1jLmNsaXAmJih0aGlzLmdyb3VwLmNsaXAoYXx8Zz9oOmIuY2xpcFJlY3QpLHRoaXMubWFya2VyR3JvdXAuY2xpcChtKSx0aGlzLnNoYXJlZENsaXBLZXk9Zik7YXx8KGguY291bnRbdGhpcy5pbmRleF0mJihkZWxldGUgaC5jb3VudFt0aGlzLmluZGV4XSwtLWguY291bnQubGVuZ3RoKSwwPT09aC5jb3VudC5sZW5ndGgmJmYmJmJbZl0mJihnfHwoYltmXT1iW2ZdLmRlc3Ryb3koKSksYltmK1wibVwiXSYmKGJbZitcIm1cIl09YltmK1wibVwiXS5kZXN0cm95KCkpKSl9LGFuaW1hdGU6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5jaGFydCxjPUModGhpcy5vcHRpb25zLmFuaW1hdGlvbiksZTthP3RoaXMuc2V0Q2xpcChjKTooZT10aGlzLnNoYXJlZENsaXBLZXksKGE9YltlXSkmJmEuYW5pbWF0ZSh7d2lkdGg6Yi5wbG90U2l6ZVh9LGMpLGJbZStcIm1cIl0mJmJbZStcIm1cIl0uYW5pbWF0ZSh7d2lkdGg6Yi5wbG90U2l6ZVgrOTl9LGMpLHRoaXMuYW5pbWF0ZT1udWxsKX0sYWZ0ZXJBbmltYXRlOmZ1bmN0aW9uKCl7dGhpcy5zZXRDbGlwKCk7XG5uKHRoaXMsXCJhZnRlckFuaW1hdGVcIil9LGRyYXdQb2ludHM6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnBvaW50cyxiPXRoaXMuY2hhcnQsYyxlLGQsZyxmPXRoaXMub3B0aW9ucy5tYXJrZXIsaCxuLHIsbCx0PXRoaXMubWFya2VyR3JvdXAscT16KGYuZW5hYmxlZCx0aGlzLnhBeGlzLmlzUmFkaWFsPyEwOm51bGwsdGhpcy5jbG9zZXN0UG9pbnRSYW5nZVB4PjIqZi5yYWRpdXMpO2lmKCExIT09Zi5lbmFibGVkfHx0aGlzLl9oYXNQb2ludE1hcmtlcnMpZm9yKGU9YS5sZW5ndGg7ZS0tOylkPWFbZV0sYz1kLnBsb3RZLGc9ZC5ncmFwaGljLGg9ZC5tYXJrZXJ8fHt9LG49ISFkLm1hcmtlcixyPXEmJnZvaWQgMD09PWguZW5hYmxlZHx8aC5lbmFibGVkLGw9ZC5pc0luc2lkZSxyJiZtKGMpJiZudWxsIT09ZC55PyhjPXooaC5zeW1ib2wsdGhpcy5zeW1ib2wpLGQuaGFzSW1hZ2U9MD09PWMuaW5kZXhPZihcInVybFwiKSxyPXRoaXMubWFya2VyQXR0cmlicyhkLGQuc2VsZWN0ZWQmJlwic2VsZWN0XCIpLFxuZz9nW2w/XCJzaG93XCI6XCJoaWRlXCJdKCEwKS5hbmltYXRlKHIpOmwmJigwPHIud2lkdGh8fGQuaGFzSW1hZ2UpJiYoZC5ncmFwaGljPWc9Yi5yZW5kZXJlci5zeW1ib2woYyxyLngsci55LHIud2lkdGgsci5oZWlnaHQsbj9oOmYpLmFkZCh0KSksZyYmZy5hdHRyKHRoaXMucG9pbnRBdHRyaWJzKGQsZC5zZWxlY3RlZCYmXCJzZWxlY3RcIikpLGcmJmcuYWRkQ2xhc3MoZC5nZXRDbGFzc05hbWUoKSwhMCkpOmcmJihkLmdyYXBoaWM9Zy5kZXN0cm95KCkpfSxtYXJrZXJBdHRyaWJzOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5vcHRpb25zLm1hcmtlcixlPWEmJmEub3B0aW9ucyxrPWUmJmUubWFya2VyfHx7fSxlPXooay5yYWRpdXMsYy5yYWRpdXMpO2ImJihjPWMuc3RhdGVzW2JdLGI9ay5zdGF0ZXMmJmsuc3RhdGVzW2JdLGU9eihiJiZiLnJhZGl1cyxjJiZjLnJhZGl1cyxlKyhjJiZjLnJhZGl1c1BsdXN8fDApKSk7YS5oYXNJbWFnZSYmKGU9MCk7YT17eDpNYXRoLmZsb29yKGEucGxvdFgpLVxuZSx5OmEucGxvdFktZX07ZSYmKGEud2lkdGg9YS5oZWlnaHQ9MiplKTtyZXR1cm4gYX0scG9pbnRBdHRyaWJzOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5vcHRpb25zLm1hcmtlcixlPWEmJmEub3B0aW9ucyxrPWUmJmUubWFya2VyfHx7fSxnPXRoaXMuY29sb3IsZD1lJiZlLmNvbG9yLGY9YSYmYS5jb2xvcixlPXooay5saW5lV2lkdGgsYy5saW5lV2lkdGgpO2E9YSYmYS56b25lJiZhLnpvbmUuY29sb3I7Zz1kfHxhfHxmfHxnO2E9ay5maWxsQ29sb3J8fGMuZmlsbENvbG9yfHxnO2c9ay5saW5lQ29sb3J8fGMubGluZUNvbG9yfHxnO2ImJihjPWMuc3RhdGVzW2JdLGI9ay5zdGF0ZXMmJmsuc3RhdGVzW2JdfHx7fSxlPXooYi5saW5lV2lkdGgsYy5saW5lV2lkdGgsZSt6KGIubGluZVdpZHRoUGx1cyxjLmxpbmVXaWR0aFBsdXMsMCkpLGE9Yi5maWxsQ29sb3J8fGMuZmlsbENvbG9yfHxhLGc9Yi5saW5lQ29sb3J8fGMubGluZUNvbG9yfHxnKTtyZXR1cm57c3Ryb2tlOmcsXCJzdHJva2Utd2lkdGhcIjplLFxuZmlsbDphfX0sZGVzdHJveTpmdW5jdGlvbigpe3ZhciBhPXRoaXMsYj1hLmNoYXJ0LGM9L0FwcGxlV2ViS2l0XFwvNTMzLy50ZXN0KEEubmF2aWdhdG9yLnVzZXJBZ2VudCksZSxmPWEuZGF0YXx8W10sZyxoLG07bihhLFwiZGVzdHJveVwiKTtGKGEpO3UoYS5heGlzVHlwZXN8fFtdLGZ1bmN0aW9uKGIpeyhtPWFbYl0pJiZtLnNlcmllcyYmKGQobS5zZXJpZXMsYSksbS5pc0RpcnR5PW0uZm9yY2VSZWRyYXc9ITApfSk7YS5sZWdlbmRJdGVtJiZhLmNoYXJ0LmxlZ2VuZC5kZXN0cm95SXRlbShhKTtmb3IoZT1mLmxlbmd0aDtlLS07KShnPWZbZV0pJiZnLmRlc3Ryb3kmJmcuZGVzdHJveSgpO2EucG9pbnRzPW51bGw7Y2xlYXJUaW1lb3V0KGEuYW5pbWF0aW9uVGltZW91dCk7Zm9yKGggaW4gYSlhW2hdaW5zdGFuY2VvZiByJiYhYVtoXS5zdXJ2aXZlJiYoZT1jJiZcImdyb3VwXCI9PT1oP1wiaGlkZVwiOlwiZGVzdHJveVwiLGFbaF1bZV0oKSk7Yi5ob3ZlclNlcmllcz09PWEmJihiLmhvdmVyU2VyaWVzPVxubnVsbCk7ZChiLnNlcmllcyxhKTtmb3IoaCBpbiBhKWRlbGV0ZSBhW2hdfSxnZXRHcmFwaFBhdGg6ZnVuY3Rpb24oYSxiLGMpe3ZhciBlPXRoaXMsaz1lLm9wdGlvbnMsZz1rLnN0ZXAsZCxmPVtdLGg9W10sbTthPWF8fGUucG9pbnRzOyhkPWEucmV2ZXJzZWQpJiZhLnJldmVyc2UoKTsoZz17cmlnaHQ6MSxjZW50ZXI6Mn1bZ118fGcmJjMpJiZkJiYoZz00LWcpOyFrLmNvbm5lY3ROdWxsc3x8Ynx8Y3x8KGE9dGhpcy5nZXRWYWxpZFBvaW50cyhhKSk7dShhLGZ1bmN0aW9uKGQsbil7dmFyIHI9ZC5wbG90WCx0PWQucGxvdFkscT1hW24tMV07KGQubGVmdENsaWZmfHxxJiZxLnJpZ2h0Q2xpZmYpJiYhYyYmKG09ITApO2QuaXNOdWxsJiYhbChiKSYmMDxuP209IWsuY29ubmVjdE51bGxzOmQuaXNOdWxsJiYhYj9tPSEwOigwPT09bnx8bT9uPVtcIk1cIixkLnBsb3RYLGQucGxvdFldOmUuZ2V0UG9pbnRTcGxpbmU/bj1lLmdldFBvaW50U3BsaW5lKGEsZCxuKTpnPyhuPTE9PT1nP1tcIkxcIixxLnBsb3RYLFxudF06Mj09PWc/W1wiTFwiLChxLnBsb3RYK3IpLzIscS5wbG90WSxcIkxcIiwocS5wbG90WCtyKS8yLHRdOltcIkxcIixyLHEucGxvdFldLG4ucHVzaChcIkxcIixyLHQpKTpuPVtcIkxcIixyLHRdLGgucHVzaChkLngpLGcmJmgucHVzaChkLngpLGYucHVzaC5hcHBseShmLG4pLG09ITEpfSk7Zi54TWFwPWg7cmV0dXJuIGUuZ3JhcGhQYXRoPWZ9LGRyYXdHcmFwaDpmdW5jdGlvbigpe3ZhciBhPXRoaXMsYj10aGlzLm9wdGlvbnMsYz0odGhpcy5nYXBwZWRQYXRofHx0aGlzLmdldEdyYXBoUGF0aCkuY2FsbCh0aGlzKSxlPVtbXCJncmFwaFwiLFwiaGlnaGNoYXJ0cy1ncmFwaFwiLGIubGluZUNvbG9yfHx0aGlzLmNvbG9yLGIuZGFzaFN0eWxlXV07dSh0aGlzLnpvbmVzLGZ1bmN0aW9uKGMsZyl7ZS5wdXNoKFtcInpvbmUtZ3JhcGgtXCIrZyxcImhpZ2hjaGFydHMtZ3JhcGggaGlnaGNoYXJ0cy16b25lLWdyYXBoLVwiK2crXCIgXCIrKGMuY2xhc3NOYW1lfHxcIlwiKSxjLmNvbG9yfHxhLmNvbG9yLGMuZGFzaFN0eWxlfHxiLmRhc2hTdHlsZV0pfSk7XG51KGUsZnVuY3Rpb24oZSxnKXt2YXIgaz1lWzBdLGQ9YVtrXTtkPyhkLmVuZFg9Yy54TWFwLGQuYW5pbWF0ZSh7ZDpjfSkpOmMubGVuZ3RoJiYoYVtrXT1hLmNoYXJ0LnJlbmRlcmVyLnBhdGgoYykuYWRkQ2xhc3MoZVsxXSkuYXR0cih7ekluZGV4OjF9KS5hZGQoYS5ncm91cCksZD17c3Ryb2tlOmVbMl0sXCJzdHJva2Utd2lkdGhcIjpiLmxpbmVXaWR0aCxmaWxsOmEuZmlsbEdyYXBoJiZhLmNvbG9yfHxcIm5vbmVcIn0sZVszXT9kLmRhc2hzdHlsZT1lWzNdOlwic3F1YXJlXCIhPT1iLmxpbmVjYXAmJihkW1wic3Ryb2tlLWxpbmVjYXBcIl09ZFtcInN0cm9rZS1saW5lam9pblwiXT1cInJvdW5kXCIpLGQ9YVtrXS5hdHRyKGQpLnNoYWRvdygyPmcmJmIuc2hhZG93KSk7ZCYmKGQuc3RhcnRYPWMueE1hcCxkLmlzQXJlYT1jLmlzQXJlYSl9KX0sYXBwbHlab25lczpmdW5jdGlvbigpe3ZhciBhPXRoaXMsYj10aGlzLmNoYXJ0LGM9Yi5yZW5kZXJlcixlPXRoaXMuem9uZXMsZCxnLGY9dGhpcy5jbGlwc3x8W10sXG5oLG09dGhpcy5ncmFwaCxuPXRoaXMuYXJlYSxyPU1hdGgubWF4KGIuY2hhcnRXaWR0aCxiLmNoYXJ0SGVpZ2h0KSxsPXRoaXNbKHRoaXMuem9uZUF4aXN8fFwieVwiKStcIkF4aXNcIl0scSx0LHA9Yi5pbnZlcnRlZCx4LEEsRix5LHY9ITE7ZS5sZW5ndGgmJihtfHxuKSYmbCYmdm9pZCAwIT09bC5taW4mJih0PWwucmV2ZXJzZWQseD1sLmhvcml6LG0mJm0uaGlkZSgpLG4mJm4uaGlkZSgpLHE9bC5nZXRFeHRyZW1lcygpLHUoZSxmdW5jdGlvbihlLGspe2Q9dD94P2IucGxvdFdpZHRoOjA6eD8wOmwudG9QaXhlbHMocS5taW4pO2Q9TWF0aC5taW4oTWF0aC5tYXgoeihnLGQpLDApLHIpO2c9TWF0aC5taW4oTWF0aC5tYXgoTWF0aC5yb3VuZChsLnRvUGl4ZWxzKHooZS52YWx1ZSxxLm1heCksITApKSwwKSxyKTt2JiYoZD1nPWwudG9QaXhlbHMocS5tYXgpKTtBPU1hdGguYWJzKGQtZyk7Rj1NYXRoLm1pbihkLGcpO3k9TWF0aC5tYXgoZCxnKTtsLmlzWEF4aXM/KGg9e3g6cD95OkYseTowLHdpZHRoOkEsXG5oZWlnaHQ6cn0seHx8KGgueD1iLnBsb3RIZWlnaHQtaC54KSk6KGg9e3g6MCx5OnA/eTpGLHdpZHRoOnIsaGVpZ2h0OkF9LHgmJihoLnk9Yi5wbG90V2lkdGgtaC55KSk7cCYmYy5pc1ZNTCYmKGg9bC5pc1hBeGlzP3t4OjAseTp0P0Y6eSxoZWlnaHQ6aC53aWR0aCx3aWR0aDpiLmNoYXJ0V2lkdGh9Ont4OmgueS1iLnBsb3RMZWZ0LWIuc3BhY2luZ0JveC54LHk6MCx3aWR0aDpoLmhlaWdodCxoZWlnaHQ6Yi5jaGFydEhlaWdodH0pO2Zba10/ZltrXS5hbmltYXRlKGgpOihmW2tdPWMuY2xpcFJlY3QoaCksbSYmYVtcInpvbmUtZ3JhcGgtXCIra10uY2xpcChmW2tdKSxuJiZhW1wiem9uZS1hcmVhLVwiK2tdLmNsaXAoZltrXSkpO3Y9ZS52YWx1ZT5xLm1heH0pLHRoaXMuY2xpcHM9Zil9LGludmVydEdyb3VwczpmdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7dmFyIGI9e3dpZHRoOmMueUF4aXMubGVuLGhlaWdodDpjLnhBeGlzLmxlbn07dShbXCJncm91cFwiLFwibWFya2VyR3JvdXBcIl0sZnVuY3Rpb24oZSl7Y1tlXSYmXG5jW2VdLmF0dHIoYikuaW52ZXJ0KGEpfSl9dmFyIGM9dGhpcyxlO2MueEF4aXMmJihlPUQoYy5jaGFydCxcInJlc2l6ZVwiLGIpLEQoYyxcImRlc3Ryb3lcIixlKSxiKGEpLGMuaW52ZXJ0R3JvdXBzPWIpfSxwbG90R3JvdXA6ZnVuY3Rpb24oYSxiLGMsZSxkKXt2YXIgZz10aGlzW2FdLGs9IWc7ayYmKHRoaXNbYV09Zz10aGlzLmNoYXJ0LnJlbmRlcmVyLmcoYikuYXR0cih7ekluZGV4OmV8fC4xfSkuYWRkKGQpLGcuYWRkQ2xhc3MoXCJoaWdoY2hhcnRzLXNlcmllcy1cIit0aGlzLmluZGV4K1wiIGhpZ2hjaGFydHMtXCIrdGhpcy50eXBlK1wiLXNlcmllcyBoaWdoY2hhcnRzLWNvbG9yLVwiK3RoaXMuY29sb3JJbmRleCtcIiBcIisodGhpcy5vcHRpb25zLmNsYXNzTmFtZXx8XCJcIikpKTtnLmF0dHIoe3Zpc2liaWxpdHk6Y30pW2s/XCJhdHRyXCI6XCJhbmltYXRlXCJdKHRoaXMuZ2V0UGxvdEJveCgpKTtyZXR1cm4gZ30sZ2V0UGxvdEJveDpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY2hhcnQsYj10aGlzLnhBeGlzLGM9XG50aGlzLnlBeGlzO2EuaW52ZXJ0ZWQmJihiPWMsYz10aGlzLnhBeGlzKTtyZXR1cm57dHJhbnNsYXRlWDpiP2IubGVmdDphLnBsb3RMZWZ0LHRyYW5zbGF0ZVk6Yz9jLnRvcDphLnBsb3RUb3Asc2NhbGVYOjEsc2NhbGVZOjF9fSxyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLGI9YS5jaGFydCxjLGU9YS5vcHRpb25zLGQ9ISFhLmFuaW1hdGUmJmIucmVuZGVyZXIuaXNTVkcmJkMoZS5hbmltYXRpb24pLmR1cmF0aW9uLGc9YS52aXNpYmxlP1wiaW5oZXJpdFwiOlwiaGlkZGVuXCIsZj1lLnpJbmRleCxoPWEuaGFzUmVuZGVyZWQsbT1iLnNlcmllc0dyb3VwLG49Yi5pbnZlcnRlZDtjPWEucGxvdEdyb3VwKFwiZ3JvdXBcIixcInNlcmllc1wiLGcsZixtKTthLm1hcmtlckdyb3VwPWEucGxvdEdyb3VwKFwibWFya2VyR3JvdXBcIixcIm1hcmtlcnNcIixnLGYsbSk7ZCYmYS5hbmltYXRlKCEwKTtjLmludmVydGVkPWEuaXNDYXJ0ZXNpYW4/bjohMTthLmRyYXdHcmFwaCYmKGEuZHJhd0dyYXBoKCksYS5hcHBseVpvbmVzKCkpO1xuYS5kcmF3RGF0YUxhYmVscyYmYS5kcmF3RGF0YUxhYmVscygpO2EudmlzaWJsZSYmYS5kcmF3UG9pbnRzKCk7YS5kcmF3VHJhY2tlciYmITEhPT1hLm9wdGlvbnMuZW5hYmxlTW91c2VUcmFja2luZyYmYS5kcmF3VHJhY2tlcigpO2EuaW52ZXJ0R3JvdXBzKG4pOyExPT09ZS5jbGlwfHxhLnNoYXJlZENsaXBLZXl8fGh8fGMuY2xpcChiLmNsaXBSZWN0KTtkJiZhLmFuaW1hdGUoKTtofHwoYS5hbmltYXRpb25UaW1lb3V0PXgoZnVuY3Rpb24oKXthLmFmdGVyQW5pbWF0ZSgpfSxkKSk7YS5pc0RpcnR5PWEuaXNEaXJ0eURhdGE9ITE7YS5oYXNSZW5kZXJlZD0hMH0scmVkcmF3OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jaGFydCxiPXRoaXMuaXNEaXJ0eXx8dGhpcy5pc0RpcnR5RGF0YSxjPXRoaXMuZ3JvdXAsZT10aGlzLnhBeGlzLGQ9dGhpcy55QXhpcztjJiYoYS5pbnZlcnRlZCYmYy5hdHRyKHt3aWR0aDphLnBsb3RXaWR0aCxoZWlnaHQ6YS5wbG90SGVpZ2h0fSksYy5hbmltYXRlKHt0cmFuc2xhdGVYOnooZSYmXG5lLmxlZnQsYS5wbG90TGVmdCksdHJhbnNsYXRlWTp6KGQmJmQudG9wLGEucGxvdFRvcCl9KSk7dGhpcy50cmFuc2xhdGUoKTt0aGlzLnJlbmRlcigpO2ImJmRlbGV0ZSB0aGlzLmtkVHJlZX0sa2REaW1lbnNpb25zOjEsa2RBeGlzQXJyYXk6W1wiY2xpZW50WFwiLFwicGxvdFlcIl0sc2VhcmNoUG9pbnQ6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLnhBeGlzLGU9dGhpcy55QXhpcyxkPXRoaXMuY2hhcnQuaW52ZXJ0ZWQ7cmV0dXJuIHRoaXMuc2VhcmNoS0RUcmVlKHtjbGllbnRYOmQ/Yy5sZW4tYS5jaGFydFkrYy5wb3M6YS5jaGFydFgtYy5wb3MscGxvdFk6ZD9lLmxlbi1hLmNoYXJ0WCtlLnBvczphLmNoYXJ0WS1lLnBvc30sYil9LGJ1aWxkS0RUcmVlOmZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShjLGUsZyl7dmFyIGQsaztpZihrPWMmJmMubGVuZ3RoKXJldHVybiBkPWIua2RBeGlzQXJyYXlbZSVnXSxjLnNvcnQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYVtkXS1iW2RdfSksaz1NYXRoLmZsb29yKGsvXG4yKSx7cG9pbnQ6Y1trXSxsZWZ0OmEoYy5zbGljZSgwLGspLGUrMSxnKSxyaWdodDphKGMuc2xpY2UoaysxKSxlKzEsZyl9fXZhciBiPXRoaXMsYz1iLmtkRGltZW5zaW9ucztkZWxldGUgYi5rZFRyZWU7eChmdW5jdGlvbigpe2Iua2RUcmVlPWEoYi5nZXRWYWxpZFBvaW50cyhudWxsLCFiLmRpcmVjdFRvdWNoKSxjLGMpfSxiLm9wdGlvbnMua2ROb3c/MDoxKX0sc2VhcmNoS0RUcmVlOmZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhLGIsZixoKXt2YXIgbT1iLnBvaW50LG49ZS5rZEF4aXNBcnJheVtmJWhdLHIscSx0PW07cT1sKGFbZF0pJiZsKG1bZF0pP01hdGgucG93KGFbZF0tbVtkXSwyKTpudWxsO3I9bChhW2ddKSYmbChtW2ddKT9NYXRoLnBvdyhhW2ddLW1bZ10sMik6bnVsbDtyPShxfHwwKSsocnx8MCk7bS5kaXN0PWwocik/TWF0aC5zcXJ0KHIpOk51bWJlci5NQVhfVkFMVUU7bS5kaXN0WD1sKHEpP01hdGguc3FydChxKTpOdW1iZXIuTUFYX1ZBTFVFO249YVtuXS1tW25dO3I9XG4wPm4/XCJsZWZ0XCI6XCJyaWdodFwiO3E9MD5uP1wicmlnaHRcIjpcImxlZnRcIjtiW3JdJiYocj1jKGEsYltyXSxmKzEsaCksdD1yW2tdPHRba10/cjptKTtiW3FdJiZNYXRoLnNxcnQobipuKTx0W2tdJiYoYT1jKGEsYltxXSxmKzEsaCksdD1hW2tdPHRba10/YTp0KTtyZXR1cm4gdH12YXIgZT10aGlzLGQ9dGhpcy5rZEF4aXNBcnJheVswXSxnPXRoaXMua2RBeGlzQXJyYXlbMV0saz1iP1wiZGlzdFhcIjpcImRpc3RcIjt0aGlzLmtkVHJlZXx8dGhpcy5idWlsZEtEVHJlZSgpO2lmKHRoaXMua2RUcmVlKXJldHVybiBjKGEsdGhpcy5rZFRyZWUsdGhpcy5rZERpbWVuc2lvbnMsdGhpcy5rZERpbWVuc2lvbnMpfX0pfSkoTCk7KGZ1bmN0aW9uKGEpe2Z1bmN0aW9uIEQoYSxkLGMsZixoKXt2YXIgbj1hLmNoYXJ0LmludmVydGVkO3RoaXMuYXhpcz1hO3RoaXMuaXNOZWdhdGl2ZT1jO3RoaXMub3B0aW9ucz1kO3RoaXMueD1mO3RoaXMudG90YWw9bnVsbDt0aGlzLnBvaW50cz17fTt0aGlzLnN0YWNrPWg7dGhpcy5yaWdodENsaWZmPVxudGhpcy5sZWZ0Q2xpZmY9MDt0aGlzLmFsaWduT3B0aW9ucz17YWxpZ246ZC5hbGlnbnx8KG4/Yz9cImxlZnRcIjpcInJpZ2h0XCI6XCJjZW50ZXJcIiksdmVydGljYWxBbGlnbjpkLnZlcnRpY2FsQWxpZ258fChuP1wibWlkZGxlXCI6Yz9cImJvdHRvbVwiOlwidG9wXCIpLHk6bChkLnksbj80OmM/MTQ6LTYpLHg6bChkLngsbj9jPy02OjY6MCl9O3RoaXMudGV4dEFsaWduPWQudGV4dEFsaWdufHwobj9jP1wicmlnaHRcIjpcImxlZnRcIjpcImNlbnRlclwiKX12YXIgQz1hLkF4aXMsRz1hLkNoYXJ0LEk9YS5jb3JyZWN0RmxvYXQsaD1hLmRlZmluZWQsZj1hLmRlc3Ryb3lPYmplY3RQcm9wZXJ0aWVzLHA9YS5lYWNoLHY9YS5mb3JtYXQsbD1hLnBpY2s7YT1hLlNlcmllcztELnByb3RvdHlwZT17ZGVzdHJveTpmdW5jdGlvbigpe2YodGhpcyx0aGlzLmF4aXMpfSxyZW5kZXI6ZnVuY3Rpb24oYSl7dmFyIGQ9dGhpcy5vcHRpb25zLGM9ZC5mb3JtYXQsYz1jP3YoYyx0aGlzKTpkLmZvcm1hdHRlci5jYWxsKHRoaXMpO3RoaXMubGFiZWw/XG50aGlzLmxhYmVsLmF0dHIoe3RleHQ6Yyx2aXNpYmlsaXR5OlwiaGlkZGVuXCJ9KTp0aGlzLmxhYmVsPXRoaXMuYXhpcy5jaGFydC5yZW5kZXJlci50ZXh0KGMsbnVsbCxudWxsLGQudXNlSFRNTCkuY3NzKGQuc3R5bGUpLmF0dHIoe2FsaWduOnRoaXMudGV4dEFsaWduLHJvdGF0aW9uOmQucm90YXRpb24sdmlzaWJpbGl0eTpcImhpZGRlblwifSkuYWRkKGEpfSxzZXRPZmZzZXQ6ZnVuY3Rpb24oYSxkKXt2YXIgYz10aGlzLmF4aXMsZj1jLmNoYXJ0LGg9Zi5pbnZlcnRlZCxsPWMucmV2ZXJzZWQsbD10aGlzLmlzTmVnYXRpdmUmJiFsfHwhdGhpcy5pc05lZ2F0aXZlJiZsLG09Yy50cmFuc2xhdGUoYy51c2VQZXJjZW50YWdlPzEwMDp0aGlzLnRvdGFsLDAsMCwwLDEpLGM9Yy50cmFuc2xhdGUoMCksYz1NYXRoLmFicyhtLWMpO2E9Zi54QXhpc1swXS50cmFuc2xhdGUodGhpcy54KSthO3ZhciBiPWYucGxvdEhlaWdodCxoPXt4Omg/bD9tOm0tYzphLHk6aD9iLWEtZDpsP2ItbS1jOmItbSx3aWR0aDpoP1xuYzpkLGhlaWdodDpoP2Q6Y307aWYoZD10aGlzLmxhYmVsKWQuYWxpZ24odGhpcy5hbGlnbk9wdGlvbnMsbnVsbCxoKSxoPWQuYWxpZ25BdHRyLGRbITE9PT10aGlzLm9wdGlvbnMuY3JvcHx8Zi5pc0luc2lkZVBsb3QoaC54LGgueSk/XCJzaG93XCI6XCJoaWRlXCJdKCEwKX19O0cucHJvdG90eXBlLmdldFN0YWNrcz1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cChhLnlBeGlzLGZ1bmN0aW9uKGEpe2Euc3RhY2tzJiZhLmhhc1Zpc2libGVTZXJpZXMmJihhLm9sZFN0YWNrcz1hLnN0YWNrcyl9KTtwKGEuc2VyaWVzLGZ1bmN0aW9uKGQpeyFkLm9wdGlvbnMuc3RhY2tpbmd8fCEwIT09ZC52aXNpYmxlJiYhMSE9PWEub3B0aW9ucy5jaGFydC5pZ25vcmVIaWRkZW5TZXJpZXN8fChkLnN0YWNrS2V5PWQudHlwZStsKGQub3B0aW9ucy5zdGFjayxcIlwiKSl9KX07Qy5wcm90b3R5cGUuYnVpbGRTdGFja3M9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnNlcmllcyxkLGM9bCh0aGlzLm9wdGlvbnMucmV2ZXJzZWRTdGFja3MsXG4hMCksZj1hLmxlbmd0aCxoO2lmKCF0aGlzLmlzWEF4aXMpe3RoaXMudXNlUGVyY2VudGFnZT0hMTtmb3IoaD1mO2gtLTspYVtjP2g6Zi1oLTFdLnNldFN0YWNrZWRQb2ludHMoKTtmb3IoaD1mO2gtLTspZD1hW2M/aDpmLWgtMV0sZC5zZXRTdGFja0NsaWZmcyYmZC5zZXRTdGFja0NsaWZmcygpO2lmKHRoaXMudXNlUGVyY2VudGFnZSlmb3IoaD0wO2g8ZjtoKyspYVtoXS5zZXRQZXJjZW50U3RhY2tzKCl9fTtDLnByb3RvdHlwZS5yZW5kZXJTdGFja1RvdGFscz1mdW5jdGlvbigpe3ZhciBhPXRoaXMuY2hhcnQsZD1hLnJlbmRlcmVyLGM9dGhpcy5zdGFja3MsZixoLGw9dGhpcy5zdGFja1RvdGFsR3JvdXA7bHx8KHRoaXMuc3RhY2tUb3RhbEdyb3VwPWw9ZC5nKFwic3RhY2stbGFiZWxzXCIpLmF0dHIoe3Zpc2liaWxpdHk6XCJ2aXNpYmxlXCIsekluZGV4OjZ9KS5hZGQoKSk7bC50cmFuc2xhdGUoYS5wbG90TGVmdCxhLnBsb3RUb3ApO2ZvcihmIGluIGMpZm9yKGggaW4gYT1jW2ZdLGEpYVtoXS5yZW5kZXIobCl9O1xuQy5wcm90b3R5cGUucmVzZXRTdGFja3M9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnN0YWNrcyxkLGM7aWYoIXRoaXMuaXNYQXhpcylmb3IoZCBpbiBhKWZvcihjIGluIGFbZF0pYVtkXVtjXS50b3VjaGVkPHRoaXMuc3RhY2tzVG91Y2hlZD8oYVtkXVtjXS5kZXN0cm95KCksZGVsZXRlIGFbZF1bY10pOihhW2RdW2NdLnRvdGFsPW51bGwsYVtkXVtjXS5jdW09bnVsbCl9O0MucHJvdG90eXBlLmNsZWFuU3RhY2tzPWZ1bmN0aW9uKCl7dmFyIGEsZCxjO2lmKCF0aGlzLmlzWEF4aXMpZm9yKGQgaW4gdGhpcy5vbGRTdGFja3MmJihhPXRoaXMuc3RhY2tzPXRoaXMub2xkU3RhY2tzKSxhKWZvcihjIGluIGFbZF0pYVtkXVtjXS5jdW09YVtkXVtjXS50b3RhbH07YS5wcm90b3R5cGUuc2V0U3RhY2tlZFBvaW50cz1mdW5jdGlvbigpe2lmKHRoaXMub3B0aW9ucy5zdGFja2luZyYmKCEwPT09dGhpcy52aXNpYmxlfHwhMT09PXRoaXMuY2hhcnQub3B0aW9ucy5jaGFydC5pZ25vcmVIaWRkZW5TZXJpZXMpKXt2YXIgYT1cbnRoaXMucHJvY2Vzc2VkWERhdGEsZD10aGlzLnByb2Nlc3NlZFlEYXRhLGM9W10sZj1kLmxlbmd0aCxwPXRoaXMub3B0aW9ucyx0PXAudGhyZXNob2xkLG09cC5zdGFydEZyb21UaHJlc2hvbGQ/dDowLGI9cC5zdGFjayxwPXAuc3RhY2tpbmcscT10aGlzLnN0YWNrS2V5LHY9XCItXCIrcSxGPXRoaXMubmVnU3RhY2tzLGU9dGhpcy55QXhpcyxyPWUuc3RhY2tzLHg9ZS5vbGRTdGFja3MsQSxrLHcsQyxKLEcsZztlLnN0YWNrc1RvdWNoZWQrPTE7Zm9yKEo9MDtKPGY7SisrKUc9YVtKXSxnPWRbSl0sQT10aGlzLmdldFN0YWNrSW5kaWNhdG9yKEEsRyx0aGlzLmluZGV4KSxDPUEua2V5LHc9KGs9RiYmZzwobT8wOnQpKT92OnEsclt3XXx8KHJbd109e30pLHJbd11bR118fCh4W3ddJiZ4W3ddW0ddPyhyW3ddW0ddPXhbd11bR10sclt3XVtHXS50b3RhbD1udWxsKTpyW3ddW0ddPW5ldyBEKGUsZS5vcHRpb25zLnN0YWNrTGFiZWxzLGssRyxiKSksdz1yW3ddW0ddLG51bGwhPT1nJiYody5wb2ludHNbQ109XG53LnBvaW50c1t0aGlzLmluZGV4XT1bbCh3LmN1bSxtKV0saCh3LmN1bSl8fCh3LmJhc2U9Qyksdy50b3VjaGVkPWUuc3RhY2tzVG91Y2hlZCwwPEEuaW5kZXgmJiExPT09dGhpcy5zaW5nbGVTdGFja3MmJih3LnBvaW50c1tDXVswXT13LnBvaW50c1t0aGlzLmluZGV4K1wiLFwiK0crXCIsMFwiXVswXSkpLFwicGVyY2VudFwiPT09cD8oaz1rP3E6dixGJiZyW2tdJiZyW2tdW0ddPyhrPXJba11bR10sdy50b3RhbD1rLnRvdGFsPU1hdGgubWF4KGsudG90YWwsdy50b3RhbCkrTWF0aC5hYnMoZyl8fDApOncudG90YWw9SSh3LnRvdGFsKyhNYXRoLmFicyhnKXx8MCkpKTp3LnRvdGFsPUkody50b3RhbCsoZ3x8MCkpLHcuY3VtPWwody5jdW0sbSkrKGd8fDApLG51bGwhPT1nJiYody5wb2ludHNbQ10ucHVzaCh3LmN1bSksY1tKXT13LmN1bSk7XCJwZXJjZW50XCI9PT1wJiYoZS51c2VQZXJjZW50YWdlPSEwKTt0aGlzLnN0YWNrZWRZRGF0YT1jO2Uub2xkU3RhY2tzPXt9fX07YS5wcm90b3R5cGUuc2V0UGVyY2VudFN0YWNrcz1cbmZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxkPWEuc3RhY2tLZXksYz1hLnlBeGlzLnN0YWNrcyxmPWEucHJvY2Vzc2VkWERhdGEsaDtwKFtkLFwiLVwiK2RdLGZ1bmN0aW9uKGQpe2Zvcih2YXIgbT1mLmxlbmd0aCxiLG47bS0tOylpZihiPWZbbV0saD1hLmdldFN0YWNrSW5kaWNhdG9yKGgsYixhLmluZGV4LGQpLGI9KG49Y1tkXSYmY1tkXVtiXSkmJm4ucG9pbnRzW2gua2V5XSluPW4udG90YWw/MTAwL24udG90YWw6MCxiWzBdPUkoYlswXSpuKSxiWzFdPUkoYlsxXSpuKSxhLnN0YWNrZWRZRGF0YVttXT1iWzFdfSl9O2EucHJvdG90eXBlLmdldFN0YWNrSW5kaWNhdG9yPWZ1bmN0aW9uKGEsZCxjLGYpeyFoKGEpfHxhLnghPT1kfHxmJiZhLmtleSE9PWY/YT17eDpkLGluZGV4OjAsa2V5OmZ9OmEuaW5kZXgrKzthLmtleT1bYyxkLGEuaW5kZXhdLmpvaW4oKTtyZXR1cm4gYX19KShMKTsoZnVuY3Rpb24oYSl7dmFyIEQ9YS5hZGRFdmVudCxDPWEuYW5pbWF0ZSxHPWEuQXhpcyxJPWEuY3JlYXRlRWxlbWVudCxcbmg9YS5jc3MsZj1hLmRlZmluZWQscD1hLmVhY2gsdj1hLmVyYXNlLGw9YS5leHRlbmQsdT1hLmZpcmVFdmVudCxkPWEuaW5BcnJheSxjPWEuaXNOdW1iZXIsbj1hLmlzT2JqZWN0LHk9YS5tZXJnZSx0PWEucGljayxtPWEuUG9pbnQsYj1hLlNlcmllcyxxPWEuc2VyaWVzVHlwZXMsej1hLnNldEFuaW1hdGlvbixGPWEuc3BsYXQ7bChhLkNoYXJ0LnByb3RvdHlwZSx7YWRkU2VyaWVzOmZ1bmN0aW9uKGEsYixjKXt2YXIgZSxkPXRoaXM7YSYmKGI9dChiLCEwKSx1KGQsXCJhZGRTZXJpZXNcIix7b3B0aW9uczphfSxmdW5jdGlvbigpe2U9ZC5pbml0U2VyaWVzKGEpO2QuaXNEaXJ0eUxlZ2VuZD0hMDtkLmxpbmtTZXJpZXMoKTtiJiZkLnJlZHJhdyhjKX0pKTtyZXR1cm4gZX0sYWRkQXhpczpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP1wieEF4aXNcIjpcInlBeGlzXCIsZj10aGlzLm9wdGlvbnM7YT15KGEse2luZGV4OnRoaXNbZV0ubGVuZ3RoLGlzWDpifSk7bmV3IEcodGhpcyxhKTtmW2VdPUYoZltlXXx8XG57fSk7ZltlXS5wdXNoKGEpO3QoYywhMCkmJnRoaXMucmVkcmF3KGQpfSxzaG93TG9hZGluZzpmdW5jdGlvbihhKXt2YXIgYj10aGlzLGM9Yi5vcHRpb25zLGU9Yi5sb2FkaW5nRGl2LGQ9Yy5sb2FkaW5nLGY9ZnVuY3Rpb24oKXtlJiZoKGUse2xlZnQ6Yi5wbG90TGVmdCtcInB4XCIsdG9wOmIucGxvdFRvcCtcInB4XCIsd2lkdGg6Yi5wbG90V2lkdGgrXCJweFwiLGhlaWdodDpiLnBsb3RIZWlnaHQrXCJweFwifSl9O2V8fChiLmxvYWRpbmdEaXY9ZT1JKFwiZGl2XCIse2NsYXNzTmFtZTpcImhpZ2hjaGFydHMtbG9hZGluZyBoaWdoY2hhcnRzLWxvYWRpbmctaGlkZGVuXCJ9LG51bGwsYi5jb250YWluZXIpLGIubG9hZGluZ1NwYW49SShcInNwYW5cIix7Y2xhc3NOYW1lOlwiaGlnaGNoYXJ0cy1sb2FkaW5nLWlubmVyXCJ9LG51bGwsZSksRChiLFwicmVkcmF3XCIsZikpO2UuY2xhc3NOYW1lPVwiaGlnaGNoYXJ0cy1sb2FkaW5nXCI7Yi5sb2FkaW5nU3Bhbi5pbm5lckhUTUw9YXx8Yy5sYW5nLmxvYWRpbmc7aChlLGwoZC5zdHlsZSxcbnt6SW5kZXg6MTB9KSk7aChiLmxvYWRpbmdTcGFuLGQubGFiZWxTdHlsZSk7Yi5sb2FkaW5nU2hvd258fChoKGUse29wYWNpdHk6MCxkaXNwbGF5OlwiXCJ9KSxDKGUse29wYWNpdHk6ZC5zdHlsZS5vcGFjaXR5fHwuNX0se2R1cmF0aW9uOmQuc2hvd0R1cmF0aW9ufHwwfSkpO2IubG9hZGluZ1Nob3duPSEwO2YoKX0saGlkZUxvYWRpbmc6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9wdGlvbnMsYj10aGlzLmxvYWRpbmdEaXY7YiYmKGIuY2xhc3NOYW1lPVwiaGlnaGNoYXJ0cy1sb2FkaW5nIGhpZ2hjaGFydHMtbG9hZGluZy1oaWRkZW5cIixDKGIse29wYWNpdHk6MH0se2R1cmF0aW9uOmEubG9hZGluZy5oaWRlRHVyYXRpb258fDEwMCxjb21wbGV0ZTpmdW5jdGlvbigpe2goYix7ZGlzcGxheTpcIm5vbmVcIn0pfX0pKTt0aGlzLmxvYWRpbmdTaG93bj0hMX0scHJvcHNSZXF1aXJlRGlydHlCb3g6XCJiYWNrZ3JvdW5kQ29sb3IgYm9yZGVyQ29sb3IgYm9yZGVyV2lkdGggbWFyZ2luIG1hcmdpblRvcCBtYXJnaW5SaWdodCBtYXJnaW5Cb3R0b20gbWFyZ2luTGVmdCBzcGFjaW5nIHNwYWNpbmdUb3Agc3BhY2luZ1JpZ2h0IHNwYWNpbmdCb3R0b20gc3BhY2luZ0xlZnQgYm9yZGVyUmFkaXVzIHBsb3RCYWNrZ3JvdW5kQ29sb3IgcGxvdEJhY2tncm91bmRJbWFnZSBwbG90Qm9yZGVyQ29sb3IgcGxvdEJvcmRlcldpZHRoIHBsb3RTaGFkb3cgc2hhZG93XCIuc3BsaXQoXCIgXCIpLFxucHJvcHNSZXF1aXJlVXBkYXRlU2VyaWVzOlwiY2hhcnQuaW52ZXJ0ZWQgY2hhcnQucG9sYXIgY2hhcnQuaWdub3JlSGlkZGVuU2VyaWVzIGNoYXJ0LnR5cGUgY29sb3JzIHBsb3RPcHRpb25zXCIuc3BsaXQoXCIgXCIpLHVwZGF0ZTpmdW5jdGlvbihhLGIpe3ZhciBlLGg9e2NyZWRpdHM6XCJhZGRDcmVkaXRzXCIsdGl0bGU6XCJzZXRUaXRsZVwiLHN1YnRpdGxlOlwic2V0U3VidGl0bGVcIn0saz1hLmNoYXJ0LG0sbjtpZihrKXt5KCEwLHRoaXMub3B0aW9ucy5jaGFydCxrKTtcImNsYXNzTmFtZVwiaW4gayYmdGhpcy5zZXRDbGFzc05hbWUoay5jbGFzc05hbWUpO2lmKFwiaW52ZXJ0ZWRcImluIGt8fFwicG9sYXJcImluIGspdGhpcy5wcm9wRnJvbVNlcmllcygpLG09ITA7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiYoLTEhPT1kKFwiY2hhcnQuXCIrZSx0aGlzLnByb3BzUmVxdWlyZVVwZGF0ZVNlcmllcykmJihuPSEwKSwtMSE9PWQoZSx0aGlzLnByb3BzUmVxdWlyZURpcnR5Qm94KSYmKHRoaXMuaXNEaXJ0eUJveD1cbiEwKSk7XCJzdHlsZVwiaW4gayYmdGhpcy5yZW5kZXJlci5zZXRTdHlsZShrLnN0eWxlKX1mb3IoZSBpbiBhKXtpZih0aGlzW2VdJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdGhpc1tlXS51cGRhdGUpdGhpc1tlXS51cGRhdGUoYVtlXSwhMSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgdGhpc1toW2VdXSl0aGlzW2hbZV1dKGFbZV0pO1wiY2hhcnRcIiE9PWUmJi0xIT09ZChlLHRoaXMucHJvcHNSZXF1aXJlVXBkYXRlU2VyaWVzKSYmKG49ITApfWEuY29sb3JzJiYodGhpcy5vcHRpb25zLmNvbG9ycz1hLmNvbG9ycyk7YS5wbG90T3B0aW9ucyYmeSghMCx0aGlzLm9wdGlvbnMucGxvdE9wdGlvbnMsYS5wbG90T3B0aW9ucyk7cChbXCJ4QXhpc1wiLFwieUF4aXNcIixcInNlcmllc1wiXSxmdW5jdGlvbihiKXthW2JdJiZwKEYoYVtiXSksZnVuY3Rpb24oYSl7dmFyIGM9ZihhLmlkKSYmdGhpcy5nZXQoYS5pZCl8fHRoaXNbYl1bMF07YyYmYy5jb2xsPT09YiYmYy51cGRhdGUoYSwhMSl9LHRoaXMpfSx0aGlzKTtcbm0mJnAodGhpcy5heGVzLGZ1bmN0aW9uKGEpe2EudXBkYXRlKHt9LCExKX0pO24mJnAodGhpcy5zZXJpZXMsZnVuY3Rpb24oYSl7YS51cGRhdGUoe30sITEpfSk7YS5sb2FkaW5nJiZ5KCEwLHRoaXMub3B0aW9ucy5sb2FkaW5nLGEubG9hZGluZyk7ZT1rJiZrLndpZHRoO2s9ayYmay5oZWlnaHQ7YyhlKSYmZSE9PXRoaXMuY2hhcnRXaWR0aHx8YyhrKSYmayE9PXRoaXMuY2hhcnRIZWlnaHQ/dGhpcy5zZXRTaXplKGUsayk6dChiLCEwKSYmdGhpcy5yZWRyYXcoKX0sc2V0U3VidGl0bGU6ZnVuY3Rpb24oYSl7dGhpcy5zZXRUaXRsZSh2b2lkIDAsYSl9fSk7bChtLnByb3RvdHlwZSx7dXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQpe2Z1bmN0aW9uIGUoKXtmLmFwcGx5T3B0aW9ucyhhKTtudWxsPT09Zi55JiZtJiYoZi5ncmFwaGljPW0uZGVzdHJveSgpKTtuKGEsITApJiYobSYmbS5lbGVtZW50JiZhJiZhLm1hcmtlciYmYS5tYXJrZXIuc3ltYm9sJiYoZi5ncmFwaGljPW0uZGVzdHJveSgpKSxcbmEmJmEuZGF0YUxhYmVscyYmZi5kYXRhTGFiZWwmJihmLmRhdGFMYWJlbD1mLmRhdGFMYWJlbC5kZXN0cm95KCkpKTtsPWYuaW5kZXg7aC51cGRhdGVQYXJhbGxlbEFycmF5cyhmLGwpO3IuZGF0YVtsXT1uKHIuZGF0YVtsXSwhMCk/Zi5vcHRpb25zOmE7aC5pc0RpcnR5PWguaXNEaXJ0eURhdGE9ITA7IWguZml4ZWRCb3gmJmguaGFzQ2FydGVzaWFuU2VyaWVzJiYoZy5pc0RpcnR5Qm94PSEwKTtcInBvaW50XCI9PT1yLmxlZ2VuZFR5cGUmJihnLmlzRGlydHlMZWdlbmQ9ITApO2ImJmcucmVkcmF3KGMpfXZhciBmPXRoaXMsaD1mLnNlcmllcyxtPWYuZ3JhcGhpYyxsLGc9aC5jaGFydCxyPWgub3B0aW9ucztiPXQoYiwhMCk7ITE9PT1kP2UoKTpmLmZpcmVQb2ludEV2ZW50KFwidXBkYXRlXCIse29wdGlvbnM6YX0sZSl9LHJlbW92ZTpmdW5jdGlvbihhLGIpe3RoaXMuc2VyaWVzLnJlbW92ZVBvaW50KGQodGhpcyx0aGlzLnNlcmllcy5kYXRhKSxhLGIpfX0pO2woYi5wcm90b3R5cGUse2FkZFBvaW50OmZ1bmN0aW9uKGEsXG5iLGMsZCl7dmFyIGU9dGhpcy5vcHRpb25zLGY9dGhpcy5kYXRhLGg9dGhpcy5jaGFydCxtPXRoaXMueEF4aXMmJnRoaXMueEF4aXMubmFtZXMsbj1lLmRhdGEsZyxsLHI9dGhpcy54RGF0YSxxLHA7Yj10KGIsITApO2c9e3Nlcmllczp0aGlzfTt0aGlzLnBvaW50Q2xhc3MucHJvdG90eXBlLmFwcGx5T3B0aW9ucy5hcHBseShnLFthXSk7cD1nLng7cT1yLmxlbmd0aDtpZih0aGlzLnJlcXVpcmVTb3J0aW5nJiZwPHJbcS0xXSlmb3IobD0hMDtxJiZyW3EtMV0+cDspcS0tO3RoaXMudXBkYXRlUGFyYWxsZWxBcnJheXMoZyxcInNwbGljZVwiLHEsMCwwKTt0aGlzLnVwZGF0ZVBhcmFsbGVsQXJyYXlzKGcscSk7bSYmZy5uYW1lJiYobVtwXT1nLm5hbWUpO24uc3BsaWNlKHEsMCxhKTtsJiYodGhpcy5kYXRhLnNwbGljZShxLDAsbnVsbCksdGhpcy5wcm9jZXNzRGF0YSgpKTtcInBvaW50XCI9PT1lLmxlZ2VuZFR5cGUmJnRoaXMuZ2VuZXJhdGVQb2ludHMoKTtjJiYoZlswXSYmZlswXS5yZW1vdmU/XG5mWzBdLnJlbW92ZSghMSk6KGYuc2hpZnQoKSx0aGlzLnVwZGF0ZVBhcmFsbGVsQXJyYXlzKGcsXCJzaGlmdFwiKSxuLnNoaWZ0KCkpKTt0aGlzLmlzRGlydHlEYXRhPXRoaXMuaXNEaXJ0eT0hMDtiJiZoLnJlZHJhdyhkKX0scmVtb3ZlUG9pbnQ6ZnVuY3Rpb24oYSxiLGMpe3ZhciBlPXRoaXMsZD1lLmRhdGEsZj1kW2FdLGg9ZS5wb2ludHMsbT1lLmNoYXJ0LG49ZnVuY3Rpb24oKXtoJiZoLmxlbmd0aD09PWQubGVuZ3RoJiZoLnNwbGljZShhLDEpO2Quc3BsaWNlKGEsMSk7ZS5vcHRpb25zLmRhdGEuc3BsaWNlKGEsMSk7ZS51cGRhdGVQYXJhbGxlbEFycmF5cyhmfHx7c2VyaWVzOmV9LFwic3BsaWNlXCIsYSwxKTtmJiZmLmRlc3Ryb3koKTtlLmlzRGlydHk9ITA7ZS5pc0RpcnR5RGF0YT0hMDtiJiZtLnJlZHJhdygpfTt6KGMsbSk7Yj10KGIsITApO2Y/Zi5maXJlUG9pbnRFdmVudChcInJlbW92ZVwiLG51bGwsbik6bigpfSxyZW1vdmU6ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGUoKXtkLmRlc3Ryb3koKTtcbmYuaXNEaXJ0eUxlZ2VuZD1mLmlzRGlydHlCb3g9ITA7Zi5saW5rU2VyaWVzKCk7dChhLCEwKSYmZi5yZWRyYXcoYil9dmFyIGQ9dGhpcyxmPWQuY2hhcnQ7ITEhPT1jP3UoZCxcInJlbW92ZVwiLG51bGwsZSk6ZSgpfSx1cGRhdGU6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLGU9dGhpcy5jaGFydCxkPXRoaXMudXNlck9wdGlvbnMsZj10aGlzLnR5cGUsaD1hLnR5cGV8fGQudHlwZXx8ZS5vcHRpb25zLmNoYXJ0LnR5cGUsbT1xW2ZdLnByb3RvdHlwZSxuPVtcImdyb3VwXCIsXCJtYXJrZXJHcm91cFwiLFwiZGF0YUxhYmVsc0dyb3VwXCJdLGc7aWYoaCYmaCE9PWZ8fHZvaWQgMCE9PWEuekluZGV4KW4ubGVuZ3RoPTA7cChuLGZ1bmN0aW9uKGEpe25bYV09Y1thXTtkZWxldGUgY1thXX0pO2E9eShkLHthbmltYXRpb246ITEsaW5kZXg6dGhpcy5pbmRleCxwb2ludFN0YXJ0OnRoaXMueERhdGFbMF19LHtkYXRhOnRoaXMub3B0aW9ucy5kYXRhfSxhKTt0aGlzLnJlbW92ZSghMSxudWxsLCExKTtmb3IoZyBpbiBtKXRoaXNbZ109XG52b2lkIDA7bCh0aGlzLHFbaHx8Zl0ucHJvdG90eXBlKTtwKG4sZnVuY3Rpb24oYSl7Y1thXT1uW2FdfSk7dGhpcy5pbml0KGUsYSk7ZS5saW5rU2VyaWVzKCk7dChiLCEwKSYmZS5yZWRyYXcoITEpfX0pO2woRy5wcm90b3R5cGUse3VwZGF0ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuY2hhcnQ7YT1jLm9wdGlvbnNbdGhpcy5jb2xsXVt0aGlzLm9wdGlvbnMuaW5kZXhdPXkodGhpcy51c2VyT3B0aW9ucyxhKTt0aGlzLmRlc3Ryb3koITApO3RoaXMuaW5pdChjLGwoYSx7ZXZlbnRzOnZvaWQgMH0pKTtjLmlzRGlydHlCb3g9ITA7dChiLCEwKSYmYy5yZWRyYXcoKX0scmVtb3ZlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj10aGlzLmNoYXJ0LGM9dGhpcy5jb2xsLGU9dGhpcy5zZXJpZXMsZD1lLmxlbmd0aDtkLS07KWVbZF0mJmVbZF0ucmVtb3ZlKCExKTt2KGIuYXhlcyx0aGlzKTt2KGJbY10sdGhpcyk7Yi5vcHRpb25zW2NdLnNwbGljZSh0aGlzLm9wdGlvbnMuaW5kZXgsMSk7cChiW2NdLFxuZnVuY3Rpb24oYSxiKXthLm9wdGlvbnMuaW5kZXg9Yn0pO3RoaXMuZGVzdHJveSgpO2IuaXNEaXJ0eUJveD0hMDt0KGEsITApJiZiLnJlZHJhdygpfSxzZXRUaXRsZTpmdW5jdGlvbihhLGIpe3RoaXMudXBkYXRlKHt0aXRsZTphfSxiKX0sc2V0Q2F0ZWdvcmllczpmdW5jdGlvbihhLGIpe3RoaXMudXBkYXRlKHtjYXRlZ29yaWVzOmF9LGIpfX0pfSkoTCk7KGZ1bmN0aW9uKGEpe3ZhciBEPWEuY29sb3IsQz1hLmVhY2gsRz1hLm1hcCxJPWEucGljayxoPWEuU2VyaWVzLGY9YS5zZXJpZXNUeXBlO2YoXCJhcmVhXCIsXCJsaW5lXCIse3NvZnRUaHJlc2hvbGQ6ITEsdGhyZXNob2xkOjB9LHtzaW5nbGVTdGFja3M6ITEsZ2V0U3RhY2tQb2ludHM6ZnVuY3Rpb24oKXt2YXIgYT1bXSxmPVtdLGg9dGhpcy54QXhpcyx1PXRoaXMueUF4aXMsZD11LnN0YWNrc1t0aGlzLnN0YWNrS2V5XSxjPXt9LG49dGhpcy5wb2ludHMseT10aGlzLmluZGV4LHQ9dS5zZXJpZXMsbT10Lmxlbmd0aCxiLHE9SSh1Lm9wdGlvbnMucmV2ZXJzZWRTdGFja3MsXG4hMCk/MTotMSx6LEY7aWYodGhpcy5vcHRpb25zLnN0YWNraW5nKXtmb3Ioej0wO3o8bi5sZW5ndGg7eisrKWNbblt6XS54XT1uW3pdO2ZvcihGIGluIGQpbnVsbCE9PWRbRl0udG90YWwmJmYucHVzaChGKTtmLnNvcnQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS1ifSk7Yj1HKHQsZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aXNpYmxlfSk7QyhmLGZ1bmN0aW9uKGUsbil7dmFyIGw9MCxyLGs7aWYoY1tlXSYmIWNbZV0uaXNOdWxsKWEucHVzaChjW2VdKSxDKFstMSwxXSxmdW5jdGlvbihhKXt2YXIgaD0xPT09YT9cInJpZ2h0TnVsbFwiOlwibGVmdE51bGxcIixsPTAsdD1kW2ZbbithXV07aWYodClmb3Ioej15OzA8PXomJno8bTspcj10LnBvaW50c1t6XSxyfHwoej09PXk/Y1tlXVtoXT0hMDpiW3pdJiYoaz1kW2VdLnBvaW50c1t6XSkmJihsLT1rWzFdLWtbMF0pKSx6Kz1xO2NbZV1bMT09PWE/XCJyaWdodENsaWZmXCI6XCJsZWZ0Q2xpZmZcIl09bH0pO2Vsc2V7Zm9yKHo9eTswPD16JiZ6PG07KXtpZihyPVxuZFtlXS5wb2ludHNbel0pe2w9clsxXTticmVha316Kz1xfWw9dS50b1BpeGVscyhsLCEwKTthLnB1c2goe2lzTnVsbDohMCxwbG90WDpoLnRvUGl4ZWxzKGUsITApLHBsb3RZOmwseUJvdHRvbTpsfSl9fSl9cmV0dXJuIGF9LGdldEdyYXBoUGF0aDpmdW5jdGlvbihhKXt2YXIgZj1oLnByb3RvdHlwZS5nZXRHcmFwaFBhdGgsbD10aGlzLm9wdGlvbnMscD1sLnN0YWNraW5nLGQ9dGhpcy55QXhpcyxjLG4seT1bXSx0PVtdLG09dGhpcy5pbmRleCxiLHE9ZC5zdGFja3NbdGhpcy5zdGFja0tleV0sej1sLnRocmVzaG9sZCxGPWQuZ2V0VGhyZXNob2xkKGwudGhyZXNob2xkKSxlLGw9bC5jb25uZWN0TnVsbHN8fFwicGVyY2VudFwiPT09cCxyPWZ1bmN0aW9uKGMsZSxmKXt2YXIgaz1hW2NdO2M9cCYmcVtrLnhdLnBvaW50c1ttXTt2YXIgaD1rW2YrXCJOdWxsXCJdfHwwO2Y9a1tmK1wiQ2xpZmZcIl18fDA7dmFyIG4sbCxrPSEwO2Z8fGg/KG49KGg/Y1swXTpjWzFdKStmLGw9Y1swXStmLGs9ISFoKTohcCYmXG5hW2VdJiZhW2VdLmlzTnVsbCYmKG49bD16KTt2b2lkIDAhPT1uJiYodC5wdXNoKHtwbG90WDpiLHBsb3RZOm51bGw9PT1uP0Y6ZC5nZXRUaHJlc2hvbGQobiksaXNOdWxsOmt9KSx5LnB1c2goe3Bsb3RYOmIscGxvdFk6bnVsbD09PWw/RjpkLmdldFRocmVzaG9sZChsKSxkb0N1cnZlOiExfSkpfTthPWF8fHRoaXMucG9pbnRzO3AmJihhPXRoaXMuZ2V0U3RhY2tQb2ludHMoKSk7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKylpZihuPWFbY10uaXNOdWxsLGI9SShhW2NdLnJlY3RQbG90WCxhW2NdLnBsb3RYKSxlPUkoYVtjXS55Qm90dG9tLEYpLCFufHxsKWx8fHIoYyxjLTEsXCJsZWZ0XCIpLG4mJiFwJiZsfHwodC5wdXNoKGFbY10pLHkucHVzaCh7eDpjLHBsb3RYOmIscGxvdFk6ZX0pKSxsfHxyKGMsYysxLFwicmlnaHRcIik7Yz1mLmNhbGwodGhpcyx0LCEwLCEwKTt5LnJldmVyc2VkPSEwO249Zi5jYWxsKHRoaXMseSwhMCwhMCk7bi5sZW5ndGgmJihuWzBdPVwiTFwiKTtuPWMuY29uY2F0KG4pO2Y9XG5mLmNhbGwodGhpcyx0LCExLGwpO24ueE1hcD1jLnhNYXA7dGhpcy5hcmVhUGF0aD1uO3JldHVybiBmfSxkcmF3R3JhcGg6ZnVuY3Rpb24oKXt0aGlzLmFyZWFQYXRoPVtdO2gucHJvdG90eXBlLmRyYXdHcmFwaC5hcHBseSh0aGlzKTt2YXIgYT10aGlzLGY9dGhpcy5hcmVhUGF0aCxsPXRoaXMub3B0aW9ucyx1PVtbXCJhcmVhXCIsXCJoaWdoY2hhcnRzLWFyZWFcIix0aGlzLmNvbG9yLGwuZmlsbENvbG9yXV07Qyh0aGlzLnpvbmVzLGZ1bmN0aW9uKGQsYyl7dS5wdXNoKFtcInpvbmUtYXJlYS1cIitjLFwiaGlnaGNoYXJ0cy1hcmVhIGhpZ2hjaGFydHMtem9uZS1hcmVhLVwiK2MrXCIgXCIrZC5jbGFzc05hbWUsZC5jb2xvcnx8YS5jb2xvcixkLmZpbGxDb2xvcnx8bC5maWxsQ29sb3JdKX0pO0ModSxmdW5jdGlvbihkKXt2YXIgYz1kWzBdLGg9YVtjXTtoPyhoLmVuZFg9Zi54TWFwLGguYW5pbWF0ZSh7ZDpmfSkpOihoPWFbY109YS5jaGFydC5yZW5kZXJlci5wYXRoKGYpLmFkZENsYXNzKGRbMV0pLmF0dHIoe2ZpbGw6SShkWzNdLFxuRChkWzJdKS5zZXRPcGFjaXR5KEkobC5maWxsT3BhY2l0eSwuNzUpKS5nZXQoKSksekluZGV4OjB9KS5hZGQoYS5ncm91cCksaC5pc0FyZWE9ITApO2guc3RhcnRYPWYueE1hcDtoLnNoaWZ0VW5pdD1sLnN0ZXA/MjoxfSl9LGRyYXdMZWdlbmRTeW1ib2w6YS5MZWdlbmRTeW1ib2xNaXhpbi5kcmF3UmVjdGFuZ2xlfSl9KShMKTsoZnVuY3Rpb24oYSl7dmFyIEQ9YS5waWNrO2E9YS5zZXJpZXNUeXBlO2EoXCJzcGxpbmVcIixcImxpbmVcIix7fSx7Z2V0UG9pbnRTcGxpbmU6ZnVuY3Rpb24oYSxHLEkpe3ZhciBoPUcucGxvdFgsZj1HLnBsb3RZLHA9YVtJLTFdO0k9YVtJKzFdO3ZhciB2LGwsdSxkO2lmKHAmJiFwLmlzTnVsbCYmITEhPT1wLmRvQ3VydmUmJkkmJiFJLmlzTnVsbCYmITEhPT1JLmRvQ3VydmUpe2E9cC5wbG90WTt1PUkucGxvdFg7ST1JLnBsb3RZO3ZhciBjPTA7dj0oMS41KmgrcC5wbG90WCkvMi41O2w9KDEuNSpmK2EpLzIuNTt1PSgxLjUqaCt1KS8yLjU7ZD0oMS41KmYrSSkvMi41O1xudSE9PXYmJihjPShkLWwpKih1LWgpLyh1LXYpK2YtZCk7bCs9YztkKz1jO2w+YSYmbD5mPyhsPU1hdGgubWF4KGEsZiksZD0yKmYtbCk6bDxhJiZsPGYmJihsPU1hdGgubWluKGEsZiksZD0yKmYtbCk7ZD5JJiZkPmY/KGQ9TWF0aC5tYXgoSSxmKSxsPTIqZi1kKTpkPEkmJmQ8ZiYmKGQ9TWF0aC5taW4oSSxmKSxsPTIqZi1kKTtHLnJpZ2h0Q29udFg9dTtHLnJpZ2h0Q29udFk9ZH1HPVtcIkNcIixEKHAucmlnaHRDb250WCxwLnBsb3RYKSxEKHAucmlnaHRDb250WSxwLnBsb3RZKSxEKHYsaCksRChsLGYpLGgsZl07cC5yaWdodENvbnRYPXAucmlnaHRDb250WT1udWxsO3JldHVybiBHfX0pfSkoTCk7KGZ1bmN0aW9uKGEpe3ZhciBEPWEuc2VyaWVzVHlwZXMuYXJlYS5wcm90b3R5cGUsQz1hLnNlcmllc1R5cGU7QyhcImFyZWFzcGxpbmVcIixcInNwbGluZVwiLGEuZGVmYXVsdFBsb3RPcHRpb25zLmFyZWEse2dldFN0YWNrUG9pbnRzOkQuZ2V0U3RhY2tQb2ludHMsZ2V0R3JhcGhQYXRoOkQuZ2V0R3JhcGhQYXRoLFxuc2V0U3RhY2tDbGlmZnM6RC5zZXRTdGFja0NsaWZmcyxkcmF3R3JhcGg6RC5kcmF3R3JhcGgsZHJhd0xlZ2VuZFN5bWJvbDphLkxlZ2VuZFN5bWJvbE1peGluLmRyYXdSZWN0YW5nbGV9KX0pKEwpOyhmdW5jdGlvbihhKXt2YXIgRD1hLmFuaW1PYmplY3QsQz1hLmNvbG9yLEc9YS5lYWNoLEk9YS5leHRlbmQsaD1hLmlzTnVtYmVyLGY9YS5tZXJnZSxwPWEucGljayx2PWEuU2VyaWVzLGw9YS5zZXJpZXNUeXBlLHU9YS5zdmc7bChcImNvbHVtblwiLFwibGluZVwiLHtib3JkZXJSYWRpdXM6MCxncm91cFBhZGRpbmc6LjIsbWFya2VyOm51bGwscG9pbnRQYWRkaW5nOi4xLG1pblBvaW50TGVuZ3RoOjAsY3JvcFRocmVzaG9sZDo1MCxwb2ludFJhbmdlOm51bGwsc3RhdGVzOntob3Zlcjp7aGFsbzohMSxicmlnaHRuZXNzOi4xLHNoYWRvdzohMX0sc2VsZWN0Ontjb2xvcjpcIiNjY2NjY2NcIixib3JkZXJDb2xvcjpcIiMwMDAwMDBcIixzaGFkb3c6ITF9fSxkYXRhTGFiZWxzOnthbGlnbjpudWxsLHZlcnRpY2FsQWxpZ246bnVsbCxcbnk6bnVsbH0sc29mdFRocmVzaG9sZDohMSxzdGFydEZyb21UaHJlc2hvbGQ6ITAsc3RpY2t5VHJhY2tpbmc6ITEsdG9vbHRpcDp7ZGlzdGFuY2U6Nn0sdGhyZXNob2xkOjAsYm9yZGVyQ29sb3I6XCIjZmZmZmZmXCJ9LHtjcm9wU2hvdWxkZXI6MCxkaXJlY3RUb3VjaDohMCx0cmFja2VyR3JvdXBzOltcImdyb3VwXCIsXCJkYXRhTGFiZWxzR3JvdXBcIl0sbmVnU3RhY2tzOiEwLGluaXQ6ZnVuY3Rpb24oKXt2LnByb3RvdHlwZS5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgYT10aGlzLGM9YS5jaGFydDtjLmhhc1JlbmRlcmVkJiZHKGMuc2VyaWVzLGZ1bmN0aW9uKGMpe2MudHlwZT09PWEudHlwZSYmKGMuaXNEaXJ0eT0hMCl9KX0sZ2V0Q29sdW1uTWV0cmljczpmdW5jdGlvbigpe3ZhciBhPXRoaXMsYz1hLm9wdGlvbnMsZj1hLnhBeGlzLGg9YS55QXhpcyxsPWYucmV2ZXJzZWQsbSxiPXt9LHE9MDshMT09PWMuZ3JvdXBpbmc/cT0xOkcoYS5jaGFydC5zZXJpZXMsZnVuY3Rpb24oYyl7dmFyIGU9XG5jLm9wdGlvbnMsZD1jLnlBeGlzLGY7Yy50eXBlPT09YS50eXBlJiZjLnZpc2libGUmJmgubGVuPT09ZC5sZW4mJmgucG9zPT09ZC5wb3MmJihlLnN0YWNraW5nPyhtPWMuc3RhY2tLZXksdm9pZCAwPT09YlttXSYmKGJbbV09cSsrKSxmPWJbbV0pOiExIT09ZS5ncm91cGluZyYmKGY9cSsrKSxjLmNvbHVtbkluZGV4PWYpfSk7dmFyIHU9TWF0aC5taW4oTWF0aC5hYnMoZi50cmFuc0EpKihmLm9yZGluYWxTbG9wZXx8Yy5wb2ludFJhbmdlfHxmLmNsb3Nlc3RQb2ludFJhbmdlfHxmLnRpY2tJbnRlcnZhbHx8MSksZi5sZW4pLEY9dSpjLmdyb3VwUGFkZGluZyxlPSh1LTIqRikvcSxjPU1hdGgubWluKGMubWF4UG9pbnRXaWR0aHx8Zi5sZW4scChjLnBvaW50V2lkdGgsZSooMS0yKmMucG9pbnRQYWRkaW5nKSkpO2EuY29sdW1uTWV0cmljcz17d2lkdGg6YyxvZmZzZXQ6KGUtYykvMisoRisoKGEuY29sdW1uSW5kZXh8fDApKyhsPzE6MCkpKmUtdS8yKSoobD8tMToxKX07cmV0dXJuIGEuY29sdW1uTWV0cmljc30sXG5jcmlzcENvbDpmdW5jdGlvbihhLGMsZixoKXt2YXIgZD10aGlzLmNoYXJ0LG09dGhpcy5ib3JkZXJXaWR0aCxiPS0obSUyPy41OjApLG09bSUyPy41OjE7ZC5pbnZlcnRlZCYmZC5yZW5kZXJlci5pc1ZNTCYmKG0rPTEpO2Y9TWF0aC5yb3VuZChhK2YpK2I7YT1NYXRoLnJvdW5kKGEpK2I7aD1NYXRoLnJvdW5kKGMraCkrbTtiPS41Pj1NYXRoLmFicyhjKSYmLjU8aDtjPU1hdGgucm91bmQoYykrbTtoLT1jO2ImJmgmJigtLWMsaCs9MSk7cmV0dXJue3g6YSx5OmMsd2lkdGg6Zi1hLGhlaWdodDpofX0sdHJhbnNsYXRlOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxjPWEuY2hhcnQsZj1hLm9wdGlvbnMsaD1hLmRlbnNlPTI+YS5jbG9zZXN0UG9pbnRSYW5nZSphLnhBeGlzLnRyYW5zQSxoPWEuYm9yZGVyV2lkdGg9cChmLmJvcmRlcldpZHRoLGg/MDoxKSxsPWEueUF4aXMsbT1hLnRyYW5zbGF0ZWRUaHJlc2hvbGQ9bC5nZXRUaHJlc2hvbGQoZi50aHJlc2hvbGQpLGI9cChmLm1pblBvaW50TGVuZ3RoLFxuNSkscT1hLmdldENvbHVtbk1ldHJpY3MoKSx1PXEud2lkdGgsRj1hLmJhclc9TWF0aC5tYXgodSwxKzIqaCksZT1hLnBvaW50WE9mZnNldD1xLm9mZnNldDtjLmludmVydGVkJiYobS09LjUpO2YucG9pbnRQYWRkaW5nJiYoRj1NYXRoLmNlaWwoRikpO3YucHJvdG90eXBlLnRyYW5zbGF0ZS5hcHBseShhKTtHKGEucG9pbnRzLGZ1bmN0aW9uKGQpe3ZhciBmPXAoZC55Qm90dG9tLG0pLGg9OTk5K01hdGguYWJzKGYpLGg9TWF0aC5taW4oTWF0aC5tYXgoLWgsZC5wbG90WSksbC5sZW4raCksaz1kLnBsb3RYK2Usbj1GLHE9TWF0aC5taW4oaCxmKSxyLHQ9TWF0aC5tYXgoaCxmKS1xO01hdGguYWJzKHQpPGImJmImJih0PWIscj0hbC5yZXZlcnNlZCYmIWQubmVnYXRpdmV8fGwucmV2ZXJzZWQmJmQubmVnYXRpdmUscT1NYXRoLmFicyhxLW0pPmI/Zi1iOm0tKHI/YjowKSk7ZC5iYXJYPWs7ZC5wb2ludFdpZHRoPXU7ZC50b29sdGlwUG9zPWMuaW52ZXJ0ZWQ/W2wubGVuK2wucG9zLWMucGxvdExlZnQtXG5oLGEueEF4aXMubGVuLWstbi8yLHRdOltrK24vMixoK2wucG9zLWMucGxvdFRvcCx0XTtkLnNoYXBlVHlwZT1cInJlY3RcIjtkLnNoYXBlQXJncz1hLmNyaXNwQ29sLmFwcGx5KGEsZC5pc051bGw/W2QucGxvdFgsbC5sZW4vMiwwLDBdOltrLHEsbix0XSl9KX0sZ2V0U3ltYm9sOmEubm9vcCxkcmF3TGVnZW5kU3ltYm9sOmEuTGVnZW5kU3ltYm9sTWl4aW4uZHJhd1JlY3RhbmdsZSxkcmF3R3JhcGg6ZnVuY3Rpb24oKXt0aGlzLmdyb3VwW3RoaXMuZGVuc2U/XCJhZGRDbGFzc1wiOlwicmVtb3ZlQ2xhc3NcIl0oXCJoaWdoY2hhcnRzLWRlbnNlLWRhdGFcIil9LHBvaW50QXR0cmliczpmdW5jdGlvbihhLGMpe3ZhciBkPXRoaXMub3B0aW9ucyxmLGg9dGhpcy5wb2ludEF0dHJUb09wdGlvbnN8fHt9O2Y9aC5zdHJva2V8fFwiYm9yZGVyQ29sb3JcIjt2YXIgbT1oW1wic3Ryb2tlLXdpZHRoXCJdfHxcImJvcmRlcldpZHRoXCIsYj1hJiZhLmNvbG9yfHx0aGlzLmNvbG9yLGw9YVtmXXx8ZFtmXXx8dGhpcy5jb2xvcnx8XG5iLHA9YVttXXx8ZFttXXx8dGhpc1ttXXx8MCxoPWQuZGFzaFN0eWxlO2EmJnRoaXMuem9uZXMubGVuZ3RoJiYoYj0oYj1hLmdldFpvbmUoKSkmJmIuY29sb3J8fGEub3B0aW9ucy5jb2xvcnx8dGhpcy5jb2xvcik7YyYmKGE9ZC5zdGF0ZXNbY10sYz1hLmJyaWdodG5lc3MsYj1hLmNvbG9yfHx2b2lkIDAhPT1jJiZDKGIpLmJyaWdodGVuKGEuYnJpZ2h0bmVzcykuZ2V0KCl8fGIsbD1hW2ZdfHxsLHA9YVttXXx8cCxoPWEuZGFzaFN0eWxlfHxoKTtmPXtmaWxsOmIsc3Ryb2tlOmwsXCJzdHJva2Utd2lkdGhcIjpwfTtkLmJvcmRlclJhZGl1cyYmKGYucj1kLmJvcmRlclJhZGl1cyk7aCYmKGYuZGFzaHN0eWxlPWgpO3JldHVybiBmfSxkcmF3UG9pbnRzOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxjPXRoaXMuY2hhcnQsbD1hLm9wdGlvbnMscD1jLnJlbmRlcmVyLHQ9bC5hbmltYXRpb25MaW1pdHx8MjUwLG07RyhhLnBvaW50cyxmdW5jdGlvbihiKXt2YXIgZD1iLmdyYXBoaWM7aWYoaChiLnBsb3RZKSYmXG5udWxsIT09Yi55KXttPWIuc2hhcGVBcmdzO2lmKGQpZFtjLnBvaW50Q291bnQ8dD9cImFuaW1hdGVcIjpcImF0dHJcIl0oZihtKSk7ZWxzZSBiLmdyYXBoaWM9ZD1wW2Iuc2hhcGVUeXBlXShtKS5hdHRyKHtcImNsYXNzXCI6Yi5nZXRDbGFzc05hbWUoKX0pLmFkZChiLmdyb3VwfHxhLmdyb3VwKTtkLmF0dHIoYS5wb2ludEF0dHJpYnMoYixiLnNlbGVjdGVkJiZcInNlbGVjdFwiKSkuc2hhZG93KGwuc2hhZG93LG51bGwsbC5zdGFja2luZyYmIWwuYm9yZGVyUmFkaXVzKX1lbHNlIGQmJihiLmdyYXBoaWM9ZC5kZXN0cm95KCkpfSl9LGFuaW1hdGU6ZnVuY3Rpb24oYSl7dmFyIGM9dGhpcyxkPXRoaXMueUF4aXMsZj1jLm9wdGlvbnMsaD10aGlzLmNoYXJ0LmludmVydGVkLG09e307dSYmKGE/KG0uc2NhbGVZPS4wMDEsYT1NYXRoLm1pbihkLnBvcytkLmxlbixNYXRoLm1heChkLnBvcyxkLnRvUGl4ZWxzKGYudGhyZXNob2xkKSkpLGg/bS50cmFuc2xhdGVYPWEtZC5sZW46bS50cmFuc2xhdGVZPWEsYy5ncm91cC5hdHRyKG0pKTpcbihtW2g/XCJ0cmFuc2xhdGVYXCI6XCJ0cmFuc2xhdGVZXCJdPWQucG9zLGMuZ3JvdXAuYW5pbWF0ZShtLEkoRChjLm9wdGlvbnMuYW5pbWF0aW9uKSx7c3RlcDpmdW5jdGlvbihhLGQpe2MuZ3JvdXAuYXR0cih7c2NhbGVZOk1hdGgubWF4KC4wMDEsZC5wb3MpfSl9fSkpLGMuYW5pbWF0ZT1udWxsKSl9LHJlbW92ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMsYz1hLmNoYXJ0O2MuaGFzUmVuZGVyZWQmJkcoYy5zZXJpZXMsZnVuY3Rpb24oYyl7Yy50eXBlPT09YS50eXBlJiYoYy5pc0RpcnR5PSEwKX0pO3YucHJvdG90eXBlLnJlbW92ZS5hcHBseShhLGFyZ3VtZW50cyl9fSl9KShMKTsoZnVuY3Rpb24oYSl7YT1hLnNlcmllc1R5cGU7YShcImJhclwiLFwiY29sdW1uXCIsbnVsbCx7aW52ZXJ0ZWQ6ITB9KX0pKEwpOyhmdW5jdGlvbihhKXt2YXIgRD1hLlNlcmllczthPWEuc2VyaWVzVHlwZTthKFwic2NhdHRlclwiLFwibGluZVwiLHtsaW5lV2lkdGg6MCxtYXJrZXI6e2VuYWJsZWQ6ITB9LHRvb2x0aXA6e2hlYWRlckZvcm1hdDonXFx4M2NzcGFuIHN0eWxlXFx4M2RcImNvbG9yOntwb2ludC5jb2xvcn1cIlxceDNlXFx1MjVjZlxceDNjL3NwYW5cXHgzZSBcXHgzY3NwYW4gc3R5bGVcXHgzZFwiZm9udC1zaXplOiAwLjg1ZW1cIlxceDNlIHtzZXJpZXMubmFtZX1cXHgzYy9zcGFuXFx4M2VcXHgzY2JyL1xceDNlJyxcbnBvaW50Rm9ybWF0OlwieDogXFx4M2NiXFx4M2V7cG9pbnQueH1cXHgzYy9iXFx4M2VcXHgzY2JyL1xceDNleTogXFx4M2NiXFx4M2V7cG9pbnQueX1cXHgzYy9iXFx4M2VcXHgzY2JyL1xceDNlXCJ9fSx7c29ydGVkOiExLHJlcXVpcmVTb3J0aW5nOiExLG5vU2hhcmVkVG9vbHRpcDohMCx0cmFja2VyR3JvdXBzOltcImdyb3VwXCIsXCJtYXJrZXJHcm91cFwiLFwiZGF0YUxhYmVsc0dyb3VwXCJdLHRha2VPcmRpbmFsUG9zaXRpb246ITEsa2REaW1lbnNpb25zOjIsZHJhd0dyYXBoOmZ1bmN0aW9uKCl7dGhpcy5vcHRpb25zLmxpbmVXaWR0aCYmRC5wcm90b3R5cGUuZHJhd0dyYXBoLmNhbGwodGhpcyl9fSl9KShMKTsoZnVuY3Rpb24oYSl7dmFyIEQ9YS5waWNrLEM9YS5yZWxhdGl2ZUxlbmd0aDthLkNlbnRlcmVkU2VyaWVzTWl4aW49e2dldENlbnRlcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMub3B0aW9ucyxJPXRoaXMuY2hhcnQsaD0yKihhLnNsaWNlZE9mZnNldHx8MCksZj1JLnBsb3RXaWR0aC0yKmgsST1JLnBsb3RIZWlnaHQtXG4yKmgscD1hLmNlbnRlcixwPVtEKHBbMF0sXCI1MCVcIiksRChwWzFdLFwiNTAlXCIpLGEuc2l6ZXx8XCIxMDAlXCIsYS5pbm5lclNpemV8fDBdLHY9TWF0aC5taW4oZixJKSxsLHU7Zm9yKGw9MDs0Pmw7KytsKXU9cFtsXSxhPTI+bHx8Mj09PWwmJi8lJC8udGVzdCh1KSxwW2xdPUModSxbZixJLHYscFsyXV1bbF0pKyhhP2g6MCk7cFszXT5wWzJdJiYocFszXT1wWzJdKTtyZXR1cm4gcH19fSkoTCk7KGZ1bmN0aW9uKGEpe3ZhciBEPWEuYWRkRXZlbnQsQz1hLmRlZmluZWQsRz1hLmVhY2gsST1hLmV4dGVuZCxoPWEuaW5BcnJheSxmPWEubm9vcCxwPWEucGljayx2PWEuUG9pbnQsbD1hLlNlcmllcyx1PWEuc2VyaWVzVHlwZSxkPWEuc2V0QW5pbWF0aW9uO3UoXCJwaWVcIixcImxpbmVcIix7Y2VudGVyOltudWxsLG51bGxdLGNsaXA6ITEsY29sb3JCeVBvaW50OiEwLGRhdGFMYWJlbHM6e2Rpc3RhbmNlOjMwLGVuYWJsZWQ6ITAsZm9ybWF0dGVyOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PT10aGlzLnk/XG52b2lkIDA6dGhpcy5wb2ludC5uYW1lfSx4OjB9LGlnbm9yZUhpZGRlblBvaW50OiEwLGxlZ2VuZFR5cGU6XCJwb2ludFwiLG1hcmtlcjpudWxsLHNpemU6bnVsbCxzaG93SW5MZWdlbmQ6ITEsc2xpY2VkT2Zmc2V0OjEwLHN0aWNreVRyYWNraW5nOiExLHRvb2x0aXA6e2ZvbGxvd1BvaW50ZXI6ITB9LGJvcmRlckNvbG9yOlwiI2ZmZmZmZlwiLGJvcmRlcldpZHRoOjEsc3RhdGVzOntob3Zlcjp7YnJpZ2h0bmVzczouMSxzaGFkb3c6ITF9fX0se2lzQ2FydGVzaWFuOiExLHJlcXVpcmVTb3J0aW5nOiExLGRpcmVjdFRvdWNoOiEwLG5vU2hhcmVkVG9vbHRpcDohMCx0cmFja2VyR3JvdXBzOltcImdyb3VwXCIsXCJkYXRhTGFiZWxzR3JvdXBcIl0sYXhpc1R5cGVzOltdLHBvaW50QXR0cmliczphLnNlcmllc1R5cGVzLmNvbHVtbi5wcm90b3R5cGUucG9pbnRBdHRyaWJzLGFuaW1hdGU6ZnVuY3Rpb24oYSl7dmFyIGM9dGhpcyxkPWMucG9pbnRzLGY9Yy5zdGFydEFuZ2xlUmFkO2F8fChHKGQsZnVuY3Rpb24oYSl7dmFyIGI9XG5hLmdyYXBoaWMsZD1hLnNoYXBlQXJncztiJiYoYi5hdHRyKHtyOmEuc3RhcnRSfHxjLmNlbnRlclszXS8yLHN0YXJ0OmYsZW5kOmZ9KSxiLmFuaW1hdGUoe3I6ZC5yLHN0YXJ0OmQuc3RhcnQsZW5kOmQuZW5kfSxjLm9wdGlvbnMuYW5pbWF0aW9uKSl9KSxjLmFuaW1hdGU9bnVsbCl9LHVwZGF0ZVRvdGFsczpmdW5jdGlvbigpe3ZhciBhLGQ9MCxmPXRoaXMucG9pbnRzLGg9Zi5sZW5ndGgsbSxiPXRoaXMub3B0aW9ucy5pZ25vcmVIaWRkZW5Qb2ludDtmb3IoYT0wO2E8aDthKyspbT1mW2FdLDA+bS55JiYobS55PW51bGwpLGQrPWImJiFtLnZpc2libGU/MDptLnk7dGhpcy50b3RhbD1kO2ZvcihhPTA7YTxoO2ErKyltPWZbYV0sbS5wZXJjZW50YWdlPTA8ZCYmKG0udmlzaWJsZXx8IWIpP20ueS9kKjEwMDowLG0udG90YWw9ZH0sZ2VuZXJhdGVQb2ludHM6ZnVuY3Rpb24oKXtsLnByb3RvdHlwZS5nZW5lcmF0ZVBvaW50cy5jYWxsKHRoaXMpO3RoaXMudXBkYXRlVG90YWxzKCl9LHRyYW5zbGF0ZTpmdW5jdGlvbihhKXt0aGlzLmdlbmVyYXRlUG9pbnRzKCk7XG52YXIgYz0wLGQ9dGhpcy5vcHRpb25zLGY9ZC5zbGljZWRPZmZzZXQsaD1mKyhkLmJvcmRlcldpZHRofHwwKSxiLGwsdSxGPWQuc3RhcnRBbmdsZXx8MCxlPXRoaXMuc3RhcnRBbmdsZVJhZD1NYXRoLlBJLzE4MCooRi05MCksRj0odGhpcy5lbmRBbmdsZVJhZD1NYXRoLlBJLzE4MCoocChkLmVuZEFuZ2xlLEYrMzYwKS05MCkpLWUscj10aGlzLnBvaW50cyx4PWQuZGF0YUxhYmVscy5kaXN0YW5jZSxkPWQuaWdub3JlSGlkZGVuUG9pbnQsQSxrPXIubGVuZ3RoLHc7YXx8KHRoaXMuY2VudGVyPWE9dGhpcy5nZXRDZW50ZXIoKSk7dGhpcy5nZXRYPWZ1bmN0aW9uKGIsYyl7dT1NYXRoLmFzaW4oTWF0aC5taW4oKGItYVsxXSkvKGFbMl0vMit4KSwxKSk7cmV0dXJuIGFbMF0rKGM/LTE6MSkqTWF0aC5jb3ModSkqKGFbMl0vMit4KX07Zm9yKEE9MDtBPGs7QSsrKXt3PXJbQV07Yj1lK2MqRjtpZighZHx8dy52aXNpYmxlKWMrPXcucGVyY2VudGFnZS8xMDA7bD1lK2MqRjt3LnNoYXBlVHlwZT1cblwiYXJjXCI7dy5zaGFwZUFyZ3M9e3g6YVswXSx5OmFbMV0scjphWzJdLzIsaW5uZXJSOmFbM10vMixzdGFydDpNYXRoLnJvdW5kKDFFMypiKS8xRTMsZW5kOk1hdGgucm91bmQoMUUzKmwpLzFFM307dT0obCtiKS8yO3U+MS41Kk1hdGguUEk/dS09MipNYXRoLlBJOnU8LU1hdGguUEkvMiYmKHUrPTIqTWF0aC5QSSk7dy5zbGljZWRUcmFuc2xhdGlvbj17dHJhbnNsYXRlWDpNYXRoLnJvdW5kKE1hdGguY29zKHUpKmYpLHRyYW5zbGF0ZVk6TWF0aC5yb3VuZChNYXRoLnNpbih1KSpmKX07Yj1NYXRoLmNvcyh1KSphWzJdLzI7bD1NYXRoLnNpbih1KSphWzJdLzI7dy50b29sdGlwUG9zPVthWzBdKy43KmIsYVsxXSsuNypsXTt3LmhhbGY9dTwtTWF0aC5QSS8yfHx1Pk1hdGguUEkvMj8xOjA7dy5hbmdsZT11O2g9TWF0aC5taW4oaCx4LzUpO3cubGFiZWxQb3M9W2FbMF0rYitNYXRoLmNvcyh1KSp4LGFbMV0rbCtNYXRoLnNpbih1KSp4LGFbMF0rYitNYXRoLmNvcyh1KSpoLGFbMV0rbCtNYXRoLnNpbih1KSpcbmgsYVswXStiLGFbMV0rbCwwPng/XCJjZW50ZXJcIjp3LmhhbGY/XCJyaWdodFwiOlwibGVmdFwiLHVdfX0sZHJhd0dyYXBoOm51bGwsZHJhd1BvaW50czpmdW5jdGlvbigpe3ZhciBhPXRoaXMsZD1hLmNoYXJ0LnJlbmRlcmVyLGYsaCxtLGIsbD1hLm9wdGlvbnMuc2hhZG93O2wmJiFhLnNoYWRvd0dyb3VwJiYoYS5zaGFkb3dHcm91cD1kLmcoXCJzaGFkb3dcIikuYWRkKGEuZ3JvdXApKTtHKGEucG9pbnRzLGZ1bmN0aW9uKGMpe2lmKG51bGwhPT1jLnkpe2g9Yy5ncmFwaGljO2I9Yy5zaGFwZUFyZ3M7Zj1jLnNsaWNlZD9jLnNsaWNlZFRyYW5zbGF0aW9uOnt9O3ZhciBuPWMuc2hhZG93R3JvdXA7bCYmIW4mJihuPWMuc2hhZG93R3JvdXA9ZC5nKFwic2hhZG93XCIpLmFkZChhLnNoYWRvd0dyb3VwKSk7biYmbi5hdHRyKGYpO209YS5wb2ludEF0dHJpYnMoYyxjLnNlbGVjdGVkJiZcInNlbGVjdFwiKTtoP2guc2V0UmFkaWFsUmVmZXJlbmNlKGEuY2VudGVyKS5hdHRyKG0pLmFuaW1hdGUoSShiLGYpKTooYy5ncmFwaGljPVxuaD1kW2Muc2hhcGVUeXBlXShiKS5hZGRDbGFzcyhjLmdldENsYXNzTmFtZSgpKS5zZXRSYWRpYWxSZWZlcmVuY2UoYS5jZW50ZXIpLmF0dHIoZikuYWRkKGEuZ3JvdXApLGMudmlzaWJsZXx8aC5hdHRyKHt2aXNpYmlsaXR5OlwiaGlkZGVuXCJ9KSxoLmF0dHIobSkuYXR0cih7XCJzdHJva2UtbGluZWpvaW5cIjpcInJvdW5kXCJ9KS5zaGFkb3cobCxuKSl9fSl9LHNlYXJjaFBvaW50OmYsc29ydEJ5QW5nbGU6ZnVuY3Rpb24oYSxkKXthLnNvcnQoZnVuY3Rpb24oYSxjKXtyZXR1cm4gdm9pZCAwIT09YS5hbmdsZSYmKGMuYW5nbGUtYS5hbmdsZSkqZH0pfSxkcmF3TGVnZW5kU3ltYm9sOmEuTGVnZW5kU3ltYm9sTWl4aW4uZHJhd1JlY3RhbmdsZSxnZXRDZW50ZXI6YS5DZW50ZXJlZFNlcmllc01peGluLmdldENlbnRlcixnZXRTeW1ib2w6Zn0se2luaXQ6ZnVuY3Rpb24oKXt2LnByb3RvdHlwZS5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgYT10aGlzLGQ7YS5uYW1lPXAoYS5uYW1lLFwiU2xpY2VcIik7XG5kPWZ1bmN0aW9uKGMpe2Euc2xpY2UoXCJzZWxlY3RcIj09PWMudHlwZSl9O0QoYSxcInNlbGVjdFwiLGQpO0QoYSxcInVuc2VsZWN0XCIsZCk7cmV0dXJuIGF9LHNldFZpc2libGU6ZnVuY3Rpb24oYSxkKXt2YXIgYz10aGlzLGY9Yy5zZXJpZXMsbT1mLmNoYXJ0LGI9Zi5vcHRpb25zLmlnbm9yZUhpZGRlblBvaW50O2Q9cChkLGIpO2EhPT1jLnZpc2libGUmJihjLnZpc2libGU9Yy5vcHRpb25zLnZpc2libGU9YT12b2lkIDA9PT1hPyFjLnZpc2libGU6YSxmLm9wdGlvbnMuZGF0YVtoKGMsZi5kYXRhKV09Yy5vcHRpb25zLEcoW1wiZ3JhcGhpY1wiLFwiZGF0YUxhYmVsXCIsXCJjb25uZWN0b3JcIixcInNoYWRvd0dyb3VwXCJdLGZ1bmN0aW9uKGIpe2lmKGNbYl0pY1tiXVthP1wic2hvd1wiOlwiaGlkZVwiXSghMCl9KSxjLmxlZ2VuZEl0ZW0mJm0ubGVnZW5kLmNvbG9yaXplSXRlbShjLGEpLGF8fFwiaG92ZXJcIiE9PWMuc3RhdGV8fGMuc2V0U3RhdGUoXCJcIiksYiYmKGYuaXNEaXJ0eT0hMCksZCYmbS5yZWRyYXcoKSl9LFxuc2xpY2U6ZnVuY3Rpb24oYSxmLGwpe3ZhciBjPXRoaXMuc2VyaWVzO2QobCxjLmNoYXJ0KTtwKGYsITApO3RoaXMuc2xpY2VkPXRoaXMub3B0aW9ucy5zbGljZWQ9YT1DKGEpP2E6IXRoaXMuc2xpY2VkO2Mub3B0aW9ucy5kYXRhW2godGhpcyxjLmRhdGEpXT10aGlzLm9wdGlvbnM7YT1hP3RoaXMuc2xpY2VkVHJhbnNsYXRpb246e3RyYW5zbGF0ZVg6MCx0cmFuc2xhdGVZOjB9O3RoaXMuZ3JhcGhpYy5hbmltYXRlKGEpO3RoaXMuc2hhZG93R3JvdXAmJnRoaXMuc2hhZG93R3JvdXAuYW5pbWF0ZShhKX0saGFsb1BhdGg6ZnVuY3Rpb24oYSl7dmFyIGM9dGhpcy5zaGFwZUFyZ3M7cmV0dXJuIHRoaXMuc2xpY2VkfHwhdGhpcy52aXNpYmxlP1tdOnRoaXMuc2VyaWVzLmNoYXJ0LnJlbmRlcmVyLnN5bWJvbHMuYXJjKGMueCxjLnksYy5yK2EsYy5yK2Ese2lubmVyUjp0aGlzLnNoYXBlQXJncy5yLHN0YXJ0OmMuc3RhcnQsZW5kOmMuZW5kfSl9fSl9KShMKTsoZnVuY3Rpb24oYSl7dmFyIEQ9XG5hLmFkZEV2ZW50LEM9YS5hcnJheU1heCxHPWEuZGVmaW5lZCxJPWEuZWFjaCxoPWEuZXh0ZW5kLGY9YS5mb3JtYXQscD1hLm1hcCx2PWEubWVyZ2UsbD1hLm5vb3AsdT1hLnBpY2ssZD1hLnJlbGF0aXZlTGVuZ3RoLGM9YS5TZXJpZXMsbj1hLnNlcmllc1R5cGVzLHk9YS5zdGFibGVTb3J0O2EuZGlzdHJpYnV0ZT1mdW5jdGlvbihhLGMpe2Z1bmN0aW9uIGIoYSxiKXtyZXR1cm4gYS50YXJnZXQtYi50YXJnZXR9dmFyIGQsZj0hMCxoPWEsZT1bXSxtO209MDtmb3IoZD1hLmxlbmd0aDtkLS07KW0rPWFbZF0uc2l6ZTtpZihtPmMpe3koYSxmdW5jdGlvbihhLGIpe3JldHVybihiLnJhbmt8fDApLShhLnJhbmt8fDApfSk7Zm9yKG09ZD0wO208PWM7KW0rPWFbZF0uc2l6ZSxkKys7ZT1hLnNwbGljZShkLTEsYS5sZW5ndGgpfXkoYSxiKTtmb3IoYT1wKGEsZnVuY3Rpb24oYSl7cmV0dXJue3NpemU6YS5zaXplLHRhcmdldHM6W2EudGFyZ2V0XX19KTtmOyl7Zm9yKGQ9YS5sZW5ndGg7ZC0tOylmPVxuYVtkXSxtPShNYXRoLm1pbi5hcHBseSgwLGYudGFyZ2V0cykrTWF0aC5tYXguYXBwbHkoMCxmLnRhcmdldHMpKS8yLGYucG9zPU1hdGgubWluKE1hdGgubWF4KDAsbS1mLnNpemUvMiksYy1mLnNpemUpO2Q9YS5sZW5ndGg7Zm9yKGY9ITE7ZC0tOykwPGQmJmFbZC0xXS5wb3MrYVtkLTFdLnNpemU+YVtkXS5wb3MmJihhW2QtMV0uc2l6ZSs9YVtkXS5zaXplLGFbZC0xXS50YXJnZXRzPWFbZC0xXS50YXJnZXRzLmNvbmNhdChhW2RdLnRhcmdldHMpLGFbZC0xXS5wb3MrYVtkLTFdLnNpemU+YyYmKGFbZC0xXS5wb3M9Yy1hW2QtMV0uc2l6ZSksYS5zcGxpY2UoZCwxKSxmPSEwKX1kPTA7SShhLGZ1bmN0aW9uKGEpe3ZhciBiPTA7SShhLnRhcmdldHMsZnVuY3Rpb24oKXtoW2RdLnBvcz1hLnBvcytiO2IrPWhbZF0uc2l6ZTtkKyt9KX0pO2gucHVzaC5hcHBseShoLGUpO3koaCxiKX07Yy5wcm90b3R5cGUuZHJhd0RhdGFMYWJlbHM9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLGM9YS5vcHRpb25zLFxuYj1jLmRhdGFMYWJlbHMsZD1hLnBvaW50cyxsLG4sZT1hLmhhc1JlbmRlcmVkfHwwLHIscCxBPXUoYi5kZWZlciwhMCksaz1hLmNoYXJ0LnJlbmRlcmVyO2lmKGIuZW5hYmxlZHx8YS5faGFzUG9pbnRMYWJlbHMpYS5kbFByb2Nlc3NPcHRpb25zJiZhLmRsUHJvY2Vzc09wdGlvbnMoYikscD1hLnBsb3RHcm91cChcImRhdGFMYWJlbHNHcm91cFwiLFwiZGF0YS1sYWJlbHNcIixBJiYhZT9cImhpZGRlblwiOlwidmlzaWJsZVwiLGIuekluZGV4fHw2KSxBJiYocC5hdHRyKHtvcGFjaXR5OitlfSksZXx8RChhLFwiYWZ0ZXJBbmltYXRlXCIsZnVuY3Rpb24oKXthLnZpc2libGUmJnAuc2hvdyghMCk7cFtjLmFuaW1hdGlvbj9cImFuaW1hdGVcIjpcImF0dHJcIl0oe29wYWNpdHk6MX0se2R1cmF0aW9uOjIwMH0pfSkpLG49YixJKGQsZnVuY3Rpb24oZSl7dmFyIGQsbT1lLmRhdGFMYWJlbCxxLGcsdD1lLmNvbm5lY3RvcixGPSEwLHgsQT17fTtsPWUuZGxPcHRpb25zfHxlLm9wdGlvbnMmJmUub3B0aW9ucy5kYXRhTGFiZWxzO1xuZD11KGwmJmwuZW5hYmxlZCxuLmVuYWJsZWQpJiZudWxsIT09ZS55O2lmKG0mJiFkKWUuZGF0YUxhYmVsPW0uZGVzdHJveSgpO2Vsc2UgaWYoZCl7Yj12KG4sbCk7eD1iLnN0eWxlO2Q9Yi5yb3RhdGlvbjtxPWUuZ2V0TGFiZWxDb25maWcoKTtyPWIuZm9ybWF0P2YoYi5mb3JtYXQscSk6Yi5mb3JtYXR0ZXIuY2FsbChxLGIpO3guY29sb3I9dShiLmNvbG9yLHguY29sb3IsYS5jb2xvcixcIiMwMDAwMDBcIik7aWYobSlHKHIpPyhtLmF0dHIoe3RleHQ6cn0pLEY9ITEpOihlLmRhdGFMYWJlbD1tPW0uZGVzdHJveSgpLHQmJihlLmNvbm5lY3Rvcj10LmRlc3Ryb3koKSkpO2Vsc2UgaWYoRyhyKSl7bT17ZmlsbDpiLmJhY2tncm91bmRDb2xvcixzdHJva2U6Yi5ib3JkZXJDb2xvcixcInN0cm9rZS13aWR0aFwiOmIuYm9yZGVyV2lkdGgscjpiLmJvcmRlclJhZGl1c3x8MCxyb3RhdGlvbjpkLHBhZGRpbmc6Yi5wYWRkaW5nLHpJbmRleDoxfTtcImNvbnRyYXN0XCI9PT14LmNvbG9yJiYoQS5jb2xvcj1iLmluc2lkZXx8XG4wPmIuZGlzdGFuY2V8fGMuc3RhY2tpbmc/ay5nZXRDb250cmFzdChlLmNvbG9yfHxhLmNvbG9yKTpcIiMwMDAwMDBcIik7Yy5jdXJzb3ImJihBLmN1cnNvcj1jLmN1cnNvcik7Zm9yKGcgaW4gbSl2b2lkIDA9PT1tW2ddJiZkZWxldGUgbVtnXTttPWUuZGF0YUxhYmVsPWtbZD9cInRleHRcIjpcImxhYmVsXCJdKHIsMCwtOTk5OSxiLnNoYXBlLG51bGwsbnVsbCxiLnVzZUhUTUwsbnVsbCxcImRhdGEtbGFiZWxcIikuYXR0cihtKTttLmFkZENsYXNzKFwiaGlnaGNoYXJ0cy1kYXRhLWxhYmVsLWNvbG9yLVwiK2UuY29sb3JJbmRleCtcIiBcIisoYi5jbGFzc05hbWV8fFwiXCIpKyhiLnVzZUhUTUw/XCJoaWdoY2hhcnRzLXRyYWNrZXJcIjpcIlwiKSk7bS5jc3MoaCh4LEEpKTttLmFkZChwKTttLnNoYWRvdyhiLnNoYWRvdyl9bSYmYS5hbGlnbkRhdGFMYWJlbChlLG0sYixudWxsLEYpfX0pfTtjLnByb3RvdHlwZS5hbGlnbkRhdGFMYWJlbD1mdW5jdGlvbihhLGMsYixkLGYpe3ZhciBtPXRoaXMuY2hhcnQsZT1tLmludmVydGVkLFxubD11KGEucGxvdFgsLTk5OTkpLG49dShhLnBsb3RZLC05OTk5KSxwPWMuZ2V0QkJveCgpLGsscT1iLnJvdGF0aW9uLHQ9Yi5hbGlnbix2PXRoaXMudmlzaWJsZSYmKGEuc2VyaWVzLmZvcmNlREx8fG0uaXNJbnNpZGVQbG90KGwsTWF0aC5yb3VuZChuKSxlKXx8ZCYmbS5pc0luc2lkZVBsb3QobCxlP2QueCsxOmQueStkLmhlaWdodC0xLGUpKSx6PVwianVzdGlmeVwiPT09dShiLm92ZXJmbG93LFwianVzdGlmeVwiKTt2JiYoaz1iLnN0eWxlLmZvbnRTaXplLGs9bS5yZW5kZXJlci5mb250TWV0cmljcyhrLGMpLmIsZD1oKHt4OmU/bS5wbG90V2lkdGgtbjpsLHk6TWF0aC5yb3VuZChlP20ucGxvdEhlaWdodC1sOm4pLHdpZHRoOjAsaGVpZ2h0OjB9LGQpLGgoYix7d2lkdGg6cC53aWR0aCxoZWlnaHQ6cC5oZWlnaHR9KSxxPyh6PSExLGU9bS5yZW5kZXJlci5yb3RDb3JyKGsscSksZT17eDpkLngrYi54K2Qud2lkdGgvMitlLngseTpkLnkrYi55K3t0b3A6MCxtaWRkbGU6LjUsYm90dG9tOjF9W2IudmVydGljYWxBbGlnbl0qXG5kLmhlaWdodH0sY1tmP1wiYXR0clwiOlwiYW5pbWF0ZVwiXShlKS5hdHRyKHthbGlnbjp0fSksbD0ocSs3MjApJTM2MCxsPTE4MDxsJiYzNjA+bCxcImxlZnRcIj09PXQ/ZS55LT1sP3AuaGVpZ2h0OjA6XCJjZW50ZXJcIj09PXQ/KGUueC09cC53aWR0aC8yLGUueS09cC5oZWlnaHQvMik6XCJyaWdodFwiPT09dCYmKGUueC09cC53aWR0aCxlLnktPWw/MDpwLmhlaWdodCkpOihjLmFsaWduKGIsbnVsbCxkKSxlPWMuYWxpZ25BdHRyKSx6P3RoaXMuanVzdGlmeURhdGFMYWJlbChjLGIsZSxwLGQsZik6dShiLmNyb3AsITApJiYodj1tLmlzSW5zaWRlUGxvdChlLngsZS55KSYmbS5pc0luc2lkZVBsb3QoZS54K3Aud2lkdGgsZS55K3AuaGVpZ2h0KSksYi5zaGFwZSYmIXEmJmMuYXR0cih7YW5jaG9yWDphLnBsb3RYLGFuY2hvclk6YS5wbG90WX0pKTt2fHwoYy5hdHRyKHt5Oi05OTk5fSksYy5wbGFjZWQ9ITEpfTtjLnByb3RvdHlwZS5qdXN0aWZ5RGF0YUxhYmVsPWZ1bmN0aW9uKGEsYyxiLGQsZixoKXt2YXIgZT1cbnRoaXMuY2hhcnQsbT1jLmFsaWduLGw9Yy52ZXJ0aWNhbEFsaWduLG4sayxwPWEuYm94PzA6YS5wYWRkaW5nfHwwO249Yi54K3A7MD5uJiYoXCJyaWdodFwiPT09bT9jLmFsaWduPVwibGVmdFwiOmMueD0tbixrPSEwKTtuPWIueCtkLndpZHRoLXA7bj5lLnBsb3RXaWR0aCYmKFwibGVmdFwiPT09bT9jLmFsaWduPVwicmlnaHRcIjpjLng9ZS5wbG90V2lkdGgtbixrPSEwKTtuPWIueStwOzA+biYmKFwiYm90dG9tXCI9PT1sP2MudmVydGljYWxBbGlnbj1cInRvcFwiOmMueT0tbixrPSEwKTtuPWIueStkLmhlaWdodC1wO24+ZS5wbG90SGVpZ2h0JiYoXCJ0b3BcIj09PWw/Yy52ZXJ0aWNhbEFsaWduPVwiYm90dG9tXCI6Yy55PWUucGxvdEhlaWdodC1uLGs9ITApO2smJihhLnBsYWNlZD0haCxhLmFsaWduKGMsbnVsbCxmKSl9O24ucGllJiYobi5waWUucHJvdG90eXBlLmRyYXdEYXRhTGFiZWxzPWZ1bmN0aW9uKCl7dmFyIGQ9dGhpcyxmPWQuZGF0YSxiLGg9ZC5jaGFydCxsPWQub3B0aW9ucy5kYXRhTGFiZWxzLG49XG51KGwuY29ubmVjdG9yUGFkZGluZywxMCksZT11KGwuY29ubmVjdG9yV2lkdGgsMSkscj1oLnBsb3RXaWR0aCx2PWgucGxvdEhlaWdodCxBLGs9bC5kaXN0YW5jZSx3PWQuY2VudGVyLHk9d1syXS8yLEQ9d1sxXSxHPTA8ayxnLEIsTCxNLFI9W1tdLFtdXSxFLEgsUCxRLE89WzAsMCwwLDBdO2QudmlzaWJsZSYmKGwuZW5hYmxlZHx8ZC5faGFzUG9pbnRMYWJlbHMpJiYoYy5wcm90b3R5cGUuZHJhd0RhdGFMYWJlbHMuYXBwbHkoZCksSShmLGZ1bmN0aW9uKGEpe2EuZGF0YUxhYmVsJiZhLnZpc2libGUmJihSW2EuaGFsZl0ucHVzaChhKSxhLmRhdGFMYWJlbC5fcG9zPW51bGwpfSksSShSLGZ1bmN0aW9uKGMsZSl7dmFyIGYsbSxxPWMubGVuZ3RoLHQsdSxGO2lmKHEpZm9yKGQuc29ydEJ5QW5nbGUoYyxlLS41KSwwPGsmJihmPU1hdGgubWF4KDAsRC15LWspLG09TWF0aC5taW4oRCt5K2ssaC5wbG90SGVpZ2h0KSx0PXAoYyxmdW5jdGlvbihhKXtpZihhLmRhdGFMYWJlbClyZXR1cm4gRj1cbmEuZGF0YUxhYmVsLmdldEJCb3goKS5oZWlnaHR8fDIxLHt0YXJnZXQ6YS5sYWJlbFBvc1sxXS1mK0YvMixzaXplOkYscmFuazphLnl9fSksYS5kaXN0cmlidXRlKHQsbStGLWYpKSxRPTA7UTxxO1ErKyliPWNbUV0sTD1iLmxhYmVsUG9zLGc9Yi5kYXRhTGFiZWwsUD0hMT09PWIudmlzaWJsZT9cImhpZGRlblwiOlwiaW5oZXJpdFwiLHU9TFsxXSx0P3ZvaWQgMD09PXRbUV0ucG9zP1A9XCJoaWRkZW5cIjooTT10W1FdLnNpemUsSD1mK3RbUV0ucG9zKTpIPXUsRT1sLmp1c3RpZnk/d1swXSsoZT8tMToxKSooeStrKTpkLmdldFgoSDxmKzJ8fEg+bS0yP3U6SCxlKSxnLl9hdHRyPXt2aXNpYmlsaXR5OlAsYWxpZ246TFs2XX0sZy5fcG9zPXt4OkUrbC54Kyh7bGVmdDpuLHJpZ2h0Oi1ufVtMWzZdXXx8MCkseTpIK2wueS0xMH0sTC54PUUsTC55PUgsbnVsbD09PWQub3B0aW9ucy5zaXplJiYoQj1nLndpZHRoLEUtQjxuP09bM109TWF0aC5tYXgoTWF0aC5yb3VuZChCLUUrbiksT1szXSk6RStCPnItbiYmXG4oT1sxXT1NYXRoLm1heChNYXRoLnJvdW5kKEUrQi1yK24pLE9bMV0pKSwwPkgtTS8yP09bMF09TWF0aC5tYXgoTWF0aC5yb3VuZCgtSCtNLzIpLE9bMF0pOkgrTS8yPnYmJihPWzJdPU1hdGgubWF4KE1hdGgucm91bmQoSCtNLzItdiksT1syXSkpKX0pLDA9PT1DKE8pfHx0aGlzLnZlcmlmeURhdGFMYWJlbE92ZXJmbG93KE8pKSYmKHRoaXMucGxhY2VEYXRhTGFiZWxzKCksRyYmZSYmSSh0aGlzLnBvaW50cyxmdW5jdGlvbihhKXt2YXIgYjtBPWEuY29ubmVjdG9yO2lmKChnPWEuZGF0YUxhYmVsKSYmZy5fcG9zJiZhLnZpc2libGUpe1A9Zy5fYXR0ci52aXNpYmlsaXR5O2lmKGI9IUEpYS5jb25uZWN0b3I9QT1oLnJlbmRlcmVyLnBhdGgoKS5hZGRDbGFzcyhcImhpZ2hjaGFydHMtZGF0YS1sYWJlbC1jb25uZWN0b3IgaGlnaGNoYXJ0cy1jb2xvci1cIithLmNvbG9ySW5kZXgpLmFkZChkLmRhdGFMYWJlbHNHcm91cCksQS5hdHRyKHtcInN0cm9rZS13aWR0aFwiOmUsc3Ryb2tlOmwuY29ubmVjdG9yQ29sb3J8fFxuYS5jb2xvcnx8XCIjNjY2NjY2XCJ9KTtBW2I/XCJhdHRyXCI6XCJhbmltYXRlXCJdKHtkOmQuY29ubmVjdG9yUGF0aChhLmxhYmVsUG9zKX0pO0EuYXR0cihcInZpc2liaWxpdHlcIixQKX1lbHNlIEEmJihhLmNvbm5lY3Rvcj1BLmRlc3Ryb3koKSl9KSl9LG4ucGllLnByb3RvdHlwZS5jb25uZWN0b3JQYXRoPWZ1bmN0aW9uKGEpe3ZhciBjPWEueCxiPWEueTtyZXR1cm4gdSh0aGlzLm9wdGlvbnMuZGF0YUxhYmVscy5zb2Z0Q29ubmVjdG9yLCEwKT9bXCJNXCIsYysoXCJsZWZ0XCI9PT1hWzZdPzU6LTUpLGIsXCJDXCIsYyxiLDIqYVsyXS1hWzRdLDIqYVszXS1hWzVdLGFbMl0sYVszXSxcIkxcIixhWzRdLGFbNV1dOltcIk1cIixjKyhcImxlZnRcIj09PWFbNl0/NTotNSksYixcIkxcIixhWzJdLGFbM10sXCJMXCIsYVs0XSxhWzVdXX0sbi5waWUucHJvdG90eXBlLnBsYWNlRGF0YUxhYmVscz1mdW5jdGlvbigpe0kodGhpcy5wb2ludHMsZnVuY3Rpb24oYSl7dmFyIGM9YS5kYXRhTGFiZWw7YyYmYS52aXNpYmxlJiYoKGE9Yy5fcG9zKT9cbihjLmF0dHIoYy5fYXR0ciksY1tjLm1vdmVkP1wiYW5pbWF0ZVwiOlwiYXR0clwiXShhKSxjLm1vdmVkPSEwKTpjJiZjLmF0dHIoe3k6LTk5OTl9KSl9KX0sbi5waWUucHJvdG90eXBlLmFsaWduRGF0YUxhYmVsPWwsbi5waWUucHJvdG90eXBlLnZlcmlmeURhdGFMYWJlbE92ZXJmbG93PWZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuY2VudGVyLGI9dGhpcy5vcHRpb25zLGY9Yi5jZW50ZXIsaD1iLm1pblNpemV8fDgwLGwsZTtudWxsIT09ZlswXT9sPU1hdGgubWF4KGNbMl0tTWF0aC5tYXgoYVsxXSxhWzNdKSxoKToobD1NYXRoLm1heChjWzJdLWFbMV0tYVszXSxoKSxjWzBdKz0oYVszXS1hWzFdKS8yKTtudWxsIT09ZlsxXT9sPU1hdGgubWF4KE1hdGgubWluKGwsY1syXS1NYXRoLm1heChhWzBdLGFbMl0pKSxoKToobD1NYXRoLm1heChNYXRoLm1pbihsLGNbMl0tYVswXS1hWzJdKSxoKSxjWzFdKz0oYVswXS1hWzJdKS8yKTtsPGNbMl0/KGNbMl09bCxjWzNdPU1hdGgubWluKGQoYi5pbm5lclNpemV8fFxuMCxsKSxsKSx0aGlzLnRyYW5zbGF0ZShjKSx0aGlzLmRyYXdEYXRhTGFiZWxzJiZ0aGlzLmRyYXdEYXRhTGFiZWxzKCkpOmU9ITA7cmV0dXJuIGV9KTtuLmNvbHVtbiYmKG4uY29sdW1uLnByb3RvdHlwZS5hbGlnbkRhdGFMYWJlbD1mdW5jdGlvbihhLGQsYixmLGgpe3ZhciBsPXRoaXMuY2hhcnQuaW52ZXJ0ZWQsZT1hLnNlcmllcyxtPWEuZGxCb3h8fGEuc2hhcGVBcmdzLG49dShhLmJlbG93LGEucGxvdFk+dSh0aGlzLnRyYW5zbGF0ZWRUaHJlc2hvbGQsZS55QXhpcy5sZW4pKSxwPXUoYi5pbnNpZGUsISF0aGlzLm9wdGlvbnMuc3RhY2tpbmcpO20mJihmPXYobSksMD5mLnkmJihmLmhlaWdodCs9Zi55LGYueT0wKSxtPWYueStmLmhlaWdodC1lLnlBeGlzLmxlbiwwPG0mJihmLmhlaWdodC09bSksbCYmKGY9e3g6ZS55QXhpcy5sZW4tZi55LWYuaGVpZ2h0LHk6ZS54QXhpcy5sZW4tZi54LWYud2lkdGgsd2lkdGg6Zi5oZWlnaHQsaGVpZ2h0OmYud2lkdGh9KSxwfHwobD8oZi54Kz1uP1xuMDpmLndpZHRoLGYud2lkdGg9MCk6KGYueSs9bj9mLmhlaWdodDowLGYuaGVpZ2h0PTApKSk7Yi5hbGlnbj11KGIuYWxpZ24sIWx8fHA/XCJjZW50ZXJcIjpuP1wicmlnaHRcIjpcImxlZnRcIik7Yi52ZXJ0aWNhbEFsaWduPXUoYi52ZXJ0aWNhbEFsaWduLGx8fHA/XCJtaWRkbGVcIjpuP1widG9wXCI6XCJib3R0b21cIik7Yy5wcm90b3R5cGUuYWxpZ25EYXRhTGFiZWwuY2FsbCh0aGlzLGEsZCxiLGYsaCl9KX0pKEwpOyhmdW5jdGlvbihhKXt2YXIgRD1hLkNoYXJ0LEM9YS5lYWNoLEc9YS5waWNrLEk9YS5hZGRFdmVudDtELnByb3RvdHlwZS5jYWxsYmFja3MucHVzaChmdW5jdGlvbihhKXtmdW5jdGlvbiBmKCl7dmFyIGY9W107QyhhLnNlcmllcyxmdW5jdGlvbihhKXt2YXIgaD1hLm9wdGlvbnMuZGF0YUxhYmVscyxwPWEuZGF0YUxhYmVsQ29sbGVjdGlvbnN8fFtcImRhdGFMYWJlbFwiXTsoaC5lbmFibGVkfHxhLl9oYXNQb2ludExhYmVscykmJiFoLmFsbG93T3ZlcmxhcCYmYS52aXNpYmxlJiZDKHAsZnVuY3Rpb24oZCl7QyhhLnBvaW50cyxcbmZ1bmN0aW9uKGEpe2FbZF0mJihhW2RdLmxhYmVscmFuaz1HKGEubGFiZWxyYW5rLGEuc2hhcGVBcmdzJiZhLnNoYXBlQXJncy5oZWlnaHQpLGYucHVzaChhW2RdKSl9KX0pfSk7YS5oaWRlT3ZlcmxhcHBpbmdMYWJlbHMoZil9ZigpO0koYSxcInJlZHJhd1wiLGYpfSk7RC5wcm90b3R5cGUuaGlkZU92ZXJsYXBwaW5nTGFiZWxzPWZ1bmN0aW9uKGEpe3ZhciBmPWEubGVuZ3RoLGgsdixsLHUsZCxjLG4seSx0LG09ZnVuY3Rpb24oYSxjLGQsZixlLGgsbCxtKXtyZXR1cm4hKGU+YStkfHxlK2w8YXx8aD5jK2Z8fGgrbTxjKX07Zm9yKHY9MDt2PGY7disrKWlmKGg9YVt2XSloLm9sZE9wYWNpdHk9aC5vcGFjaXR5LGgubmV3T3BhY2l0eT0xO2Euc29ydChmdW5jdGlvbihhLGMpe3JldHVybihjLmxhYmVscmFua3x8MCktKGEubGFiZWxyYW5rfHwwKX0pO2Zvcih2PTA7djxmO3YrKylmb3IobD1hW3ZdLGg9disxO2g8ZjsrK2gpaWYodT1hW2hdLGwmJnUmJmwucGxhY2VkJiZ1LnBsYWNlZCYmMCE9PVxubC5uZXdPcGFjaXR5JiYwIT09dS5uZXdPcGFjaXR5JiYoZD1sLmFsaWduQXR0cixjPXUuYWxpZ25BdHRyLG49bC5wYXJlbnRHcm91cCx5PXUucGFyZW50R3JvdXAsdD0yKihsLmJveD8wOmwucGFkZGluZyksZD1tKGQueCtuLnRyYW5zbGF0ZVgsZC55K24udHJhbnNsYXRlWSxsLndpZHRoLXQsbC5oZWlnaHQtdCxjLngreS50cmFuc2xhdGVYLGMueSt5LnRyYW5zbGF0ZVksdS53aWR0aC10LHUuaGVpZ2h0LXQpKSkobC5sYWJlbHJhbms8dS5sYWJlbHJhbms/bDp1KS5uZXdPcGFjaXR5PTA7QyhhLGZ1bmN0aW9uKGEpe3ZhciBiLGM7YSYmKGM9YS5uZXdPcGFjaXR5LGEub2xkT3BhY2l0eSE9PWMmJmEucGxhY2VkJiYoYz9hLnNob3coITApOmI9ZnVuY3Rpb24oKXthLmhpZGUoKX0sYS5hbGlnbkF0dHIub3BhY2l0eT1jLGFbYS5pc09sZD9cImFuaW1hdGVcIjpcImF0dHJcIl0oYS5hbGlnbkF0dHIsbnVsbCxiKSksYS5pc09sZD0hMCl9KX19KShMKTsoZnVuY3Rpb24oYSl7dmFyIEQ9YS5hZGRFdmVudCxcbkM9YS5DaGFydCxHPWEuY3JlYXRlRWxlbWVudCxJPWEuY3NzLGg9YS5kZWZhdWx0T3B0aW9ucyxmPWEuZGVmYXVsdFBsb3RPcHRpb25zLHA9YS5lYWNoLHY9YS5leHRlbmQsbD1hLmZpcmVFdmVudCx1PWEuaGFzVG91Y2gsZD1hLmluQXJyYXksYz1hLmlzT2JqZWN0LG49YS5MZWdlbmQseT1hLm1lcmdlLHQ9YS5waWNrLG09YS5Qb2ludCxiPWEuU2VyaWVzLHE9YS5zZXJpZXNUeXBlcyx6PWEuc3ZnO2E9YS5UcmFja2VyTWl4aW49e2RyYXdUcmFja2VyUG9pbnQ6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLGI9YS5jaGFydCxjPWIucG9pbnRlcixkPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLnRhcmdldCxlO2MmJiFlOyllPWMucG9pbnQsYz1jLnBhcmVudE5vZGU7aWYodm9pZCAwIT09ZSYmZSE9PWIuaG92ZXJQb2ludCllLm9uTW91c2VPdmVyKGEpfTtwKGEucG9pbnRzLGZ1bmN0aW9uKGEpe2EuZ3JhcGhpYyYmKGEuZ3JhcGhpYy5lbGVtZW50LnBvaW50PWEpO2EuZGF0YUxhYmVsJiYoYS5kYXRhTGFiZWwuZGl2P1xuYS5kYXRhTGFiZWwuZGl2LnBvaW50PWE6YS5kYXRhTGFiZWwuZWxlbWVudC5wb2ludD1hKX0pO2EuX2hhc1RyYWNraW5nfHwocChhLnRyYWNrZXJHcm91cHMsZnVuY3Rpb24oYil7aWYoYVtiXSl7YVtiXS5hZGRDbGFzcyhcImhpZ2hjaGFydHMtdHJhY2tlclwiKS5vbihcIm1vdXNlb3ZlclwiLGQpLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbihhKXtjLm9uVHJhY2tlck1vdXNlT3V0KGEpfSk7aWYodSlhW2JdLm9uKFwidG91Y2hzdGFydFwiLGQpO2Eub3B0aW9ucy5jdXJzb3ImJmFbYl0uY3NzKEkpLmNzcyh7Y3Vyc29yOmEub3B0aW9ucy5jdXJzb3J9KX19KSxhLl9oYXNUcmFja2luZz0hMCl9LGRyYXdUcmFja2VyR3JhcGg6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLGI9YS5vcHRpb25zLGM9Yi50cmFja0J5QXJlYSxkPVtdLmNvbmNhdChjP2EuYXJlYVBhdGg6YS5ncmFwaFBhdGgpLGY9ZC5sZW5ndGgsaD1hLmNoYXJ0LGw9aC5wb2ludGVyLG09aC5yZW5kZXJlcixuPWgub3B0aW9ucy50b29sdGlwLnNuYXAsXG5xPWEudHJhY2tlcixnLHQ9ZnVuY3Rpb24oKXtpZihoLmhvdmVyU2VyaWVzIT09YSlhLm9uTW91c2VPdmVyKCl9LHY9XCJyZ2JhKDE5MiwxOTIsMTkyLFwiKyh6Py4wMDAxOi4wMDIpK1wiKVwiO2lmKGYmJiFjKWZvcihnPWYrMTtnLS07KVwiTVwiPT09ZFtnXSYmZC5zcGxpY2UoZysxLDAsZFtnKzFdLW4sZFtnKzJdLFwiTFwiKSwoZyYmXCJNXCI9PT1kW2ddfHxnPT09ZikmJmQuc3BsaWNlKGcsMCxcIkxcIixkW2ctMl0rbixkW2ctMV0pO3E/cS5hdHRyKHtkOmR9KTphLmdyYXBoJiYoYS50cmFja2VyPW0ucGF0aChkKS5hdHRyKHtcInN0cm9rZS1saW5lam9pblwiOlwicm91bmRcIix2aXNpYmlsaXR5OmEudmlzaWJsZT9cInZpc2libGVcIjpcImhpZGRlblwiLHN0cm9rZTp2LGZpbGw6Yz92Olwibm9uZVwiLFwic3Ryb2tlLXdpZHRoXCI6YS5ncmFwaC5zdHJva2VXaWR0aCgpKyhjPzA6MipuKSx6SW5kZXg6Mn0pLmFkZChhLmdyb3VwKSxwKFthLnRyYWNrZXIsYS5tYXJrZXJHcm91cF0sZnVuY3Rpb24oYSl7YS5hZGRDbGFzcyhcImhpZ2hjaGFydHMtdHJhY2tlclwiKS5vbihcIm1vdXNlb3ZlclwiLFxudCkub24oXCJtb3VzZW91dFwiLGZ1bmN0aW9uKGEpe2wub25UcmFja2VyTW91c2VPdXQoYSl9KTtiLmN1cnNvciYmYS5jc3Moe2N1cnNvcjpiLmN1cnNvcn0pO2lmKHUpYS5vbihcInRvdWNoc3RhcnRcIix0KX0pKX19O3EuY29sdW1uJiYocS5jb2x1bW4ucHJvdG90eXBlLmRyYXdUcmFja2VyPWEuZHJhd1RyYWNrZXJQb2ludCk7cS5waWUmJihxLnBpZS5wcm90b3R5cGUuZHJhd1RyYWNrZXI9YS5kcmF3VHJhY2tlclBvaW50KTtxLnNjYXR0ZXImJihxLnNjYXR0ZXIucHJvdG90eXBlLmRyYXdUcmFja2VyPWEuZHJhd1RyYWNrZXJQb2ludCk7dihuLnByb3RvdHlwZSx7c2V0SXRlbUV2ZW50czpmdW5jdGlvbihhLGIsYyl7dmFyIGU9dGhpcyxkPWUuY2hhcnQsZj1cImhpZ2hjaGFydHMtbGVnZW5kLVwiKyhhLnNlcmllcz9cInBvaW50XCI6XCJzZXJpZXNcIikrXCItYWN0aXZlXCI7KGM/YjphLmxlZ2VuZEdyb3VwKS5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKCl7YS5zZXRTdGF0ZShcImhvdmVyXCIpO2Quc2VyaWVzR3JvdXAuYWRkQ2xhc3MoZik7XG5iLmNzcyhlLm9wdGlvbnMuaXRlbUhvdmVyU3R5bGUpfSkub24oXCJtb3VzZW91dFwiLGZ1bmN0aW9uKCl7Yi5jc3MoYS52aXNpYmxlP2UuaXRlbVN0eWxlOmUuaXRlbUhpZGRlblN0eWxlKTtkLnNlcmllc0dyb3VwLnJlbW92ZUNsYXNzKGYpO2Euc2V0U3RhdGUoKX0pLm9uKFwiY2xpY2tcIixmdW5jdGlvbihiKXt2YXIgYz1mdW5jdGlvbigpe2Euc2V0VmlzaWJsZSYmYS5zZXRWaXNpYmxlKCl9O2I9e2Jyb3dzZXJFdmVudDpifTthLmZpcmVQb2ludEV2ZW50P2EuZmlyZVBvaW50RXZlbnQoXCJsZWdlbmRJdGVtQ2xpY2tcIixiLGMpOmwoYSxcImxlZ2VuZEl0ZW1DbGlja1wiLGIsYyl9KX0sY3JlYXRlQ2hlY2tib3hGb3JJdGVtOmZ1bmN0aW9uKGEpe2EuY2hlY2tib3g9RyhcImlucHV0XCIse3R5cGU6XCJjaGVja2JveFwiLGNoZWNrZWQ6YS5zZWxlY3RlZCxkZWZhdWx0Q2hlY2tlZDphLnNlbGVjdGVkfSx0aGlzLm9wdGlvbnMuaXRlbUNoZWNrYm94U3R5bGUsdGhpcy5jaGFydC5jb250YWluZXIpO0QoYS5jaGVja2JveCxcblwiY2xpY2tcIixmdW5jdGlvbihiKXtsKGEuc2VyaWVzfHxhLFwiY2hlY2tib3hDbGlja1wiLHtjaGVja2VkOmIudGFyZ2V0LmNoZWNrZWQsaXRlbTphfSxmdW5jdGlvbigpe2Euc2VsZWN0KCl9KX0pfX0pO2gubGVnZW5kLml0ZW1TdHlsZS5jdXJzb3I9XCJwb2ludGVyXCI7dihDLnByb3RvdHlwZSx7c2hvd1Jlc2V0Wm9vbTpmdW5jdGlvbigpe3ZhciBhPXRoaXMsYj1oLmxhbmcsYz1hLm9wdGlvbnMuY2hhcnQucmVzZXRab29tQnV0dG9uLGQ9Yy50aGVtZSxmPWQuc3RhdGVzLGs9XCJjaGFydFwiPT09Yy5yZWxhdGl2ZVRvP251bGw6XCJwbG90Qm94XCI7dGhpcy5yZXNldFpvb21CdXR0b249YS5yZW5kZXJlci5idXR0b24oYi5yZXNldFpvb20sbnVsbCxudWxsLGZ1bmN0aW9uKCl7YS56b29tT3V0KCl9LGQsZiYmZi5ob3ZlcikuYXR0cih7YWxpZ246Yy5wb3NpdGlvbi5hbGlnbix0aXRsZTpiLnJlc2V0Wm9vbVRpdGxlfSkuYWRkQ2xhc3MoXCJoaWdoY2hhcnRzLXJlc2V0LXpvb21cIikuYWRkKCkuYWxpZ24oYy5wb3NpdGlvbixcbiExLGspfSx6b29tT3V0OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcztsKGEsXCJzZWxlY3Rpb25cIix7cmVzZXRTZWxlY3Rpb246ITB9LGZ1bmN0aW9uKCl7YS56b29tKCl9KX0sem9vbTpmdW5jdGlvbihhKXt2YXIgYixkPXRoaXMucG9pbnRlcixmPSExLGg7IWF8fGEucmVzZXRTZWxlY3Rpb24/cCh0aGlzLmF4ZXMsZnVuY3Rpb24oYSl7Yj1hLnpvb20oKX0pOnAoYS54QXhpcy5jb25jYXQoYS55QXhpcyksZnVuY3Rpb24oYSl7dmFyIGM9YS5heGlzO2RbYy5pc1hBeGlzP1wiem9vbVhcIjpcInpvb21ZXCJdJiYoYj1jLnpvb20oYS5taW4sYS5tYXgpLGMuZGlzcGxheUJ0biYmKGY9ITApKX0pO2g9dGhpcy5yZXNldFpvb21CdXR0b247ZiYmIWg/dGhpcy5zaG93UmVzZXRab29tKCk6IWYmJmMoaCkmJih0aGlzLnJlc2V0Wm9vbUJ1dHRvbj1oLmRlc3Ryb3koKSk7YiYmdGhpcy5yZWRyYXcodCh0aGlzLm9wdGlvbnMuY2hhcnQuYW5pbWF0aW9uLGEmJmEuYW5pbWF0aW9uLDEwMD50aGlzLnBvaW50Q291bnQpKX0sXG5wYW46ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLGU9Yy5ob3ZlclBvaW50cyxkO2UmJnAoZSxmdW5jdGlvbihhKXthLnNldFN0YXRlKCl9KTtwKFwieHlcIj09PWI/WzEsMF06WzFdLGZ1bmN0aW9uKGIpe2I9Y1tiP1wieEF4aXNcIjpcInlBeGlzXCJdWzBdO3ZhciBlPWIuaG9yaXosZj1hW2U/XCJjaGFydFhcIjpcImNoYXJ0WVwiXSxlPWU/XCJtb3VzZURvd25YXCI6XCJtb3VzZURvd25ZXCIsaD1jW2VdLGs9KGIucG9pbnRSYW5nZXx8MCkvMixnPWIuZ2V0RXh0cmVtZXMoKSxsPWIudG9WYWx1ZShoLWYsITApK2ssaz1iLnRvVmFsdWUoaCtiLmxlbi1mLCEwKS1rLG09azxsLGg9bT9rOmwsbD1tP2w6ayxrPU1hdGgubWluKGcuZGF0YU1pbixnLm1pbiktaCxnPWwtTWF0aC5tYXgoZy5kYXRhTWF4LGcubWF4KTtiLnNlcmllcy5sZW5ndGgmJjA+ayYmMD5nJiYoYi5zZXRFeHRyZW1lcyhoLGwsITEsITEse3RyaWdnZXI6XCJwYW5cIn0pLGQ9ITApO2NbZV09Zn0pO2QmJmMucmVkcmF3KCExKTtJKGMuY29udGFpbmVyLFxue2N1cnNvcjpcIm1vdmVcIn0pfX0pO3YobS5wcm90b3R5cGUse3NlbGVjdDpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMsZT1jLnNlcmllcyxmPWUuY2hhcnQ7YT10KGEsIWMuc2VsZWN0ZWQpO2MuZmlyZVBvaW50RXZlbnQoYT9cInNlbGVjdFwiOlwidW5zZWxlY3RcIix7YWNjdW11bGF0ZTpifSxmdW5jdGlvbigpe2Muc2VsZWN0ZWQ9Yy5vcHRpb25zLnNlbGVjdGVkPWE7ZS5vcHRpb25zLmRhdGFbZChjLGUuZGF0YSldPWMub3B0aW9ucztjLnNldFN0YXRlKGEmJlwic2VsZWN0XCIpO2J8fHAoZi5nZXRTZWxlY3RlZFBvaW50cygpLGZ1bmN0aW9uKGEpe2Euc2VsZWN0ZWQmJmEhPT1jJiYoYS5zZWxlY3RlZD1hLm9wdGlvbnMuc2VsZWN0ZWQ9ITEsZS5vcHRpb25zLmRhdGFbZChhLGUuZGF0YSldPWEub3B0aW9ucyxhLnNldFN0YXRlKFwiXCIpLGEuZmlyZVBvaW50RXZlbnQoXCJ1bnNlbGVjdFwiKSl9KX0pfSxvbk1vdXNlT3ZlcjpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuc2VyaWVzLGU9Yy5jaGFydCxkPVxuZS50b29sdGlwLGY9ZS5ob3ZlclBvaW50O2lmKHRoaXMuc2VyaWVzKXtpZighYil7aWYoZiYmZiE9PXRoaXMpZi5vbk1vdXNlT3V0KCk7aWYoZS5ob3ZlclNlcmllcyE9PWMpYy5vbk1vdXNlT3ZlcigpO2UuaG92ZXJQb2ludD10aGlzfSFkfHxkLnNoYXJlZCYmIWMubm9TaGFyZWRUb29sdGlwP2R8fHRoaXMuc2V0U3RhdGUoXCJob3ZlclwiKToodGhpcy5zZXRTdGF0ZShcImhvdmVyXCIpLGQucmVmcmVzaCh0aGlzLGEpKTt0aGlzLmZpcmVQb2ludEV2ZW50KFwibW91c2VPdmVyXCIpfX0sb25Nb3VzZU91dDpmdW5jdGlvbigpe3ZhciBhPXRoaXMuc2VyaWVzLmNoYXJ0LGI9YS5ob3ZlclBvaW50czt0aGlzLmZpcmVQb2ludEV2ZW50KFwibW91c2VPdXRcIik7YiYmLTEhPT1kKHRoaXMsYil8fCh0aGlzLnNldFN0YXRlKCksYS5ob3ZlclBvaW50PW51bGwpfSxpbXBvcnRFdmVudHM6ZnVuY3Rpb24oKXtpZighdGhpcy5oYXNJbXBvcnRlZEV2ZW50cyl7dmFyIGE9eSh0aGlzLnNlcmllcy5vcHRpb25zLnBvaW50LFxudGhpcy5vcHRpb25zKS5ldmVudHMsYjt0aGlzLmV2ZW50cz1hO2ZvcihiIGluIGEpRCh0aGlzLGIsYVtiXSk7dGhpcy5oYXNJbXBvcnRlZEV2ZW50cz0hMH19LHNldFN0YXRlOmZ1bmN0aW9uKGEsYil7dmFyIGM9TWF0aC5mbG9vcih0aGlzLnBsb3RYKSxkPXRoaXMucGxvdFksZT10aGlzLnNlcmllcyxoPWUub3B0aW9ucy5zdGF0ZXNbYV18fHt9LGw9ZltlLnR5cGVdLm1hcmtlciYmZS5vcHRpb25zLm1hcmtlcixtPWwmJiExPT09bC5lbmFibGVkLG49bCYmbC5zdGF0ZXMmJmwuc3RhdGVzW2FdfHx7fSxwPSExPT09bi5lbmFibGVkLGc9ZS5zdGF0ZU1hcmtlckdyYXBoaWMscT10aGlzLm1hcmtlcnx8e30sdT1lLmNoYXJ0LHk9ZS5oYWxvLHosRj1sJiZlLm1hcmtlckF0dHJpYnM7YT1hfHxcIlwiO2lmKCEoYT09PXRoaXMuc3RhdGUmJiFifHx0aGlzLnNlbGVjdGVkJiZcInNlbGVjdFwiIT09YXx8ITE9PT1oLmVuYWJsZWR8fGEmJihwfHxtJiYhMT09PW4uZW5hYmxlZCl8fGEmJnEuc3RhdGVzJiZcbnEuc3RhdGVzW2FdJiYhMT09PXEuc3RhdGVzW2FdLmVuYWJsZWQpKXtGJiYoej1lLm1hcmtlckF0dHJpYnModGhpcyxhKSk7aWYodGhpcy5ncmFwaGljKXRoaXMuc3RhdGUmJnRoaXMuZ3JhcGhpYy5yZW1vdmVDbGFzcyhcImhpZ2hjaGFydHMtcG9pbnQtXCIrdGhpcy5zdGF0ZSksYSYmdGhpcy5ncmFwaGljLmFkZENsYXNzKFwiaGlnaGNoYXJ0cy1wb2ludC1cIithKSx0aGlzLmdyYXBoaWMuYXR0cihlLnBvaW50QXR0cmlicyh0aGlzLGEpKSx6JiZ0aGlzLmdyYXBoaWMuYW5pbWF0ZSh6LHQodS5vcHRpb25zLmNoYXJ0LmFuaW1hdGlvbixuLmFuaW1hdGlvbixsLmFuaW1hdGlvbikpLGcmJmcuaGlkZSgpO2Vsc2V7aWYoYSYmbil7bD1xLnN5bWJvbHx8ZS5zeW1ib2w7ZyYmZy5jdXJyZW50U3ltYm9sIT09bCYmKGc9Zy5kZXN0cm95KCkpO2lmKGcpZ1tiP1wiYW5pbWF0ZVwiOlwiYXR0clwiXSh7eDp6LngseTp6Lnl9KTtlbHNlIGwmJihlLnN0YXRlTWFya2VyR3JhcGhpYz1nPXUucmVuZGVyZXIuc3ltYm9sKGwsXG56Lngsei55LHoud2lkdGgsei5oZWlnaHQpLmFkZChlLm1hcmtlckdyb3VwKSxnLmN1cnJlbnRTeW1ib2w9bCk7ZyYmZy5hdHRyKGUucG9pbnRBdHRyaWJzKHRoaXMsYSkpfWcmJihnW2EmJnUuaXNJbnNpZGVQbG90KGMsZCx1LmludmVydGVkKT9cInNob3dcIjpcImhpZGVcIl0oKSxnLmVsZW1lbnQucG9pbnQ9dGhpcyl9KGM9aC5oYWxvKSYmYy5zaXplPyh5fHwoZS5oYWxvPXk9dS5yZW5kZXJlci5wYXRoKCkuYWRkKEY/ZS5tYXJrZXJHcm91cDplLmdyb3VwKSkseVtiP1wiYW5pbWF0ZVwiOlwiYXR0clwiXSh7ZDp0aGlzLmhhbG9QYXRoKGMuc2l6ZSl9KSx5LmF0dHIoe1wiY2xhc3NcIjpcImhpZ2hjaGFydHMtaGFsbyBoaWdoY2hhcnRzLWNvbG9yLVwiK3QodGhpcy5jb2xvckluZGV4LGUuY29sb3JJbmRleCl9KSx5LnBvaW50PXRoaXMseS5hdHRyKHYoe2ZpbGw6dGhpcy5jb2xvcnx8ZS5jb2xvcixcImZpbGwtb3BhY2l0eVwiOmMub3BhY2l0eSx6SW5kZXg6LTF9LGMuYXR0cmlidXRlcykpKTp5JiZ5LnBvaW50JiZcbnkucG9pbnQuaGFsb1BhdGgmJnkuYW5pbWF0ZSh7ZDp5LnBvaW50LmhhbG9QYXRoKDApfSk7dGhpcy5zdGF0ZT1hfX0saGFsb1BhdGg6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuc2VyaWVzLmNoYXJ0LnJlbmRlcmVyLnN5bWJvbHMuY2lyY2xlKE1hdGguZmxvb3IodGhpcy5wbG90WCktYSx0aGlzLnBsb3RZLWEsMiphLDIqYSl9fSk7dihiLnByb3RvdHlwZSx7b25Nb3VzZU92ZXI6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNoYXJ0LGI9YS5ob3ZlclNlcmllcztpZihiJiZiIT09dGhpcyliLm9uTW91c2VPdXQoKTt0aGlzLm9wdGlvbnMuZXZlbnRzLm1vdXNlT3ZlciYmbCh0aGlzLFwibW91c2VPdmVyXCIpO3RoaXMuc2V0U3RhdGUoXCJob3ZlclwiKTthLmhvdmVyU2VyaWVzPXRoaXN9LG9uTW91c2VPdXQ6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9wdGlvbnMsYj10aGlzLmNoYXJ0LGM9Yi50b29sdGlwLGQ9Yi5ob3ZlclBvaW50O2IuaG92ZXJTZXJpZXM9bnVsbDtpZihkKWQub25Nb3VzZU91dCgpO1xudGhpcyYmYS5ldmVudHMubW91c2VPdXQmJmwodGhpcyxcIm1vdXNlT3V0XCIpOyFjfHxhLnN0aWNreVRyYWNraW5nfHxjLnNoYXJlZCYmIXRoaXMubm9TaGFyZWRUb29sdGlwfHxjLmhpZGUoKTt0aGlzLnNldFN0YXRlKCl9LHNldFN0YXRlOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsYz1iLm9wdGlvbnMsZD1iLmdyYXBoLGY9Yy5zdGF0ZXMsaD1jLmxpbmVXaWR0aCxjPTA7YT1hfHxcIlwiO2lmKGIuc3RhdGUhPT1hJiYocChbYi5ncm91cCxiLm1hcmtlckdyb3VwXSxmdW5jdGlvbihjKXtjJiYoYi5zdGF0ZSYmYy5yZW1vdmVDbGFzcyhcImhpZ2hjaGFydHMtc2VyaWVzLVwiK2Iuc3RhdGUpLGEmJmMuYWRkQ2xhc3MoXCJoaWdoY2hhcnRzLXNlcmllcy1cIithKSl9KSxiLnN0YXRlPWEsIWZbYV18fCExIT09ZlthXS5lbmFibGVkKSYmKGEmJihoPWZbYV0ubGluZVdpZHRofHxoKyhmW2FdLmxpbmVXaWR0aFBsdXN8fDApKSxkJiYhZC5kYXNoc3R5bGUpKWZvcihmPXtcInN0cm9rZS13aWR0aFwiOmh9LGQuYXR0cihmKTtiW1wiem9uZS1ncmFwaC1cIitcbmNdOyliW1wiem9uZS1ncmFwaC1cIitjXS5hdHRyKGYpLGMrPTF9LHNldFZpc2libGU6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLGQ9Yy5jaGFydCxlPWMubGVnZW5kSXRlbSxmLGg9ZC5vcHRpb25zLmNoYXJ0Lmlnbm9yZUhpZGRlblNlcmllcyxtPWMudmlzaWJsZTtmPShjLnZpc2libGU9YT1jLm9wdGlvbnMudmlzaWJsZT1jLnVzZXJPcHRpb25zLnZpc2libGU9dm9pZCAwPT09YT8hbTphKT9cInNob3dcIjpcImhpZGVcIjtwKFtcImdyb3VwXCIsXCJkYXRhTGFiZWxzR3JvdXBcIixcIm1hcmtlckdyb3VwXCIsXCJ0cmFja2VyXCIsXCJ0dFwiXSxmdW5jdGlvbihhKXtpZihjW2FdKWNbYV1bZl0oKX0pO2lmKGQuaG92ZXJTZXJpZXM9PT1jfHwoZC5ob3ZlclBvaW50JiZkLmhvdmVyUG9pbnQuc2VyaWVzKT09PWMpYy5vbk1vdXNlT3V0KCk7ZSYmZC5sZWdlbmQuY29sb3JpemVJdGVtKGMsYSk7Yy5pc0RpcnR5PSEwO2Mub3B0aW9ucy5zdGFja2luZyYmcChkLnNlcmllcyxmdW5jdGlvbihhKXthLm9wdGlvbnMuc3RhY2tpbmcmJlxuYS52aXNpYmxlJiYoYS5pc0RpcnR5PSEwKX0pO3AoYy5saW5rZWRTZXJpZXMsZnVuY3Rpb24oYil7Yi5zZXRWaXNpYmxlKGEsITEpfSk7aCYmKGQuaXNEaXJ0eUJveD0hMCk7ITEhPT1iJiZkLnJlZHJhdygpO2woYyxmKX0sc2hvdzpmdW5jdGlvbigpe3RoaXMuc2V0VmlzaWJsZSghMCl9LGhpZGU6ZnVuY3Rpb24oKXt0aGlzLnNldFZpc2libGUoITEpfSxzZWxlY3Q6ZnVuY3Rpb24oYSl7dGhpcy5zZWxlY3RlZD1hPXZvaWQgMD09PWE/IXRoaXMuc2VsZWN0ZWQ6YTt0aGlzLmNoZWNrYm94JiYodGhpcy5jaGVja2JveC5jaGVja2VkPWEpO2wodGhpcyxhP1wic2VsZWN0XCI6XCJ1bnNlbGVjdFwiKX0sZHJhd1RyYWNrZXI6YS5kcmF3VHJhY2tlckdyYXBofSl9KShMKTsoZnVuY3Rpb24oYSl7dmFyIEQ9YS5DaGFydCxDPWEuZWFjaCxHPWEuaW5BcnJheSxJPWEuaXNPYmplY3QsaD1hLnBpY2ssZj1hLnNwbGF0O0QucHJvdG90eXBlLnNldFJlc3BvbnNpdmU9ZnVuY3Rpb24oYSl7dmFyIGY9dGhpcy5vcHRpb25zLnJlc3BvbnNpdmU7XG5mJiZmLnJ1bGVzJiZDKGYucnVsZXMsZnVuY3Rpb24oZil7dGhpcy5tYXRjaFJlc3BvbnNpdmVSdWxlKGYsYSl9LHRoaXMpfTtELnByb3RvdHlwZS5tYXRjaFJlc3BvbnNpdmVSdWxlPWZ1bmN0aW9uKGYsdil7dmFyIGw9dGhpcy5yZXNwUnVsZXMscD1mLmNvbmRpdGlvbixkO2Q9cC5jYWxsYmFja3x8ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaGFydFdpZHRoPD1oKHAubWF4V2lkdGgsTnVtYmVyLk1BWF9WQUxVRSkmJnRoaXMuY2hhcnRIZWlnaHQ8PWgocC5tYXhIZWlnaHQsTnVtYmVyLk1BWF9WQUxVRSkmJnRoaXMuY2hhcnRXaWR0aD49aChwLm1pbldpZHRoLDApJiZ0aGlzLmNoYXJ0SGVpZ2h0Pj1oKHAubWluSGVpZ2h0LDApfTt2b2lkIDA9PT1mLl9pZCYmKGYuX2lkPWEudW5pcXVlS2V5KCkpO2Q9ZC5jYWxsKHRoaXMpOyFsW2YuX2lkXSYmZD9mLmNoYXJ0T3B0aW9ucyYmKGxbZi5faWRdPXRoaXMuY3VycmVudE9wdGlvbnMoZi5jaGFydE9wdGlvbnMpLHRoaXMudXBkYXRlKGYuY2hhcnRPcHRpb25zLFxudikpOmxbZi5faWRdJiYhZCYmKHRoaXMudXBkYXRlKGxbZi5faWRdLHYpLGRlbGV0ZSBsW2YuX2lkXSl9O0QucHJvdG90eXBlLmN1cnJlbnRPcHRpb25zPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGgoYSxkLGMpe3ZhciBsLHA7Zm9yKGwgaW4gYSlpZigtMTxHKGwsW1wic2VyaWVzXCIsXCJ4QXhpc1wiLFwieUF4aXNcIl0pKWZvcihhW2xdPWYoYVtsXSksY1tsXT1bXSxwPTA7cDxhW2xdLmxlbmd0aDtwKyspY1tsXVtwXT17fSxoKGFbbF1bcF0sZFtsXVtwXSxjW2xdW3BdKTtlbHNlIEkoYVtsXSk/KGNbbF09e30saChhW2xdLGRbbF18fHt9LGNbbF0pKTpjW2xdPWRbbF18fG51bGx9dmFyIGw9e307aChhLHRoaXMub3B0aW9ucyxsKTtyZXR1cm4gbH19KShMKTtyZXR1cm4gTH0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9oaWdoY2hhcnRzL2hpZ2hjaGFydHMuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1255:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__ = __webpack_require__(602);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_value_date__ = __webpack_require__(1232);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_get_value__ = __webpack_require__(282);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_set_share_denomination__ = __webpack_require__(1231);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_share_denomination_label__ = __webpack_require__(1234);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\n\n\n\n\nvar MarketDetails = function MarketDetails(p) {\n  var outcomeName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_get_value__[\"a\" /* default */])(p, 'result.outcomeName');\n\n  var outstandingShares = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_set_share_denomination__[\"a\" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_get_value__[\"a\" /* default */])(p, 'outstandingShares.formatted'), p.selectedShareDenomination);\n  var shareDenomination = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_share_denomination_label__[\"a\" /* default */])(p.selectedShareDenomination, p.shareDenominations);\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'div',\n    { className: 'market-details market-content-scrollable' },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'ul',\n      { className: 'properties' },\n      p.type === 'binary' && outcomeName && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property outcome' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'result'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-value' },\n          outcomeName,\n          ' (',\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], p.result.proportionCorrect),\n          ')'\n        )\n      ),\n      p.type === 'categorical' && outcomeName && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property outcome' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'result'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-value' },\n          outcomeName\n        )\n      ),\n      p.type === 'scalar' && p.reportedOutcome && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property outcome' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'result'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-value' },\n          p.reportedOutcome\n        )\n      ),\n      p.author != null && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property author' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'author'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-value' },\n          p.author\n        )\n      ),\n      p.isOpen && p.outstandingShares != null && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property outstanding-shares' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'outstanding shares'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { className: 'property-value', formatted: outstandingShares, denomination: shareDenomination })\n      ),\n      p.extraInfo != null && p.extraInfo !== '' && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property extra-info' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'extra info'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-value' },\n          p.extraInfo\n        )\n      ),\n      p.resolution && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property resolution' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'resolution'\n        ),\n        getResolutionNode(p.resolution)\n      ),\n      p.type === 'scalar' && p.minValue != null && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property min-value' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'minimum value'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-value' },\n          p.minValue\n        )\n      ),\n      p.type === 'scalar' && p.maxValue != null && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property max-value' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'maximum value'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-value' },\n          p.maxValue\n        )\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'li',\n        { className: 'property creation-date', 'data-tip': 'created: ' + p.creationTime.full },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'property-label' },\n          'created'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_value_date__[\"a\" /* default */], _extends({ className: 'property-value' }, p.creationTime))\n      )\n    ),\n    !!p.reportedOutcome && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'reported-outcome' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('hr', null),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'center',\n        null,\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'h4',\n          null,\n          'This market is closed.'\n        )\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('hr', null)\n    )\n  );\n};\n\nMarketDetails.propTypes = {\n  author: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  extraInfo: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  resolution: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  outstandingShares: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].object,\n  creationTime: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].object,\n  type: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  minValue: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  maxValue: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  reportedOutcome: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string\n};\n\nvar _default = MarketDetails;\n/* harmony default export */ exports[\"a\"] = _default;\n\nfunction getResolutionNode(resolution) {\n  var resolutionText = void 0;\n  if (resolution === 'generic') {\n    resolutionText = 'Covered by local, national or international news media';\n  } else {\n    resolutionText = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'a',\n      { href: resolution },\n      resolution\n    );\n  }\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'span',\n    { className: 'property-value' },\n    resolutionText\n  );\n}\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketDetails, 'MarketDetails', '/home/jack/src/augur/src/modules/market/components/market-details.jsx');\n\n  __REACT_HOT_LOADER__.register(getResolutionNode, 'getResolutionNode', '/home/jack/src/augur/src/modules/market/components/market-details.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-details.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1256:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(113);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_em_dash__ = __webpack_require__(606);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__constants_trade_close_type__ = __webpack_require__(1248);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__ = __webpack_require__(123);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\n\n\nvar MarketTradeCloseDialog = function (_Component) {\n  _inherits(MarketTradeCloseDialog, _Component);\n\n  function MarketTradeCloseDialog(props) {\n    _classCallCheck(this, MarketTradeCloseDialog);\n\n    var _this = _possibleConstructorReturn(this, (MarketTradeCloseDialog.__proto__ || Object.getPrototypeOf(MarketTradeCloseDialog)).call(this, props));\n\n    _this.state = {\n      isConfirming: false,\n      status: props.status\n    };\n\n    _this.renderCloseDialogContent = _this.renderCloseDialogContent.bind(_this);\n    return _this;\n  }\n\n  _createClass(MarketTradeCloseDialog, [{\n    key: 'renderCloseDialogContent',\n    value: function renderCloseDialogContent(marketID, orderID, closeType, isClosable, isFullyClosable, quantityOfShares, isConfirming, closePosition, status, orderType, cancelOrder, isTradeCommitLocked) {\n      var _this2 = this;\n\n      // Position -- No Available Actions\n      if (closeType === __WEBPACK_IMPORTED_MODULE_3__constants_trade_close_type__[\"a\" /* POSITION */] && !status && (!parseFloat(quantityOfShares, 10) || !isClosable)) {\n        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_em_dash__[\"a\" /* default */], null);\n      }\n\n      if (isConfirming) {\n        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'confirming-dialog' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'unstyled confirming-no',\n              onClick: function onClick() {\n                _this2.setState({ isConfirming: false });\n              }\n            },\n            'No'\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'unstyled confirming-yes',\n              onClick: function onClick(event) {\n                if (closeType === __WEBPACK_IMPORTED_MODULE_3__constants_trade_close_type__[\"a\" /* POSITION */]) {\n                  closePosition(marketID, orderID);\n                } else if (closeType === __WEBPACK_IMPORTED_MODULE_3__constants_trade_close_type__[\"b\" /* ORDER */]) {\n                  cancelOrder(orderID, marketID, orderType);\n                }\n                _this2.setState({ isConfirming: false });\n              }\n            },\n            'Yes'\n          )\n        );\n      }\n\n      switch (status) {\n        case __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__[\"a\" /* CLOSE_DIALOG_CLOSING */]:\n          return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            null,\n            'closing'\n          );\n        case __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__[\"b\" /* CLOSE_DIALOG_FAILED */]:\n          return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            null,\n            'failed'\n          );\n        case __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__[\"c\" /* CLOSE_DIALOG_PARTIALLY_FAILED */]:\n          return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            null,\n            'partially failed'\n          );\n        case __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__[\"d\" /* CLOSE_DIALOG_SUCCESS */]:\n          return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            null,\n            'success'\n          );\n        default:\n          return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'unstyled close-order-button',\n              onClick: function onClick() {\n                if (!isTradeCommitLocked) {\n                  _this2.setState({ isConfirming: true });\n                }\n              }\n            },\n            closeType === __WEBPACK_IMPORTED_MODULE_3__constants_trade_close_type__[\"a\" /* POSITION */] ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'span',\n              null,\n              isFullyClosable ? 'close' : 'minimize'\n            ) : 'cancel'\n          );\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var p = this.props;\n      var s = this.state;\n\n      var orderID = p.closeType === __WEBPACK_IMPORTED_MODULE_3__constants_trade_close_type__[\"a\" /* POSITION */] ? p.outcomeID : p.orderID;\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        {\n          className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('close-dialog', {\n            'action-disabled': p.isTradeCommitLocked && p.closeType === __WEBPACK_IMPORTED_MODULE_3__constants_trade_close_type__[\"a\" /* POSITION */],\n            'action-running': p.status === __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__[\"a\" /* CLOSE_DIALOG_CLOSING */],\n            'action-failed': p.status === __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__[\"b\" /* CLOSE_DIALOG_FAILED */] || p.status === __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__[\"c\" /* CLOSE_DIALOG_PARTIALLY_FAILED */],\n            'action-succeeded': p.status === __WEBPACK_IMPORTED_MODULE_4__constants_close_dialog_status__[\"d\" /* CLOSE_DIALOG_SUCCESS */]\n          })\n        },\n        this.renderCloseDialogContent(p.marketID, orderID, p.closeType, p.isClosable, p.isFullyClosable, p.quantityOfShares, s.isConfirming, p.closePosition, p.status, p.orderType, p.cancelOrder, p.isTradeCommitLocked)\n      );\n    }\n  }]);\n\n  return MarketTradeCloseDialog;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nMarketTradeCloseDialog.propTypes = {\n  status: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string\n};\nvar _default = MarketTradeCloseDialog;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketTradeCloseDialog, 'MarketTradeCloseDialog', '/home/jack/src/augur/src/modules/market/components/market-trade-close-dialog.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-trade-close-dialog.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1257:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__order_book_header__ = __webpack_require__(1302);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__order_book_rows__ = __webpack_require__(1304);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_components_em_dash__ = __webpack_require__(606);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__markets_constants_market_types__ = __webpack_require__(28);\n\n\n\n\n\n\n\n\n// NOTE --\n// Bids + Asks are rendered into individual row components -- flexbox is utilized for side-by-side layout\nvar OrderBook = function OrderBook(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'order-book' },\n    p.marketType !== __WEBPACK_IMPORTED_MODULE_4__markets_constants_market_types__[\"b\" /* SCALAR */] ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'h3',\n      null,\n      'Order Book ',\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_em_dash__[\"a\" /* default */], null),\n      ' ',\n      p.outcome.name\n    ) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'h3',\n      null,\n      'Order Book'\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__order_book_header__[\"a\" /* default */], null),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'market-content-scrollable' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__order_book_rows__[\"a\" /* default */], {\n        id: p.outcome.id,\n        trade: p.outcome.trade,\n        bids: p.outcome.orderBook.bids,\n        asks: p.outcome.orderBook.asks,\n        selectedTradeSide: p.selectedTradeSide,\n        updateTradeFromSelectedOrder: p.updateTradeFromSelectedOrder,\n        selectedShareDenomination: p.selectedShareDenomination\n      })\n    )\n  );\n};\n\nvar _default = OrderBook;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(OrderBook, 'OrderBook', '/home/jack/src/augur/src/modules/order-book/components/order-book.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/order-book/components/order-book.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vcmRlci1ib29rL2NvbXBvbmVudHMvb3JkZXItYm9vay5qc3g/MTE5YiJdLCJuYW1lcyI6WyJPcmRlckJvb2siLCJwIiwibWFya2V0VHlwZSIsIm91dGNvbWUiLCJuYW1lIiwiaWQiLCJ0cmFkZSIsIm9yZGVyQm9vayIsImJpZHMiLCJhc2tzIiwic2VsZWN0ZWRUcmFkZVNpZGUiLCJ1cGRhdGVUcmFkZUZyb21TZWxlY3RlZE9yZGVyIiwic2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxJQUFNQSxZQUFZLFNBQVpBLFNBQVk7QUFBQSxTQUNoQjtBQUFBO0FBQUEsTUFBUyxXQUFVLFlBQW5CO0FBQ0dDLE1BQUVDLFVBQUYsS0FBaUIsK0VBQWpCLEdBQ0M7QUFBQTtBQUFBO0FBQUE7QUFBZSxrRUFBQywyRUFBRCxPQUFmO0FBQUE7QUFBMkJELFFBQUVFLE9BQUYsQ0FBVUM7QUFBckMsS0FERCxHQUVDO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FISjtBQUtFLGdFQUFDLG1FQUFELE9BTEY7QUFNRTtBQUFBO0FBQUEsUUFBSyxXQUFVLDJCQUFmO0FBQ0Usa0VBQUMsaUVBQUQ7QUFDRSxZQUFJSCxFQUFFRSxPQUFGLENBQVVFLEVBRGhCO0FBRUUsZUFBT0osRUFBRUUsT0FBRixDQUFVRyxLQUZuQjtBQUdFLGNBQU1MLEVBQUVFLE9BQUYsQ0FBVUksU0FBVixDQUFvQkMsSUFINUI7QUFJRSxjQUFNUCxFQUFFRSxPQUFGLENBQVVJLFNBQVYsQ0FBb0JFLElBSjVCO0FBS0UsMkJBQW1CUixFQUFFUyxpQkFMdkI7QUFNRSxzQ0FBOEJULEVBQUVVLDRCQU5sQztBQU9FLG1DQUEyQlYsRUFBRVc7QUFQL0I7QUFERjtBQU5GLEdBRGdCO0FBQUEsQ0FBbEI7O2VBcUJlWixTO0FBQWY7Ozs7Ozs7O2dDQXJCTUEsUyIsImZpbGUiOiIxMjU3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IE9yZGVyQm9va0hlYWRlciBmcm9tICdtb2R1bGVzL29yZGVyLWJvb2svY29tcG9uZW50cy9vcmRlci1ib29rLWhlYWRlcic7XG5pbXBvcnQgT3JkZXJCb29rUm93cyBmcm9tICdtb2R1bGVzL29yZGVyLWJvb2svY29tcG9uZW50cy9vcmRlci1ib29rLXJvd3MnO1xuaW1wb3J0IEVtRGFzaCBmcm9tICdtb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL2VtLWRhc2gnO1xuXG5pbXBvcnQgeyBTQ0FMQVIgfSBmcm9tICdtb2R1bGVzL21hcmtldHMvY29uc3RhbnRzL21hcmtldC10eXBlcyc7XG5cbi8vIE5PVEUgLS1cbi8vIEJpZHMgKyBBc2tzIGFyZSByZW5kZXJlZCBpbnRvIGluZGl2aWR1YWwgcm93IGNvbXBvbmVudHMgLS0gZmxleGJveCBpcyB1dGlsaXplZCBmb3Igc2lkZS1ieS1zaWRlIGxheW91dFxuY29uc3QgT3JkZXJCb29rID0gcCA9PiAoXG4gIDxhcnRpY2xlIGNsYXNzTmFtZT1cIm9yZGVyLWJvb2tcIj5cbiAgICB7cC5tYXJrZXRUeXBlICE9PSBTQ0FMQVIgP1xuICAgICAgPGgzPk9yZGVyIEJvb2sgPEVtRGFzaCAvPiB7cC5vdXRjb21lLm5hbWV9PC9oMz4gOlxuICAgICAgPGgzPk9yZGVyIEJvb2s8L2gzPlxuICAgIH1cbiAgICA8T3JkZXJCb29rSGVhZGVyIC8+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJtYXJrZXQtY29udGVudC1zY3JvbGxhYmxlXCIgPlxuICAgICAgPE9yZGVyQm9va1Jvd3NcbiAgICAgICAgaWQ9e3Aub3V0Y29tZS5pZH1cbiAgICAgICAgdHJhZGU9e3Aub3V0Y29tZS50cmFkZX1cbiAgICAgICAgYmlkcz17cC5vdXRjb21lLm9yZGVyQm9vay5iaWRzfVxuICAgICAgICBhc2tzPXtwLm91dGNvbWUub3JkZXJCb29rLmFza3N9XG4gICAgICAgIHNlbGVjdGVkVHJhZGVTaWRlPXtwLnNlbGVjdGVkVHJhZGVTaWRlfVxuICAgICAgICB1cGRhdGVUcmFkZUZyb21TZWxlY3RlZE9yZGVyPXtwLnVwZGF0ZVRyYWRlRnJvbVNlbGVjdGVkT3JkZXJ9XG4gICAgICAgIHNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb249e3Auc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbn1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gIDwvYXJ0aWNsZT5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IE9yZGVyQm9vaztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL29yZGVyLWJvb2svY29tcG9uZW50cy9vcmRlci1ib29rLmpzeCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 1258:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(113);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_input__ = __webpack_require__(1230);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__outcome_trade_summary__ = __webpack_require__(1306);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__outcome_trade_action__ = __webpack_require__(1305);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common_components_component_nav__ = __webpack_require__(1236);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_components_em_dash__ = __webpack_require__(606);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__ = __webpack_require__(604);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__constants_trade_types__ = __webpack_require__(1251);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__order_book_constants_order_book_order_types__ = __webpack_require__(321);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__markets_constants_market_types__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_get_value__ = __webpack_require__(282);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar OutcomeTrade = function (_Component) {\n  _inherits(OutcomeTrade, _Component);\n\n  function OutcomeTrade(props) {\n    _classCallCheck(this, OutcomeTrade);\n\n    var _this = _possibleConstructorReturn(this, (OutcomeTrade.__proto__ || Object.getPrototypeOf(OutcomeTrade)).call(this, props));\n\n    _this.state = {\n      timestamp: Date.now(), // Utilized to force a re-render and subsequent update of the input fields' values on `selectedOutcome` change\n      shareInputPlaceholder: generateShareInputPlaceholder(props.selectedShareDenomination),\n      maxSharesDenominated: denominateShares(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(props, 'selectedOutcome.trade.maxNumShares.value', __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"c\" /* SHARE */], props.selectedShareDenomination)), // NOTE -- this value is not currently used in the component, but may be used later, so leaving here until this decision is finalized\n      sharesDenominated: denominateShares(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(props, 'selectedOutcome.trade.numShares'), __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"c\" /* SHARE */], props.selectedShareDenomination) || '',\n      minLimitPrice: props.marketType && props.marketType === __WEBPACK_IMPORTED_MODULE_10__markets_constants_market_types__[\"b\" /* SCALAR */] ? props.minLimitPrice : 0,\n      maxLimitPrice: props.marketType && props.marketType === __WEBPACK_IMPORTED_MODULE_10__markets_constants_market_types__[\"b\" /* SCALAR */] ? props.maxLimitPrice : 1,\n      isSharesValueValid: true,\n      isLimitPriceValueValid: true,\n      incrementAmount: 0.1\n    };\n\n    _this.updateTimestamp = _this.updateTimestamp.bind(_this);\n    _this.updateSelectedNav = _this.updateSelectedNav.bind(_this);\n    _this.handleSharesInput = _this.handleSharesInput.bind(_this);\n    _this.validateShares = _this.validateShares.bind(_this);\n    _this.validatePrice = _this.validatePrice.bind(_this);\n    return _this;\n  }\n\n  _createClass(OutcomeTrade, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.marketType !== nextProps.markettype) {\n        this.setState({\n          minLimitPrice: nextProps.marketType && nextProps.marketType === __WEBPACK_IMPORTED_MODULE_10__markets_constants_market_types__[\"b\" /* SCALAR */] ? nextProps.minLimitPrice : 0,\n          maxLimitPrice: nextProps.marketType && nextProps.marketType === __WEBPACK_IMPORTED_MODULE_10__markets_constants_market_types__[\"b\" /* SCALAR */] ? nextProps.maxLimitPrice : 1\n        });\n      }\n\n      var oldTrade = JSON.stringify(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'selectedOutcome.trade'));\n      var newTrade = JSON.stringify(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(nextProps, 'selectedOutcome.trade'));\n\n      if (newTrade !== oldTrade || this.props.selectedShareDenomination !== nextProps.selectedShareDenomination) {\n        this.setState({\n          shareInputPlaceholder: generateShareInputPlaceholder(nextProps.selectedShareDenomination),\n          maxSharesDenominated: denominateShares(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(nextProps, 'selectedOutcome.trade.maxNumShares.value', __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"c\" /* SHARE */], nextProps.selectedShareDenomination)),\n          sharesDenominated: denominateShares(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(nextProps, 'selectedOutcome.trade.numShares'), __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"c\" /* SHARE */], nextProps.selectedShareDenomination) || ''\n        });\n      }\n\n      var oldID = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'selectedOutcome.id');\n      var newID = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(nextProps, 'selectedOutcome.id');\n\n      if (oldID !== newID) {\n        // If the outcome selection changes, re-render trade component\n        this.updateTimestamp();\n      }\n\n      var oldTradeOrders = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'tradeSummary.tradeOrders');\n      var newTradeOrders = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(nextProps, 'tradeSummary.tradeOrders');\n\n      // Currently whenever a trade is submitted, all market's in-process orders are cleared\n      // Will re-render trade component upon tradeOrders clearing\n      if (oldTradeOrders.length !== newTradeOrders.length && newTradeOrders.length === 0) {\n        this.updateTimestamp();\n      }\n    }\n  }, {\n    key: 'updateTimestamp',\n    value: function updateTimestamp() {\n      // forces re-render of trade component via key value\n      this.setState({ timestamp: Date.now() });\n    }\n  }, {\n    key: 'updateSelectedNav',\n    value: function updateSelectedNav(selectedTradeSide, id) {\n      this.props.updateSelectedTradeSide(selectedTradeSide, id);\n\n      var availableOrderType = selectedTradeSide === __WEBPACK_IMPORTED_MODULE_8__constants_trade_types__[\"a\" /* BUY */] ? __WEBPACK_IMPORTED_MODULE_9__order_book_constants_order_book_order_types__[\"a\" /* ASKS */] : __WEBPACK_IMPORTED_MODULE_9__order_book_constants_order_book_order_types__[\"b\" /* BIDS */];\n      var orderBookSide = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'selectedOutcome.orderBook.' + availableOrderType);\n      var bestOrderPrice = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(orderBookSide[0], 'price.value') || '';\n\n      var trade = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'selectedOutcome.trade');\n      if (trade && trade.updateTradeOrder) {\n        if (bestOrderPrice === '') {\n          trade.updateTradeOrder(null, bestOrderPrice, selectedTradeSide); // Clears order\n          trade.updateTradeOrder(null, null, selectedTradeSide); // Sets to default\n        } else {\n          trade.updateTradeOrder(null, bestOrderPrice, selectedTradeSide); // Updates to best\n        }\n      }\n    }\n  }, {\n    key: 'handleSharesInput',\n    value: function handleSharesInput(value) {\n      var trade = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'selectedOutcome.trade');\n      var valueDenominated = denominateShares(value, this.props.selectedShareDenomination, __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"c\" /* SHARE */]);\n\n      trade.updateTradeOrder(valueDenominated, null, trade.side);\n    }\n  }, {\n    key: 'validatePrice',\n    value: function validatePrice(value, trade) {\n      if (value != null) {\n        if (value >= parseFloat(this.state.minLimitPrice) && value <= parseFloat(this.state.maxLimitPrice) || value === '') {\n          this.setState({ isLimitPriceValueValid: true });\n          trade.updateTradeOrder(null, value, trade.side);\n        } else {\n          this.setState({ isLimitPriceValueValid: false });\n        }\n      }\n    }\n  }, {\n    key: 'validateShares',\n    value: function validateShares(value, trade) {\n      if (value != null) {\n        if (value >= 0 || value === '') {\n          this.handleSharesInput(value);\n          this.setState({ isSharesValueValid: true });\n        } else {\n          this.setState({ isSharesValueValid: false });\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var p = this.props;\n      var s = this.state;\n\n      var selectedID = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'selectedOutcome.id');\n      var name = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'selectedOutcome.name');\n      var trade = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'selectedOutcome.trade');\n      var selectedTradeSide = selectedID && p.selectedTradeSide[selectedID] || __WEBPACK_IMPORTED_MODULE_8__constants_trade_types__[\"a\" /* BUY */];\n      var tradeOrder = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'tradeSummary.tradeOrders').find(function (order) {\n        return order.data.outcomeID === selectedID;\n      });\n      var hasFunds = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'tradeSummary.hasUserEnoughFunds');\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: 'outcome-trade market-content-scrollable' },\n        p.marketType !== __WEBPACK_IMPORTED_MODULE_10__markets_constants_market_types__[\"b\" /* SCALAR */] ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'h3',\n          null,\n          'Create Order ',\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_6__common_components_em_dash__[\"a\" /* default */], null),\n          ' ',\n          name && name\n        ) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'h3',\n          null,\n          'Create Order'\n        ),\n        trade && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          {\n            key: s.timestamp,\n            className: 'outcome-trade-inputs'\n          },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'div',\n            { className: 'outcome-trade-inputs-sides' },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_5__common_components_component_nav__[\"a\" /* default */], {\n              fullWidth: true,\n              navItems: p.outcomeTradeNavItems,\n              selectedNav: selectedTradeSide,\n              updateSelectedNav: function updateSelectedNav(side) {\n                _this2.updateSelectedNav(side, selectedID);\n              }\n            })\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'div',\n            { className: 'outcome-trade-inputs-fields' },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_input__[\"a\" /* default */], {\n              className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()({ 'input-error': !s.isSharesValueValid }),\n              placeholder: s.shareInputPlaceholder,\n              value: s.sharesDenominated,\n              isIncrementable: true,\n              incrementAmount: s.incrementAmount,\n              updateValue: function updateValue(value) {\n                _this2.validateShares(value, trade);\n              },\n              onChange: function onChange(value) {\n                _this2.validateShares(value, trade);\n              }\n            }),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'span',\n              null,\n              '@'\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_input__[\"a\" /* default */], {\n              className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('trade-price-input', { 'input-error': !s.isLimitPriceValueValid }),\n              placeholder: 'Price',\n              value: trade.limitPrice,\n              isIncrementable: true,\n              incrementAmount: s.incrementAmount,\n              updateValue: function updateValue(value) {\n                _this2.validatePrice(value, trade);\n              },\n              onChange: function onChange(value) {\n                _this2.validatePrice(value, trade);\n              }\n            })\n          )\n        ),\n        !s.isSharesValueValid && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'outcome-trade-input-error-message' },\n          'Shares amount must be greater than 0.'\n        ),\n        !s.isLimitPriceValueValid && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'outcome-trade-input-error-message' },\n          'Limit price must be between ' + s.minLimitPrice + ' - ' + s.maxLimitPrice + '.'\n        ),\n        tradeOrder && s.isSharesValueValid && s.isLimitPriceValueValid && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__outcome_trade_summary__[\"a\" /* default */], {\n          trade: trade,\n          tradeOrder: tradeOrder\n        }),\n        tradeOrder && s.isSharesValueValid && s.isLimitPriceValueValid && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__outcome_trade_action__[\"a\" /* default */], {\n          hasFunds: hasFunds,\n          selectedID: selectedID,\n          submitTrade: p.submitTrade,\n          disabled: p.isTradeCommitLocked\n        }),\n        tradeOrder && s.isSharesValueValid && s.isLimitPriceValueValid && p.isTradeCommitLocked && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'trade-in-progress-notice' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            null,\n            'Trade Currently In-Progress'\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            null,\n            'You may trade once your previous trade has completed'\n          )\n        )\n      );\n    }\n  }]);\n\n  return OutcomeTrade;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nOutcomeTrade.propTypes = {\n  selectedShareDenomination: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  updateSelectedTradeSide: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].func,\n  marketType: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  minLimitPrice: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  maxLimitPrice: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].string,\n  submitTrade: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].func,\n  tradeSummary: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].object\n};\nvar _default = OutcomeTrade;\n/* harmony default export */ exports[\"a\"] = _default;\n\n\nfunction denominateShares(shares, fromDenomination, toDenomination) {\n  if (shares == null || fromDenomination === toDenomination) {\n    return shares;\n  }\n\n  // Determine numerical representation of from/to values for shares mutation calc\n  var options = [__WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"c\" /* SHARE */], __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"b\" /* MILLI_SHARE */], __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"a\" /* MICRO_SHARE */]];\n  var fromValue = 0;\n  options.some(function (value, i) {\n    if (value === fromDenomination) {\n      fromValue = i;\n      return true;\n    }\n\n    return false;\n  });\n\n  var toValue = 0;\n  options.some(function (value, i) {\n    if (value === toDenomination) {\n      toValue = i;\n      return true;\n    }\n\n    return false;\n  });\n\n  if (fromValue === toValue) {\n    return shares;\n  } else if (fromValue < toValue) {\n    return shares * Math.pow(1000, toValue - fromValue);\n  }\n\n  // fromValue > toValue\n  return shares / Math.pow(1000, Math.abs(toValue - fromValue));\n}\n\nfunction generateShareInputPlaceholder(denomination) {\n  var base = 'Quantity';\n\n  switch (denomination) {\n    case __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"a\" /* MICRO_SHARE */]:\n      return base + ' (\\u03BCShare)';\n    case __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"b\" /* MILLI_SHARE */]:\n      return base + ' (mShare)';\n    default:\n    case __WEBPACK_IMPORTED_MODULE_7__market_constants_share_denominations__[\"c\" /* SHARE */]:\n      return base;\n  }\n}\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(OutcomeTrade, 'OutcomeTrade', '/home/jack/src/augur/src/modules/outcomes/components/outcome-trade.jsx');\n\n  __REACT_HOT_LOADER__.register(denominateShares, 'denominateShares', '/home/jack/src/augur/src/modules/outcomes/components/outcome-trade.jsx');\n\n  __REACT_HOT_LOADER__.register(generateShareInputPlaceholder, 'generateShareInputPlaceholder', '/home/jack/src/augur/src/modules/outcomes/components/outcome-trade.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/outcomes/components/outcome-trade.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1259:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(113);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__markets_constants_market_types__ = __webpack_require__(28);\n\n\n\n\nvar OutcomeOptions = function OutcomeOptions(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'outcome-options' },\n    p.type === __WEBPACK_IMPORTED_MODULE_2__markets_constants_market_types__[\"b\" /* SCALAR */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'reportable-outcomes' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'label',\n        {\n          key: 'scalar-outcome',\n          className: 'outcome-option',\n          htmlFor: 'outcome-scalar-input'\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input', {\n          type: 'text',\n          className: 'outcome-option-input',\n          name: 'outcome-scalar-input',\n          value: p.reportedOutcomeID,\n          disabled: p.isReported || p.isIndeterminate,\n          onChange: p.onOutcomeChange\n        })\n      )\n    ),\n    p.type !== __WEBPACK_IMPORTED_MODULE_2__markets_constants_market_types__[\"b\" /* SCALAR */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'reportable-outcomes' },\n      (p.reportableOutcomes || []).map(function (outcome) {\n        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'label',\n          {\n            key: outcome.id,\n            className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('outcome-option', { disabled: p.isReported || p.isIndeterminate }),\n            htmlFor: 'outcome-option-radio'\n          },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input', {\n            type: 'radio',\n            className: 'outcome-option-radio',\n            name: 'outcome-option-radio',\n            value: outcome.id,\n            checked: p.reportedOutcomeID === outcome.id,\n            disabled: p.isReported || p.isIndeterminate,\n            onChange: p.onOutcomeChange\n          }),\n          outcome.name\n        );\n      })\n    )\n  );\n};\n\nOutcomeOptions.propTypes = {\n  className: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.string,\n  type: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.string,\n  reportableOutcomes: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.array,\n  reportedOutcomeID: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.string,\n  isReported: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.bool,\n  isIndeterminate: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.bool,\n  onOutcomeChange: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.func\n};\n\nvar _default = OutcomeOptions;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(OutcomeOptions, 'OutcomeOptions', '/home/jack/src/augur/src/modules/reports/components/outcome-options.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/reports/components/outcome-options.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9yZXBvcnRzL2NvbXBvbmVudHMvb3V0Y29tZS1vcHRpb25zLmpzeD9hMjI4Il0sIm5hbWVzIjpbIk91dGNvbWVPcHRpb25zIiwicCIsInR5cGUiLCJyZXBvcnRlZE91dGNvbWVJRCIsImlzUmVwb3J0ZWQiLCJpc0luZGV0ZXJtaW5hdGUiLCJvbk91dGNvbWVDaGFuZ2UiLCJyZXBvcnRhYmxlT3V0Y29tZXMiLCJtYXAiLCJvdXRjb21lIiwiaWQiLCJjbGFzc25hbWVzIiwiZGlzYWJsZWQiLCJuYW1lIiwicHJvcFR5cGVzIiwiY2xhc3NOYW1lIiwiUmVhY3QiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJhcnJheSIsImJvb2wiLCJmdW5jIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTs7QUFFQSxJQUFNQSxpQkFBaUIsU0FBakJBLGNBQWlCO0FBQUEsU0FDckI7QUFBQTtBQUFBLE1BQVMsV0FBVSxpQkFBbkI7QUFDR0MsTUFBRUMsSUFBRixLQUFXLCtFQUFYLElBQ0M7QUFBQTtBQUFBLFFBQUssV0FBVSxxQkFBZjtBQUNFO0FBQUE7QUFBQTtBQUNFLGVBQUksZ0JBRE47QUFFRSxxQkFBVSxnQkFGWjtBQUdFLG1CQUFRO0FBSFY7QUFLRTtBQUNFLGdCQUFLLE1BRFA7QUFFRSxxQkFBVSxzQkFGWjtBQUdFLGdCQUFLLHNCQUhQO0FBSUUsaUJBQU9ELEVBQUVFLGlCQUpYO0FBS0Usb0JBQVVGLEVBQUVHLFVBQUYsSUFBZ0JILEVBQUVJLGVBTDlCO0FBTUUsb0JBQVVKLEVBQUVLO0FBTmQ7QUFMRjtBQURGLEtBRko7QUFtQkdMLE1BQUVDLElBQUYsS0FBVywrRUFBWCxJQUNDO0FBQUE7QUFBQSxRQUFLLFdBQVUscUJBQWY7QUFDRyxPQUFDRCxFQUFFTSxrQkFBRixJQUF3QixFQUF6QixFQUE2QkMsR0FBN0IsQ0FBaUM7QUFBQSxlQUNoQztBQUFBO0FBQUE7QUFDRSxpQkFBS0MsUUFBUUMsRUFEZjtBQUVFLHVCQUFXLGtEQUFBQyxDQUFXLGdCQUFYLEVBQTZCLEVBQUVDLFVBQVVYLEVBQUVHLFVBQUYsSUFBZ0JILEVBQUVJLGVBQTlCLEVBQTdCLENBRmI7QUFHRSxxQkFBUTtBQUhWO0FBS0U7QUFDRSxrQkFBSyxPQURQO0FBRUUsdUJBQVUsc0JBRlo7QUFHRSxrQkFBSyxzQkFIUDtBQUlFLG1CQUFPSSxRQUFRQyxFQUpqQjtBQUtFLHFCQUFTVCxFQUFFRSxpQkFBRixLQUF3Qk0sUUFBUUMsRUFMM0M7QUFNRSxzQkFBVVQsRUFBRUcsVUFBRixJQUFnQkgsRUFBRUksZUFOOUI7QUFPRSxzQkFBVUosRUFBRUs7QUFQZCxZQUxGO0FBY0dHLGtCQUFRSTtBQWRYLFNBRGdDO0FBQUEsT0FBakM7QUFESDtBQXBCSixHQURxQjtBQUFBLENBQXZCOztBQTZDQWIsZUFBZWMsU0FBZixHQUEyQjtBQUN6QkMsYUFBVyw2Q0FBQUMsQ0FBTUMsU0FBTixDQUFnQkMsTUFERjtBQUV6QmhCLFFBQU0sNkNBQUFjLENBQU1DLFNBQU4sQ0FBZ0JDLE1BRkc7QUFHekJYLHNCQUFvQiw2Q0FBQVMsQ0FBTUMsU0FBTixDQUFnQkUsS0FIWDtBQUl6QmhCLHFCQUFtQiw2Q0FBQWEsQ0FBTUMsU0FBTixDQUFnQkMsTUFKVjtBQUt6QmQsY0FBWSw2Q0FBQVksQ0FBTUMsU0FBTixDQUFnQkcsSUFMSDtBQU16QmYsbUJBQWlCLDZDQUFBVyxDQUFNQyxTQUFOLENBQWdCRyxJQU5SO0FBT3pCZCxtQkFBaUIsNkNBQUFVLENBQU1DLFNBQU4sQ0FBZ0JJO0FBUFIsQ0FBM0I7O2VBVWVyQixjO0FBQWY7Ozs7Ozs7O2dDQXZETUEsYyIsImZpbGUiOiIxMjU5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgU0NBTEFSIH0gZnJvbSAnbW9kdWxlcy9tYXJrZXRzL2NvbnN0YW50cy9tYXJrZXQtdHlwZXMnO1xuXG5jb25zdCBPdXRjb21lT3B0aW9ucyA9IHAgPT4gKFxuICA8YXJ0aWNsZSBjbGFzc05hbWU9XCJvdXRjb21lLW9wdGlvbnNcIj5cbiAgICB7cC50eXBlID09PSBTQ0FMQVIgJiZcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVwb3J0YWJsZS1vdXRjb21lc1wiPlxuICAgICAgICA8bGFiZWxcbiAgICAgICAgICBrZXk9XCJzY2FsYXItb3V0Y29tZVwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwib3V0Y29tZS1vcHRpb25cIlxuICAgICAgICAgIGh0bWxGb3I9XCJvdXRjb21lLXNjYWxhci1pbnB1dFwiXG4gICAgICAgID5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIm91dGNvbWUtb3B0aW9uLWlucHV0XCJcbiAgICAgICAgICAgIG5hbWU9XCJvdXRjb21lLXNjYWxhci1pbnB1dFwiXG4gICAgICAgICAgICB2YWx1ZT17cC5yZXBvcnRlZE91dGNvbWVJRH1cbiAgICAgICAgICAgIGRpc2FibGVkPXtwLmlzUmVwb3J0ZWQgfHwgcC5pc0luZGV0ZXJtaW5hdGV9XG4gICAgICAgICAgICBvbkNoYW5nZT17cC5vbk91dGNvbWVDaGFuZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgIH1cbiAgICB7cC50eXBlICE9PSBTQ0FMQVIgJiZcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVwb3J0YWJsZS1vdXRjb21lc1wiPlxuICAgICAgICB7KHAucmVwb3J0YWJsZU91dGNvbWVzIHx8IFtdKS5tYXAob3V0Y29tZSA9PiAoXG4gICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICBrZXk9e291dGNvbWUuaWR9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ291dGNvbWUtb3B0aW9uJywgeyBkaXNhYmxlZDogcC5pc1JlcG9ydGVkIHx8IHAuaXNJbmRldGVybWluYXRlIH0pfVxuICAgICAgICAgICAgaHRtbEZvcj1cIm91dGNvbWUtb3B0aW9uLXJhZGlvXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwib3V0Y29tZS1vcHRpb24tcmFkaW9cIlxuICAgICAgICAgICAgICBuYW1lPVwib3V0Y29tZS1vcHRpb24tcmFkaW9cIlxuICAgICAgICAgICAgICB2YWx1ZT17b3V0Y29tZS5pZH1cbiAgICAgICAgICAgICAgY2hlY2tlZD17cC5yZXBvcnRlZE91dGNvbWVJRCA9PT0gb3V0Y29tZS5pZH1cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e3AuaXNSZXBvcnRlZCB8fCBwLmlzSW5kZXRlcm1pbmF0ZX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e3Aub25PdXRjb21lQ2hhbmdlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtvdXRjb21lLm5hbWV9XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgKSl9XG4gICAgICA8L2Rpdj5cbiAgICB9XG4gIDwvYXJ0aWNsZT5cbik7XG5cbk91dGNvbWVPcHRpb25zLnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICB0eXBlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICByZXBvcnRhYmxlT3V0Y29tZXM6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcbiAgcmVwb3J0ZWRPdXRjb21lSUQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gIGlzUmVwb3J0ZWQ6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICBpc0luZGV0ZXJtaW5hdGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICBvbk91dGNvbWVDaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG59O1xuXG5leHBvcnQgZGVmYXVsdCBPdXRjb21lT3B0aW9ucztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL3JlcG9ydHMvY29tcG9uZW50cy9vdXRjb21lLW9wdGlvbnMuanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1260:
/***/ function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n!function (t, r) {\n  \"object\" == ( false ? \"undefined\" : _typeof(exports)) && \"object\" == ( false ? \"undefined\" : _typeof(module)) ? module.exports = r(__webpack_require__(15), __webpack_require__(1252)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(15), __webpack_require__(1252)], __WEBPACK_AMD_DEFINE_FACTORY__ = (r), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : \"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) ? exports.ReactHighcharts = r(require(\"react\"), require(\"highcharts\")) : t.ReactHighcharts = r(t.React, t.Highcharts);\n}(this, function (t, r) {\n  return function (t) {\n    function r(o) {\n      if (e[o]) return e[o].exports;var n = e[o] = { exports: {}, id: o, loaded: !1 };return t[o].call(n.exports, n, n.exports, r), n.loaded = !0, n.exports;\n    }var e = {};return r.m = t, r.c = e, r.p = \"\", r(0);\n  }([function (t, r, e) {\n    t.exports = e(3);\n  }, function (r, e) {\n    r.exports = t;\n  }, function (t, r, e) {\n    (function (r) {\n      \"use strict\";\n      var o = Object.assign || function (t) {\n        for (var r = 1; r < arguments.length; r++) {\n          var e = arguments[r];for (var o in e) {\n            Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);\n          }\n        }return t;\n      },\n          n = e(1),\n          i = \"undefined\" == typeof r ? window : r;t.exports = function (r, e) {\n        var c = \"Highcharts\" + r,\n            s = n.createClass({ displayName: c, propTypes: { config: n.PropTypes.object.isRequired, isPureConfig: n.PropTypes.bool, neverReflow: n.PropTypes.bool, callback: n.PropTypes.func, domProps: n.PropTypes.object }, defaultProps: { callback: function callback() {}, domProps: {} }, renderChart: function renderChart(t) {\n            var n = this;if (!t) throw new Error(\"Config must be specified for the \" + c + \" component\");var s = t.chart;this.chart = new e[r](o({}, t, { chart: o({}, s, { renderTo: this.refs.chart }) }), this.props.callback), this.props.neverReflow || i.requestAnimationFrame && requestAnimationFrame(function () {\n              n.chart && n.chart.options && n.chart.reflow();\n            });\n          }, shouldComponentUpdate: function shouldComponentUpdate(t) {\n            return !!(t.neverReflow || t.isPureConfig && this.props.config === t.config) || (this.renderChart(t.config), !1);\n          }, getChart: function getChart() {\n            if (!this.chart) throw new Error(\"getChart() should not be called before the component is mounted\");return this.chart;\n          }, componentDidMount: function componentDidMount() {\n            this.renderChart(this.props.config);\n          }, componentWillUnmount: function componentWillUnmount() {\n            this.chart.destroy();\n          }, render: function render() {\n            return n.createElement(\"div\", o({ ref: \"chart\" }, this.props.domProps));\n          } });return s.Highcharts = e, s.withHighcharts = function (e) {\n          return t.exports(r, e);\n        }, s;\n      };\n    }).call(r, function () {\n      return this;\n    }());\n  }, function (t, r, e) {\n    \"use strict\";\n    t.exports = e(2)(\"Chart\", e(4));\n  }, function (t, e) {\n    t.exports = r;\n  }]);\n});\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n}();\n\n;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40)(module)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1281:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__market_data__ = __webpack_require__(1283);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__market_user_data__ = __webpack_require__(1291);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__order_book_components_order_book__ = __webpack_require__(1257);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__outcomes_components_outcome_trade__ = __webpack_require__(1258);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__constants_share_denominations__ = __webpack_require__(604);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__ = __webpack_require__(1250);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__outcomes_constants_trade_types__ = __webpack_require__(1251);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__ = __webpack_require__(474);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__order_book_constants_order_book_order_types__ = __webpack_require__(321);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__markets_constants_market_types__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_get_value__ = __webpack_require__(282);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar MarketActive = function (_Component) {\n  _inherits(MarketActive, _Component);\n\n  function MarketActive(props) {\n    _classCallCheck(this, MarketActive);\n\n    var _this = _possibleConstructorReturn(this, (MarketActive.__proto__ || Object.getPrototypeOf(MarketActive)).call(this, props));\n\n    _this.state = {\n      selectedOutcome: _this.props.market.outcomes[0],\n      selectedTradeSide: {}\n    };\n\n    _this.updateSelectedOutcome = _this.updateSelectedOutcome.bind(_this);\n    _this.updateSelectedTradeSide = _this.updateSelectedTradeSide.bind(_this);\n    _this.determineDefaultShareDenomination = _this.determineDefaultShareDenomination.bind(_this);\n    _this.updateTradeFromSelectedOrder = _this.updateTradeFromSelectedOrder.bind(_this);\n    return _this;\n  }\n\n  _createClass(MarketActive, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      var marketType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'market.type');\n\n      if (marketType === __WEBPACK_IMPORTED_MODULE_10__markets_constants_market_types__[\"b\" /* SCALAR */]) {\n        this.determineDefaultShareDenomination();\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var selectedOutcomeID = this.state.selectedOutcome.id;\n      var nextPropsOutcome = nextProps.market.outcomes.find(function (outcome) {\n        return outcome.id === selectedOutcomeID;\n      });\n\n      if (JSON.stringify(nextPropsOutcome) !== JSON.stringify(this.state.selectedOutcome)) {\n        this.setState({ selectedOutcome: nextPropsOutcome });\n      }\n    }\n  }, {\n    key: 'updateSelectedOutcome',\n    value: function updateSelectedOutcome(selectedOutcome) {\n      this.setState({ selectedOutcome: selectedOutcome });\n    }\n  }, {\n    key: 'updateSelectedTradeSide',\n    value: function updateSelectedTradeSide(selectedTradeSide, id) {\n      this.setState({\n        selectedTradeSide: _extends({}, this.state.selectedTradeSide, _defineProperty({}, id, selectedTradeSide))\n      });\n    }\n  }, {\n    key: 'updateTradeFromSelectedOrder',\n    value: function updateTradeFromSelectedOrder(outcomeID, orderIndex, side, orderValueType) {\n      var outcomes = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'market.outcomes');\n\n      if (outcomes) {\n        var outcome = outcomes.find(function (outcome) {\n          return outcome.id === outcomeID;\n        });\n        var orderBookSide = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(outcome, 'orderBook.' + (side === __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] ? __WEBPACK_IMPORTED_MODULE_9__order_book_constants_order_book_order_types__[\"b\" /* BIDS */] : __WEBPACK_IMPORTED_MODULE_9__order_book_constants_order_book_order_types__[\"a\" /* ASKS */]));\n        var order = orderBookSide && orderBookSide[orderIndex] || null;\n        var price = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(order, 'price.value') || '';\n        var trade = outcome.trade;\n        var tradeSide = side === __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] ? __WEBPACK_IMPORTED_MODULE_7__outcomes_constants_trade_types__[\"b\" /* SELL */] : __WEBPACK_IMPORTED_MODULE_7__outcomes_constants_trade_types__[\"a\" /* BUY */];\n\n        if (orderValueType === __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__[\"b\" /* PRICE */]) {\n          trade.updateTradeOrder(0, null, tradeSide); // Clear Shares\n          if (price === '') {\n            trade.updateTradeOrder(null, price, tradeSide);\n            trade.updateTradeOrder(null, null, tradeSide);\n          } else {\n            trade.updateTradeOrder(null, price, tradeSide);\n          }\n        } else {\n          var shares = trade.totalSharesUpToOrder(orderIndex, side);\n\n          trade.updateTradeOrder(shares, price, tradeSide);\n        }\n\n        this.updateSelectedTradeSide(tradeSide, outcomeID);\n      }\n    }\n\n    // NOTE -- only called if a market is of type SCALAR from `componentWillMount`\n\n  }, {\n    key: 'determineDefaultShareDenomination',\n    value: function determineDefaultShareDenomination() {\n      var marketID = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'market.id');\n      var shareDenomination = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'scalarShareDenomination.markets.' + marketID);\n\n      if (!shareDenomination) {\n        var maxValue = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(this.props, 'market.maxValue');\n\n        if (maxValue >= 10000000) {\n          this.props.scalarShareDenomination.updateSelectedShareDenomination(marketID, __WEBPACK_IMPORTED_MODULE_5__constants_share_denominations__[\"a\" /* MICRO_SHARE */]);\n        } else if (maxValue >= 10000) {\n          this.props.scalarShareDenomination.updateSelectedShareDenomination(marketID, __WEBPACK_IMPORTED_MODULE_5__constants_share_denominations__[\"b\" /* MILLI_SHARE */]);\n        } else {\n          this.props.scalarShareDenomination.updateSelectedShareDenomination(marketID, __WEBPACK_IMPORTED_MODULE_5__constants_share_denominations__[\"c\" /* SHARE */]);\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var p = this.props;\n      var s = this.state;\n\n      var marketID = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'market.id');\n      var tradeSummary = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'market.tradeSummary');\n      var _submitTrade = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'market.onSubmitPlaceTrade');\n      var marketType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'market.type');\n      var minValue = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'market.minValue');\n      var maxValue = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'market.maxValue');\n\n      var selectedShareDenomination = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'scalarShareDenomination.markets.' + marketID);\n      var shareDenominations = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'scalarShareDenomination.denominations');\n      var updateSelectedShareDenomination = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_get_value__[\"a\" /* default */])(p, 'scalarShareDenomination.updateSelectedShareDenomination');\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: 'market-active' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'market-group' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__market_data__[\"a\" /* default */], _extends({}, p, {\n            marketID: marketID,\n            marketType: marketType,\n            selectedOutcome: s.selectedOutcome,\n            updateSelectedOutcome: this.updateSelectedOutcome,\n            selectedShareDenomination: selectedShareDenomination,\n            shareDenominations: shareDenominations,\n            updateSelectedShareDenomination: updateSelectedShareDenomination,\n            tradeSummary: tradeSummary,\n            submitTrade: function submitTrade(id) {\n              _submitTrade(id);\n            },\n            selectedTradeSide: s.selectedTradeSide,\n            updateSelectedTradeSide: this.updateSelectedTradeSide,\n            updateTradeFromSelectedOrder: this.updateTradeFromSelectedOrder,\n            outcomeTradeNavItems: p.outcomeTradeNavItems,\n            minLimitPrice: minValue,\n            maxLimitPrice: maxValue\n          })),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__order_book_components_order_book__[\"a\" /* default */], {\n            marketType: marketType,\n            outcome: s.selectedOutcome,\n            selectedTradeSide: s.selectedTradeSide,\n            updateTradeFromSelectedOrder: this.updateTradeFromSelectedOrder,\n            selectedShareDenomination: selectedShareDenomination\n          })\n        ),\n        p.logged && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'market-group' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__market_user_data__[\"a\" /* default */], _extends({}, p, {\n            marketType: marketType,\n            navItems: p.marketUserDataNavItems,\n            selectedShareDenomination: selectedShareDenomination\n          })),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__outcomes_components_outcome_trade__[\"a\" /* default */], {\n            marketType: marketType,\n            selectedOutcome: s.selectedOutcome,\n            tradeSummary: tradeSummary,\n            submitTrade: function submitTrade(id) {\n              _submitTrade(id);\n            },\n            selectedTradeSide: s.selectedTradeSide,\n            selectedShareDenomination: selectedShareDenomination,\n            updateSelectedTradeSide: this.updateSelectedTradeSide,\n            outcomeTradeNavItems: p.outcomeTradeNavItems,\n            minLimitPrice: minValue,\n            maxLimitPrice: maxValue,\n            isTradeCommitLocked: p.isTradeCommitLocked\n          })\n        )\n      );\n    }\n  }]);\n\n  return MarketActive;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nvar _default = MarketActive;\n/* harmony default export */ exports[\"a\"] = _default;\n\n\nMarketActive.propTypes = {\n  market: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].shape({\n    outcomes: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].array\n  }),\n  scalarShareDenomination: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].shape({\n    updateSelectedShareDenomination: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].func\n  })\n};\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketActive, 'MarketActive', '/home/jack/src/augur/src/modules/market/components/market-active.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-active.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtYWN0aXZlLmpzeD8zZDBhIl0sIm5hbWVzIjpbIk1hcmtldEFjdGl2ZSIsInByb3BzIiwic3RhdGUiLCJzZWxlY3RlZE91dGNvbWUiLCJtYXJrZXQiLCJvdXRjb21lcyIsInNlbGVjdGVkVHJhZGVTaWRlIiwidXBkYXRlU2VsZWN0ZWRPdXRjb21lIiwiYmluZCIsInVwZGF0ZVNlbGVjdGVkVHJhZGVTaWRlIiwiZGV0ZXJtaW5lRGVmYXVsdFNoYXJlRGVub21pbmF0aW9uIiwidXBkYXRlVHJhZGVGcm9tU2VsZWN0ZWRPcmRlciIsIm1hcmtldFR5cGUiLCJnZXRWYWx1ZSIsIm5leHRQcm9wcyIsInNlbGVjdGVkT3V0Y29tZUlEIiwiaWQiLCJuZXh0UHJvcHNPdXRjb21lIiwiZmluZCIsIm91dGNvbWUiLCJKU09OIiwic3RyaW5naWZ5Iiwic2V0U3RhdGUiLCJvdXRjb21lSUQiLCJvcmRlckluZGV4Iiwic2lkZSIsIm9yZGVyVmFsdWVUeXBlIiwib3JkZXJCb29rU2lkZSIsIm9yZGVyIiwicHJpY2UiLCJ0cmFkZSIsInRyYWRlU2lkZSIsInVwZGF0ZVRyYWRlT3JkZXIiLCJzaGFyZXMiLCJ0b3RhbFNoYXJlc1VwVG9PcmRlciIsIm1hcmtldElEIiwic2hhcmVEZW5vbWluYXRpb24iLCJtYXhWYWx1ZSIsInNjYWxhclNoYXJlRGVub21pbmF0aW9uIiwidXBkYXRlU2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbiIsInAiLCJzIiwidHJhZGVTdW1tYXJ5Iiwic3VibWl0VHJhZGUiLCJtaW5WYWx1ZSIsInNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24iLCJzaGFyZURlbm9taW5hdGlvbnMiLCJvdXRjb21lVHJhZGVOYXZJdGVtcyIsImxvZ2dlZCIsIm1hcmtldFVzZXJEYXRhTmF2SXRlbXMiLCJpc1RyYWRlQ29tbWl0TG9ja2VkIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic2hhcGUiLCJhcnJheSIsImZ1bmMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0lBRXFCQSxZOzs7QUFDbkIsd0JBQVlDLEtBQVosRUFBbUI7QUFBQTs7QUFBQSw0SEFDWEEsS0FEVzs7QUFHakIsVUFBS0MsS0FBTCxHQUFhO0FBQ1hDLHVCQUFpQixNQUFLRixLQUFMLENBQVdHLE1BQVgsQ0FBa0JDLFFBQWxCLENBQTJCLENBQTNCLENBRE47QUFFWEMseUJBQW1CO0FBRlIsS0FBYjs7QUFLQSxVQUFLQyxxQkFBTCxHQUE2QixNQUFLQSxxQkFBTCxDQUEyQkMsSUFBM0IsT0FBN0I7QUFDQSxVQUFLQyx1QkFBTCxHQUErQixNQUFLQSx1QkFBTCxDQUE2QkQsSUFBN0IsT0FBL0I7QUFDQSxVQUFLRSxpQ0FBTCxHQUF5QyxNQUFLQSxpQ0FBTCxDQUF1Q0YsSUFBdkMsT0FBekM7QUFDQSxVQUFLRyw0QkFBTCxHQUFvQyxNQUFLQSw0QkFBTCxDQUFrQ0gsSUFBbEMsT0FBcEM7QUFYaUI7QUFZbEI7Ozs7eUNBRW9CO0FBQ25CLFVBQU1JLGFBQWEseUZBQUFDLENBQVMsS0FBS1osS0FBZCxFQUFxQixhQUFyQixDQUFuQjs7QUFFQSxVQUFJVyxlQUFlLGdGQUFuQixFQUEyQjtBQUN6QixhQUFLRixpQ0FBTDtBQUNEO0FBQ0Y7Ozs4Q0FFeUJJLFMsRUFBVztBQUNuQyxVQUFNQyxvQkFBb0IsS0FBS2IsS0FBTCxDQUFXQyxlQUFYLENBQTJCYSxFQUFyRDtBQUNBLFVBQU1DLG1CQUFtQkgsVUFBVVYsTUFBVixDQUFpQkMsUUFBakIsQ0FBMEJhLElBQTFCLENBQStCO0FBQUEsZUFBV0MsUUFBUUgsRUFBUixLQUFlRCxpQkFBMUI7QUFBQSxPQUEvQixDQUF6Qjs7QUFFQSxVQUFJSyxLQUFLQyxTQUFMLENBQWVKLGdCQUFmLE1BQXFDRyxLQUFLQyxTQUFMLENBQWUsS0FBS25CLEtBQUwsQ0FBV0MsZUFBMUIsQ0FBekMsRUFBcUY7QUFDbkYsYUFBS21CLFFBQUwsQ0FBYyxFQUFFbkIsaUJBQWlCYyxnQkFBbkIsRUFBZDtBQUNEO0FBQ0Y7OzswQ0FFcUJkLGUsRUFBaUI7QUFDckMsV0FBS21CLFFBQUwsQ0FBYyxFQUFFbkIsZ0NBQUYsRUFBZDtBQUNEOzs7NENBRXVCRyxpQixFQUFtQlUsRSxFQUFJO0FBQzdDLFdBQUtNLFFBQUwsQ0FBYztBQUNaaEIsd0NBQ0ssS0FBS0osS0FBTCxDQUFXSSxpQkFEaEIsc0JBRUdVLEVBRkgsRUFFUVYsaUJBRlI7QUFEWSxPQUFkO0FBTUQ7OztpREFFNEJpQixTLEVBQVdDLFUsRUFBWUMsSSxFQUFNQyxjLEVBQWdCO0FBQ3hFLFVBQU1yQixXQUFXLHlGQUFBUSxDQUFTLEtBQUtaLEtBQWQsRUFBcUIsaUJBQXJCLENBQWpCOztBQUVBLFVBQUlJLFFBQUosRUFBYztBQUNaLFlBQU1jLFVBQVVkLFNBQVNhLElBQVQsQ0FBYztBQUFBLGlCQUFXQyxRQUFRSCxFQUFSLEtBQWVPLFNBQTFCO0FBQUEsU0FBZCxDQUFoQjtBQUNBLFlBQU1JLGdCQUFnQix5RkFBQWQsQ0FBU00sT0FBVCxrQkFBK0JNLFNBQVMsa0VBQVQsR0FBZSwwRkFBZixHQUFzQiwwRkFBckQsRUFBdEI7QUFDQSxZQUFNRyxRQUFTRCxpQkFBaUJBLGNBQWNILFVBQWQsQ0FBbEIsSUFBZ0QsSUFBOUQ7QUFDQSxZQUFNSyxRQUFRLHlGQUFBaEIsQ0FBU2UsS0FBVCxFQUFnQixhQUFoQixLQUFrQyxFQUFoRDtBQUNBLFlBQU1FLFFBQVFYLFFBQVFXLEtBQXRCO0FBQ0EsWUFBTUMsWUFBWU4sU0FBUyxrRUFBVCxHQUFlLDZFQUFmLEdBQXNCLDRFQUF4Qzs7QUFFQSxZQUFJQyxtQkFBbUIsMkZBQXZCLEVBQThCO0FBQzVCSSxnQkFBTUUsZ0JBQU4sQ0FBdUIsQ0FBdkIsRUFBMEIsSUFBMUIsRUFBZ0NELFNBQWhDLEVBRDRCLENBQ2dCO0FBQzVDLGNBQUlGLFVBQVUsRUFBZCxFQUFrQjtBQUNoQkMsa0JBQU1FLGdCQUFOLENBQXVCLElBQXZCLEVBQTZCSCxLQUE3QixFQUFvQ0UsU0FBcEM7QUFDQUQsa0JBQU1FLGdCQUFOLENBQXVCLElBQXZCLEVBQTZCLElBQTdCLEVBQW1DRCxTQUFuQztBQUNELFdBSEQsTUFHTztBQUNMRCxrQkFBTUUsZ0JBQU4sQ0FBdUIsSUFBdkIsRUFBNkJILEtBQTdCLEVBQW9DRSxTQUFwQztBQUNEO0FBQ0YsU0FSRCxNQVFPO0FBQ0wsY0FBTUUsU0FBU0gsTUFBTUksb0JBQU4sQ0FBMkJWLFVBQTNCLEVBQXVDQyxJQUF2QyxDQUFmOztBQUVBSyxnQkFBTUUsZ0JBQU4sQ0FBdUJDLE1BQXZCLEVBQStCSixLQUEvQixFQUFzQ0UsU0FBdEM7QUFDRDs7QUFFRCxhQUFLdEIsdUJBQUwsQ0FBNkJzQixTQUE3QixFQUF3Q1IsU0FBeEM7QUFDRDtBQUNGOztBQUVEOzs7O3dEQUNvQztBQUNsQyxVQUFNWSxXQUFXLHlGQUFBdEIsQ0FBUyxLQUFLWixLQUFkLEVBQXFCLFdBQXJCLENBQWpCO0FBQ0EsVUFBTW1DLG9CQUFvQix5RkFBQXZCLENBQVMsS0FBS1osS0FBZCx1Q0FBd0RrQyxRQUF4RCxDQUExQjs7QUFFQSxVQUFJLENBQUNDLGlCQUFMLEVBQXdCO0FBQ3RCLFlBQU1DLFdBQVcseUZBQUF4QixDQUFTLEtBQUtaLEtBQWQsRUFBcUIsaUJBQXJCLENBQWpCOztBQUVBLFlBQUlvQyxZQUFZLFFBQWhCLEVBQTBCO0FBQ3hCLGVBQUtwQyxLQUFMLENBQVdxQyx1QkFBWCxDQUFtQ0MsK0JBQW5DLENBQW1FSixRQUFuRSxFQUE2RSxtRkFBN0U7QUFDRCxTQUZELE1BRU8sSUFBSUUsWUFBWSxLQUFoQixFQUF1QjtBQUM1QixlQUFLcEMsS0FBTCxDQUFXcUMsdUJBQVgsQ0FBbUNDLCtCQUFuQyxDQUFtRUosUUFBbkUsRUFBNkUsbUZBQTdFO0FBQ0QsU0FGTSxNQUVBO0FBQ0wsZUFBS2xDLEtBQUwsQ0FBV3FDLHVCQUFYLENBQW1DQywrQkFBbkMsQ0FBbUVKLFFBQW5FLEVBQTZFLDZFQUE3RTtBQUNEO0FBQ0Y7QUFDRjs7OzZCQUVRO0FBQ1AsVUFBTUssSUFBSSxLQUFLdkMsS0FBZjtBQUNBLFVBQU13QyxJQUFJLEtBQUt2QyxLQUFmOztBQUVBLFVBQU1pQyxXQUFXLHlGQUFBdEIsQ0FBUzJCLENBQVQsRUFBWSxXQUFaLENBQWpCO0FBQ0EsVUFBTUUsZUFBZSx5RkFBQTdCLENBQVMyQixDQUFULEVBQVkscUJBQVosQ0FBckI7QUFDQSxVQUFNRyxlQUFjLHlGQUFBOUIsQ0FBUzJCLENBQVQsRUFBWSwyQkFBWixDQUFwQjtBQUNBLFVBQU01QixhQUFhLHlGQUFBQyxDQUFTMkIsQ0FBVCxFQUFZLGFBQVosQ0FBbkI7QUFDQSxVQUFNSSxXQUFXLHlGQUFBL0IsQ0FBUzJCLENBQVQsRUFBWSxpQkFBWixDQUFqQjtBQUNBLFVBQU1ILFdBQVcseUZBQUF4QixDQUFTMkIsQ0FBVCxFQUFZLGlCQUFaLENBQWpCOztBQUVBLFVBQU1LLDRCQUE0Qix5RkFBQWhDLENBQVMyQixDQUFULHVDQUErQ0wsUUFBL0MsQ0FBbEM7QUFDQSxVQUFNVyxxQkFBcUIseUZBQUFqQyxDQUFTMkIsQ0FBVCxFQUFZLHVDQUFaLENBQTNCO0FBQ0EsVUFBTUQsa0NBQWtDLHlGQUFBMUIsQ0FBUzJCLENBQVQsRUFBWSx5REFBWixDQUF4Qzs7QUFFQSxhQUNFO0FBQUE7QUFBQSxVQUFTLFdBQVUsZUFBbkI7QUFDRTtBQUFBO0FBQUEsWUFBSyxXQUFVLGNBQWY7QUFDRSxzRUFBQyw2REFBRCxlQUNNQSxDQUROO0FBRUUsc0JBQVVMLFFBRlo7QUFHRSx3QkFBWXZCLFVBSGQ7QUFJRSw2QkFBaUI2QixFQUFFdEMsZUFKckI7QUFLRSxtQ0FBdUIsS0FBS0kscUJBTDlCO0FBTUUsdUNBQTJCc0MseUJBTjdCO0FBT0UsZ0NBQW9CQyxrQkFQdEI7QUFRRSw2Q0FBaUNQLCtCQVJuQztBQVNFLDBCQUFjRyxZQVRoQjtBQVVFLHlCQUFhLHFCQUFDMUIsRUFBRCxFQUFRO0FBQUUyQiwyQkFBWTNCLEVBQVo7QUFBa0IsYUFWM0M7QUFXRSwrQkFBbUJ5QixFQUFFbkMsaUJBWHZCO0FBWUUscUNBQXlCLEtBQUtHLHVCQVpoQztBQWFFLDBDQUE4QixLQUFLRSw0QkFickM7QUFjRSxrQ0FBc0I2QixFQUFFTyxvQkFkMUI7QUFlRSwyQkFBZUgsUUFmakI7QUFnQkUsMkJBQWVQO0FBaEJqQixhQURGO0FBbUJFLHNFQUFDLGtGQUFEO0FBQ0Usd0JBQVl6QixVQURkO0FBRUUscUJBQVM2QixFQUFFdEMsZUFGYjtBQUdFLCtCQUFtQnNDLEVBQUVuQyxpQkFIdkI7QUFJRSwwQ0FBOEIsS0FBS0ssNEJBSnJDO0FBS0UsdUNBQTJCa0M7QUFMN0I7QUFuQkYsU0FERjtBQTRCR0wsVUFBRVEsTUFBRixJQUNEO0FBQUE7QUFBQSxZQUFLLFdBQVUsY0FBZjtBQUNFLHNFQUFDLGtFQUFELGVBQ01SLENBRE47QUFFRSx3QkFBWTVCLFVBRmQ7QUFHRSxzQkFBVTRCLEVBQUVTLHNCQUhkO0FBSUUsdUNBQTJCSjtBQUo3QixhQURGO0FBT0Usc0VBQUMsbUZBQUQ7QUFDRSx3QkFBWWpDLFVBRGQ7QUFFRSw2QkFBaUI2QixFQUFFdEMsZUFGckI7QUFHRSwwQkFBY3VDLFlBSGhCO0FBSUUseUJBQWEscUJBQUMxQixFQUFELEVBQVE7QUFBRTJCLDJCQUFZM0IsRUFBWjtBQUFrQixhQUozQztBQUtFLCtCQUFtQnlCLEVBQUVuQyxpQkFMdkI7QUFNRSx1Q0FBMkJ1Qyx5QkFON0I7QUFPRSxxQ0FBeUIsS0FBS3BDLHVCQVBoQztBQVFFLGtDQUFzQitCLEVBQUVPLG9CQVIxQjtBQVNFLDJCQUFlSCxRQVRqQjtBQVVFLDJCQUFlUCxRQVZqQjtBQVdFLGlDQUFxQkcsRUFBRVU7QUFYekI7QUFQRjtBQTdCRixPQURGO0FBc0REOzs7O0VBakt1QyxnRDs7ZUFBckJsRCxZOzs7O0FBb0tyQkEsYUFBYW1ELFNBQWIsR0FBeUI7QUFDdkIvQyxVQUFRLGdEQUFBZ0QsQ0FBVUMsS0FBVixDQUFnQjtBQUN0QmhELGNBQVUsZ0RBQUErQyxDQUFVRTtBQURFLEdBQWhCLENBRGU7QUFJdkJoQiwyQkFBeUIsZ0RBQUFjLENBQVVDLEtBQVYsQ0FBZ0I7QUFDdkNkLHFDQUFpQyxnREFBQWEsQ0FBVUc7QUFESixHQUFoQjtBQUpGLENBQXpCOzs7Ozs7OztnQ0FwS3FCdkQsWSIsImZpbGUiOiIxMjgxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgTWFya2V0RGF0YSBmcm9tICdtb2R1bGVzL21hcmtldC9jb21wb25lbnRzL21hcmtldC1kYXRhJztcbmltcG9ydCBNYXJrZXRVc2VyRGF0YSBmcm9tICdtb2R1bGVzL21hcmtldC9jb21wb25lbnRzL21hcmtldC11c2VyLWRhdGEnO1xuaW1wb3J0IE9yZGVyQm9vayBmcm9tICdtb2R1bGVzL29yZGVyLWJvb2svY29tcG9uZW50cy9vcmRlci1ib29rJztcbmltcG9ydCBPdXRjb21lVHJhZGUgZnJvbSAnbW9kdWxlcy9vdXRjb21lcy9jb21wb25lbnRzL291dGNvbWUtdHJhZGUnO1xuXG5pbXBvcnQgeyBTSEFSRSwgTUlMTElfU0hBUkUsIE1JQ1JPX1NIQVJFIH0gZnJvbSAnbW9kdWxlcy9tYXJrZXQvY29uc3RhbnRzL3NoYXJlLWRlbm9taW5hdGlvbnMnO1xuaW1wb3J0IHsgUFJJQ0UgfSBmcm9tICdtb2R1bGVzL29yZGVyLWJvb2svY29uc3RhbnRzL29yZGVyLWJvb2stdmFsdWUtdHlwZXMnO1xuaW1wb3J0IHsgQlVZLCBTRUxMIH0gZnJvbSAnbW9kdWxlcy9vdXRjb21lcy9jb25zdGFudHMvdHJhZGUtdHlwZXMnO1xuaW1wb3J0IHsgQklEIH0gZnJvbSAnbW9kdWxlcy90cmFuc2FjdGlvbnMvY29uc3RhbnRzL3R5cGVzJztcbmltcG9ydCB7IEJJRFMsIEFTS1MgfSBmcm9tICdtb2R1bGVzL29yZGVyLWJvb2svY29uc3RhbnRzL29yZGVyLWJvb2stb3JkZXItdHlwZXMnO1xuaW1wb3J0IHsgU0NBTEFSIH0gZnJvbSAnbW9kdWxlcy9tYXJrZXRzL2NvbnN0YW50cy9tYXJrZXQtdHlwZXMnO1xuXG5pbXBvcnQgZ2V0VmFsdWUgZnJvbSAndXRpbHMvZ2V0LXZhbHVlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFya2V0QWN0aXZlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc2VsZWN0ZWRPdXRjb21lOiB0aGlzLnByb3BzLm1hcmtldC5vdXRjb21lc1swXSxcbiAgICAgIHNlbGVjdGVkVHJhZGVTaWRlOiB7fVxuICAgIH07XG5cbiAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkT3V0Y29tZSA9IHRoaXMudXBkYXRlU2VsZWN0ZWRPdXRjb21lLmJpbmQodGhpcyk7XG4gICAgdGhpcy51cGRhdGVTZWxlY3RlZFRyYWRlU2lkZSA9IHRoaXMudXBkYXRlU2VsZWN0ZWRUcmFkZVNpZGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmRldGVybWluZURlZmF1bHRTaGFyZURlbm9taW5hdGlvbiA9IHRoaXMuZGV0ZXJtaW5lRGVmYXVsdFNoYXJlRGVub21pbmF0aW9uLmJpbmQodGhpcyk7XG4gICAgdGhpcy51cGRhdGVUcmFkZUZyb21TZWxlY3RlZE9yZGVyID0gdGhpcy51cGRhdGVUcmFkZUZyb21TZWxlY3RlZE9yZGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgY29uc3QgbWFya2V0VHlwZSA9IGdldFZhbHVlKHRoaXMucHJvcHMsICdtYXJrZXQudHlwZScpO1xuXG4gICAgaWYgKG1hcmtldFR5cGUgPT09IFNDQUxBUikge1xuICAgICAgdGhpcy5kZXRlcm1pbmVEZWZhdWx0U2hhcmVEZW5vbWluYXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGNvbnN0IHNlbGVjdGVkT3V0Y29tZUlEID0gdGhpcy5zdGF0ZS5zZWxlY3RlZE91dGNvbWUuaWQ7XG4gICAgY29uc3QgbmV4dFByb3BzT3V0Y29tZSA9IG5leHRQcm9wcy5tYXJrZXQub3V0Y29tZXMuZmluZChvdXRjb21lID0+IG91dGNvbWUuaWQgPT09IHNlbGVjdGVkT3V0Y29tZUlEKTtcblxuICAgIGlmIChKU09OLnN0cmluZ2lmeShuZXh0UHJvcHNPdXRjb21lKSAhPT0gSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZS5zZWxlY3RlZE91dGNvbWUpKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRPdXRjb21lOiBuZXh0UHJvcHNPdXRjb21lIH0pO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZVNlbGVjdGVkT3V0Y29tZShzZWxlY3RlZE91dGNvbWUpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRPdXRjb21lIH0pO1xuICB9XG5cbiAgdXBkYXRlU2VsZWN0ZWRUcmFkZVNpZGUoc2VsZWN0ZWRUcmFkZVNpZGUsIGlkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzZWxlY3RlZFRyYWRlU2lkZToge1xuICAgICAgICAuLi50aGlzLnN0YXRlLnNlbGVjdGVkVHJhZGVTaWRlLFxuICAgICAgICBbaWRdOiBzZWxlY3RlZFRyYWRlU2lkZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlVHJhZGVGcm9tU2VsZWN0ZWRPcmRlcihvdXRjb21lSUQsIG9yZGVySW5kZXgsIHNpZGUsIG9yZGVyVmFsdWVUeXBlKSB7XG4gICAgY29uc3Qgb3V0Y29tZXMgPSBnZXRWYWx1ZSh0aGlzLnByb3BzLCAnbWFya2V0Lm91dGNvbWVzJyk7XG5cbiAgICBpZiAob3V0Y29tZXMpIHtcbiAgICAgIGNvbnN0IG91dGNvbWUgPSBvdXRjb21lcy5maW5kKG91dGNvbWUgPT4gb3V0Y29tZS5pZCA9PT0gb3V0Y29tZUlEKTtcbiAgICAgIGNvbnN0IG9yZGVyQm9va1NpZGUgPSBnZXRWYWx1ZShvdXRjb21lLCBgb3JkZXJCb29rLiR7c2lkZSA9PT0gQklEID8gQklEUyA6IEFTS1N9YCk7XG4gICAgICBjb25zdCBvcmRlciA9IChvcmRlckJvb2tTaWRlICYmIG9yZGVyQm9va1NpZGVbb3JkZXJJbmRleF0pIHx8IG51bGw7XG4gICAgICBjb25zdCBwcmljZSA9IGdldFZhbHVlKG9yZGVyLCAncHJpY2UudmFsdWUnKSB8fCAnJztcbiAgICAgIGNvbnN0IHRyYWRlID0gb3V0Y29tZS50cmFkZTtcbiAgICAgIGNvbnN0IHRyYWRlU2lkZSA9IHNpZGUgPT09IEJJRCA/IFNFTEwgOiBCVVk7XG5cbiAgICAgIGlmIChvcmRlclZhbHVlVHlwZSA9PT0gUFJJQ0UpIHtcbiAgICAgICAgdHJhZGUudXBkYXRlVHJhZGVPcmRlcigwLCBudWxsLCB0cmFkZVNpZGUpOyAvLyBDbGVhciBTaGFyZXNcbiAgICAgICAgaWYgKHByaWNlID09PSAnJykge1xuICAgICAgICAgIHRyYWRlLnVwZGF0ZVRyYWRlT3JkZXIobnVsbCwgcHJpY2UsIHRyYWRlU2lkZSk7XG4gICAgICAgICAgdHJhZGUudXBkYXRlVHJhZGVPcmRlcihudWxsLCBudWxsLCB0cmFkZVNpZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyYWRlLnVwZGF0ZVRyYWRlT3JkZXIobnVsbCwgcHJpY2UsIHRyYWRlU2lkZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNoYXJlcyA9IHRyYWRlLnRvdGFsU2hhcmVzVXBUb09yZGVyKG9yZGVySW5kZXgsIHNpZGUpO1xuXG4gICAgICAgIHRyYWRlLnVwZGF0ZVRyYWRlT3JkZXIoc2hhcmVzLCBwcmljZSwgdHJhZGVTaWRlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZFRyYWRlU2lkZSh0cmFkZVNpZGUsIG91dGNvbWVJRCk7XG4gICAgfVxuICB9XG5cbiAgLy8gTk9URSAtLSBvbmx5IGNhbGxlZCBpZiBhIG1hcmtldCBpcyBvZiB0eXBlIFNDQUxBUiBmcm9tIGBjb21wb25lbnRXaWxsTW91bnRgXG4gIGRldGVybWluZURlZmF1bHRTaGFyZURlbm9taW5hdGlvbigpIHtcbiAgICBjb25zdCBtYXJrZXRJRCA9IGdldFZhbHVlKHRoaXMucHJvcHMsICdtYXJrZXQuaWQnKTtcbiAgICBjb25zdCBzaGFyZURlbm9taW5hdGlvbiA9IGdldFZhbHVlKHRoaXMucHJvcHMsIGBzY2FsYXJTaGFyZURlbm9taW5hdGlvbi5tYXJrZXRzLiR7bWFya2V0SUR9YCk7XG5cbiAgICBpZiAoIXNoYXJlRGVub21pbmF0aW9uKSB7XG4gICAgICBjb25zdCBtYXhWYWx1ZSA9IGdldFZhbHVlKHRoaXMucHJvcHMsICdtYXJrZXQubWF4VmFsdWUnKTtcblxuICAgICAgaWYgKG1heFZhbHVlID49IDEwMDAwMDAwKSB7XG4gICAgICAgIHRoaXMucHJvcHMuc2NhbGFyU2hhcmVEZW5vbWluYXRpb24udXBkYXRlU2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbihtYXJrZXRJRCwgTUlDUk9fU0hBUkUpO1xuICAgICAgfSBlbHNlIGlmIChtYXhWYWx1ZSA+PSAxMDAwMCkge1xuICAgICAgICB0aGlzLnByb3BzLnNjYWxhclNoYXJlRGVub21pbmF0aW9uLnVwZGF0ZVNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24obWFya2V0SUQsIE1JTExJX1NIQVJFKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJvcHMuc2NhbGFyU2hhcmVEZW5vbWluYXRpb24udXBkYXRlU2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbihtYXJrZXRJRCwgU0hBUkUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBwID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IG1hcmtldElEID0gZ2V0VmFsdWUocCwgJ21hcmtldC5pZCcpO1xuICAgIGNvbnN0IHRyYWRlU3VtbWFyeSA9IGdldFZhbHVlKHAsICdtYXJrZXQudHJhZGVTdW1tYXJ5Jyk7XG4gICAgY29uc3Qgc3VibWl0VHJhZGUgPSBnZXRWYWx1ZShwLCAnbWFya2V0Lm9uU3VibWl0UGxhY2VUcmFkZScpO1xuICAgIGNvbnN0IG1hcmtldFR5cGUgPSBnZXRWYWx1ZShwLCAnbWFya2V0LnR5cGUnKTtcbiAgICBjb25zdCBtaW5WYWx1ZSA9IGdldFZhbHVlKHAsICdtYXJrZXQubWluVmFsdWUnKTtcbiAgICBjb25zdCBtYXhWYWx1ZSA9IGdldFZhbHVlKHAsICdtYXJrZXQubWF4VmFsdWUnKTtcblxuICAgIGNvbnN0IHNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24gPSBnZXRWYWx1ZShwLCBgc2NhbGFyU2hhcmVEZW5vbWluYXRpb24ubWFya2V0cy4ke21hcmtldElEfWApO1xuICAgIGNvbnN0IHNoYXJlRGVub21pbmF0aW9ucyA9IGdldFZhbHVlKHAsICdzY2FsYXJTaGFyZURlbm9taW5hdGlvbi5kZW5vbWluYXRpb25zJyk7XG4gICAgY29uc3QgdXBkYXRlU2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbiA9IGdldFZhbHVlKHAsICdzY2FsYXJTaGFyZURlbm9taW5hdGlvbi51cGRhdGVTZWxlY3RlZFNoYXJlRGVub21pbmF0aW9uJyk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGFydGljbGUgY2xhc3NOYW1lPVwibWFya2V0LWFjdGl2ZVwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1hcmtldC1ncm91cFwiPlxuICAgICAgICAgIDxNYXJrZXREYXRhXG4gICAgICAgICAgICB7Li4ucH1cbiAgICAgICAgICAgIG1hcmtldElEPXttYXJrZXRJRH1cbiAgICAgICAgICAgIG1hcmtldFR5cGU9e21hcmtldFR5cGV9XG4gICAgICAgICAgICBzZWxlY3RlZE91dGNvbWU9e3Muc2VsZWN0ZWRPdXRjb21lfVxuICAgICAgICAgICAgdXBkYXRlU2VsZWN0ZWRPdXRjb21lPXt0aGlzLnVwZGF0ZVNlbGVjdGVkT3V0Y29tZX1cbiAgICAgICAgICAgIHNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb249e3NlbGVjdGVkU2hhcmVEZW5vbWluYXRpb259XG4gICAgICAgICAgICBzaGFyZURlbm9taW5hdGlvbnM9e3NoYXJlRGVub21pbmF0aW9uc31cbiAgICAgICAgICAgIHVwZGF0ZVNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb249e3VwZGF0ZVNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb259XG4gICAgICAgICAgICB0cmFkZVN1bW1hcnk9e3RyYWRlU3VtbWFyeX1cbiAgICAgICAgICAgIHN1Ym1pdFRyYWRlPXsoaWQpID0+IHsgc3VibWl0VHJhZGUoaWQpOyB9fVxuICAgICAgICAgICAgc2VsZWN0ZWRUcmFkZVNpZGU9e3Muc2VsZWN0ZWRUcmFkZVNpZGV9XG4gICAgICAgICAgICB1cGRhdGVTZWxlY3RlZFRyYWRlU2lkZT17dGhpcy51cGRhdGVTZWxlY3RlZFRyYWRlU2lkZX1cbiAgICAgICAgICAgIHVwZGF0ZVRyYWRlRnJvbVNlbGVjdGVkT3JkZXI9e3RoaXMudXBkYXRlVHJhZGVGcm9tU2VsZWN0ZWRPcmRlcn1cbiAgICAgICAgICAgIG91dGNvbWVUcmFkZU5hdkl0ZW1zPXtwLm91dGNvbWVUcmFkZU5hdkl0ZW1zfVxuICAgICAgICAgICAgbWluTGltaXRQcmljZT17bWluVmFsdWV9XG4gICAgICAgICAgICBtYXhMaW1pdFByaWNlPXttYXhWYWx1ZX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxPcmRlckJvb2tcbiAgICAgICAgICAgIG1hcmtldFR5cGU9e21hcmtldFR5cGV9XG4gICAgICAgICAgICBvdXRjb21lPXtzLnNlbGVjdGVkT3V0Y29tZX1cbiAgICAgICAgICAgIHNlbGVjdGVkVHJhZGVTaWRlPXtzLnNlbGVjdGVkVHJhZGVTaWRlfVxuICAgICAgICAgICAgdXBkYXRlVHJhZGVGcm9tU2VsZWN0ZWRPcmRlcj17dGhpcy51cGRhdGVUcmFkZUZyb21TZWxlY3RlZE9yZGVyfVxuICAgICAgICAgICAgc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbj17c2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbn1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAge3AubG9nZ2VkICYmXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFya2V0LWdyb3VwXCI+XG4gICAgICAgICAgPE1hcmtldFVzZXJEYXRhXG4gICAgICAgICAgICB7Li4ucH1cbiAgICAgICAgICAgIG1hcmtldFR5cGU9e21hcmtldFR5cGV9XG4gICAgICAgICAgICBuYXZJdGVtcz17cC5tYXJrZXRVc2VyRGF0YU5hdkl0ZW1zfVxuICAgICAgICAgICAgc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbj17c2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbn1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxPdXRjb21lVHJhZGVcbiAgICAgICAgICAgIG1hcmtldFR5cGU9e21hcmtldFR5cGV9XG4gICAgICAgICAgICBzZWxlY3RlZE91dGNvbWU9e3Muc2VsZWN0ZWRPdXRjb21lfVxuICAgICAgICAgICAgdHJhZGVTdW1tYXJ5PXt0cmFkZVN1bW1hcnl9XG4gICAgICAgICAgICBzdWJtaXRUcmFkZT17KGlkKSA9PiB7IHN1Ym1pdFRyYWRlKGlkKTsgfX1cbiAgICAgICAgICAgIHNlbGVjdGVkVHJhZGVTaWRlPXtzLnNlbGVjdGVkVHJhZGVTaWRlfVxuICAgICAgICAgICAgc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbj17c2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbn1cbiAgICAgICAgICAgIHVwZGF0ZVNlbGVjdGVkVHJhZGVTaWRlPXt0aGlzLnVwZGF0ZVNlbGVjdGVkVHJhZGVTaWRlfVxuICAgICAgICAgICAgb3V0Y29tZVRyYWRlTmF2SXRlbXM9e3Aub3V0Y29tZVRyYWRlTmF2SXRlbXN9XG4gICAgICAgICAgICBtaW5MaW1pdFByaWNlPXttaW5WYWx1ZX1cbiAgICAgICAgICAgIG1heExpbWl0UHJpY2U9e21heFZhbHVlfVxuICAgICAgICAgICAgaXNUcmFkZUNvbW1pdExvY2tlZD17cC5pc1RyYWRlQ29tbWl0TG9ja2VkfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB9XG4gICAgICA8L2FydGljbGU+XG4gICAgKTtcbiAgfVxufVxuXG5NYXJrZXRBY3RpdmUucHJvcFR5cGVzID0ge1xuICBtYXJrZXQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgb3V0Y29tZXM6IFByb3BUeXBlcy5hcnJheVxuICB9KSxcbiAgc2NhbGFyU2hhcmVEZW5vbWluYXRpb246IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgdXBkYXRlU2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbjogUHJvcFR5cGVzLmZ1bmNcbiAgfSlcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtYWN0aXZlLmpzeCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 1282:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_highcharts__ = __webpack_require__(1260);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_highcharts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_highcharts__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_null_state_message__ = __webpack_require__(605);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\nvar MarketChart = function (_Component) {\n  _inherits(MarketChart, _Component);\n\n  function MarketChart() {\n    _classCallCheck(this, MarketChart);\n\n    return _possibleConstructorReturn(this, (MarketChart.__proto__ || Object.getPrototypeOf(MarketChart)).apply(this, arguments));\n  }\n\n  _createClass(MarketChart, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps) {\n      if (nextProps.series.length === this.props.series.length) return false;\n\n      return true;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var p = this.props;\n\n      var config = {\n        title: {\n          text: ''\n        },\n        rangeSelector: { selected: 1 },\n        xAxis: {\n          type: 'datetime'\n        },\n        yAxis: {\n          title: {\n            text: 'price'\n          },\n          min: 0,\n          max: 1\n        },\n        legend: {\n          enabled: true\n        },\n        tooltip: {\n          pointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b><br/>',\n          valueDecimals: 2\n        },\n        series: p.series\n      };\n\n      var nullMessage = 'No Completed Trades';\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: 'price-history-chart market-content-scrollable' },\n        !p.series || !p.series.length ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_null_state_message__[\"a\" /* default */], { message: nullMessage }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1_react_highcharts___default.a, { config: config })\n      );\n    }\n  }]);\n\n  return MarketChart;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nMarketChart.propTypes = {\n  series: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].array\n};\nvar _default = MarketChart;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketChart, 'MarketChart', '/home/jack/src/augur/src/modules/market/components/market-chart.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-chart.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtY2hhcnQuanN4P2E0MWQiXSwibmFtZXMiOlsiTWFya2V0Q2hhcnQiLCJuZXh0UHJvcHMiLCJzZXJpZXMiLCJsZW5ndGgiLCJwcm9wcyIsInAiLCJjb25maWciLCJ0aXRsZSIsInRleHQiLCJyYW5nZVNlbGVjdG9yIiwic2VsZWN0ZWQiLCJ4QXhpcyIsInR5cGUiLCJ5QXhpcyIsIm1pbiIsIm1heCIsImxlZ2VuZCIsImVuYWJsZWQiLCJ0b29sdGlwIiwicG9pbnRGb3JtYXQiLCJ2YWx1ZURlY2ltYWxzIiwibnVsbE1lc3NhZ2UiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhcnJheSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7O0FBRUE7O0lBRXFCQSxXOzs7Ozs7Ozs7OzswQ0FLR0MsUyxFQUFXO0FBQy9CLFVBQUlBLFVBQVVDLE1BQVYsQ0FBaUJDLE1BQWpCLEtBQTRCLEtBQUtDLEtBQUwsQ0FBV0YsTUFBWCxDQUFrQkMsTUFBbEQsRUFBMEQsT0FBTyxLQUFQOztBQUUxRCxhQUFPLElBQVA7QUFDRDs7OzZCQUVRO0FBQ1AsVUFBTUUsSUFBSSxLQUFLRCxLQUFmOztBQUVBLFVBQU1FLFNBQVM7QUFDYkMsZUFBTztBQUNMQyxnQkFBTTtBQURELFNBRE07QUFJYkMsdUJBQWUsRUFBRUMsVUFBVSxDQUFaLEVBSkY7QUFLYkMsZUFBTztBQUNMQyxnQkFBTTtBQURELFNBTE07QUFRYkMsZUFBTztBQUNMTixpQkFBTztBQUNMQyxrQkFBTTtBQURELFdBREY7QUFJTE0sZUFBSyxDQUpBO0FBS0xDLGVBQUs7QUFMQSxTQVJNO0FBZWJDLGdCQUFRO0FBQ05DLG1CQUFTO0FBREgsU0FmSztBQWtCYkMsaUJBQVM7QUFDUEMsdUJBQWEsZ0ZBRE47QUFFUEMseUJBQWU7QUFGUixTQWxCSTtBQXNCYmxCLGdCQUFRRyxFQUFFSDtBQXRCRyxPQUFmOztBQXlCQSxVQUFNbUIsY0FBYyxxQkFBcEI7O0FBRUEsYUFDRTtBQUFBO0FBQUEsVUFBUyxXQUFVLCtDQUFuQjtBQUNHLFNBQUNoQixFQUFFSCxNQUFILElBQWEsQ0FBQ0csRUFBRUgsTUFBRixDQUFTQyxNQUF2QixHQUNDLDREQUFDLHNGQUFELElBQWtCLFNBQVNrQixXQUEzQixHQURELEdBRUMsNERBQUMsd0RBQUQsSUFBaUIsUUFBUWYsTUFBekI7QUFISixPQURGO0FBUUQ7Ozs7RUFqRHNDLGdEOztBQUFwQk4sVyxDQUNac0IsUyxHQUFZO0FBQ2pCcEIsVUFBUSxnREFBQXFCLENBQVVDO0FBREQsQztlQURBeEIsVzs7Ozs7Ozs7O2dDQUFBQSxXIiwiZmlsZSI6IjEyODIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RIaWdoY2hhcnRzIGZyb20gJ3JlYWN0LWhpZ2hjaGFydHMnO1xuXG5pbXBvcnQgTnVsbFN0YXRlTWVzc2FnZSBmcm9tICdtb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL251bGwtc3RhdGUtbWVzc2FnZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hcmtldENoYXJ0IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBzZXJpZXM6IFByb3BUeXBlcy5hcnJheVxuICB9O1xuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLnNlcmllcy5sZW5ndGggPT09IHRoaXMucHJvcHMuc2VyaWVzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgcCA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICB0aXRsZToge1xuICAgICAgICB0ZXh0OiAnJ1xuICAgICAgfSxcbiAgICAgIHJhbmdlU2VsZWN0b3I6IHsgc2VsZWN0ZWQ6IDEgfSxcbiAgICAgIHhBeGlzOiB7XG4gICAgICAgIHR5cGU6ICdkYXRldGltZSdcbiAgICAgIH0sXG4gICAgICB5QXhpczoge1xuICAgICAgICB0aXRsZToge1xuICAgICAgICAgIHRleHQ6ICdwcmljZSdcbiAgICAgICAgfSxcbiAgICAgICAgbWluOiAwLFxuICAgICAgICBtYXg6IDFcbiAgICAgIH0sXG4gICAgICBsZWdlbmQ6IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgcG9pbnRGb3JtYXQ6ICc8c3BhbiBzdHlsZT1cImNvbG9yOntzZXJpZXMuY29sb3J9XCI+e3Nlcmllcy5uYW1lfTwvc3Bhbj46IDxiPntwb2ludC55fTwvYj48YnIvPicsXG4gICAgICAgIHZhbHVlRGVjaW1hbHM6IDJcbiAgICAgIH0sXG4gICAgICBzZXJpZXM6IHAuc2VyaWVzXG4gICAgfTtcblxuICAgIGNvbnN0IG51bGxNZXNzYWdlID0gJ05vIENvbXBsZXRlZCBUcmFkZXMnO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxhcnRpY2xlIGNsYXNzTmFtZT1cInByaWNlLWhpc3RvcnktY2hhcnQgbWFya2V0LWNvbnRlbnQtc2Nyb2xsYWJsZVwiPlxuICAgICAgICB7IXAuc2VyaWVzIHx8ICFwLnNlcmllcy5sZW5ndGggP1xuICAgICAgICAgIDxOdWxsU3RhdGVNZXNzYWdlIG1lc3NhZ2U9e251bGxNZXNzYWdlfSAvPiA6XG4gICAgICAgICAgPFJlYWN0SGlnaGNoYXJ0cyBjb25maWc9e2NvbmZpZ30gLz5cbiAgICAgICAgfVxuICAgICAgPC9hcnRpY2xlPlxuICAgICk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL21hcmtldC9jb21wb25lbnRzL21hcmtldC1jaGFydC5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1283:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__market_header__ = __webpack_require__(1284);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_component_nav__ = __webpack_require__(1236);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__outcomes_components_outcomes__ = __webpack_require__(1308);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__order_book_components_order_book__ = __webpack_require__(1257);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__market_chart__ = __webpack_require__(1282);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__market_details__ = __webpack_require__(1255);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__reports_components_report_form__ = __webpack_require__(1312);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__reports_components_snitch_form__ = __webpack_require__(1313);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__app_constants_views__ = __webpack_require__(55);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar MarketData = function (_Component) {\n  _inherits(MarketData, _Component);\n\n  function MarketData(props) {\n    _classCallCheck(this, MarketData);\n\n    var _this = _possibleConstructorReturn(this, (MarketData.__proto__ || Object.getPrototypeOf(MarketData)).call(this, props));\n\n    _this.state = {\n      marketDataNavItems: props.marketDataNavItems,\n      selectedNav: props.isPendingReport ? __WEBPACK_IMPORTED_MODULE_9__app_constants_views__[\"n\" /* MARKET_DATA_NAV_REPORT */] : __WEBPACK_IMPORTED_MODULE_9__app_constants_views__[\"o\" /* MARKET_DATA_NAV_OUTCOMES */]\n    };\n\n    _this.updateSelectedNav = _this.updateSelectedNav.bind(_this);\n    _this.setMarketDataNavItems = _this.setMarketDataNavItems.bind(_this);\n    return _this;\n  }\n\n  _createClass(MarketData, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.setMarketDataNavItems();\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.isReportTabVisible !== nextProps.isReportTabVisible) {\n        this.setMarketDataNavItems();\n      }\n    }\n  }, {\n    key: 'setMarketDataNavItems',\n    value: function setMarketDataNavItems() {\n      var _this2 = this;\n\n      if (!this.props.isReportTabVisible) {\n        var marketDataNavItems = Object.keys(this.props.marketDataNavItems).reduce(function (prev, nav) {\n          if (_this2.props.marketDataNavItems[nav].isReportTabVisible !== true) {\n            prev[nav] = _this2.props.marketDataNavItems[nav];\n          }\n          return prev;\n        }, {});\n\n        this.setState({ marketDataNavItems: marketDataNavItems });\n      }\n    }\n  }, {\n    key: 'updateSelectedNav',\n    value: function updateSelectedNav(selectedNav) {\n      this.setState({ selectedNav: selectedNav });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var p = this.props;\n      var s = this.state;\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: 'market-data' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__market_header__[\"a\" /* default */], _extends({}, p.market, {\n          selectedShareDenomination: p.selectedShareDenomination,\n          shareDenominations: p.shareDenominations,\n          updateSelectedShareDenomination: p.updateSelectedShareDenomination\n        })),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_component_nav__[\"a\" /* default */], {\n          navItems: s.marketDataNavItems,\n          selectedNav: s.selectedNav,\n          updateSelectedNav: this.updateSelectedNav\n        }),\n        s.selectedNav === __WEBPACK_IMPORTED_MODULE_9__app_constants_views__[\"o\" /* MARKET_DATA_NAV_OUTCOMES */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__outcomes_components_outcomes__[\"a\" /* default */], {\n          marketType: p.marketType,\n          outcomes: p.market.outcomes,\n          selectedOutcome: p.selectedOutcome,\n          updateSelectedOutcome: p.updateSelectedOutcome,\n          selectedShareDenomination: p.selectedShareDenomination,\n          tradeSummary: p.tradeSummary,\n          submitTrade: p.submitTrade,\n          selectedTradeSide: p.selectedTradeSide,\n          updateSelectedTradeSide: p.updateSelectedTradeSide,\n          outcomeTradeNavItems: p.outcomeTradeNavItems,\n          updateTradeFromSelectedOrder: p.updateTradeFromSelectedOrder,\n          minLimitPrice: p.minLimitPrice,\n          maxLimitPrice: p.maxLimitPrice,\n          isTradeCommitLocked: p.isTradeCommitLocked\n        }),\n        s.selectedNav === __WEBPACK_IMPORTED_MODULE_9__app_constants_views__[\"p\" /* MARKET_DATA_ORDERS */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__order_book_components_order_book__[\"a\" /* default */], {\n          marketType: p.marketType,\n          outcome: p.selectedOutcome,\n          selectedTradeSide: p.selectedTradeSide,\n          updateTradeFromSelectedOrder: p.updateTradeFromSelectedOrder,\n          selectedShareDenomination: p.selectedShareDenomination\n        }),\n        s.selectedNav === __WEBPACK_IMPORTED_MODULE_9__app_constants_views__[\"q\" /* MARKET_DATA_NAV_CHARTS */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_5__market_chart__[\"a\" /* default */], { series: p.market.priceTimeSeries }),\n        s.selectedNav === __WEBPACK_IMPORTED_MODULE_9__app_constants_views__[\"r\" /* MARKET_DATA_NAV_DETAILS */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_6__market_details__[\"a\" /* default */], _extends({}, p.market, {\n          selectedShareDenomination: p.selectedShareDenomination,\n          shareDenominations: p.shareDenominations\n        })),\n        s.selectedNav === __WEBPACK_IMPORTED_MODULE_9__app_constants_views__[\"n\" /* MARKET_DATA_NAV_REPORT */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_7__reports_components_report_form__[\"a\" /* default */], _extends({}, p.market, {\n          branch: p.branch,\n          isReported: p.market.isReported || p.market.isReportSubmitted,\n          onClickSubmit: p.market.report.onSubmitReport\n        })),\n        s.selectedNav === __WEBPACK_IMPORTED_MODULE_9__app_constants_views__[\"s\" /* MARKET_DATA_NAV_SNITCH */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_8__reports_components_snitch_form__[\"a\" /* default */], {\n          type: p.market.type,\n          reportableOutcomes: p.market.reportableOutcomes,\n          branch: p.branch,\n          onSubmitSlashRep: p.market.onSubmitSlashRep\n        })\n      );\n    }\n  }]);\n\n  return MarketData;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nMarketData.propTypes = {\n  marketDataNavItems: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].object,\n  isReportTabVisible: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].bool,\n  isPendingReport: __WEBPACK_IMPORTED_MODULE_0_react__[\"PropTypes\"].bool\n};\nvar _default = MarketData;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketData, 'MarketData', '/home/jack/src/augur/src/modules/market/components/market-data.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-data.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1284:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_components_dropdown__ = __webpack_require__(1245);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__market_properties__ = __webpack_require__(1233);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__ = __webpack_require__(28);\n\n\n\n\n\n\n\nvar MarketDataHeader = function MarketDataHeader(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'market-header' },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'market-header-info' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'h3',\n        null,\n        p.description\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__market_properties__[\"a\" /* default */], p)\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'market-header-actions' },\n      p.type === __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__[\"b\" /* SCALAR */] && p.selectedShareDenomination && !p.isPendingReport && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_dropdown__[\"a\" /* default */], {\n        'default': p.selectedShareDenomination,\n        options: p.shareDenominations,\n        onChange: function onChange(denomination) {\n          p.updateSelectedShareDenomination(p.id, denomination);\n        }\n      })\n    )\n  );\n};\n\nvar _default = MarketDataHeader;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketDataHeader, 'MarketDataHeader', '/home/jack/src/augur/src/modules/market/components/market-header.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-header.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtaGVhZGVyLmpzeD8xZGI4Il0sIm5hbWVzIjpbIk1hcmtldERhdGFIZWFkZXIiLCJwIiwiZGVzY3JpcHRpb24iLCJ0eXBlIiwic2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbiIsImlzUGVuZGluZ1JlcG9ydCIsInNoYXJlRGVub21pbmF0aW9ucyIsImRlbm9taW5hdGlvbiIsInVwZGF0ZVNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24iLCJpZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBLElBQU1BLG1CQUFtQixTQUFuQkEsZ0JBQW1CO0FBQUEsU0FDdkI7QUFBQTtBQUFBLE1BQVMsV0FBVSxlQUFuQjtBQUNFO0FBQUE7QUFBQSxRQUFLLFdBQVUsb0JBQWY7QUFDRTtBQUFBO0FBQUE7QUFBS0MsVUFBRUM7QUFBUCxPQURGO0FBRUUsa0VBQUMsbUVBQUQsRUFBc0JELENBQXRCO0FBRkYsS0FERjtBQUtFO0FBQUE7QUFBQSxRQUFLLFdBQVUsdUJBQWY7QUFDR0EsUUFBRUUsSUFBRixLQUFXLCtFQUFYLElBQXFCRixFQUFFRyx5QkFBdkIsSUFBb0QsQ0FBQ0gsRUFBRUksZUFBdkQsSUFDQyw0REFBQyw0RUFBRDtBQUNFLG1CQUFTSixFQUFFRyx5QkFEYjtBQUVFLGlCQUFTSCxFQUFFSyxrQkFGYjtBQUdFLGtCQUFVLGtCQUFDQyxZQUFELEVBQWtCO0FBQUVOLFlBQUVPLCtCQUFGLENBQWtDUCxFQUFFUSxFQUFwQyxFQUF3Q0YsWUFBeEM7QUFBd0Q7QUFIeEY7QUFGSjtBQUxGLEdBRHVCO0FBQUEsQ0FBekI7O2VBa0JlUCxnQjtBQUFmOzs7Ozs7OztnQ0FsQk1BLGdCIiwiZmlsZSI6IjEyODQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgRHJvcGRvd24gZnJvbSAnbW9kdWxlcy9jb21tb24vY29tcG9uZW50cy9kcm9wZG93bic7XG5pbXBvcnQgTWFya2V0UHJvcGVydGllcyBmcm9tICdtb2R1bGVzL21hcmtldC9jb21wb25lbnRzL21hcmtldC1wcm9wZXJ0aWVzJztcblxuaW1wb3J0IHsgU0NBTEFSIH0gZnJvbSAnbW9kdWxlcy9tYXJrZXRzL2NvbnN0YW50cy9tYXJrZXQtdHlwZXMnO1xuXG5jb25zdCBNYXJrZXREYXRhSGVhZGVyID0gcCA9PiAoXG4gIDxhcnRpY2xlIGNsYXNzTmFtZT1cIm1hcmtldC1oZWFkZXJcIj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1hcmtldC1oZWFkZXItaW5mb1wiPlxuICAgICAgPGgzPntwLmRlc2NyaXB0aW9ufTwvaDM+XG4gICAgICA8TWFya2V0UHJvcGVydGllcyB7Li4ucH0gLz5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1hcmtldC1oZWFkZXItYWN0aW9uc1wiPlxuICAgICAge3AudHlwZSA9PT0gU0NBTEFSICYmIHAuc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbiAmJiAhcC5pc1BlbmRpbmdSZXBvcnQgJiZcbiAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgZGVmYXVsdD17cC5zZWxlY3RlZFNoYXJlRGVub21pbmF0aW9ufVxuICAgICAgICAgIG9wdGlvbnM9e3Auc2hhcmVEZW5vbWluYXRpb25zfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZGVub21pbmF0aW9uKSA9PiB7IHAudXBkYXRlU2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbihwLmlkLCBkZW5vbWluYXRpb24pOyB9fVxuICAgICAgICAvPlxuICAgICAgfVxuICAgIDwvZGl2PlxuICA8L2FydGljbGU+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBNYXJrZXREYXRhSGVhZGVyO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LWhlYWRlci5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1285:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__market_open_orders_row__ = __webpack_require__(1286);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\nvar MarketOpenOrdersGroup = function MarketOpenOrdersGroup(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'market-open-orders-group' },\n    (p.userOpenOrders || []).map(function (order, i) {\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__market_open_orders_row__[\"a\" /* default */], _extends({\n        key: order.id,\n        isFirst: i === 0\n      }, order, {\n        name: p.name,\n        marketType: p.marketType,\n        lastPricePercent: p.lastPricePercent,\n        status: p.orderCancellation[order.id],\n        cancellationStatuses: p.orderCancellation.cancellationStatuses,\n        cancelOrder: p.orderCancellation.cancelOrder,\n        abortCancelOrderConfirmation: p.orderCancellation.abortCancelOrderConfirmation,\n        showCancelOrderConfirmation: p.orderCancellation.showCancelOrderConfirmation,\n        selectedShareDenomination: p.selectedShareDenomination\n      }));\n    })\n  );\n};\n\nvar _default = MarketOpenOrdersGroup;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketOpenOrdersGroup, 'MarketOpenOrdersGroup', '/home/jack/src/augur/src/modules/market/components/market-open-orders-group.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-open-orders-group.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtb3Blbi1vcmRlcnMtZ3JvdXAuanN4PzQwMzYiXSwibmFtZXMiOlsiTWFya2V0T3Blbk9yZGVyc0dyb3VwIiwicCIsInVzZXJPcGVuT3JkZXJzIiwibWFwIiwib3JkZXIiLCJpIiwiaWQiLCJuYW1lIiwibWFya2V0VHlwZSIsImxhc3RQcmljZVBlcmNlbnQiLCJvcmRlckNhbmNlbGxhdGlvbiIsImNhbmNlbGxhdGlvblN0YXR1c2VzIiwiY2FuY2VsT3JkZXIiLCJhYm9ydENhbmNlbE9yZGVyQ29uZmlybWF0aW9uIiwic2hvd0NhbmNlbE9yZGVyQ29uZmlybWF0aW9uIiwic2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFFQTs7QUFFQSxJQUFNQSx3QkFBd0IsU0FBeEJBLHFCQUF3QjtBQUFBLFNBQzVCO0FBQUE7QUFBQSxNQUFTLFdBQVUsMEJBQW5CO0FBQ0csS0FBQ0MsRUFBRUMsY0FBRixJQUFvQixFQUFyQixFQUF5QkMsR0FBekIsQ0FBNkIsVUFBQ0MsS0FBRCxFQUFRQyxDQUFSO0FBQUEsYUFDNUIsNERBQUMsd0VBQUQ7QUFDRSxhQUFLRCxNQUFNRSxFQURiO0FBRUUsaUJBQVNELE1BQU07QUFGakIsU0FHTUQsS0FITjtBQUlFLGNBQU1ILEVBQUVNLElBSlY7QUFLRSxvQkFBWU4sRUFBRU8sVUFMaEI7QUFNRSwwQkFBa0JQLEVBQUVRLGdCQU50QjtBQU9FLGdCQUFRUixFQUFFUyxpQkFBRixDQUFvQk4sTUFBTUUsRUFBMUIsQ0FQVjtBQVFFLDhCQUFzQkwsRUFBRVMsaUJBQUYsQ0FBb0JDLG9CQVI1QztBQVNFLHFCQUFhVixFQUFFUyxpQkFBRixDQUFvQkUsV0FUbkM7QUFVRSxzQ0FBOEJYLEVBQUVTLGlCQUFGLENBQW9CRyw0QkFWcEQ7QUFXRSxxQ0FBNkJaLEVBQUVTLGlCQUFGLENBQW9CSSwyQkFYbkQ7QUFZRSxtQ0FBMkJiLEVBQUVjO0FBWi9CLFNBRDRCO0FBQUEsS0FBN0I7QUFESCxHQUQ0QjtBQUFBLENBQTlCOztlQXFCZWYscUI7QUFBZjs7Ozs7Ozs7Z0NBckJNQSxxQiIsImZpbGUiOiIxMjg1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IE1hcmtldE9wZW5PcmRlcnNSb3cgZnJvbSAnbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtb3Blbi1vcmRlcnMtcm93JztcblxuY29uc3QgTWFya2V0T3Blbk9yZGVyc0dyb3VwID0gcCA9PiAoXG4gIDxhcnRpY2xlIGNsYXNzTmFtZT1cIm1hcmtldC1vcGVuLW9yZGVycy1ncm91cFwiPlxuICAgIHsocC51c2VyT3Blbk9yZGVycyB8fCBbXSkubWFwKChvcmRlciwgaSkgPT4gKFxuICAgICAgPE1hcmtldE9wZW5PcmRlcnNSb3dcbiAgICAgICAga2V5PXtvcmRlci5pZH1cbiAgICAgICAgaXNGaXJzdD17aSA9PT0gMH1cbiAgICAgICAgey4uLm9yZGVyfVxuICAgICAgICBuYW1lPXtwLm5hbWV9XG4gICAgICAgIG1hcmtldFR5cGU9e3AubWFya2V0VHlwZX1cbiAgICAgICAgbGFzdFByaWNlUGVyY2VudD17cC5sYXN0UHJpY2VQZXJjZW50fVxuICAgICAgICBzdGF0dXM9e3Aub3JkZXJDYW5jZWxsYXRpb25bb3JkZXIuaWRdfVxuICAgICAgICBjYW5jZWxsYXRpb25TdGF0dXNlcz17cC5vcmRlckNhbmNlbGxhdGlvbi5jYW5jZWxsYXRpb25TdGF0dXNlc31cbiAgICAgICAgY2FuY2VsT3JkZXI9e3Aub3JkZXJDYW5jZWxsYXRpb24uY2FuY2VsT3JkZXJ9XG4gICAgICAgIGFib3J0Q2FuY2VsT3JkZXJDb25maXJtYXRpb249e3Aub3JkZXJDYW5jZWxsYXRpb24uYWJvcnRDYW5jZWxPcmRlckNvbmZpcm1hdGlvbn1cbiAgICAgICAgc2hvd0NhbmNlbE9yZGVyQ29uZmlybWF0aW9uPXtwLm9yZGVyQ2FuY2VsbGF0aW9uLnNob3dDYW5jZWxPcmRlckNvbmZpcm1hdGlvbn1cbiAgICAgICAgc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbj17cC5zZWxlY3RlZFNoYXJlRGVub21pbmF0aW9ufVxuICAgICAgLz5cbiAgICApKX1cbiAgPC9hcnRpY2xlPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgTWFya2V0T3Blbk9yZGVyc0dyb3VwO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LW9wZW4tb3JkZXJzLWdyb3VwLmpzeCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 1286:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__ = __webpack_require__(602);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__market_trade_close_dialog__ = __webpack_require__(1256);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__constants_trade_close_type__ = __webpack_require__(1248);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_get_value__ = __webpack_require__(282);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_set_share_denomination__ = __webpack_require__(1231);\n\n\n\n\n\n\n\n\n\n\n\nvar MarketOpenOrdersRow = function MarketOpenOrdersRow(p) {\n  var unmatchedShares = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils_set_share_denomination__[\"a\" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'unmatchedShares.formatted'), p.selectedShareDenomination);\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'market-open-orders-row not-selectable ' + (p.isFirst ? 'isFirst' : '') },\n    p.isFirst ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'span',\n      null,\n      p.marketType === __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__[\"b\" /* SCALAR */] ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: p.lastPricePercent }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        null,\n        p.name\n      )\n    ) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('span', null),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'span',\n      null,\n      p.type\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: unmatchedShares }),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], p.avgPrice),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__market_trade_close_dialog__[\"a\" /* default */], {\n      closeType: __WEBPACK_IMPORTED_MODULE_4__constants_trade_close_type__[\"b\" /* ORDER */],\n      marketID: p.marketID,\n      orderID: p.id,\n      status: p.status,\n      orderType: p.type,\n      cancelOrder: p.cancelOrder\n    })\n  );\n};\n\nvar _default = MarketOpenOrdersRow;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketOpenOrdersRow, 'MarketOpenOrdersRow', '/home/jack/src/augur/src/modules/market/components/market-open-orders-row.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-open-orders-row.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtb3Blbi1vcmRlcnMtcm93LmpzeD85Mjg0Il0sIm5hbWVzIjpbIk1hcmtldE9wZW5PcmRlcnNSb3ciLCJwIiwidW5tYXRjaGVkU2hhcmVzIiwic2V0U2hhcmVEZW5vbWluYXRpb24iLCJnZXRWYWx1ZSIsInNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24iLCJpc0ZpcnN0IiwibWFya2V0VHlwZSIsImxhc3RQcmljZVBlcmNlbnQiLCJuYW1lIiwidHlwZSIsImF2Z1ByaWNlIiwibWFya2V0SUQiLCJpZCIsInN0YXR1cyIsImNhbmNlbE9yZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLElBQU1BLHNCQUFzQixTQUF0QkEsbUJBQXNCLENBQUNDLENBQUQsRUFBTztBQUNqQyxNQUFNQyxrQkFBa0IscUdBQUFDLENBQXFCLHdGQUFBQyxDQUFTSCxDQUFULEVBQVksMkJBQVosQ0FBckIsRUFBK0RBLEVBQUVJLHlCQUFqRSxDQUF4Qjs7QUFFQSxTQUNFO0FBQUE7QUFBQSxNQUFTLHVEQUFvREosRUFBRUssT0FBRixHQUFZLFNBQVosR0FBd0IsRUFBNUUsQ0FBVDtBQUNHTCxNQUFFSyxPQUFGLEdBQ0M7QUFBQTtBQUFBO0FBQ0dMLFFBQUVNLFVBQUYsS0FBaUIsK0VBQWpCLEdBQ0MsNERBQUMsc0ZBQUQsSUFBbUIsV0FBV04sRUFBRU8sZ0JBQWhDLEdBREQsR0FFQztBQUFBO0FBQUE7QUFBT1AsVUFBRVE7QUFBVDtBQUhKLEtBREQsR0FPQyx5RUFSSjtBQVVFO0FBQUE7QUFBQTtBQUFPUixRQUFFUztBQUFULEtBVkY7QUFXRSxnRUFBQyxzRkFBRCxJQUFtQixXQUFXUixlQUE5QixHQVhGO0FBWUUsZ0VBQUMsc0ZBQUQsRUFBdUJELEVBQUVVLFFBQXpCLENBWkY7QUFhRSxnRUFBQywyRUFBRDtBQUNFLGlCQUFXLDBFQURiO0FBRUUsZ0JBQVVWLEVBQUVXLFFBRmQ7QUFHRSxlQUFTWCxFQUFFWSxFQUhiO0FBSUUsY0FBUVosRUFBRWEsTUFKWjtBQUtFLGlCQUFXYixFQUFFUyxJQUxmO0FBTUUsbUJBQWFULEVBQUVjO0FBTmpCO0FBYkYsR0FERjtBQXdCRCxDQTNCRDs7ZUE2QmVmLG1CO0FBQWY7Ozs7Ozs7O2dDQTdCTUEsbUIiLCJmaWxlIjoiMTI4Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBWYWx1ZURlbm9taW5hdGlvbiBmcm9tICdtb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL3ZhbHVlLWRlbm9taW5hdGlvbic7XG5pbXBvcnQgTWFya2V0VHJhZGVDbG9zZURpYWxvZyBmcm9tICdtb2R1bGVzL21hcmtldC9jb21wb25lbnRzL21hcmtldC10cmFkZS1jbG9zZS1kaWFsb2cnO1xuXG5pbXBvcnQgeyBTQ0FMQVIgfSBmcm9tICdtb2R1bGVzL21hcmtldHMvY29uc3RhbnRzL21hcmtldC10eXBlcyc7XG5pbXBvcnQgeyBPUkRFUiB9IGZyb20gJ21vZHVsZXMvbWFya2V0L2NvbnN0YW50cy90cmFkZS1jbG9zZS10eXBlJztcblxuaW1wb3J0IGdldFZhbHVlIGZyb20gJ3V0aWxzL2dldC12YWx1ZSc7XG5pbXBvcnQgc2V0U2hhcmVEZW5vbWluYXRpb24gZnJvbSAndXRpbHMvc2V0LXNoYXJlLWRlbm9taW5hdGlvbic7XG5cbmNvbnN0IE1hcmtldE9wZW5PcmRlcnNSb3cgPSAocCkgPT4ge1xuICBjb25zdCB1bm1hdGNoZWRTaGFyZXMgPSBzZXRTaGFyZURlbm9taW5hdGlvbihnZXRWYWx1ZShwLCAndW5tYXRjaGVkU2hhcmVzLmZvcm1hdHRlZCcpLCBwLnNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24pO1xuXG4gIHJldHVybiAoXG4gICAgPGFydGljbGUgY2xhc3NOYW1lPXtgbWFya2V0LW9wZW4tb3JkZXJzLXJvdyBub3Qtc2VsZWN0YWJsZSAke3AuaXNGaXJzdCA/ICdpc0ZpcnN0JyA6ICcnfWB9ID5cbiAgICAgIHtwLmlzRmlyc3QgP1xuICAgICAgICA8c3Bhbj5cbiAgICAgICAgICB7cC5tYXJrZXRUeXBlID09PSBTQ0FMQVIgP1xuICAgICAgICAgICAgPFZhbHVlRGVub21pbmF0aW9uIGZvcm1hdHRlZD17cC5sYXN0UHJpY2VQZXJjZW50fSAvPiA6XG4gICAgICAgICAgICA8c3Bhbj57cC5uYW1lfTwvc3Bhbj5cbiAgICAgICAgICB9XG4gICAgICAgIDwvc3Bhbj4gOlxuICAgICAgICA8c3BhbiAvPlxuICAgICAgfVxuICAgICAgPHNwYW4+e3AudHlwZX08L3NwYW4+XG4gICAgICA8VmFsdWVEZW5vbWluYXRpb24gZm9ybWF0dGVkPXt1bm1hdGNoZWRTaGFyZXN9IC8+XG4gICAgICA8VmFsdWVEZW5vbWluYXRpb24gey4uLnAuYXZnUHJpY2V9IC8+XG4gICAgICA8TWFya2V0VHJhZGVDbG9zZURpYWxvZ1xuICAgICAgICBjbG9zZVR5cGU9e09SREVSfVxuICAgICAgICBtYXJrZXRJRD17cC5tYXJrZXRJRH1cbiAgICAgICAgb3JkZXJJRD17cC5pZH1cbiAgICAgICAgc3RhdHVzPXtwLnN0YXR1c31cbiAgICAgICAgb3JkZXJUeXBlPXtwLnR5cGV9XG4gICAgICAgIGNhbmNlbE9yZGVyPXtwLmNhbmNlbE9yZGVyfVxuICAgICAgLz5cbiAgICA8L2FydGljbGU+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNYXJrZXRPcGVuT3JkZXJzUm93O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LW9wZW4tb3JkZXJzLXJvdy5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1287:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__market_open_orders_group__ = __webpack_require__(1285);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_null_state_message__ = __webpack_require__(605);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_get_value__ = __webpack_require__(282);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\n\n\n\nvar MarketOpenOrders = function (_Component) {\n  _inherits(MarketOpenOrders, _Component);\n\n  function MarketOpenOrders(props) {\n    _classCallCheck(this, MarketOpenOrders);\n\n    var _this = _possibleConstructorReturn(this, (MarketOpenOrders.__proto__ || Object.getPrototypeOf(MarketOpenOrders)).call(this, props));\n\n    _this.state = {\n      hasOrders: false\n    };\n\n    _this.updateHasOrders = _this.updateHasOrders.bind(_this);\n    return _this;\n  }\n\n  _createClass(MarketOpenOrders, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.updateHasOrders(this.props);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      this.updateHasOrders(nextProps);\n    }\n  }, {\n    key: 'updateHasOrders',\n    value: function updateHasOrders(props) {\n      this.setState({ hasOrders: !!(props.outcomes || []).find(function (outcome) {\n          return outcome.userOpenOrders && outcome.userOpenOrders.length;\n        }) });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var p = this.props;\n      var s = this.state;\n\n      var nullMessage = 'No Current Open Orders';\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: 'market-open-orders' },\n        !s.hasOrders ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_null_state_message__[\"a\" /* default */], { message: nullMessage }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          null,\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'div',\n            { className: 'market-open-orders-header' },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'span',\n              null,\n              !p.marketType === __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__[\"b\" /* SCALAR */] ? 'Outcomes' : 'Outcome'\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'span',\n              null,\n              'Type'\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'span',\n              null,\n              'Shares'\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'span',\n              null,\n              'Price'\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'span',\n              null,\n              'Action'\n            )\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'div',\n            { className: 'market-content-scrollable' },\n            (p.outcomes || []).map(function (outcome, index) {\n              var lastPricePercent = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_get_value__[\"a\" /* default */])(outcome, 'lastPricePercent.rounded');\n\n              return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__market_open_orders_group__[\"a\" /* default */], {\n                key: outcome.name,\n                id: outcome.id,\n                name: outcome.name,\n                marketType: p.marketType,\n                lastPricePercent: lastPricePercent,\n                userOpenOrders: outcome.userOpenOrders,\n                orderCancellation: p.orderCancellation,\n                selectedShareDenomination: p.selectedShareDenomination\n              });\n            })\n          )\n        )\n      );\n    }\n  }]);\n\n  return MarketOpenOrders;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nvar _default = MarketOpenOrders;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketOpenOrders, 'MarketOpenOrders', '/home/jack/src/augur/src/modules/market/components/market-open-orders.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-open-orders.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtb3Blbi1vcmRlcnMuanN4PzE5ODMiXSwibmFtZXMiOlsiTWFya2V0T3Blbk9yZGVycyIsInByb3BzIiwic3RhdGUiLCJoYXNPcmRlcnMiLCJ1cGRhdGVIYXNPcmRlcnMiLCJiaW5kIiwibmV4dFByb3BzIiwic2V0U3RhdGUiLCJvdXRjb21lcyIsImZpbmQiLCJvdXRjb21lIiwidXNlck9wZW5PcmRlcnMiLCJsZW5ndGgiLCJwIiwicyIsIm51bGxNZXNzYWdlIiwibWFya2V0VHlwZSIsIm1hcCIsImluZGV4IiwibGFzdFByaWNlUGVyY2VudCIsImdldFZhbHVlIiwibmFtZSIsImlkIiwib3JkZXJDYW5jZWxsYXRpb24iLCJzZWxlY3RlZFNoYXJlRGVub21pbmF0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0lBRXFCQSxnQjs7O0FBQ25CLDRCQUFZQyxLQUFaLEVBQW1CO0FBQUE7O0FBQUEsb0lBQ1hBLEtBRFc7O0FBR2pCLFVBQUtDLEtBQUwsR0FBYTtBQUNYQyxpQkFBVztBQURBLEtBQWI7O0FBSUEsVUFBS0MsZUFBTCxHQUF1QixNQUFLQSxlQUFMLENBQXFCQyxJQUFyQixPQUF2QjtBQVBpQjtBQVFsQjs7Ozt5Q0FFb0I7QUFDbkIsV0FBS0QsZUFBTCxDQUFxQixLQUFLSCxLQUExQjtBQUNEOzs7OENBRXlCSyxTLEVBQVc7QUFDbkMsV0FBS0YsZUFBTCxDQUFxQkUsU0FBckI7QUFDRDs7O29DQUVlTCxLLEVBQU87QUFDckIsV0FBS00sUUFBTCxDQUFjLEVBQUVKLFdBQVcsQ0FBQyxDQUFDLENBQUNGLE1BQU1PLFFBQU4sSUFBa0IsRUFBbkIsRUFBdUJDLElBQXZCLENBQTRCO0FBQUEsaUJBQVdDLFFBQVFDLGNBQVIsSUFBMEJELFFBQVFDLGNBQVIsQ0FBdUJDLE1BQTVEO0FBQUEsU0FBNUIsQ0FBZixFQUFkO0FBQ0Q7Ozs2QkFFUTtBQUNQLFVBQU1DLElBQUksS0FBS1osS0FBZjtBQUNBLFVBQU1hLElBQUksS0FBS1osS0FBZjs7QUFFQSxVQUFNYSxjQUFjLHdCQUFwQjs7QUFFQSxhQUNFO0FBQUE7QUFBQSxVQUFTLFdBQVUsb0JBQW5CO0FBQ0csU0FBQ0QsRUFBRVgsU0FBSCxHQUNDLDREQUFDLHNGQUFELElBQWtCLFNBQVNZLFdBQTNCLEdBREQsR0FFQztBQUFBO0FBQUE7QUFDRTtBQUFBO0FBQUEsY0FBSyxXQUFVLDJCQUFmO0FBQ0U7QUFBQTtBQUFBO0FBQU8sZUFBQ0YsRUFBRUcsVUFBSCxLQUFrQiwrRUFBbEIsR0FBMkIsVUFBM0IsR0FBd0M7QUFBL0MsYUFERjtBQUVFO0FBQUE7QUFBQTtBQUFBO0FBQUEsYUFGRjtBQUdFO0FBQUE7QUFBQTtBQUFBO0FBQUEsYUFIRjtBQUlFO0FBQUE7QUFBQTtBQUFBO0FBQUEsYUFKRjtBQUtFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFMRixXQURGO0FBUUU7QUFBQTtBQUFBLGNBQUssV0FBVSwyQkFBZjtBQUNHLGFBQUNILEVBQUVMLFFBQUYsSUFBYyxFQUFmLEVBQW1CUyxHQUFuQixDQUF1QixVQUFDUCxPQUFELEVBQVVRLEtBQVYsRUFBb0I7QUFDMUMsa0JBQU1DLG1CQUFtQix3RkFBQUMsQ0FBU1YsT0FBVCxFQUFrQiwwQkFBbEIsQ0FBekI7O0FBRUEscUJBQ0UsNERBQUMsMEVBQUQ7QUFDRSxxQkFBS0EsUUFBUVcsSUFEZjtBQUVFLG9CQUFJWCxRQUFRWSxFQUZkO0FBR0Usc0JBQU1aLFFBQVFXLElBSGhCO0FBSUUsNEJBQVlSLEVBQUVHLFVBSmhCO0FBS0Usa0NBQWtCRyxnQkFMcEI7QUFNRSxnQ0FBZ0JULFFBQVFDLGNBTjFCO0FBT0UsbUNBQW1CRSxFQUFFVSxpQkFQdkI7QUFRRSwyQ0FBMkJWLEVBQUVXO0FBUi9CLGdCQURGO0FBWUQsYUFmQTtBQURIO0FBUkY7QUFISixPQURGO0FBa0NEOzs7O0VBL0QyQyxnRDs7ZUFBekJ4QixnQjs7Ozs7Ozs7O2dDQUFBQSxnQiIsImZpbGUiOiIxMjg3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IE1hcmtldE9wZW5PcmRlcnNHcm91cCBmcm9tICdtb2R1bGVzL21hcmtldC9jb21wb25lbnRzL21hcmtldC1vcGVuLW9yZGVycy1ncm91cCc7XG5pbXBvcnQgTnVsbFN0YXRlTWVzc2FnZSBmcm9tICdtb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL251bGwtc3RhdGUtbWVzc2FnZSc7XG5cbmltcG9ydCB7IFNDQUxBUiB9IGZyb20gJ21vZHVsZXMvbWFya2V0cy9jb25zdGFudHMvbWFya2V0LXR5cGVzJztcblxuaW1wb3J0IGdldFZhbHVlIGZyb20gJ3V0aWxzL2dldC12YWx1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hcmtldE9wZW5PcmRlcnMgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBoYXNPcmRlcnM6IGZhbHNlXG4gICAgfTtcblxuICAgIHRoaXMudXBkYXRlSGFzT3JkZXJzID0gdGhpcy51cGRhdGVIYXNPcmRlcnMuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLnVwZGF0ZUhhc09yZGVycyh0aGlzLnByb3BzKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgdGhpcy51cGRhdGVIYXNPcmRlcnMobmV4dFByb3BzKTtcbiAgfVxuXG4gIHVwZGF0ZUhhc09yZGVycyhwcm9wcykge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBoYXNPcmRlcnM6ICEhKHByb3BzLm91dGNvbWVzIHx8IFtdKS5maW5kKG91dGNvbWUgPT4gb3V0Y29tZS51c2VyT3Blbk9yZGVycyAmJiBvdXRjb21lLnVzZXJPcGVuT3JkZXJzLmxlbmd0aCkgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgcCA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgcyA9IHRoaXMuc3RhdGU7XG5cbiAgICBjb25zdCBudWxsTWVzc2FnZSA9ICdObyBDdXJyZW50IE9wZW4gT3JkZXJzJztcblxuICAgIHJldHVybiAoXG4gICAgICA8YXJ0aWNsZSBjbGFzc05hbWU9XCJtYXJrZXQtb3Blbi1vcmRlcnNcIj5cbiAgICAgICAgeyFzLmhhc09yZGVycyA/XG4gICAgICAgICAgPE51bGxTdGF0ZU1lc3NhZ2UgbWVzc2FnZT17bnVsbE1lc3NhZ2V9IC8+IDpcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYXJrZXQtb3Blbi1vcmRlcnMtaGVhZGVyXCI+XG4gICAgICAgICAgICAgIDxzcGFuPnshcC5tYXJrZXRUeXBlID09PSBTQ0FMQVIgPyAnT3V0Y29tZXMnIDogJ091dGNvbWUnfTwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4+VHlwZTwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4+U2hhcmVzPC9zcGFuPlxuICAgICAgICAgICAgICA8c3Bhbj5QcmljZTwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4+QWN0aW9uPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1hcmtldC1jb250ZW50LXNjcm9sbGFibGVcIiA+XG4gICAgICAgICAgICAgIHsocC5vdXRjb21lcyB8fCBbXSkubWFwKChvdXRjb21lLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RQcmljZVBlcmNlbnQgPSBnZXRWYWx1ZShvdXRjb21lLCAnbGFzdFByaWNlUGVyY2VudC5yb3VuZGVkJyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgPE1hcmtldE9wZW5PcmRlcnNHcm91cFxuICAgICAgICAgICAgICAgICAgICBrZXk9e291dGNvbWUubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgaWQ9e291dGNvbWUuaWR9XG4gICAgICAgICAgICAgICAgICAgIG5hbWU9e291dGNvbWUubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgbWFya2V0VHlwZT17cC5tYXJrZXRUeXBlfVxuICAgICAgICAgICAgICAgICAgICBsYXN0UHJpY2VQZXJjZW50PXtsYXN0UHJpY2VQZXJjZW50fVxuICAgICAgICAgICAgICAgICAgICB1c2VyT3Blbk9yZGVycz17b3V0Y29tZS51c2VyT3Blbk9yZGVyc31cbiAgICAgICAgICAgICAgICAgICAgb3JkZXJDYW5jZWxsYXRpb249e3Aub3JkZXJDYW5jZWxsYXRpb259XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb249e3Auc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbn1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgfVxuICAgICAgPC9hcnRpY2xlPlxuICAgICk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL21hcmtldC9jb21wb25lbnRzL21hcmtldC1vcGVuLW9yZGVycy5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1288:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__ = __webpack_require__(602);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__market_trade_close_dialog__ = __webpack_require__(1256);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__constants_trade_close_type__ = __webpack_require__(1248);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_get_value__ = __webpack_require__(282);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_set_share_denomination__ = __webpack_require__(1231);\n\n\n\n\n\n\n\n\n\n\n\nvar MarketPositionsRow = function MarketPositionsRow(p) {\n  var marketID = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.marketID');\n  var outcomeID = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.id');\n  var quantityOfShares = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils_set_share_denomination__[\"a\" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.position.qtyShares.formatted'), p.selectedShareDenomination);\n  var outcomeName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.name');\n  var lastPricePercent = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.lastPricePercent.rounded');\n  var purchasePrice = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.position.purchasePrice.formatted');\n  var lastPrice = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.lastPrice.formatted');\n  var realizedNet = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.position.realizedNet.formatted');\n  var unrealizedNet = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.position.unrealizedNet.formatted');\n  var totalNet = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.position.totalNet.formatted');\n\n  var isClosable = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.position.isClosable');\n  var isFullyClosable = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.position.isFullyClosable');\n  var closePosition = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'outcome.position.closePosition');\n\n  var status = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'closePositionStatus.' + marketID + '.' + outcomeID);\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'market-positions-row not-selectable' },\n    p.marketType === __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__[\"b\" /* SCALAR */] ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: lastPricePercent }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'span',\n      null,\n      outcomeName\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: quantityOfShares }),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: purchasePrice }),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: lastPrice }),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: realizedNet }),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: unrealizedNet }),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: totalNet }),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__market_trade_close_dialog__[\"a\" /* default */], {\n      closeType: __WEBPACK_IMPORTED_MODULE_4__constants_trade_close_type__[\"a\" /* POSITION */],\n      marketID: marketID,\n      outcomeID: outcomeID,\n      quantityOfShares: quantityOfShares,\n      closePosition: closePosition,\n      isClosable: isClosable,\n      isFullyClosable: isFullyClosable,\n      status: status,\n      isTradeCommitLocked: p.isTradeCommitLocked\n    })\n  );\n};\n\nvar _default = MarketPositionsRow;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketPositionsRow, 'MarketPositionsRow', '/home/jack/src/augur/src/modules/market/components/market-positions-row.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-positions-row.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtcG9zaXRpb25zLXJvdy5qc3g/NzM1MCJdLCJuYW1lcyI6WyJNYXJrZXRQb3NpdGlvbnNSb3ciLCJwIiwibWFya2V0SUQiLCJnZXRWYWx1ZSIsIm91dGNvbWVJRCIsInF1YW50aXR5T2ZTaGFyZXMiLCJzZXRTaGFyZURlbm9taW5hdGlvbiIsInNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24iLCJvdXRjb21lTmFtZSIsImxhc3RQcmljZVBlcmNlbnQiLCJwdXJjaGFzZVByaWNlIiwibGFzdFByaWNlIiwicmVhbGl6ZWROZXQiLCJ1bnJlYWxpemVkTmV0IiwidG90YWxOZXQiLCJpc0Nsb3NhYmxlIiwiaXNGdWxseUNsb3NhYmxlIiwiY2xvc2VQb3NpdGlvbiIsInN0YXR1cyIsIm1hcmtldFR5cGUiLCJpc1RyYWRlQ29tbWl0TG9ja2VkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLElBQU1BLHFCQUFxQixTQUFyQkEsa0JBQXFCLENBQUNDLENBQUQsRUFBTztBQUNoQyxNQUFNQyxXQUFXLHdGQUFBQyxDQUFTRixDQUFULEVBQVksa0JBQVosQ0FBakI7QUFDQSxNQUFNRyxZQUFZLHdGQUFBRCxDQUFTRixDQUFULEVBQVksWUFBWixDQUFsQjtBQUNBLE1BQU1JLG1CQUFtQixxR0FBQUMsQ0FBcUIsd0ZBQUFILENBQVNGLENBQVQsRUFBWSxzQ0FBWixDQUFyQixFQUEwRUEsRUFBRU0seUJBQTVFLENBQXpCO0FBQ0EsTUFBTUMsY0FBYyx3RkFBQUwsQ0FBU0YsQ0FBVCxFQUFZLGNBQVosQ0FBcEI7QUFDQSxNQUFNUSxtQkFBbUIsd0ZBQUFOLENBQVNGLENBQVQsRUFBWSxrQ0FBWixDQUF6QjtBQUNBLE1BQU1TLGdCQUFnQix3RkFBQVAsQ0FBU0YsQ0FBVCxFQUFZLDBDQUFaLENBQXRCO0FBQ0EsTUFBTVUsWUFBWSx3RkFBQVIsQ0FBU0YsQ0FBVCxFQUFZLDZCQUFaLENBQWxCO0FBQ0EsTUFBTVcsY0FBYyx3RkFBQVQsQ0FBU0YsQ0FBVCxFQUFZLHdDQUFaLENBQXBCO0FBQ0EsTUFBTVksZ0JBQWdCLHdGQUFBVixDQUFTRixDQUFULEVBQVksMENBQVosQ0FBdEI7QUFDQSxNQUFNYSxXQUFXLHdGQUFBWCxDQUFTRixDQUFULEVBQVkscUNBQVosQ0FBakI7O0FBRUEsTUFBTWMsYUFBYSx3RkFBQVosQ0FBU0YsQ0FBVCxFQUFZLDZCQUFaLENBQW5CO0FBQ0EsTUFBTWUsa0JBQWtCLHdGQUFBYixDQUFTRixDQUFULEVBQVksa0NBQVosQ0FBeEI7QUFDQSxNQUFNZ0IsZ0JBQWdCLHdGQUFBZCxDQUFTRixDQUFULEVBQVksZ0NBQVosQ0FBdEI7O0FBRUEsTUFBTWlCLFNBQVMsd0ZBQUFmLENBQVNGLENBQVQsMkJBQW1DQyxRQUFuQyxTQUErQ0UsU0FBL0MsQ0FBZjs7QUFFQSxTQUNFO0FBQUE7QUFBQSxNQUFTLFdBQVUscUNBQW5CO0FBQ0dILE1BQUVrQixVQUFGLEtBQWlCLCtFQUFqQixHQUNDLDREQUFDLHNGQUFELElBQW1CLFdBQVdWLGdCQUE5QixHQURELEdBRUM7QUFBQTtBQUFBO0FBQU9EO0FBQVAsS0FISjtBQUtFLGdFQUFDLHNGQUFELElBQW1CLFdBQVdILGdCQUE5QixHQUxGO0FBTUUsZ0VBQUMsc0ZBQUQsSUFBbUIsV0FBV0ssYUFBOUIsR0FORjtBQU9FLGdFQUFDLHNGQUFELElBQW1CLFdBQVdDLFNBQTlCLEdBUEY7QUFRRSxnRUFBQyxzRkFBRCxJQUFtQixXQUFXQyxXQUE5QixHQVJGO0FBU0UsZ0VBQUMsc0ZBQUQsSUFBbUIsV0FBV0MsYUFBOUIsR0FURjtBQVVFLGdFQUFDLHNGQUFELElBQW1CLFdBQVdDLFFBQTlCLEdBVkY7QUFXRSxnRUFBQywyRUFBRDtBQUNFLGlCQUFXLDZFQURiO0FBRUUsZ0JBQVVaLFFBRlo7QUFHRSxpQkFBV0UsU0FIYjtBQUlFLHdCQUFrQkMsZ0JBSnBCO0FBS0UscUJBQWVZLGFBTGpCO0FBTUUsa0JBQVlGLFVBTmQ7QUFPRSx1QkFBaUJDLGVBUG5CO0FBUUUsY0FBUUUsTUFSVjtBQVNFLDJCQUFxQmpCLEVBQUVtQjtBQVR6QjtBQVhGLEdBREY7QUF5QkQsQ0EzQ0Q7O2VBNkNlcEIsa0I7QUFBZjs7Ozs7Ozs7Z0NBN0NNQSxrQiIsImZpbGUiOiIxMjg4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IFZhbHVlRGVub21pbmF0aW9uIGZyb20gJ21vZHVsZXMvY29tbW9uL2NvbXBvbmVudHMvdmFsdWUtZGVub21pbmF0aW9uJztcbmltcG9ydCBNYXJrZXRUcmFkZUNsb3NlRGlhbG9nIGZyb20gJ21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LXRyYWRlLWNsb3NlLWRpYWxvZyc7XG5cbmltcG9ydCB7IFNDQUxBUiB9IGZyb20gJ21vZHVsZXMvbWFya2V0cy9jb25zdGFudHMvbWFya2V0LXR5cGVzJztcbmltcG9ydCB7IFBPU0lUSU9OIH0gZnJvbSAnbW9kdWxlcy9tYXJrZXQvY29uc3RhbnRzL3RyYWRlLWNsb3NlLXR5cGUnO1xuXG5pbXBvcnQgZ2V0VmFsdWUgZnJvbSAndXRpbHMvZ2V0LXZhbHVlJztcbmltcG9ydCBzZXRTaGFyZURlbm9taW5hdGlvbiBmcm9tICd1dGlscy9zZXQtc2hhcmUtZGVub21pbmF0aW9uJztcblxuY29uc3QgTWFya2V0UG9zaXRpb25zUm93ID0gKHApID0+IHtcbiAgY29uc3QgbWFya2V0SUQgPSBnZXRWYWx1ZShwLCAnb3V0Y29tZS5tYXJrZXRJRCcpO1xuICBjb25zdCBvdXRjb21lSUQgPSBnZXRWYWx1ZShwLCAnb3V0Y29tZS5pZCcpO1xuICBjb25zdCBxdWFudGl0eU9mU2hhcmVzID0gc2V0U2hhcmVEZW5vbWluYXRpb24oZ2V0VmFsdWUocCwgJ291dGNvbWUucG9zaXRpb24ucXR5U2hhcmVzLmZvcm1hdHRlZCcpLCBwLnNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24pO1xuICBjb25zdCBvdXRjb21lTmFtZSA9IGdldFZhbHVlKHAsICdvdXRjb21lLm5hbWUnKTtcbiAgY29uc3QgbGFzdFByaWNlUGVyY2VudCA9IGdldFZhbHVlKHAsICdvdXRjb21lLmxhc3RQcmljZVBlcmNlbnQucm91bmRlZCcpO1xuICBjb25zdCBwdXJjaGFzZVByaWNlID0gZ2V0VmFsdWUocCwgJ291dGNvbWUucG9zaXRpb24ucHVyY2hhc2VQcmljZS5mb3JtYXR0ZWQnKTtcbiAgY29uc3QgbGFzdFByaWNlID0gZ2V0VmFsdWUocCwgJ291dGNvbWUubGFzdFByaWNlLmZvcm1hdHRlZCcpO1xuICBjb25zdCByZWFsaXplZE5ldCA9IGdldFZhbHVlKHAsICdvdXRjb21lLnBvc2l0aW9uLnJlYWxpemVkTmV0LmZvcm1hdHRlZCcpO1xuICBjb25zdCB1bnJlYWxpemVkTmV0ID0gZ2V0VmFsdWUocCwgJ291dGNvbWUucG9zaXRpb24udW5yZWFsaXplZE5ldC5mb3JtYXR0ZWQnKTtcbiAgY29uc3QgdG90YWxOZXQgPSBnZXRWYWx1ZShwLCAnb3V0Y29tZS5wb3NpdGlvbi50b3RhbE5ldC5mb3JtYXR0ZWQnKTtcblxuICBjb25zdCBpc0Nsb3NhYmxlID0gZ2V0VmFsdWUocCwgJ291dGNvbWUucG9zaXRpb24uaXNDbG9zYWJsZScpO1xuICBjb25zdCBpc0Z1bGx5Q2xvc2FibGUgPSBnZXRWYWx1ZShwLCAnb3V0Y29tZS5wb3NpdGlvbi5pc0Z1bGx5Q2xvc2FibGUnKTtcbiAgY29uc3QgY2xvc2VQb3NpdGlvbiA9IGdldFZhbHVlKHAsICdvdXRjb21lLnBvc2l0aW9uLmNsb3NlUG9zaXRpb24nKTtcblxuICBjb25zdCBzdGF0dXMgPSBnZXRWYWx1ZShwLCBgY2xvc2VQb3NpdGlvblN0YXR1cy4ke21hcmtldElEfS4ke291dGNvbWVJRH1gKTtcblxuICByZXR1cm4gKFxuICAgIDxhcnRpY2xlIGNsYXNzTmFtZT1cIm1hcmtldC1wb3NpdGlvbnMtcm93IG5vdC1zZWxlY3RhYmxlXCIgPlxuICAgICAge3AubWFya2V0VHlwZSA9PT0gU0NBTEFSID9cbiAgICAgICAgPFZhbHVlRGVub21pbmF0aW9uIGZvcm1hdHRlZD17bGFzdFByaWNlUGVyY2VudH0gLz4gOlxuICAgICAgICA8c3Bhbj57b3V0Y29tZU5hbWV9PC9zcGFuPlxuICAgICAgfVxuICAgICAgPFZhbHVlRGVub21pbmF0aW9uIGZvcm1hdHRlZD17cXVhbnRpdHlPZlNoYXJlc30gLz5cbiAgICAgIDxWYWx1ZURlbm9taW5hdGlvbiBmb3JtYXR0ZWQ9e3B1cmNoYXNlUHJpY2V9IC8+XG4gICAgICA8VmFsdWVEZW5vbWluYXRpb24gZm9ybWF0dGVkPXtsYXN0UHJpY2V9IC8+XG4gICAgICA8VmFsdWVEZW5vbWluYXRpb24gZm9ybWF0dGVkPXtyZWFsaXplZE5ldH0gLz5cbiAgICAgIDxWYWx1ZURlbm9taW5hdGlvbiBmb3JtYXR0ZWQ9e3VucmVhbGl6ZWROZXR9IC8+XG4gICAgICA8VmFsdWVEZW5vbWluYXRpb24gZm9ybWF0dGVkPXt0b3RhbE5ldH0gLz5cbiAgICAgIDxNYXJrZXRUcmFkZUNsb3NlRGlhbG9nXG4gICAgICAgIGNsb3NlVHlwZT17UE9TSVRJT059XG4gICAgICAgIG1hcmtldElEPXttYXJrZXRJRH1cbiAgICAgICAgb3V0Y29tZUlEPXtvdXRjb21lSUR9XG4gICAgICAgIHF1YW50aXR5T2ZTaGFyZXM9e3F1YW50aXR5T2ZTaGFyZXN9XG4gICAgICAgIGNsb3NlUG9zaXRpb249e2Nsb3NlUG9zaXRpb259XG4gICAgICAgIGlzQ2xvc2FibGU9e2lzQ2xvc2FibGV9XG4gICAgICAgIGlzRnVsbHlDbG9zYWJsZT17aXNGdWxseUNsb3NhYmxlfVxuICAgICAgICBzdGF0dXM9e3N0YXR1c31cbiAgICAgICAgaXNUcmFkZUNvbW1pdExvY2tlZD17cC5pc1RyYWRlQ29tbWl0TG9ja2VkfVxuICAgICAgLz5cbiAgICA8L2FydGljbGU+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNYXJrZXRQb3NpdGlvbnNSb3c7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtcG9zaXRpb25zLXJvdy5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1289:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__market_positions_row__ = __webpack_require__(1288);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_null_state_message__ = __webpack_require__(605);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_get_value__ = __webpack_require__(282);\n\n\n\n\n\n\n\n\n\nvar MarketPositions = function MarketPositions(p) {\n  var outcomePositions = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_get_value__[\"a\" /* default */])(p, 'market.myPositionOutcomes');\n  var nullMessage = 'No Current Positions';\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'market-positions' },\n    !outcomePositions || !outcomePositions.length ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_null_state_message__[\"a\" /* default */], { message: nullMessage }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      null,\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        { className: 'market-positions-header' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          !p.marketType === __WEBPACK_IMPORTED_MODULE_3__markets_constants_market_types__[\"b\" /* SCALAR */] ? 'Outcomes' : 'Outcome'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Shares'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Avg Price'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Last Price'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Realized P/L'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Unrealized P/L'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Total P/L'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Action'\n        )\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        { className: 'market-content-scrollable' },\n        (outcomePositions || []).map(function (outcome) {\n          return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__market_positions_row__[\"a\" /* default */], {\n            key: outcome.id,\n            marketType: p.marketType,\n            outcome: outcome,\n            selectedShareDenomination: p.selectedShareDenomination,\n            closePositionStatus: p.closePositionStatus,\n            isTradeCommitLocked: p.isTradeCommitLocked\n          });\n        })\n      )\n    )\n  );\n};\n\nvar _default = MarketPositions;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketPositions, 'MarketPositions', '/home/jack/src/augur/src/modules/market/components/market-positions.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-positions.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtcG9zaXRpb25zLmpzeD85MTY5Il0sIm5hbWVzIjpbIk1hcmtldFBvc2l0aW9ucyIsInAiLCJvdXRjb21lUG9zaXRpb25zIiwiZ2V0VmFsdWUiLCJudWxsTWVzc2FnZSIsImxlbmd0aCIsIm1hcmtldFR5cGUiLCJtYXAiLCJvdXRjb21lIiwiaWQiLCJzZWxlY3RlZFNoYXJlRGVub21pbmF0aW9uIiwiY2xvc2VQb3NpdGlvblN0YXR1cyIsImlzVHJhZGVDb21taXRMb2NrZWQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsSUFBTUEsa0JBQWtCLFNBQWxCQSxlQUFrQixDQUFDQyxDQUFELEVBQU87QUFDN0IsTUFBTUMsbUJBQW1CLHdGQUFBQyxDQUFTRixDQUFULEVBQVksMkJBQVosQ0FBekI7QUFDQSxNQUFNRyxjQUFjLHNCQUFwQjs7QUFFQSxTQUNFO0FBQUE7QUFBQSxNQUFTLFdBQVUsa0JBQW5CO0FBQ0csS0FBQ0YsZ0JBQUQsSUFBcUIsQ0FBQ0EsaUJBQWlCRyxNQUF2QyxHQUNDLDREQUFDLHNGQUFELElBQWtCLFNBQVNELFdBQTNCLEdBREQsR0FFQztBQUFBO0FBQUE7QUFDRTtBQUFBO0FBQUEsVUFBSyxXQUFVLHlCQUFmO0FBQ0U7QUFBQTtBQUFBO0FBQU8sV0FBQ0gsRUFBRUssVUFBSCxLQUFrQiwrRUFBbEIsR0FBMkIsVUFBM0IsR0FBd0M7QUFBL0MsU0FERjtBQUVFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FGRjtBQUdFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FIRjtBQUlFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FKRjtBQUtFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FMRjtBQU1FO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FORjtBQU9FO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FQRjtBQVFFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFSRixPQURGO0FBV0U7QUFBQTtBQUFBLFVBQUssV0FBVSwyQkFBZjtBQUNHLFNBQUNKLG9CQUFvQixFQUFyQixFQUF5QkssR0FBekIsQ0FBNkI7QUFBQSxpQkFDNUIsNERBQUMsc0VBQUQ7QUFDRSxpQkFBS0MsUUFBUUMsRUFEZjtBQUVFLHdCQUFZUixFQUFFSyxVQUZoQjtBQUdFLHFCQUFTRSxPQUhYO0FBSUUsdUNBQTJCUCxFQUFFUyx5QkFKL0I7QUFLRSxpQ0FBcUJULEVBQUVVLG1CQUx6QjtBQU1FLGlDQUFxQlYsRUFBRVc7QUFOekIsWUFENEI7QUFBQSxTQUE3QjtBQURIO0FBWEY7QUFISixHQURGO0FBK0JELENBbkNEOztlQXFDZVosZTtBQUFmOzs7Ozs7OztnQ0FyQ01BLGUiLCJmaWxlIjoiMTI4OS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBNYXJrZXRQb3NpdGlvbnNSb3cgZnJvbSAnbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtcG9zaXRpb25zLXJvdyc7XG5pbXBvcnQgTnVsbFN0YXRlTWVzc2FnZSBmcm9tICdtb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL251bGwtc3RhdGUtbWVzc2FnZSc7XG5cbmltcG9ydCB7IFNDQUxBUiB9IGZyb20gJ21vZHVsZXMvbWFya2V0cy9jb25zdGFudHMvbWFya2V0LXR5cGVzJztcblxuaW1wb3J0IGdldFZhbHVlIGZyb20gJ3V0aWxzL2dldC12YWx1ZSc7XG5cbmNvbnN0IE1hcmtldFBvc2l0aW9ucyA9IChwKSA9PiB7XG4gIGNvbnN0IG91dGNvbWVQb3NpdGlvbnMgPSBnZXRWYWx1ZShwLCAnbWFya2V0Lm15UG9zaXRpb25PdXRjb21lcycpO1xuICBjb25zdCBudWxsTWVzc2FnZSA9ICdObyBDdXJyZW50IFBvc2l0aW9ucyc7XG5cbiAgcmV0dXJuIChcbiAgICA8YXJ0aWNsZSBjbGFzc05hbWU9XCJtYXJrZXQtcG9zaXRpb25zXCI+XG4gICAgICB7IW91dGNvbWVQb3NpdGlvbnMgfHwgIW91dGNvbWVQb3NpdGlvbnMubGVuZ3RoID9cbiAgICAgICAgPE51bGxTdGF0ZU1lc3NhZ2UgbWVzc2FnZT17bnVsbE1lc3NhZ2V9IC8+IDpcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1hcmtldC1wb3NpdGlvbnMtaGVhZGVyXCI+XG4gICAgICAgICAgICA8c3Bhbj57IXAubWFya2V0VHlwZSA9PT0gU0NBTEFSID8gJ091dGNvbWVzJyA6ICdPdXRjb21lJ308L3NwYW4+XG4gICAgICAgICAgICA8c3Bhbj5TaGFyZXM8L3NwYW4+XG4gICAgICAgICAgICA8c3Bhbj5BdmcgUHJpY2U8L3NwYW4+XG4gICAgICAgICAgICA8c3Bhbj5MYXN0IFByaWNlPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4+UmVhbGl6ZWQgUC9MPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4+VW5yZWFsaXplZCBQL0w8L3NwYW4+XG4gICAgICAgICAgICA8c3Bhbj5Ub3RhbCBQL0w8L3NwYW4+XG4gICAgICAgICAgICA8c3Bhbj5BY3Rpb248L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYXJrZXQtY29udGVudC1zY3JvbGxhYmxlXCIgPlxuICAgICAgICAgICAgeyhvdXRjb21lUG9zaXRpb25zIHx8IFtdKS5tYXAob3V0Y29tZSA9PlxuICAgICAgICAgICAgICA8TWFya2V0UG9zaXRpb25zUm93XG4gICAgICAgICAgICAgICAga2V5PXtvdXRjb21lLmlkfVxuICAgICAgICAgICAgICAgIG1hcmtldFR5cGU9e3AubWFya2V0VHlwZX1cbiAgICAgICAgICAgICAgICBvdXRjb21lPXtvdXRjb21lfVxuICAgICAgICAgICAgICAgIHNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb249e3Auc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbn1cbiAgICAgICAgICAgICAgICBjbG9zZVBvc2l0aW9uU3RhdHVzPXtwLmNsb3NlUG9zaXRpb25TdGF0dXN9XG4gICAgICAgICAgICAgICAgaXNUcmFkZUNvbW1pdExvY2tlZD17cC5pc1RyYWRlQ29tbWl0TG9ja2VkfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICB9XG4gICAgPC9hcnRpY2xlPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTWFya2V0UG9zaXRpb25zO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LXBvc2l0aW9ucy5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1290:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__market_basics__ = __webpack_require__(1237);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__market_details__ = __webpack_require__(1255);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\n\nvar MarketReported = function MarketReported(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'market-reported' },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'market-group' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: 'market-reported-details' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__market_basics__[\"a\" /* default */], p.market),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__market_details__[\"a\" /* default */], _extends({ key: 'market-info' }, p.market))\n      )\n    )\n  );\n};\n\nvar _default = MarketReported;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketReported, 'MarketReported', '/home/jack/src/augur/src/modules/market/components/market-reported.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-reported.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtcmVwb3J0ZWQuanN4PzczYjgiXSwibmFtZXMiOlsiTWFya2V0UmVwb3J0ZWQiLCJwIiwibWFya2V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFFQTtBQUNBOztBQUVBLElBQU1BLGlCQUFpQixTQUFqQkEsY0FBaUI7QUFBQSxTQUNyQjtBQUFBO0FBQUEsTUFBUyxXQUFVLGlCQUFuQjtBQUNFO0FBQUE7QUFBQSxRQUFLLFdBQVUsY0FBZjtBQUNFO0FBQUE7QUFBQSxVQUFTLFdBQVUseUJBQW5CO0FBQ0Usb0VBQUMsK0RBQUQsRUFBa0JDLEVBQUVDLE1BQXBCLENBREY7QUFFRSxvRUFBQyxnRUFBRCxhQUFlLEtBQUksYUFBbkIsSUFBcUNELEVBQUVDLE1BQXZDO0FBRkY7QUFERjtBQURGLEdBRHFCO0FBQUEsQ0FBdkI7O2VBV2VGLGM7QUFBZjs7Ozs7Ozs7Z0NBWE1BLGMiLCJmaWxlIjoiMTI5MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBNYXJrZXRCYXNpY3MgZnJvbSAnbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtYmFzaWNzJztcbmltcG9ydCBNYXJrZXREZXRhaWxzIGZyb20gJ21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LWRldGFpbHMnO1xuXG5jb25zdCBNYXJrZXRSZXBvcnRlZCA9IHAgPT4gKFxuICA8YXJ0aWNsZSBjbGFzc05hbWU9XCJtYXJrZXQtcmVwb3J0ZWRcIj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1hcmtldC1ncm91cFwiPlxuICAgICAgPGFydGljbGUgY2xhc3NOYW1lPVwibWFya2V0LXJlcG9ydGVkLWRldGFpbHNcIj5cbiAgICAgICAgPE1hcmtldEJhc2ljcyB7Li4ucC5tYXJrZXR9IC8+XG4gICAgICAgIDxNYXJrZXREZXRhaWxzIGtleT1cIm1hcmtldC1pbmZvXCIgey4uLnAubWFya2V0fSAvPlxuICAgICAgPC9hcnRpY2xlPlxuICAgIDwvZGl2PlxuICA8L2FydGljbGU+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBNYXJrZXRSZXBvcnRlZDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL21hcmtldC9jb21wb25lbnRzL21hcmtldC1yZXBvcnRlZC5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1291:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_components_component_nav__ = __webpack_require__(1236);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__market_positions__ = __webpack_require__(1289);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__market_open_orders__ = __webpack_require__(1287);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__app_constants_views__ = __webpack_require__(55);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_get_value__ = __webpack_require__(282);\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\n\n\n\n\nvar MarketUserData = function (_Component) {\n  _inherits(MarketUserData, _Component);\n\n  function MarketUserData(props) {\n    _classCallCheck(this, MarketUserData);\n\n    var _this = _possibleConstructorReturn(this, (MarketUserData.__proto__ || Object.getPrototypeOf(MarketUserData)).call(this, props));\n\n    _this.state = {\n      selectedNav: __WEBPACK_IMPORTED_MODULE_4__app_constants_views__[\"t\" /* MARKET_USER_DATA_NAV_POSITIONS */]\n    };\n\n    _this.updateSelectedNav = _this.updateSelectedNav.bind(_this);\n    return _this;\n  }\n\n  _createClass(MarketUserData, [{\n    key: 'updateSelectedNav',\n    value: function updateSelectedNav(selectedNav) {\n      this.setState({ selectedNav: selectedNav });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var p = this.props;\n      var s = this.state;\n\n      var outcomes = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'market.outcomes');\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: 'market-user-data' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'h3',\n          null,\n          'My Trading'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_component_nav__[\"a\" /* default */], {\n          navItems: p.navItems,\n          selectedNav: s.selectedNav,\n          updateSelectedNav: this.updateSelectedNav\n        }),\n        s.selectedNav === __WEBPACK_IMPORTED_MODULE_4__app_constants_views__[\"t\" /* MARKET_USER_DATA_NAV_POSITIONS */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__market_positions__[\"a\" /* default */], _extends({}, p, {\n          marketType: p.marketType,\n          selectedShareDenomination: p.selectedShareDenomination\n        })),\n        s.selectedNav === __WEBPACK_IMPORTED_MODULE_4__app_constants_views__[\"u\" /* MARKET_USER_DATA_NAV_OPEN_ORDERS */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__market_open_orders__[\"a\" /* default */], {\n          outcomes: outcomes,\n          marketType: p.marketType,\n          orderCancellation: p.orderCancellation,\n          selectedShareDenomination: p.selectedShareDenomination\n        })\n      );\n    }\n  }]);\n\n  return MarketUserData;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nvar _default = MarketUserData;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MarketUserData, 'MarketUserData', '/home/jack/src/augur/src/modules/market/components/market-user-data.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/market/components/market-user-data.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYXJrZXQvY29tcG9uZW50cy9tYXJrZXQtdXNlci1kYXRhLmpzeD8yMWQyIl0sIm5hbWVzIjpbIk1hcmtldFVzZXJEYXRhIiwicHJvcHMiLCJzdGF0ZSIsInNlbGVjdGVkTmF2IiwiTUFSS0VUX1VTRVJfREFUQV9OQVZfUE9TSVRJT05TIiwidXBkYXRlU2VsZWN0ZWROYXYiLCJiaW5kIiwic2V0U3RhdGUiLCJwIiwicyIsIm91dGNvbWVzIiwiZ2V0VmFsdWUiLCJuYXZJdGVtcyIsIm1hcmtldFR5cGUiLCJzZWxlY3RlZFNoYXJlRGVub21pbmF0aW9uIiwib3JkZXJDYW5jZWxsYXRpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztJQUVxQkEsYzs7O0FBQ25CLDBCQUFZQyxLQUFaLEVBQW1CO0FBQUE7O0FBQUEsZ0lBQ1hBLEtBRFc7O0FBR2pCLFVBQUtDLEtBQUwsR0FBYTtBQUNYQyxtQkFBYSw0RkFBQUM7QUFERixLQUFiOztBQUlBLFVBQUtDLGlCQUFMLEdBQXlCLE1BQUtBLGlCQUFMLENBQXVCQyxJQUF2QixPQUF6QjtBQVBpQjtBQVFsQjs7OztzQ0FFaUJILFcsRUFBYTtBQUM3QixXQUFLSSxRQUFMLENBQWMsRUFBRUosd0JBQUYsRUFBZDtBQUNEOzs7NkJBRVE7QUFDUCxVQUFNSyxJQUFJLEtBQUtQLEtBQWY7QUFDQSxVQUFNUSxJQUFJLEtBQUtQLEtBQWY7O0FBRUEsVUFBTVEsV0FBVyx3RkFBQUMsQ0FBU0gsQ0FBVCxFQUFZLGlCQUFaLENBQWpCOztBQUVBLGFBQ0U7QUFBQTtBQUFBLFVBQVMsV0FBVSxrQkFBbkI7QUFDRTtBQUFBO0FBQUE7QUFBQTtBQUFBLFNBREY7QUFFRSxvRUFBQyxpRkFBRDtBQUNFLG9CQUFVQSxFQUFFSSxRQURkO0FBRUUsdUJBQWFILEVBQUVOLFdBRmpCO0FBR0UsNkJBQW1CLEtBQUtFO0FBSDFCLFVBRkY7QUFPR0ksVUFBRU4sV0FBRixLQUFrQiw0RkFBbEIsSUFDQyw0REFBQyxrRUFBRCxlQUNNSyxDQUROO0FBRUUsc0JBQVlBLEVBQUVLLFVBRmhCO0FBR0UscUNBQTJCTCxFQUFFTTtBQUgvQixXQVJKO0FBY0dMLFVBQUVOLFdBQUYsS0FBa0IsOEZBQWxCLElBQ0MsNERBQUMsb0VBQUQ7QUFDRSxvQkFBVU8sUUFEWjtBQUVFLHNCQUFZRixFQUFFSyxVQUZoQjtBQUdFLDZCQUFtQkwsRUFBRU8saUJBSHZCO0FBSUUscUNBQTJCUCxFQUFFTTtBQUovQjtBQWZKLE9BREY7QUF5QkQ7Ozs7RUE5Q3lDLGdEOztlQUF2QmQsYzs7Ozs7Ozs7O2dDQUFBQSxjIiwiZmlsZSI6IjEyOTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQ29tcG9uZW50TmF2IGZyb20gJ21vZHVsZXMvY29tbW9uL2NvbXBvbmVudHMvY29tcG9uZW50LW5hdic7XG5pbXBvcnQgTWFya2V0UG9zaXRpb25zIGZyb20gJ21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LXBvc2l0aW9ucyc7XG5pbXBvcnQgTWFya2V0T3Blbk9yZGVycyBmcm9tICdtb2R1bGVzL21hcmtldC9jb21wb25lbnRzL21hcmtldC1vcGVuLW9yZGVycyc7XG5cbmltcG9ydCB7IE1BUktFVF9VU0VSX0RBVEFfTkFWX1BPU0lUSU9OUywgTUFSS0VUX1VTRVJfREFUQV9OQVZfT1BFTl9PUkRFUlMgfSBmcm9tICdtb2R1bGVzL2FwcC9jb25zdGFudHMvdmlld3MnO1xuXG5pbXBvcnQgZ2V0VmFsdWUgZnJvbSAndXRpbHMvZ2V0LXZhbHVlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFya2V0VXNlckRhdGEgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzZWxlY3RlZE5hdjogTUFSS0VUX1VTRVJfREFUQV9OQVZfUE9TSVRJT05TXG4gICAgfTtcblxuICAgIHRoaXMudXBkYXRlU2VsZWN0ZWROYXYgPSB0aGlzLnVwZGF0ZVNlbGVjdGVkTmF2LmJpbmQodGhpcyk7XG4gIH1cblxuICB1cGRhdGVTZWxlY3RlZE5hdihzZWxlY3RlZE5hdikge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZE5hdiB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBwID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IG91dGNvbWVzID0gZ2V0VmFsdWUocCwgJ21hcmtldC5vdXRjb21lcycpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxhcnRpY2xlIGNsYXNzTmFtZT1cIm1hcmtldC11c2VyLWRhdGFcIj5cbiAgICAgICAgPGgzPk15IFRyYWRpbmc8L2gzPlxuICAgICAgICA8Q29tcG9uZW50TmF2XG4gICAgICAgICAgbmF2SXRlbXM9e3AubmF2SXRlbXN9XG4gICAgICAgICAgc2VsZWN0ZWROYXY9e3Muc2VsZWN0ZWROYXZ9XG4gICAgICAgICAgdXBkYXRlU2VsZWN0ZWROYXY9e3RoaXMudXBkYXRlU2VsZWN0ZWROYXZ9XG4gICAgICAgIC8+XG4gICAgICAgIHtzLnNlbGVjdGVkTmF2ID09PSBNQVJLRVRfVVNFUl9EQVRBX05BVl9QT1NJVElPTlMgJiZcbiAgICAgICAgICA8TWFya2V0UG9zaXRpb25zXG4gICAgICAgICAgICB7Li4ucH1cbiAgICAgICAgICAgIG1hcmtldFR5cGU9e3AubWFya2V0VHlwZX1cbiAgICAgICAgICAgIHNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb249e3Auc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbn1cbiAgICAgICAgICAvPlxuICAgICAgICB9XG4gICAgICAgIHtzLnNlbGVjdGVkTmF2ID09PSBNQVJLRVRfVVNFUl9EQVRBX05BVl9PUEVOX09SREVSUyAmJlxuICAgICAgICAgIDxNYXJrZXRPcGVuT3JkZXJzXG4gICAgICAgICAgICBvdXRjb21lcz17b3V0Y29tZXN9XG4gICAgICAgICAgICBtYXJrZXRUeXBlPXtwLm1hcmtldFR5cGV9XG4gICAgICAgICAgICBvcmRlckNhbmNlbGxhdGlvbj17cC5vcmRlckNhbmNlbGxhdGlvbn1cbiAgICAgICAgICAgIHNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb249e3Auc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbn1cbiAgICAgICAgICAvPlxuICAgICAgICB9XG4gICAgICA8L2FydGljbGU+XG4gICAgKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvbWFya2V0L2NvbXBvbmVudHMvbWFya2V0LXVzZXItZGF0YS5qc3giXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 1302:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n\n\nvar OrderBookHeader = function OrderBookHeader() {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    \"article\",\n    { className: \"order-book-header\" },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      \"span\",\n      null,\n      \"Bid Q.\"\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      \"span\",\n      null,\n      \"Bid\"\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      \"span\",\n      null,\n      \"Ask\"\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      \"span\",\n      null,\n      \"Ask Q.\"\n    )\n  );\n};\n\nvar _default = OrderBookHeader;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(OrderBookHeader, \"OrderBookHeader\", \"/home/jack/src/augur/src/modules/order-book/components/order-book-header.jsx\");\n\n  __REACT_HOT_LOADER__.register(_default, \"default\", \"/home/jack/src/augur/src/modules/order-book/components/order-book-header.jsx\");\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vcmRlci1ib29rL2NvbXBvbmVudHMvb3JkZXItYm9vay1oZWFkZXIuanN4Pzg0MWQiXSwibmFtZXMiOlsiT3JkZXJCb29rSGVhZGVyIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLElBQU1BLGtCQUFrQixTQUFsQkEsZUFBa0I7QUFBQSxTQUN0QjtBQUFBO0FBQUEsTUFBUyxXQUFVLG1CQUFuQjtBQUNFO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FERjtBQUVFO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FGRjtBQUdFO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FIRjtBQUlFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFKRixHQURzQjtBQUFBLENBQXhCOztlQVNlQSxlO0FBQWY7Ozs7Ozs7O2dDQVRNQSxlIiwiZmlsZSI6IjEzMDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBPcmRlckJvb2tIZWFkZXIgPSAoKSA9PiAoXG4gIDxhcnRpY2xlIGNsYXNzTmFtZT1cIm9yZGVyLWJvb2staGVhZGVyXCI+XG4gICAgPHNwYW4+QmlkIFEuPC9zcGFuPlxuICAgIDxzcGFuPkJpZDwvc3Bhbj5cbiAgICA8c3Bhbj5Bc2s8L3NwYW4+XG4gICAgPHNwYW4+QXNrIFEuPC9zcGFuPlxuICA8L2FydGljbGU+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBPcmRlckJvb2tIZWFkZXI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9vcmRlci1ib29rL2NvbXBvbmVudHMvb3JkZXItYm9vay1oZWFkZXIuanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1303:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(113);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react_tooltip__ = __webpack_require__(319);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react_tooltip___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react_tooltip__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__ = __webpack_require__(602);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_components_null_state_message__ = __webpack_require__(605);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_get_value__ = __webpack_require__(282);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_set_share_denomination__ = __webpack_require__(1231);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__outcomes_constants_trade_types__ = __webpack_require__(1251);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__ = __webpack_require__(474);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__constants_order_book_value_types__ = __webpack_require__(1250);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar OrderBookRowSide = function OrderBookRowSide(p) {\n  var orders = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(p, 'orders');\n  var nullMessage = 'No Orders';\n  var side = p.type || __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"ASK\"];\n  var shouldHighlight = side === __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] && p.selectedTradeSide[p.id] === __WEBPACK_IMPORTED_MODULE_7__outcomes_constants_trade_types__[\"b\" /* SELL */] || side !== __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] && p.selectedTradeSide[p.id] === __WEBPACK_IMPORTED_MODULE_7__outcomes_constants_trade_types__[\"a\" /* BUY */] || side !== __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] && p.selectedTradeSide[p.id] == null;\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'order-book-row-side ' + (shouldHighlight ? 'order-book-row-side-trading' : '') },\n    !orders || !orders.length ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__common_components_null_state_message__[\"a\" /* default */], { message: nullMessage }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      null,\n      (p.orders || []).map(function (order, i) {\n        var shares = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils_set_share_denomination__[\"a\" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(order, 'shares.formatted'), p.selectedShareDenomination);\n        var price = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_get_value__[\"a\" /* default */])(order, 'price.formatted');\n        var type = p.type || __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"ASK\"];\n\n        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          {\n            key: i,\n            className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('order-book-side-row not-selectable', { 'is-of-current-user': order.isOfCurrentUser }),\n            'data-tip': true,\n            'data-for': type + '-' + i + '-orders',\n            'data-event': 'mouseenter',\n            'data-event-off': 'mouseleave'\n          },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'unstyled',\n              onClick: function onClick() {\n                p.updateTradeFromSelectedOrder(p.id, i, side, side === __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] ? __WEBPACK_IMPORTED_MODULE_9__constants_order_book_value_types__[\"a\" /* SHARE */] : __WEBPACK_IMPORTED_MODULE_9__constants_order_book_value_types__[\"b\" /* PRICE */]);\n              }\n            },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: side === __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] ? shares : price })\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'unstyled',\n              onClick: function onClick() {\n                p.updateTradeFromSelectedOrder(p.id, i, side, side === __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] ? __WEBPACK_IMPORTED_MODULE_9__constants_order_book_value_types__[\"b\" /* PRICE */] : __WEBPACK_IMPORTED_MODULE_9__constants_order_book_value_types__[\"a\" /* SHARE */]);\n              }\n            },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: side === __WEBPACK_IMPORTED_MODULE_8__transactions_constants_types__[\"BID\"] ? price : shares })\n          ),\n          order.isOfCurrentUser && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            __WEBPACK_IMPORTED_MODULE_2_react_tooltip___default.a,\n            {\n              id: type + '-' + i + '-orders',\n              type: 'info',\n              effect: 'solid',\n              place: 'top'\n            },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'span',\n              { className: 'tooltip-text' },\n              'Your Order'\n            )\n          )\n        );\n      })\n    )\n  );\n};\n\nvar _default = OrderBookRowSide;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(OrderBookRowSide, 'OrderBookRowSide', '/home/jack/src/augur/src/modules/order-book/components/order-book-row-side.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/order-book/components/order-book-row-side.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vcmRlci1ib29rL2NvbXBvbmVudHMvb3JkZXItYm9vay1yb3ctc2lkZS5qc3g/MmFmZiJdLCJuYW1lcyI6WyJPcmRlckJvb2tSb3dTaWRlIiwicCIsIm9yZGVycyIsImdldFZhbHVlIiwibnVsbE1lc3NhZ2UiLCJzaWRlIiwidHlwZSIsInNob3VsZEhpZ2hsaWdodCIsInNlbGVjdGVkVHJhZGVTaWRlIiwiaWQiLCJsZW5ndGgiLCJtYXAiLCJvcmRlciIsImkiLCJzaGFyZXMiLCJzZXRTaGFyZURlbm9taW5hdGlvbiIsInNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24iLCJwcmljZSIsImNsYXNzTmFtZXMiLCJpc09mQ3VycmVudFVzZXIiLCJ1cGRhdGVUcmFkZUZyb21TZWxlY3RlZE9yZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsSUFBTUEsbUJBQW1CLFNBQW5CQSxnQkFBbUIsQ0FBQ0MsQ0FBRCxFQUFPO0FBQzlCLE1BQU1DLFNBQVMsd0ZBQUFDLENBQVNGLENBQVQsRUFBWSxRQUFaLENBQWY7QUFDQSxNQUFNRyxjQUFjLFdBQXBCO0FBQ0EsTUFBTUMsT0FBT0osRUFBRUssSUFBRixJQUFVLGtFQUF2QjtBQUNBLE1BQU1DLGtCQUFtQkYsU0FBUyxrRUFBVCxJQUFnQkosRUFBRU8saUJBQUYsQ0FBb0JQLEVBQUVRLEVBQXRCLE1BQThCLDZFQUEvQyxJQUF5REosU0FBUyxrRUFBVCxJQUFnQkosRUFBRU8saUJBQUYsQ0FBb0JQLEVBQUVRLEVBQXRCLE1BQThCLDRFQUF2RyxJQUFnSEosU0FBUyxrRUFBVCxJQUFnQkosRUFBRU8saUJBQUYsQ0FBb0JQLEVBQUVRLEVBQXRCLEtBQTZCLElBQXJMOztBQUVBLFNBQ0U7QUFBQTtBQUFBLE1BQVMscUNBQWtDRixrQkFBa0IsNkJBQWxCLEdBQWtELEVBQXBGLENBQVQ7QUFDRyxLQUFDTCxNQUFELElBQVcsQ0FBQ0EsT0FBT1EsTUFBbkIsR0FDQyw0REFBQyxzRkFBRCxJQUFrQixTQUFTTixXQUEzQixHQURELEdBRUM7QUFBQTtBQUFBO0FBQ0csT0FBQ0gsRUFBRUMsTUFBRixJQUFZLEVBQWIsRUFBaUJTLEdBQWpCLENBQXFCLFVBQUNDLEtBQUQsRUFBUUMsQ0FBUixFQUFjO0FBQ2xDLFlBQU1DLFNBQVMscUdBQUFDLENBQXFCLHdGQUFBWixDQUFTUyxLQUFULEVBQWdCLGtCQUFoQixDQUFyQixFQUEwRFgsRUFBRWUseUJBQTVELENBQWY7QUFDQSxZQUFNQyxRQUFRLHdGQUFBZCxDQUFTUyxLQUFULEVBQWdCLGlCQUFoQixDQUFkO0FBQ0EsWUFBTU4sT0FBT0wsRUFBRUssSUFBRixJQUFVLGtFQUF2Qjs7QUFFQSxlQUNFO0FBQUE7QUFBQTtBQUNFLGlCQUFLTyxDQURQO0FBRUUsdUJBQVcsa0RBQUFLLENBQVcsb0NBQVgsRUFBaUQsRUFBRSxzQkFBc0JOLE1BQU1PLGVBQTlCLEVBQWpELENBRmI7QUFHRSw0QkFIRjtBQUlFLHdCQUFhYixJQUFiLFNBQXFCTyxDQUFyQixZQUpGO0FBS0UsMEJBQVcsWUFMYjtBQU1FLDhCQUFlO0FBTmpCO0FBUUU7QUFBQTtBQUFBO0FBQ0UseUJBQVUsVUFEWjtBQUVFLHVCQUFTLG1CQUFNO0FBQ2JaLGtCQUFFbUIsNEJBQUYsQ0FBK0JuQixFQUFFUSxFQUFqQyxFQUFxQ0ksQ0FBckMsRUFBd0NSLElBQXhDLEVBQThDQSxTQUFTLGtFQUFULEdBQWUsZ0ZBQWYsR0FBdUIsZ0ZBQXJFO0FBQ0Q7QUFKSDtBQU1FLHdFQUFDLHNGQUFELElBQW1CLFdBQVdBLFNBQVMsa0VBQVQsR0FBZVMsTUFBZixHQUF3QkcsS0FBdEQ7QUFORixXQVJGO0FBZ0JFO0FBQUE7QUFBQTtBQUNFLHlCQUFVLFVBRFo7QUFFRSx1QkFBUyxtQkFBTTtBQUNiaEIsa0JBQUVtQiw0QkFBRixDQUErQm5CLEVBQUVRLEVBQWpDLEVBQXFDSSxDQUFyQyxFQUF3Q1IsSUFBeEMsRUFBOENBLFNBQVMsa0VBQVQsR0FBZSxnRkFBZixHQUF1QixnRkFBckU7QUFDRDtBQUpIO0FBTUUsd0VBQUMsc0ZBQUQsSUFBbUIsV0FBV0EsU0FBUyxrRUFBVCxHQUFlWSxLQUFmLEdBQXVCSCxNQUFyRDtBQU5GLFdBaEJGO0FBd0JHRixnQkFBTU8sZUFBTixJQUNEO0FBQUMsaUVBQUQ7QUFBQTtBQUNFLGtCQUFPYixJQUFQLFNBQWVPLENBQWYsWUFERjtBQUVFLG9CQUFLLE1BRlA7QUFHRSxzQkFBTyxPQUhUO0FBSUUscUJBQU07QUFKUjtBQU1FO0FBQUE7QUFBQSxnQkFBTSxXQUFVLGNBQWhCO0FBQUE7QUFBQTtBQU5GO0FBekJGLFNBREY7QUF1Q0QsT0E1Q0E7QUFESDtBQUhKLEdBREY7QUFzREQsQ0E1REQ7O2VBOERlYixnQjtBQUFmOzs7Ozs7OztnQ0E5RE1BLGdCIiwiZmlsZSI6IjEzMDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3RUb29sdGlwIGZyb20gJ3JlYWN0LXRvb2x0aXAnO1xuXG5pbXBvcnQgVmFsdWVEZW5vbWluYXRpb24gZnJvbSAnbW9kdWxlcy9jb21tb24vY29tcG9uZW50cy92YWx1ZS1kZW5vbWluYXRpb24nO1xuaW1wb3J0IE51bGxTdGF0ZU1lc3NhZ2UgZnJvbSAnbW9kdWxlcy9jb21tb24vY29tcG9uZW50cy9udWxsLXN0YXRlLW1lc3NhZ2UnO1xuXG5pbXBvcnQgZ2V0VmFsdWUgZnJvbSAndXRpbHMvZ2V0LXZhbHVlJztcbmltcG9ydCBzZXRTaGFyZURlbm9taW5hdGlvbiBmcm9tICd1dGlscy9zZXQtc2hhcmUtZGVub21pbmF0aW9uJztcblxuaW1wb3J0IHsgQlVZLCBTRUxMIH0gZnJvbSAnbW9kdWxlcy9vdXRjb21lcy9jb25zdGFudHMvdHJhZGUtdHlwZXMnO1xuaW1wb3J0IHsgQklELCBBU0sgfSBmcm9tICdtb2R1bGVzL3RyYW5zYWN0aW9ucy9jb25zdGFudHMvdHlwZXMnO1xuaW1wb3J0IHsgUFJJQ0UsIFNIQVJFIH0gZnJvbSAnbW9kdWxlcy9vcmRlci1ib29rL2NvbnN0YW50cy9vcmRlci1ib29rLXZhbHVlLXR5cGVzJztcblxuY29uc3QgT3JkZXJCb29rUm93U2lkZSA9IChwKSA9PiB7XG4gIGNvbnN0IG9yZGVycyA9IGdldFZhbHVlKHAsICdvcmRlcnMnKTtcbiAgY29uc3QgbnVsbE1lc3NhZ2UgPSAnTm8gT3JkZXJzJztcbiAgY29uc3Qgc2lkZSA9IHAudHlwZSB8fCBBU0s7XG4gIGNvbnN0IHNob3VsZEhpZ2hsaWdodCA9IChzaWRlID09PSBCSUQgJiYgcC5zZWxlY3RlZFRyYWRlU2lkZVtwLmlkXSA9PT0gU0VMTCkgfHwgKHNpZGUgIT09IEJJRCAmJiBwLnNlbGVjdGVkVHJhZGVTaWRlW3AuaWRdID09PSBCVVkpIHx8IChzaWRlICE9PSBCSUQgJiYgcC5zZWxlY3RlZFRyYWRlU2lkZVtwLmlkXSA9PSBudWxsKTtcblxuICByZXR1cm4gKFxuICAgIDxhcnRpY2xlIGNsYXNzTmFtZT17YG9yZGVyLWJvb2stcm93LXNpZGUgJHtzaG91bGRIaWdobGlnaHQgPyAnb3JkZXItYm9vay1yb3ctc2lkZS10cmFkaW5nJyA6ICcnfWB9PlxuICAgICAgeyFvcmRlcnMgfHwgIW9yZGVycy5sZW5ndGggP1xuICAgICAgICA8TnVsbFN0YXRlTWVzc2FnZSBtZXNzYWdlPXtudWxsTWVzc2FnZX0gLz4gOlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIHsocC5vcmRlcnMgfHwgW10pLm1hcCgob3JkZXIsIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNoYXJlcyA9IHNldFNoYXJlRGVub21pbmF0aW9uKGdldFZhbHVlKG9yZGVyLCAnc2hhcmVzLmZvcm1hdHRlZCcpLCBwLnNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24pO1xuICAgICAgICAgICAgY29uc3QgcHJpY2UgPSBnZXRWYWx1ZShvcmRlciwgJ3ByaWNlLmZvcm1hdHRlZCcpO1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHAudHlwZSB8fCBBU0s7XG5cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdvcmRlci1ib29rLXNpZGUtcm93IG5vdC1zZWxlY3RhYmxlJywgeyAnaXMtb2YtY3VycmVudC11c2VyJzogb3JkZXIuaXNPZkN1cnJlbnRVc2VyIH0pfVxuICAgICAgICAgICAgICAgIGRhdGEtdGlwXG4gICAgICAgICAgICAgICAgZGF0YS1mb3I9e2Ake3R5cGV9LSR7aX0tb3JkZXJzYH1cbiAgICAgICAgICAgICAgICBkYXRhLWV2ZW50PVwibW91c2VlbnRlclwiXG4gICAgICAgICAgICAgICAgZGF0YS1ldmVudC1vZmY9XCJtb3VzZWxlYXZlXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInVuc3R5bGVkXCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcC51cGRhdGVUcmFkZUZyb21TZWxlY3RlZE9yZGVyKHAuaWQsIGksIHNpZGUsIHNpZGUgPT09IEJJRCA/IFNIQVJFIDogUFJJQ0UpO1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8VmFsdWVEZW5vbWluYXRpb24gZm9ybWF0dGVkPXtzaWRlID09PSBCSUQgPyBzaGFyZXMgOiBwcmljZX0gLz5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ1bnN0eWxlZFwiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHAudXBkYXRlVHJhZGVGcm9tU2VsZWN0ZWRPcmRlcihwLmlkLCBpLCBzaWRlLCBzaWRlID09PSBCSUQgPyBQUklDRSA6IFNIQVJFKTtcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPFZhbHVlRGVub21pbmF0aW9uIGZvcm1hdHRlZD17c2lkZSA9PT0gQklEID8gcHJpY2UgOiBzaGFyZXN9IC8+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAge29yZGVyLmlzT2ZDdXJyZW50VXNlciAmJlxuICAgICAgICAgICAgICAgIDxSZWFjdFRvb2x0aXBcbiAgICAgICAgICAgICAgICAgIGlkPXtgJHt0eXBlfS0ke2l9LW9yZGVyc2B9XG4gICAgICAgICAgICAgICAgICB0eXBlPVwiaW5mb1wiXG4gICAgICAgICAgICAgICAgICBlZmZlY3Q9XCJzb2xpZFwiXG4gICAgICAgICAgICAgICAgICBwbGFjZT1cInRvcFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidG9vbHRpcC10ZXh0XCI+XG4gICAgICAgICAgICAgICAgICAgIFlvdXIgT3JkZXJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L1JlYWN0VG9vbHRpcD5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9kaXY+XG4gICAgICB9XG4gICAgPC9hcnRpY2xlPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgT3JkZXJCb29rUm93U2lkZTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL29yZGVyLWJvb2svY29tcG9uZW50cy9vcmRlci1ib29rLXJvdy1zaWRlLmpzeCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 1304:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__order_book_row_side__ = __webpack_require__(1303);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__transactions_constants_types__ = __webpack_require__(474);\n\n\n\n\n\n\nvar OrderBookRows = function OrderBookRows(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'order-book-rows' },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__order_book_row_side__[\"a\" /* default */], {\n      id: p.id,\n      type: __WEBPACK_IMPORTED_MODULE_2__transactions_constants_types__[\"BID\"],\n      trade: p.trade,\n      orders: p.bids,\n      selectedShareDenomination: p.selectedShareDenomination,\n      selectedTradeSide: p.selectedTradeSide,\n      updateTradeFromSelectedOrder: p.updateTradeFromSelectedOrder\n    }),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__order_book_row_side__[\"a\" /* default */], {\n      id: p.id,\n      trade: p.trade,\n      orders: p.asks,\n      selectedShareDenomination: p.selectedShareDenomination,\n      selectedTradeSide: p.selectedTradeSide,\n      updateTradeFromSelectedOrder: p.updateTradeFromSelectedOrder\n    })\n  );\n};\n\nvar _default = OrderBookRows;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(OrderBookRows, 'OrderBookRows', '/home/jack/src/augur/src/modules/order-book/components/order-book-rows.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/order-book/components/order-book-rows.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vcmRlci1ib29rL2NvbXBvbmVudHMvb3JkZXItYm9vay1yb3dzLmpzeD85ZjQ1Il0sIm5hbWVzIjpbIk9yZGVyQm9va1Jvd3MiLCJwIiwiaWQiLCJ0cmFkZSIsImJpZHMiLCJzZWxlY3RlZFNoYXJlRGVub21pbmF0aW9uIiwic2VsZWN0ZWRUcmFkZVNpZGUiLCJ1cGRhdGVUcmFkZUZyb21TZWxlY3RlZE9yZGVyIiwiYXNrcyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUVBOztBQUVBOztBQUVBLElBQU1BLGdCQUFnQixTQUFoQkEsYUFBZ0I7QUFBQSxTQUNwQjtBQUFBO0FBQUEsTUFBUyxXQUFVLGlCQUFuQjtBQUNFLGdFQUFDLHFFQUFEO0FBQ0UsVUFBSUMsRUFBRUMsRUFEUjtBQUVFLFlBQU0sa0VBRlI7QUFHRSxhQUFPRCxFQUFFRSxLQUhYO0FBSUUsY0FBUUYsRUFBRUcsSUFKWjtBQUtFLGlDQUEyQkgsRUFBRUkseUJBTC9CO0FBTUUseUJBQW1CSixFQUFFSyxpQkFOdkI7QUFPRSxvQ0FBOEJMLEVBQUVNO0FBUGxDLE1BREY7QUFVRSxnRUFBQyxxRUFBRDtBQUNFLFVBQUlOLEVBQUVDLEVBRFI7QUFFRSxhQUFPRCxFQUFFRSxLQUZYO0FBR0UsY0FBUUYsRUFBRU8sSUFIWjtBQUlFLGlDQUEyQlAsRUFBRUkseUJBSi9CO0FBS0UseUJBQW1CSixFQUFFSyxpQkFMdkI7QUFNRSxvQ0FBOEJMLEVBQUVNO0FBTmxDO0FBVkYsR0FEb0I7QUFBQSxDQUF0Qjs7ZUFzQmVQLGE7QUFBZjs7Ozs7Ozs7Z0NBdEJNQSxhIiwiZmlsZSI6IjEzMDQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgT3JkZXJCb29rUm93U2lkZSBmcm9tICdtb2R1bGVzL29yZGVyLWJvb2svY29tcG9uZW50cy9vcmRlci1ib29rLXJvdy1zaWRlJztcblxuaW1wb3J0IHsgQklEIH0gZnJvbSAnbW9kdWxlcy90cmFuc2FjdGlvbnMvY29uc3RhbnRzL3R5cGVzJztcblxuY29uc3QgT3JkZXJCb29rUm93cyA9IHAgPT4gKFxuICA8YXJ0aWNsZSBjbGFzc05hbWU9XCJvcmRlci1ib29rLXJvd3NcIj5cbiAgICA8T3JkZXJCb29rUm93U2lkZVxuICAgICAgaWQ9e3AuaWR9XG4gICAgICB0eXBlPXtCSUR9XG4gICAgICB0cmFkZT17cC50cmFkZX1cbiAgICAgIG9yZGVycz17cC5iaWRzfVxuICAgICAgc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbj17cC5zZWxlY3RlZFNoYXJlRGVub21pbmF0aW9ufVxuICAgICAgc2VsZWN0ZWRUcmFkZVNpZGU9e3Auc2VsZWN0ZWRUcmFkZVNpZGV9XG4gICAgICB1cGRhdGVUcmFkZUZyb21TZWxlY3RlZE9yZGVyPXtwLnVwZGF0ZVRyYWRlRnJvbVNlbGVjdGVkT3JkZXJ9XG4gICAgLz5cbiAgICA8T3JkZXJCb29rUm93U2lkZVxuICAgICAgaWQ9e3AuaWR9XG4gICAgICB0cmFkZT17cC50cmFkZX1cbiAgICAgIG9yZGVycz17cC5hc2tzfVxuICAgICAgc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbj17cC5zZWxlY3RlZFNoYXJlRGVub21pbmF0aW9ufVxuICAgICAgc2VsZWN0ZWRUcmFkZVNpZGU9e3Auc2VsZWN0ZWRUcmFkZVNpZGV9XG4gICAgICB1cGRhdGVUcmFkZUZyb21TZWxlY3RlZE9yZGVyPXtwLnVwZGF0ZVRyYWRlRnJvbVNlbGVjdGVkT3JkZXJ9XG4gICAgLz5cbiAgPC9hcnRpY2xlPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgT3JkZXJCb29rUm93cztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL29yZGVyLWJvb2svY29tcG9uZW50cy9vcmRlci1ib29rLXJvd3MuanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1305:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\nvar OutcomeTradeAction = function (_Component) {\n  _inherits(OutcomeTradeAction, _Component);\n\n  function OutcomeTradeAction(props) {\n    _classCallCheck(this, OutcomeTradeAction);\n\n    var _this = _possibleConstructorReturn(this, (OutcomeTradeAction.__proto__ || Object.getPrototypeOf(OutcomeTradeAction)).call(this, props));\n\n    _this.state = {\n      isConfirming: false\n    };\n    return _this;\n  }\n\n  _createClass(OutcomeTradeAction, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var p = this.props;\n      var s = this.state;\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        \"div\",\n        { className: \"outcome-trade-action\" },\n        !s.isConfirming && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          \"button\",\n          {\n            className: \"trade-action\",\n            disabled: p.disabled,\n            onClick: function onClick() {\n              _this2.setState({ isConfirming: true });\n            }\n          },\n          \"Place Trade\"\n        ),\n        s.isConfirming && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          \"div\",\n          { className: \"trade-confirmation\" },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            \"span\",\n            null,\n            \"Are you sure?\"\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            \"div\",\n            { className: \"trade-confirmation-actions\" },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              \"button\",\n              {\n                className: \"cancel\",\n                onClick: function onClick() {\n                  _this2.setState({ isConfirming: false });\n                }\n              },\n              \"Cancel\"\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              \"button\",\n              {\n                onClick: function onClick() {\n                  p.submitTrade(p.selectedID);\n                }\n              },\n              \"Yes\"\n            )\n          )\n        )\n      );\n    }\n  }]);\n\n  return OutcomeTradeAction;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nvar _default = OutcomeTradeAction;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(OutcomeTradeAction, \"OutcomeTradeAction\", \"/home/jack/src/augur/src/modules/outcomes/components/outcome-trade-action.jsx\");\n\n  __REACT_HOT_LOADER__.register(_default, \"default\", \"/home/jack/src/augur/src/modules/outcomes/components/outcome-trade-action.jsx\");\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vdXRjb21lcy9jb21wb25lbnRzL291dGNvbWUtdHJhZGUtYWN0aW9uLmpzeD84ZjcxIl0sIm5hbWVzIjpbIk91dGNvbWVUcmFkZUFjdGlvbiIsInByb3BzIiwic3RhdGUiLCJpc0NvbmZpcm1pbmciLCJwIiwicyIsImRpc2FibGVkIiwic2V0U3RhdGUiLCJzdWJtaXRUcmFkZSIsInNlbGVjdGVkSUQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7SUFFcUJBLGtCOzs7QUFDbkIsOEJBQVlDLEtBQVosRUFBbUI7QUFBQTs7QUFBQSx3SUFDWEEsS0FEVzs7QUFHakIsVUFBS0MsS0FBTCxHQUFhO0FBQ1hDLG9CQUFjO0FBREgsS0FBYjtBQUhpQjtBQU1sQjs7Ozs2QkFFUTtBQUFBOztBQUNQLFVBQU1DLElBQUksS0FBS0gsS0FBZjtBQUNBLFVBQU1JLElBQUksS0FBS0gsS0FBZjs7QUFFQSxhQUNFO0FBQUE7QUFBQSxVQUFLLFdBQVUsc0JBQWY7QUFDRyxTQUFDRyxFQUFFRixZQUFILElBQ0M7QUFBQTtBQUFBO0FBQ0UsdUJBQVUsY0FEWjtBQUVFLHNCQUFVQyxFQUFFRSxRQUZkO0FBR0UscUJBQVMsbUJBQU07QUFDYixxQkFBS0MsUUFBTCxDQUFjLEVBQUVKLGNBQWMsSUFBaEIsRUFBZDtBQUNEO0FBTEg7QUFBQTtBQUFBLFNBRko7QUFZR0UsVUFBRUYsWUFBRixJQUNDO0FBQUE7QUFBQSxZQUFLLFdBQVUsb0JBQWY7QUFDRTtBQUFBO0FBQUE7QUFBQTtBQUFBLFdBREY7QUFFRTtBQUFBO0FBQUEsY0FBSyxXQUFVLDRCQUFmO0FBQ0U7QUFBQTtBQUFBO0FBQ0UsMkJBQVUsUUFEWjtBQUVFLHlCQUFTLG1CQUFNO0FBQ2IseUJBQUtJLFFBQUwsQ0FBYyxFQUFFSixjQUFjLEtBQWhCLEVBQWQ7QUFDRDtBQUpIO0FBQUE7QUFBQSxhQURGO0FBU0U7QUFBQTtBQUFBO0FBQ0UseUJBQVMsbUJBQU07QUFDYkMsb0JBQUVJLFdBQUYsQ0FBY0osRUFBRUssVUFBaEI7QUFDRDtBQUhIO0FBQUE7QUFBQTtBQVRGO0FBRkY7QUFiSixPQURGO0FBcUNEOzs7O0VBbEQ2QyxnRDs7ZUFBM0JULGtCOzs7Ozs7Ozs7Z0NBQUFBLGtCIiwiZmlsZSI6IjEzMDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPdXRjb21lVHJhZGVBY3Rpb24gZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0NvbmZpcm1pbmc6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBwID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm91dGNvbWUtdHJhZGUtYWN0aW9uXCIgPlxuICAgICAgICB7IXMuaXNDb25maXJtaW5nICYmXG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidHJhZGUtYWN0aW9uXCJcbiAgICAgICAgICAgIGRpc2FibGVkPXtwLmRpc2FibGVkfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNDb25maXJtaW5nOiB0cnVlIH0pO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBQbGFjZSBUcmFkZVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICB9XG4gICAgICAgIHtzLmlzQ29uZmlybWluZyAmJlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJhZGUtY29uZmlybWF0aW9uXCIgPlxuICAgICAgICAgICAgPHNwYW4+QXJlIHlvdSBzdXJlPzwvc3Bhbj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidHJhZGUtY29uZmlybWF0aW9uLWFjdGlvbnNcIj5cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNhbmNlbFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzQ29uZmlybWluZzogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIENhbmNlbFxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgIHAuc3VibWl0VHJhZGUocC5zZWxlY3RlZElEKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgWWVzXG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIH1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL291dGNvbWVzL2NvbXBvbmVudHMvb3V0Y29tZS10cmFkZS1hY3Rpb24uanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1306:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__ = __webpack_require__(602);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_get_value__ = __webpack_require__(282);\n\n\n\n\n\n\nvar OutcomeTradeSummary = function OutcomeTradeSummary(p) {\n  var tradingFees = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_get_value__[\"a\" /* default */])(p, 'tradeOrder.tradingFees');\n  var feePercent = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_get_value__[\"a\" /* default */])(p, 'tradeOrder.feePercent');\n  var gasFees = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_get_value__[\"a\" /* default */])(p, 'tradeOrder.gasFees');\n  var totalCost = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_get_value__[\"a\" /* default */])(p, 'trade.totalCost');\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'outcome-trade-summary' },\n    tradingFees && feePercent && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'outcome-trade-summary-group' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        null,\n        'Fees:'\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        null,\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: p.tradeOrder.tradingFees.formatted }),\n        ' ',\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'ETH (',\n          p.tradeOrder.feePercent.formatted,\n          '%)'\n        )\n      )\n    ),\n    gasFees && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'outcome-trade-summary-group' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        null,\n        'Gas:'\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        null,\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: p.tradeOrder.gasFees.formatted }),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'ETH'\n        )\n      )\n    ),\n    totalCost && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'outcome-trade-summary-group' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        null,\n        'Total:'\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        null,\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_value_denomination__[\"a\" /* default */], { formatted: p.trade.totalCost.formatted }),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'ETH'\n        )\n      )\n    )\n  );\n};\n\nvar _default = OutcomeTradeSummary;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(OutcomeTradeSummary, 'OutcomeTradeSummary', '/home/jack/src/augur/src/modules/outcomes/components/outcome-trade-summary.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/outcomes/components/outcome-trade-summary.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vdXRjb21lcy9jb21wb25lbnRzL291dGNvbWUtdHJhZGUtc3VtbWFyeS5qc3g/Mzg2ZSJdLCJuYW1lcyI6WyJPdXRjb21lVHJhZGVTdW1tYXJ5IiwicCIsInRyYWRpbmdGZWVzIiwiZ2V0VmFsdWUiLCJmZWVQZXJjZW50IiwiZ2FzRmVlcyIsInRvdGFsQ29zdCIsInRyYWRlT3JkZXIiLCJmb3JtYXR0ZWQiLCJ0cmFkZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUVBOztBQUVBOztBQUVBLElBQU1BLHNCQUFzQixTQUF0QkEsbUJBQXNCLENBQUNDLENBQUQsRUFBTztBQUNqQyxNQUFNQyxjQUFjLHdGQUFBQyxDQUFTRixDQUFULEVBQVksd0JBQVosQ0FBcEI7QUFDQSxNQUFNRyxhQUFhLHdGQUFBRCxDQUFTRixDQUFULEVBQVksdUJBQVosQ0FBbkI7QUFDQSxNQUFNSSxVQUFVLHdGQUFBRixDQUFTRixDQUFULEVBQVksb0JBQVosQ0FBaEI7QUFDQSxNQUFNSyxZQUFZLHdGQUFBSCxDQUFTRixDQUFULEVBQVksaUJBQVosQ0FBbEI7O0FBRUEsU0FDRTtBQUFBO0FBQUEsTUFBUyxXQUFVLHVCQUFuQjtBQUNHQyxtQkFBZUUsVUFBZixJQUNDO0FBQUE7QUFBQSxRQUFLLFdBQVUsNkJBQWY7QUFDRTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BREY7QUFFRTtBQUFBO0FBQUE7QUFBTSxvRUFBQyxzRkFBRCxJQUFtQixXQUFXSCxFQUFFTSxVQUFGLENBQWFMLFdBQWIsQ0FBeUJNLFNBQXZELEdBQU47QUFBQTtBQUEyRTtBQUFBO0FBQUE7QUFBQTtBQUFZUCxZQUFFTSxVQUFGLENBQWFILFVBQWIsQ0FBd0JJLFNBQXBDO0FBQUE7QUFBQTtBQUEzRTtBQUZGLEtBRko7QUFPR0gsZUFDQztBQUFBO0FBQUEsUUFBSyxXQUFVLDZCQUFmO0FBQ0U7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQURGO0FBRUU7QUFBQTtBQUFBO0FBQU0sb0VBQUMsc0ZBQUQsSUFBbUIsV0FBV0osRUFBRU0sVUFBRixDQUFhRixPQUFiLENBQXFCRyxTQUFuRCxHQUFOO0FBQXNFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBdEU7QUFGRixLQVJKO0FBYUdGLGlCQUNDO0FBQUE7QUFBQSxRQUFLLFdBQVUsNkJBQWY7QUFDRTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BREY7QUFFRTtBQUFBO0FBQUE7QUFBTSxvRUFBQyxzRkFBRCxJQUFtQixXQUFXTCxFQUFFUSxLQUFGLENBQVFILFNBQVIsQ0FBa0JFLFNBQWhELEdBQU47QUFBbUU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFuRTtBQUZGO0FBZEosR0FERjtBQXNCRCxDQTVCRDs7ZUE4QmVSLG1CO0FBQWY7Ozs7Ozs7O2dDQTlCTUEsbUIiLCJmaWxlIjoiMTMwNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBWYWx1ZURlbm9taW5hdGlvbiBmcm9tICdtb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL3ZhbHVlLWRlbm9taW5hdGlvbic7XG5cbmltcG9ydCBnZXRWYWx1ZSBmcm9tICd1dGlscy9nZXQtdmFsdWUnO1xuXG5jb25zdCBPdXRjb21lVHJhZGVTdW1tYXJ5ID0gKHApID0+IHtcbiAgY29uc3QgdHJhZGluZ0ZlZXMgPSBnZXRWYWx1ZShwLCAndHJhZGVPcmRlci50cmFkaW5nRmVlcycpO1xuICBjb25zdCBmZWVQZXJjZW50ID0gZ2V0VmFsdWUocCwgJ3RyYWRlT3JkZXIuZmVlUGVyY2VudCcpO1xuICBjb25zdCBnYXNGZWVzID0gZ2V0VmFsdWUocCwgJ3RyYWRlT3JkZXIuZ2FzRmVlcycpO1xuICBjb25zdCB0b3RhbENvc3QgPSBnZXRWYWx1ZShwLCAndHJhZGUudG90YWxDb3N0Jyk7XG5cbiAgcmV0dXJuIChcbiAgICA8YXJ0aWNsZSBjbGFzc05hbWU9XCJvdXRjb21lLXRyYWRlLXN1bW1hcnlcIj5cbiAgICAgIHt0cmFkaW5nRmVlcyAmJiBmZWVQZXJjZW50ICYmXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3V0Y29tZS10cmFkZS1zdW1tYXJ5LWdyb3VwXCI+XG4gICAgICAgICAgPHNwYW4+RmVlczo8L3NwYW4+XG4gICAgICAgICAgPHNwYW4+PFZhbHVlRGVub21pbmF0aW9uIGZvcm1hdHRlZD17cC50cmFkZU9yZGVyLnRyYWRpbmdGZWVzLmZvcm1hdHRlZH0gLz4gPHNwYW4+RVRIICh7cC50cmFkZU9yZGVyLmZlZVBlcmNlbnQuZm9ybWF0dGVkfSUpPC9zcGFuPjwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICB9XG4gICAgICB7Z2FzRmVlcyAmJlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm91dGNvbWUtdHJhZGUtc3VtbWFyeS1ncm91cFwiPlxuICAgICAgICAgIDxzcGFuPkdhczo8L3NwYW4+XG4gICAgICAgICAgPHNwYW4+PFZhbHVlRGVub21pbmF0aW9uIGZvcm1hdHRlZD17cC50cmFkZU9yZGVyLmdhc0ZlZXMuZm9ybWF0dGVkfSAvPjxzcGFuPkVUSDwvc3Bhbj48L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgfVxuICAgICAge3RvdGFsQ29zdCAmJlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm91dGNvbWUtdHJhZGUtc3VtbWFyeS1ncm91cFwiPlxuICAgICAgICAgIDxzcGFuPlRvdGFsOjwvc3Bhbj5cbiAgICAgICAgICA8c3Bhbj48VmFsdWVEZW5vbWluYXRpb24gZm9ybWF0dGVkPXtwLnRyYWRlLnRvdGFsQ29zdC5mb3JtYXR0ZWR9IC8+PHNwYW4+RVRIPC9zcGFuPjwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICB9XG4gICAgPC9hcnRpY2xlPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgT3V0Y29tZVRyYWRlU3VtbWFyeTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL291dGNvbWVzL2NvbXBvbmVudHMvb3V0Y29tZS10cmFkZS1zdW1tYXJ5LmpzeCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 1307:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(113);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__link_components_link__ = __webpack_require__(603);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__ = __webpack_require__(602);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__outcome_trade__ = __webpack_require__(1258);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__transactions_constants_types__ = __webpack_require__(474);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__ = __webpack_require__(1250);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__markets_constants_market_types__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_get_value__ = __webpack_require__(282);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_set_share_denomination__ = __webpack_require__(1231);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Outcome = function Outcome(p) {\n  var outcomeName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_get_value__[\"a\" /* default */])(p, 'outcome.name');\n\n  var topBidShares = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__utils_set_share_denomination__[\"a\" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_get_value__[\"a\" /* default */])(p, 'outcome.topBid.shares.formatted'), p.selectedShareDenomination);\n  var topAskShares = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__utils_set_share_denomination__[\"a\" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_get_value__[\"a\" /* default */])(p, 'outcome.topAsk.shares.formatted'), p.selectedShareDenomination);\n\n  var topBidPrice = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_get_value__[\"a\" /* default */])(p, 'outcome.topBid.price.formatted');\n  var topAskPrice = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_get_value__[\"a\" /* default */])(p, 'outcome.topAsk.price.formatted');\n\n  var lastPrice = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_get_value__[\"a\" /* default */])(p, 'outcome.lastPrice.formatted');\n  var lastPricePercent = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_get_value__[\"a\" /* default */])(p, 'outcome.lastPricePercent.rounded');\n\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('outcome', { selected: p.selectedOutcome.id === p.outcome.id }) },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      __WEBPACK_IMPORTED_MODULE_2__link_components_link__[\"a\" /* default */],\n      {\n        className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('outcome-row-full', { selected: p.selectedOutcome.id === p.outcome.id }),\n        onClick: function onClick() {\n          p.updateSelectedOutcome(p.outcome);\n        }\n      },\n      p.marketType === __WEBPACK_IMPORTED_MODULE_7__markets_constants_market_types__[\"b\" /* SCALAR */] ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: lastPricePercent }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        { className: 'outcome' },\n        outcomeName\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'button',\n        {\n          className: 'unstyled',\n          onClick: function onClick() {\n            p.updateTradeFromSelectedOrder(p.outcome.id, 0, __WEBPACK_IMPORTED_MODULE_5__transactions_constants_types__[\"BID\"], __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__[\"a\" /* SHARE */]);\n          }\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: topBidShares })\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'button',\n        {\n          className: 'unstyled',\n          onClick: function onClick() {\n            p.updateTradeFromSelectedOrder(p.outcome.id, 0, __WEBPACK_IMPORTED_MODULE_5__transactions_constants_types__[\"BID\"], __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__[\"b\" /* PRICE */]);\n          }\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { className: 'emphasized', formatted: topBidPrice })\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'button',\n        {\n          className: 'unstyled',\n          onClick: function onClick() {\n            p.updateTradeFromSelectedOrder(p.outcome.id, 0, __WEBPACK_IMPORTED_MODULE_5__transactions_constants_types__[\"ASK\"], __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__[\"b\" /* PRICE */]);\n          }\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { className: 'emphasized', formatted: topAskPrice })\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'button',\n        {\n          className: 'unstyled',\n          onClick: function onClick() {\n            p.updateTradeFromSelectedOrder(p.outcome.id, 0, __WEBPACK_IMPORTED_MODULE_5__transactions_constants_types__[\"ASK\"], __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__[\"a\" /* SHARE */]);\n          }\n        },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: topAskShares })\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: lastPrice })\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      __WEBPACK_IMPORTED_MODULE_2__link_components_link__[\"a\" /* default */],\n      {\n        className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('outcome-row-condensed', { selected: p.selectedOutcome.id === p.outcome.id }),\n        onClick: function onClick() {\n          p.updateSelectedOutcome(p.outcome);\n        }\n      },\n      p.marketType === __WEBPACK_IMPORTED_MODULE_7__markets_constants_market_types__[\"b\" /* SCALAR */] ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: lastPricePercent }) : __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        { className: 'outcome-summary' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          { className: 'outcome-name' },\n          outcomeName\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Last Price: ',\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: lastPrice })\n        )\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        { className: 'outcome-best-orders outcome-best-bid' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'button',\n          {\n            className: 'unstyled',\n            onClick: function onClick() {\n              p.updateTradeFromSelectedOrder(p.outcome.id, 0, __WEBPACK_IMPORTED_MODULE_5__transactions_constants_types__[\"BID\"], __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__[\"a\" /* SHARE */]);\n            }\n          },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            { className: 'outcome-best-container' },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { className: 'emphasized', formatted: topBidPrice }),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: topBidShares })\n          )\n        )\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'span',\n        { className: 'outcome-best-orders outcome-best-ask' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'button',\n          {\n            className: 'unstyled',\n            onClick: function onClick() {\n              p.updateTradeFromSelectedOrder(p.outcome.id, 0, __WEBPACK_IMPORTED_MODULE_5__transactions_constants_types__[\"ASK\"], __WEBPACK_IMPORTED_MODULE_6__order_book_constants_order_book_value_types__[\"a\" /* SHARE */]);\n            }\n          },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            { className: 'outcome-best-container' },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { className: 'emphasized', formatted: topAskPrice }),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__common_components_value_denomination__[\"a\" /* default */], { formatted: topAskShares })\n          )\n        )\n      )\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__outcome_trade__[\"a\" /* default */], {\n      marketType: p.marketType,\n      selectedOutcome: p.selectedOutcome,\n      tradeSummary: p.tradeSummary,\n      submitTrade: p.submitTrade,\n      selectedTradeSide: p.selectedTradeSide,\n      selectedShareDenomination: p.selectedShareDenomination,\n      updateSelectedTradeSide: p.updateSelectedTradeSide,\n      outcomeTradeNavItems: p.outcomeTradeNavItems,\n      minLimitPrice: p.minLimitPrice,\n      maxLimitPrice: p.maxLimitPrice,\n      isTradeCommitLocked: p.isTradeCommitLocked\n    })\n  );\n};\n\nvar _default = Outcome;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(Outcome, 'Outcome', '/home/jack/src/augur/src/modules/outcomes/components/outcome.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/outcomes/components/outcome.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1308:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__outcome__ = __webpack_require__(1307);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__markets_constants_market_types__ = __webpack_require__(28);\n\n\n\n\n\n\nvar Outcomes = function Outcomes(p) {\n  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n    'article',\n    { className: 'outcomes' },\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'outcomes-header' },\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        { className: 'outcomes-header-full' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Outcome',\n          !p.marketType === __WEBPACK_IMPORTED_MODULE_2__markets_constants_market_types__[\"b\" /* SCALAR */] && 's'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Bid Q.'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Bid'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Ask'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Ask Q'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Last'\n        )\n      ),\n      __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'div',\n        { className: 'outcomes-header-condensed' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Outcome',\n          !p.marketType === __WEBPACK_IMPORTED_MODULE_2__markets_constants_market_types__[\"b\" /* SCALAR */] && 's'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Bid'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'span',\n          null,\n          'Ask'\n        )\n      )\n    ),\n    __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n      'div',\n      { className: 'market-content-scrollable' },\n      (p.outcomes || []).map(function (outcome) {\n        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__outcome__[\"a\" /* default */], {\n          key: outcome.id,\n          marketType: p.marketType,\n          outcome: outcome,\n          selectedOutcome: p.selectedOutcome,\n          updateSelectedOutcome: p.updateSelectedOutcome,\n          selectedShareDenomination: p.selectedShareDenomination,\n          tradeSummary: p.tradeSummary,\n          submitTrade: p.submitTrade,\n          selectedTradeSide: p.selectedTradeSide,\n          updateSelectedTradeSide: p.updateSelectedTradeSide,\n          outcomeTradeNavItems: p.outcomeTradeNavItems,\n          updateTradeFromSelectedOrder: p.updateTradeFromSelectedOrder,\n          minLimitPrice: p.minLimitPrice,\n          maxLimitPrice: p.maxLimitPrice,\n          isTradeCommitLocked: p.isTradeCommitLocked\n        });\n      })\n    )\n  );\n};\n\nvar _default = Outcomes;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(Outcomes, 'Outcomes', '/home/jack/src/augur/src/modules/outcomes/components/outcomes.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/outcomes/components/outcomes.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vdXRjb21lcy9jb21wb25lbnRzL291dGNvbWVzLmpzeD8xY2FmIl0sIm5hbWVzIjpbIk91dGNvbWVzIiwicCIsIm1hcmtldFR5cGUiLCJvdXRjb21lcyIsIm1hcCIsIm91dGNvbWUiLCJpZCIsInNlbGVjdGVkT3V0Y29tZSIsInVwZGF0ZVNlbGVjdGVkT3V0Y29tZSIsInNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb24iLCJ0cmFkZVN1bW1hcnkiLCJzdWJtaXRUcmFkZSIsInNlbGVjdGVkVHJhZGVTaWRlIiwidXBkYXRlU2VsZWN0ZWRUcmFkZVNpZGUiLCJvdXRjb21lVHJhZGVOYXZJdGVtcyIsInVwZGF0ZVRyYWRlRnJvbVNlbGVjdGVkT3JkZXIiLCJtaW5MaW1pdFByaWNlIiwibWF4TGltaXRQcmljZSIsImlzVHJhZGVDb21taXRMb2NrZWQiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFFQTs7QUFFQTs7QUFFQSxJQUFNQSxXQUFXLFNBQVhBLFFBQVc7QUFBQSxTQUNmO0FBQUE7QUFBQSxNQUFTLFdBQVUsVUFBbkI7QUFDRTtBQUFBO0FBQUEsUUFBSyxXQUFVLGlCQUFmO0FBQ0U7QUFBQTtBQUFBLFVBQUssV0FBVSxzQkFBZjtBQUNFO0FBQUE7QUFBQTtBQUFBO0FBQWMsV0FBQ0MsRUFBRUMsVUFBSCxLQUFrQiwrRUFBbEIsSUFBNEI7QUFBMUMsU0FERjtBQUVFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FGRjtBQUdFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FIRjtBQUlFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FKRjtBQUtFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FMRjtBQU1FO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFORixPQURGO0FBU0U7QUFBQTtBQUFBLFVBQUssV0FBVSwyQkFBZjtBQUNFO0FBQUE7QUFBQTtBQUFBO0FBQWMsV0FBQ0QsRUFBRUMsVUFBSCxLQUFrQiwrRUFBbEIsSUFBNEI7QUFBMUMsU0FERjtBQUVFO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FGRjtBQUdFO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFIRjtBQVRGLEtBREY7QUFnQkU7QUFBQTtBQUFBLFFBQUssV0FBVSwyQkFBZjtBQUNHLE9BQUNELEVBQUVFLFFBQUYsSUFBYyxFQUFmLEVBQW1CQyxHQUFuQixDQUF1QjtBQUFBLGVBQ3RCLDREQUFDLHlEQUFEO0FBQ0UsZUFBS0MsUUFBUUMsRUFEZjtBQUVFLHNCQUFZTCxFQUFFQyxVQUZoQjtBQUdFLG1CQUFTRyxPQUhYO0FBSUUsMkJBQWlCSixFQUFFTSxlQUpyQjtBQUtFLGlDQUF1Qk4sRUFBRU8scUJBTDNCO0FBTUUscUNBQTJCUCxFQUFFUSx5QkFOL0I7QUFPRSx3QkFBY1IsRUFBRVMsWUFQbEI7QUFRRSx1QkFBYVQsRUFBRVUsV0FSakI7QUFTRSw2QkFBbUJWLEVBQUVXLGlCQVR2QjtBQVVFLG1DQUF5QlgsRUFBRVksdUJBVjdCO0FBV0UsZ0NBQXNCWixFQUFFYSxvQkFYMUI7QUFZRSx3Q0FBOEJiLEVBQUVjLDRCQVpsQztBQWFFLHlCQUFlZCxFQUFFZSxhQWJuQjtBQWNFLHlCQUFlZixFQUFFZ0IsYUFkbkI7QUFlRSwrQkFBcUJoQixFQUFFaUI7QUFmekIsVUFEc0I7QUFBQSxPQUF2QjtBQURIO0FBaEJGLEdBRGU7QUFBQSxDQUFqQjs7ZUF5Q2VsQixRO0FBQWY7Ozs7Ozs7O2dDQXpDTUEsUSIsImZpbGUiOiIxMzA4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IE91dGNvbWUgZnJvbSAnbW9kdWxlcy9vdXRjb21lcy9jb21wb25lbnRzL291dGNvbWUnO1xuXG5pbXBvcnQgeyBTQ0FMQVIgfSBmcm9tICdtb2R1bGVzL21hcmtldHMvY29uc3RhbnRzL21hcmtldC10eXBlcyc7XG5cbmNvbnN0IE91dGNvbWVzID0gcCA9PiAoXG4gIDxhcnRpY2xlIGNsYXNzTmFtZT1cIm91dGNvbWVzXCIgPlxuICAgIDxkaXYgY2xhc3NOYW1lPVwib3V0Y29tZXMtaGVhZGVyXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm91dGNvbWVzLWhlYWRlci1mdWxsXCI+XG4gICAgICAgIDxzcGFuPk91dGNvbWV7IXAubWFya2V0VHlwZSA9PT0gU0NBTEFSICYmICdzJ308L3NwYW4+XG4gICAgICAgIDxzcGFuPkJpZCBRLjwvc3Bhbj5cbiAgICAgICAgPHNwYW4+QmlkPC9zcGFuPlxuICAgICAgICA8c3Bhbj5Bc2s8L3NwYW4+XG4gICAgICAgIDxzcGFuPkFzayBRPC9zcGFuPlxuICAgICAgICA8c3Bhbj5MYXN0PC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm91dGNvbWVzLWhlYWRlci1jb25kZW5zZWRcIj5cbiAgICAgICAgPHNwYW4+T3V0Y29tZXshcC5tYXJrZXRUeXBlID09PSBTQ0FMQVIgJiYgJ3MnfTwvc3Bhbj5cbiAgICAgICAgPHNwYW4+QmlkPC9zcGFuPlxuICAgICAgICA8c3Bhbj5Bc2s8L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1hcmtldC1jb250ZW50LXNjcm9sbGFibGVcIiA+XG4gICAgICB7KHAub3V0Y29tZXMgfHwgW10pLm1hcChvdXRjb21lID0+IChcbiAgICAgICAgPE91dGNvbWVcbiAgICAgICAgICBrZXk9e291dGNvbWUuaWR9XG4gICAgICAgICAgbWFya2V0VHlwZT17cC5tYXJrZXRUeXBlfVxuICAgICAgICAgIG91dGNvbWU9e291dGNvbWV9XG4gICAgICAgICAgc2VsZWN0ZWRPdXRjb21lPXtwLnNlbGVjdGVkT3V0Y29tZX1cbiAgICAgICAgICB1cGRhdGVTZWxlY3RlZE91dGNvbWU9e3AudXBkYXRlU2VsZWN0ZWRPdXRjb21lfVxuICAgICAgICAgIHNlbGVjdGVkU2hhcmVEZW5vbWluYXRpb249e3Auc2VsZWN0ZWRTaGFyZURlbm9taW5hdGlvbn1cbiAgICAgICAgICB0cmFkZVN1bW1hcnk9e3AudHJhZGVTdW1tYXJ5fVxuICAgICAgICAgIHN1Ym1pdFRyYWRlPXtwLnN1Ym1pdFRyYWRlfVxuICAgICAgICAgIHNlbGVjdGVkVHJhZGVTaWRlPXtwLnNlbGVjdGVkVHJhZGVTaWRlfVxuICAgICAgICAgIHVwZGF0ZVNlbGVjdGVkVHJhZGVTaWRlPXtwLnVwZGF0ZVNlbGVjdGVkVHJhZGVTaWRlfVxuICAgICAgICAgIG91dGNvbWVUcmFkZU5hdkl0ZW1zPXtwLm91dGNvbWVUcmFkZU5hdkl0ZW1zfVxuICAgICAgICAgIHVwZGF0ZVRyYWRlRnJvbVNlbGVjdGVkT3JkZXI9e3AudXBkYXRlVHJhZGVGcm9tU2VsZWN0ZWRPcmRlcn1cbiAgICAgICAgICBtaW5MaW1pdFByaWNlPXtwLm1pbkxpbWl0UHJpY2V9XG4gICAgICAgICAgbWF4TGltaXRQcmljZT17cC5tYXhMaW1pdFByaWNlfVxuICAgICAgICAgIGlzVHJhZGVDb21taXRMb2NrZWQ9e3AuaXNUcmFkZUNvbW1pdExvY2tlZH1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvZGl2PlxuICA8L2FydGljbGU+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBPdXRjb21lcztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL291dGNvbWVzL2NvbXBvbmVudHMvb3V0Y29tZXMuanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 1312:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(113);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_components_checkbox__ = __webpack_require__(607);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__outcome_options__ = __webpack_require__(1259);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__markets_constants_market_types__ = __webpack_require__(28);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\n\n\nvar ReportForm = function (_Component) {\n  _inherits(ReportForm, _Component);\n\n  function ReportForm(props) {\n    _classCallCheck(this, ReportForm);\n\n    var _this = _possibleConstructorReturn(this, (ReportForm.__proto__ || Object.getPrototypeOf(ReportForm)).call(this, props));\n\n    _this.handleOutcomeChange = function () {\n      return _this.__handleOutcomeChange__REACT_HOT_LOADER__.apply(_this, arguments);\n    };\n\n    _this.state = {\n      type: props.type,\n      minValue: props.minValue,\n      maxValue: props.maxValue,\n      reportedOutcomeID: props.reportedOutcomeID,\n      isIndeterminate: props.isIndeterminate,\n      isUnethical: props.isUnethical,\n      isReported: props.isReported\n    };\n    _this.handleSubmit = _this.handleSubmit.bind(_this);\n    _this.handleOutcomeChange = _this.handleOutcomeChange.bind(_this);\n    return _this;\n  }\n  // TODO -- Prop Validations\n\n\n  _createClass(ReportForm, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.isReported !== this.state.isReported) {\n        this.setState({ isReported: nextProps.isReported });\n      }\n    }\n  }, {\n    key: '__handleOutcomeChange__REACT_HOT_LOADER__',\n    value: function __handleOutcomeChange__REACT_HOT_LOADER__(e) {\n      return this.setState({ reportedOutcomeID: e.target.value });\n    }\n  }, {\n    key: 'handleSubmit',\n    value: function handleSubmit() {\n      this.props.onClickSubmit(this.state.reportedOutcomeID, this.state.isUnethical, this.state.isIndeterminate);\n      this.setState({ reportedOutcomeID: '', isIndeterminate: undefined, isUnethical: undefined, isReported: false });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var p = this.props;\n      var s = this.state;\n      var indeterminateValue = p.type === __WEBPACK_IMPORTED_MODULE_4__markets_constants_market_types__[\"c\" /* BINARY */] ? '1.5' : '0.5';\n\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('report-form', { reported: s.isReported }) },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'outcome-options' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'h4',\n            null,\n            !s.isReported ? 'Report the outcome' : 'Outcome Reported'\n          ),\n          p.type === __WEBPACK_IMPORTED_MODULE_4__markets_constants_market_types__[\"b\" /* SCALAR */] && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            null,\n            'Enter the outcome of this event, if it was at least ',\n            p.minValue,\n            ' and at most ',\n            p.maxValue,\n            '.  If the outcome was above ',\n            p.maxValue,\n            ', you should report the outcome as ',\n            p.maxValue,\n            '; if the outcome was below ',\n            p.minValue,\n            ', you should report the outcome as ',\n            p.minValue,\n            '.'\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__outcome_options__[\"a\" /* default */], {\n            type: p.type,\n            reportableOutcomes: p.reportableOutcomes,\n            reportedOutcomeID: s.reportedOutcomeID,\n            isReported: s.isReported,\n            isIndeterminate: s.isIndeterminate,\n            onOutcomeChange: this.handleOutcomeChange\n          })\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'indeterminate' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'h4',\n            null,\n            'Is this question indeterminate?'\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            { className: 'indeterminate-message' },\n            'If this question is subjective, vague, or did not have a clear answer on the end date above, you should report indeterminate.'\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_checkbox__[\"a\" /* default */], {\n            className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('indeterminate-checkbox', { disabled: s.isReported }),\n            text: 'Yes, this question is indeterminate',\n            isChecked: !!s.isIndeterminate,\n            onClick: !s.isReported && function () {\n              return _this2.setState({\n                isIndeterminate: !s.isIndeterminate,\n                reportedOutcomeID: indeterminateValue\n              });\n            } || undefined\n          })\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'unethical' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'h4',\n            null,\n            'Is this question unethical?'\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'span',\n            { className: 'unethical-message' },\n            'The consensus answer to this question will be over-ridden if the question is reported as unethical by 60% (or more) of those reporting this market.'\n          ),\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__common_components_checkbox__[\"a\" /* default */], {\n            className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('unethical-checkbox', { disabled: s.isReported }),\n            text: 'Yes, this question is unethical',\n            isChecked: !!s.isUnethical,\n            onClick: !s.isReported && function () {\n              return _this2.setState({ isUnethical: !s.isUnethical });\n            } || undefined\n          })\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'report-actions' },\n          !s.isReported && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'button report',\n              disabled: !s.reportedOutcomeID,\n              onClick: !!s.reportedOutcomeID && !s.isReported && this.handleSubmit || undefined\n            },\n            'Submit Report'\n          ),\n          s.isReported && __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'button report-again',\n              onClick: function onClick() {\n                return _this2.setState({ isReported: false });\n              }\n            },\n            'Report Again'\n          )\n        )\n      );\n    }\n  }]);\n\n  return ReportForm;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nReportForm.propTypes = {\n  type: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.string,\n  minValue: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.string,\n  maxValue: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.string,\n  // reportableOutcomes: React.PropTypes.array,\n  reportedOutcomeID: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.any,\n  isIndeterminate: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.bool,\n  isUnethical: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.bool,\n  isReported: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.bool,\n  onClickSubmit: __WEBPACK_IMPORTED_MODULE_0_react___default.a.PropTypes.func\n};\nvar _default = ReportForm;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(ReportForm, 'ReportForm', '/home/jack/src/augur/src/modules/reports/components/report-form.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/reports/components/report-form.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },

/***/ 1313:
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_components_checkbox__ = __webpack_require__(607);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__outcome_options__ = __webpack_require__(1259);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n\n\n\n\nvar SnitchForm = function (_Component) {\n  _inherits(SnitchForm, _Component);\n\n  function SnitchForm(props) {\n    _classCallCheck(this, SnitchForm);\n\n    var _this = _possibleConstructorReturn(this, (SnitchForm.__proto__ || Object.getPrototypeOf(SnitchForm)).call(this, props));\n\n    _this.state = {\n      reporter: '',\n      report: '',\n      salt: '',\n      isIndeterminate: false,\n      isUnethical: false,\n      isReported: false\n    };\n    return _this;\n  }\n  // TODO -- Prop Validations\n\n\n  _createClass(SnitchForm, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var p = this.props;\n      var s = this.state;\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        'article',\n        { className: 'snitch-form' },\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'p',\n          { className: 'snitch-message' },\n          'It is important for Augur\\'s security that Reporters keep their reports ',\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'b',\n            null,\n            'secret'\n          ),\n          ' until the first half of the reporting cycle is complete (in $',\n          p.branch.phaseTimeRemaining,\n          ').  If another Reporter has disclosed their Report (and its accompanying randomly-generated unique identifier) to you, you can enter the other Reporter\\'s reported values here and you will receive half of their Reputation balance.  (Note: there is no penalty to you if this fails.  The other Reporter will only be notified if the information you enter matches their report.)'\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          null,\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'label',\n            { htmlFor: 'snitch-reporter' },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'h4',\n              null,\n              'Ethereum address of cheater'\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input', {\n              type: 'text',\n              className: 'snitch-input',\n              name: 'snitch-reporter',\n              value: s.reporter,\n              onChange: function onChange(reporter) {\n                return _this2.setState({ reporter: reporter.target.value });\n              }\n            })\n          )\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          null,\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'label',\n            { htmlFor: 'snitch-salt' },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'h4',\n              null,\n              'Report\\'s unique ID (salt)'\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input', {\n              type: 'text',\n              className: 'snitch-input',\n              name: 'snitch-salt',\n              value: s.salt,\n              onChange: function onChange(salt) {\n                return _this2.setState({ salt: salt.target.value });\n              }\n            })\n          )\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          null,\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'label',\n            { htmlFor: 'snitch-report' },\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n              'h4',\n              null,\n              'Outcome reported by cheater'\n            ),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__outcome_options__[\"a\" /* default */], {\n              type: p.type,\n              reportableOutcomes: p.reportableOutcomes,\n              reportedOutcomeID: s.report,\n              isReported: s.isReported,\n              isIndeterminate: s.isIndeterminate,\n              onOutcomeChange: function onOutcomeChange(report) {\n                return _this2.setState({ report: report.target.value });\n              }\n            }),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_checkbox__[\"a\" /* default */], {\n              className: 'indeterminate-checkbox',\n              text: 'Indeterminate',\n              isChecked: s.isIndeterminate,\n              onClick: function onClick(isIndeterminate) {\n                return _this2.setState({ isIndeterminate: !s.isIndeterminate });\n              }\n            }),\n            __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_1__common_components_checkbox__[\"a\" /* default */], {\n              className: 'unethical-checkbox',\n              text: 'Unethical',\n              isChecked: s.isUnethical,\n              onClick: function onClick(isUnethical) {\n                return _this2.setState({ isUnethical: !s.isUnethical });\n              }\n            })\n          )\n        ),\n        __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n          'div',\n          { className: 'snitch-actions' },\n          __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n            'button',\n            {\n              className: 'button snitch',\n              disabled: !s.reporter && !s.report && !s.salt,\n              onClick: function onClick() {\n                return p.onSubmitSlashRep(s.salt, s.report, s.reporter, s.isIndeterminate, s.isUnethical);\n              }\n            },\n            'Snitch'\n          )\n        )\n      );\n    }\n  }]);\n\n  return SnitchForm;\n}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);\n\nSnitchForm.propTypes = {};\nvar _default = SnitchForm;\n/* harmony default export */ exports[\"a\"] = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(SnitchForm, 'SnitchForm', '/home/jack/src/augur/src/modules/reports/components/snitch-form.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/jack/src/augur/src/modules/reports/components/snitch-form.jsx');\n}();\n\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9yZXBvcnRzL2NvbXBvbmVudHMvc25pdGNoLWZvcm0uanN4PzllMDIiXSwibmFtZXMiOlsiU25pdGNoRm9ybSIsInByb3BzIiwic3RhdGUiLCJyZXBvcnRlciIsInJlcG9ydCIsInNhbHQiLCJpc0luZGV0ZXJtaW5hdGUiLCJpc1VuZXRoaWNhbCIsImlzUmVwb3J0ZWQiLCJwIiwicyIsImJyYW5jaCIsInBoYXNlVGltZVJlbWFpbmluZyIsInNldFN0YXRlIiwidGFyZ2V0IiwidmFsdWUiLCJ0eXBlIiwicmVwb3J0YWJsZU91dGNvbWVzIiwib25TdWJtaXRTbGFzaFJlcCIsInByb3BUeXBlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBOztJQUVxQkEsVTs7O0FBSW5CLHNCQUFZQyxLQUFaLEVBQW1CO0FBQUE7O0FBQUEsd0hBQ1hBLEtBRFc7O0FBRWpCLFVBQUtDLEtBQUwsR0FBYTtBQUNYQyxnQkFBVSxFQURDO0FBRVhDLGNBQVEsRUFGRztBQUdYQyxZQUFNLEVBSEs7QUFJWEMsdUJBQWlCLEtBSk47QUFLWEMsbUJBQWEsS0FMRjtBQU1YQyxrQkFBWTtBQU5ELEtBQWI7QUFGaUI7QUFVbEI7QUFiRDs7Ozs7NkJBZVM7QUFBQTs7QUFDUCxVQUFNQyxJQUFJLEtBQUtSLEtBQWY7QUFDQSxVQUFNUyxJQUFJLEtBQUtSLEtBQWY7QUFDQSxhQUNFO0FBQUE7QUFBQSxVQUFTLFdBQVUsYUFBbkI7QUFDRTtBQUFBO0FBQUEsWUFBRyxXQUFVLGdCQUFiO0FBQUE7QUFDNkU7QUFBQTtBQUFBO0FBQUE7QUFBQSxXQUQ3RTtBQUFBO0FBQ3lKTyxZQUFFRSxNQUFGLENBQVNDLGtCQURsSztBQUFBO0FBQUEsU0FERjtBQUlFO0FBQUE7QUFBQTtBQUNFO0FBQUE7QUFBQSxjQUFPLFNBQVEsaUJBQWY7QUFDRTtBQUFBO0FBQUE7QUFBQTtBQUFBLGFBREY7QUFFRTtBQUNFLG9CQUFLLE1BRFA7QUFFRSx5QkFBVSxjQUZaO0FBR0Usb0JBQUssaUJBSFA7QUFJRSxxQkFBT0YsRUFBRVAsUUFKWDtBQUtFLHdCQUFVO0FBQUEsdUJBQVksT0FBS1UsUUFBTCxDQUFjLEVBQUVWLFVBQVVBLFNBQVNXLE1BQVQsQ0FBZ0JDLEtBQTVCLEVBQWQsQ0FBWjtBQUFBO0FBTFo7QUFGRjtBQURGLFNBSkY7QUFnQkU7QUFBQTtBQUFBO0FBQ0U7QUFBQTtBQUFBLGNBQU8sU0FBUSxhQUFmO0FBQ0U7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQURGO0FBRUU7QUFDRSxvQkFBSyxNQURQO0FBRUUseUJBQVUsY0FGWjtBQUdFLG9CQUFLLGFBSFA7QUFJRSxxQkFBT0wsRUFBRUwsSUFKWDtBQUtFLHdCQUFVO0FBQUEsdUJBQVEsT0FBS1EsUUFBTCxDQUFjLEVBQUVSLE1BQU1BLEtBQUtTLE1BQUwsQ0FBWUMsS0FBcEIsRUFBZCxDQUFSO0FBQUE7QUFMWjtBQUZGO0FBREYsU0FoQkY7QUE0QkU7QUFBQTtBQUFBO0FBQ0U7QUFBQTtBQUFBLGNBQU8sU0FBUSxlQUFmO0FBQ0U7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQURGO0FBRUUsd0VBQUMsaUVBQUQ7QUFDRSxvQkFBTU4sRUFBRU8sSUFEVjtBQUVFLGtDQUFvQlAsRUFBRVEsa0JBRnhCO0FBR0UsaUNBQW1CUCxFQUFFTixNQUh2QjtBQUlFLDBCQUFZTSxFQUFFRixVQUpoQjtBQUtFLCtCQUFpQkUsRUFBRUosZUFMckI7QUFNRSwrQkFBaUI7QUFBQSx1QkFBVSxPQUFLTyxRQUFMLENBQWMsRUFBRVQsUUFBUUEsT0FBT1UsTUFBUCxDQUFjQyxLQUF4QixFQUFkLENBQVY7QUFBQTtBQU5uQixjQUZGO0FBVUUsd0VBQUMsNEVBQUQ7QUFDRSx5QkFBVSx3QkFEWjtBQUVFLG9CQUFLLGVBRlA7QUFHRSx5QkFBV0wsRUFBRUosZUFIZjtBQUlFLHVCQUFTO0FBQUEsdUJBQW1CLE9BQUtPLFFBQUwsQ0FBYyxFQUFFUCxpQkFBaUIsQ0FBQ0ksRUFBRUosZUFBdEIsRUFBZCxDQUFuQjtBQUFBO0FBSlgsY0FWRjtBQWdCRSx3RUFBQyw0RUFBRDtBQUNFLHlCQUFVLG9CQURaO0FBRUUsb0JBQUssV0FGUDtBQUdFLHlCQUFXSSxFQUFFSCxXQUhmO0FBSUUsdUJBQVM7QUFBQSx1QkFBZSxPQUFLTSxRQUFMLENBQWMsRUFBRU4sYUFBYSxDQUFDRyxFQUFFSCxXQUFsQixFQUFkLENBQWY7QUFBQTtBQUpYO0FBaEJGO0FBREYsU0E1QkY7QUFxREU7QUFBQTtBQUFBLFlBQUssV0FBVSxnQkFBZjtBQUNFO0FBQUE7QUFBQTtBQUNFLHlCQUFVLGVBRFo7QUFFRSx3QkFBVyxDQUFDRyxFQUFFUCxRQUFILElBQWUsQ0FBQ08sRUFBRU4sTUFBbEIsSUFBNEIsQ0FBQ00sRUFBRUwsSUFGNUM7QUFHRSx1QkFBUztBQUFBLHVCQUFNSSxFQUFFUyxnQkFBRixDQUFtQlIsRUFBRUwsSUFBckIsRUFBMkJLLEVBQUVOLE1BQTdCLEVBQXFDTSxFQUFFUCxRQUF2QyxFQUFpRE8sRUFBRUosZUFBbkQsRUFBb0VJLEVBQUVILFdBQXRFLENBQU47QUFBQTtBQUhYO0FBQUE7QUFBQTtBQURGO0FBckRGLE9BREY7QUFpRUQ7Ozs7RUFwRnFDLGdEOztBQUFuQlAsVSxDQUVabUIsUyxHQUFZLEU7ZUFGQW5CLFU7Ozs7Ozs7OztnQ0FBQUEsVSIsImZpbGUiOiIxMzEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDaGVja2JveCBmcm9tICdtb2R1bGVzL2NvbW1vbi9jb21wb25lbnRzL2NoZWNrYm94JztcbmltcG9ydCBPdXRjb21lT3B0aW9ucyBmcm9tICdtb2R1bGVzL3JlcG9ydHMvY29tcG9uZW50cy9vdXRjb21lLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTbml0Y2hGb3JtIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgLy8gVE9ETyAtLSBQcm9wIFZhbGlkYXRpb25zXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7fTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgcmVwb3J0ZXI6ICcnLFxuICAgICAgcmVwb3J0OiAnJyxcbiAgICAgIHNhbHQ6ICcnLFxuICAgICAgaXNJbmRldGVybWluYXRlOiBmYWxzZSxcbiAgICAgIGlzVW5ldGhpY2FsOiBmYWxzZSxcbiAgICAgIGlzUmVwb3J0ZWQ6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBwID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gKFxuICAgICAgPGFydGljbGUgY2xhc3NOYW1lPVwic25pdGNoLWZvcm1cIj5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwic25pdGNoLW1lc3NhZ2VcIj5cbiAgICAgICAgICBJdCBpcyBpbXBvcnRhbnQgZm9yIEF1Z3VyJiMzOTtzIHNlY3VyaXR5IHRoYXQgUmVwb3J0ZXJzIGtlZXAgdGhlaXIgcmVwb3J0cyA8Yj5zZWNyZXQ8L2I+IHVudGlsIHRoZSBmaXJzdCBoYWxmIG9mIHRoZSByZXBvcnRpbmcgY3ljbGUgaXMgY29tcGxldGUgKGluICR7cC5icmFuY2gucGhhc2VUaW1lUmVtYWluaW5nfSkuICBJZiBhbm90aGVyIFJlcG9ydGVyIGhhcyBkaXNjbG9zZWQgdGhlaXIgUmVwb3J0IChhbmQgaXRzIGFjY29tcGFueWluZyByYW5kb21seS1nZW5lcmF0ZWQgdW5pcXVlIGlkZW50aWZpZXIpIHRvIHlvdSwgeW91IGNhbiBlbnRlciB0aGUgb3RoZXIgUmVwb3J0ZXImIzM5O3MgcmVwb3J0ZWQgdmFsdWVzIGhlcmUgYW5kIHlvdSB3aWxsIHJlY2VpdmUgaGFsZiBvZiB0aGVpciBSZXB1dGF0aW9uIGJhbGFuY2UuICAoTm90ZTogdGhlcmUgaXMgbm8gcGVuYWx0eSB0byB5b3UgaWYgdGhpcyBmYWlscy4gIFRoZSBvdGhlciBSZXBvcnRlciB3aWxsIG9ubHkgYmUgbm90aWZpZWQgaWYgdGhlIGluZm9ybWF0aW9uIHlvdSBlbnRlciBtYXRjaGVzIHRoZWlyIHJlcG9ydC4pXG4gICAgICAgIDwvcD5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInNuaXRjaC1yZXBvcnRlclwiPlxuICAgICAgICAgICAgPGg0PkV0aGVyZXVtIGFkZHJlc3Mgb2YgY2hlYXRlcjwvaDQ+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzbml0Y2gtaW5wdXRcIlxuICAgICAgICAgICAgICBuYW1lPVwic25pdGNoLXJlcG9ydGVyXCJcbiAgICAgICAgICAgICAgdmFsdWU9e3MucmVwb3J0ZXJ9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtyZXBvcnRlciA9PiB0aGlzLnNldFN0YXRlKHsgcmVwb3J0ZXI6IHJlcG9ydGVyLnRhcmdldC52YWx1ZSB9KX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJzbml0Y2gtc2FsdFwiPlxuICAgICAgICAgICAgPGg0PlJlcG9ydCYjMzk7cyB1bmlxdWUgSUQgKHNhbHQpPC9oND5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNuaXRjaC1pbnB1dFwiXG4gICAgICAgICAgICAgIG5hbWU9XCJzbml0Y2gtc2FsdFwiXG4gICAgICAgICAgICAgIHZhbHVlPXtzLnNhbHR9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtzYWx0ID0+IHRoaXMuc2V0U3RhdGUoeyBzYWx0OiBzYWx0LnRhcmdldC52YWx1ZSB9KX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJzbml0Y2gtcmVwb3J0XCI+XG4gICAgICAgICAgICA8aDQ+T3V0Y29tZSByZXBvcnRlZCBieSBjaGVhdGVyPC9oND5cbiAgICAgICAgICAgIDxPdXRjb21lT3B0aW9uc1xuICAgICAgICAgICAgICB0eXBlPXtwLnR5cGV9XG4gICAgICAgICAgICAgIHJlcG9ydGFibGVPdXRjb21lcz17cC5yZXBvcnRhYmxlT3V0Y29tZXN9XG4gICAgICAgICAgICAgIHJlcG9ydGVkT3V0Y29tZUlEPXtzLnJlcG9ydH1cbiAgICAgICAgICAgICAgaXNSZXBvcnRlZD17cy5pc1JlcG9ydGVkfVxuICAgICAgICAgICAgICBpc0luZGV0ZXJtaW5hdGU9e3MuaXNJbmRldGVybWluYXRlfVxuICAgICAgICAgICAgICBvbk91dGNvbWVDaGFuZ2U9e3JlcG9ydCA9PiB0aGlzLnNldFN0YXRlKHsgcmVwb3J0OiByZXBvcnQudGFyZ2V0LnZhbHVlIH0pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxDaGVja2JveFxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJpbmRldGVybWluYXRlLWNoZWNrYm94XCJcbiAgICAgICAgICAgICAgdGV4dD1cIkluZGV0ZXJtaW5hdGVcIlxuICAgICAgICAgICAgICBpc0NoZWNrZWQ9e3MuaXNJbmRldGVybWluYXRlfVxuICAgICAgICAgICAgICBvbkNsaWNrPXtpc0luZGV0ZXJtaW5hdGUgPT4gdGhpcy5zZXRTdGF0ZSh7IGlzSW5kZXRlcm1pbmF0ZTogIXMuaXNJbmRldGVybWluYXRlIH0pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxDaGVja2JveFxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ1bmV0aGljYWwtY2hlY2tib3hcIlxuICAgICAgICAgICAgICB0ZXh0PVwiVW5ldGhpY2FsXCJcbiAgICAgICAgICAgICAgaXNDaGVja2VkPXtzLmlzVW5ldGhpY2FsfVxuICAgICAgICAgICAgICBvbkNsaWNrPXtpc1VuZXRoaWNhbCA9PiB0aGlzLnNldFN0YXRlKHsgaXNVbmV0aGljYWw6ICFzLmlzVW5ldGhpY2FsIH0pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzbml0Y2gtYWN0aW9uc1wiPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ1dHRvbiBzbml0Y2hcIlxuICAgICAgICAgICAgZGlzYWJsZWQ9eyghcy5yZXBvcnRlciAmJiAhcy5yZXBvcnQgJiYgIXMuc2FsdCl9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBwLm9uU3VibWl0U2xhc2hSZXAocy5zYWx0LCBzLnJlcG9ydCwgcy5yZXBvcnRlciwgcy5pc0luZGV0ZXJtaW5hdGUsIHMuaXNVbmV0aGljYWwpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIFNuaXRjaFxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvYXJ0aWNsZT5cbiAgICApO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9yZXBvcnRzL2NvbXBvbmVudHMvc25pdGNoLWZvcm0uanN4Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }

});